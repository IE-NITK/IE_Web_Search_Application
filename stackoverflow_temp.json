{"index":{"_id":1}}
{"question": "How do I create variable variables?", "details": "How do I accomplish variable variables in Python? Here is an elaborative manual entry, for instance: I have heard this is a bad idea in general though, and it is a security hole in Python. Is that true?", "answers": ["How do I accomplish variable variables in Python? Here is an elaborative manual entry, for instance: I have heard this is a bad idea in general though, and it is a security hole in Python. Is that true?", "You can use  to accomplish this. Dictionaries are stores of keys and values. >>> dct = {'x': 1, 'y': 2, 'z': 3}\n>>> dct\n{'y': 2, 'x': 1, 'z': 3}\n>>> dct[\"y\"]\n2\nYou can use variable key names to achieve the effect of variable variables without the security risk.>>> x = \"spam\"\n>>> z = {x: \"eggs\"}\n>>> z[\"spam\"]\n'eggs'\nFor cases where you're thinking of doing something likevar1 = 'foo'\nvar2 = 'bar'\nvar3 = 'baz'\n...\na list may be more appropriate than a dict. A list represents an ordered sequence of objects, with integer indices:lst = ['foo', 'bar', 'baz']\nprint(lst[1])           # prints bar, because indices start at 0\nlst.append('potatoes')  # lst is now ['foo', 'bar', 'baz', 'potatoes']\nFor ordered sequences, lists are more convenient than dicts with integer keys, because lists support iteration in index order, , append, and other operations that would require awkward key management with a dict.", "Use the built-in getattr function to get an attribute on an object by name.  Modify the name as needed.obj.spam = 'eggs'\nname = 'spam'\ngetattr(obj, name)  # returns 'eggs'\n", "It's not a good idea. If you are accessing a global variable you can use globals().>>> a = 10\n>>> globals()['a']\n10\nIf you want to access a variable in the local scope you can use locals(), but you cannot assign values to the returned dict. is to use getattr or store your variables in a dictionary and then access them by name.", "New coders sometimes write code like this:my_calculator.button_0 = tkinter.Button(root, text=0)\nmy_calculator.button_1 = tkinter.Button(root, text=1)\nmy_calculator.button_2 = tkinter.Button(root, text=2)\n...\nThe coder is then left with a pile of named variables, with a coding effort of O( * ), where  is the number of named variables and  is the number of times that group of variables needs to be accessed (including creation). The more astute beginner observes that the only difference in each of those lines is a number that changes based on a rule, and decides to use a loop. However, they get stuck on how to dynamically create those variable names, and may try something like this:for i in range(10):\n    my_calculator.('button_%d' % i) = tkinter.Button(root, text=i)\nThey soon find that this does not work.If the program requires arbitrary variable \"names,\" a dictionary is the best choice, as explained in other answers. However, if you're simply trying to create many variables and you don't mind referring to them with a sequence of integers, you're probably looking for a list. This is particularly true if your data are homogeneous, such as daily temperature readings, weekly quiz scores, or a grid of graphical widgets.This can be assembled as follows:my_calculator.buttons = []\nfor i in range(10):\n    my_calculator.buttons.append(tkinter.Button(root, text=i))\nThis list can also be created in one line with a comprehension:my_calculator.buttons = [tkinter.Button(root, text=i) for i in range(10)]\nThe result in either case is a populated list, with the first element accessed with my_calculator.buttons[0], the next with my_calculator.buttons[1], and so on. The \"base\" variable name becomes the name of the list and the varying identifier is used to access it.Finally, don't forget other data structures, such as the set - this is similar to a dictionary, except that each \"name\" doesn't have a value attached to it. If you simply need a \"bag\" of objects, this can be a great choice. Instead of something like this:keyword_1 = 'apple'\nkeyword_2 = 'banana'\n\nif query == keyword_1 or query == keyword_2:\n    print('Match.')\nYou will have this:keywords = {'apple', 'banana'}\nif query in keywords:\n    print('Match.')\nUse a list for a sequence of similar objects, a set for an arbitrarily-ordered bag of objects, or a dict for a bag of names with associated values.", "Whenever you want to use variable variables, it's probably better to use a dictionary. So instead of writing$foo = \"bar\"\n$$foo = \"baz\"\nyou write mydict = {}\nfoo = \"bar\"\nmydict[foo] = \"baz\"\nThis way you won't accidentally overwrite previously existing variables (which is the security aspect) and you can have different \"namespaces\".", "Instead of a dictionary you can also use namedtuple from the collections module, which makes access easier.For example:# using dictionary\nvariables = {}\nvariables[\"first\"] = 34\nvariables[\"second\"] = 45\nprint(variables[\"first\"], variables[\"second\"])\n\n# using namedtuple\nVariables = namedtuple('Variables', ['first', 'second'])\nvars = Variables(34, 45)\nprint(vars.first, vars.second)\n", "If you don't want to use any object, you can still use setattr() inside your current module:import sys\ncurrent_module = module = sys.modules[__name__]  # i.e the \"file\" where your code is written\nsetattr(current_module, 'variable_name', 15)  # 15 is the value you assign to the var\nprint(variable_name)  # >>> 15, created from a string\n", "Use globals()You can actually assign variables to global scope dynamically, for instance, if you want 10 variables that can be accessed on a global scope i_1, i_2 ... i_10:for i in range(10):\n    globals()['i_{}'.format(i)] = 'a'\nThis will assign 'a' to all of these 10 variables, of course you can change the value dynamically as well. All of these variables can be accessed now like other globally declared variable:>>> i_5\n'a'\n", "The SimpleNamespace class could be used to create new attributes with setattr, or subclass SimpleNamespace and create your own function to add new attribute names (variables). from types import SimpleNamespace\n\nvariables = {\"b\":\"B\",\"c\":\"C\"}\na = SimpleNamespace(**variables)\nsetattr(a,\"g\",\"G\")\na.g = \"G+\"\nsomething = a.a\n", "I'm am answering the question: \nwhich is closed as a duplicate with a link to this question. If the variables in question are part of an object (part of a class for example) then some useful functions to achieve exactly that are hasattr, getattr, and setattr. So for example you can have:class Variables(object):\n    def __init__(self):\n        self.foo = \"initial_variable\"\n    def create_new_var(self,name,value):\n        setattr(self,name,value)\n    def get_var(self,name):\n        if hasattr(self,name):\n            return getattr(self,name)\n        else:\n            raise(\"Class does not have a variable named: \"+name)\nThen you can do:v = Variables()\nv.get_var(\"foo\")\n\"initial_variable\"v.create_new_var(v.foo,\"is actually not initial\")\nv.initial_variable\n\"is actually not initial\"", "I have tried both in python 3.7.3, you can use either globals() or vars()>>> food #Error\n>>> milkshake #Error\n>>> food=\"bread\"\n>>> drink=\"milkshake\"\n>>> globals()[food] = \"strawberry flavor\"\n>>> vars()[drink] = \"chocolate flavor\"\n>>> bread\n'strawberry flavor'\n>>> milkshake\n'chocolate flavor'\n>>> globals()[drink]\n'chocolate flavor'\n>>> vars()[food]\n'strawberry flavor'\nReference:\n", "You have to use globals()  to achieve that behaviour:def var_of_var(k, v):\n    globals()[k] = v\n\nprint variable_name # NameError: name 'variable_name' is not defined\nsome_name = 'variable_name'\nglobals()[some_name] = 123\nprint(variable_name) # 123\n\nsome_name = 'variable_name2'\nvar_of_var(some_name, 456)\nprint(variable_name2) # 456\n", "The consensus is to use a dictionary for this - see the other answers. This is a good idea for most cases, however, there are many aspects arising from this:\n\n\n\n\n\n\n\n\n\nThat said, I've implemented a -class which provides some of the above ideas. It works for python 2 and 3.You'd use  like this:from variableVariablesManager import VariableVariablesManager\n\nmyVars = VariableVariablesManager()\nmyVars['test'] = 25\nprint(myVars['test'])\n\n# define a const variable\nmyVars.defineConstVariable('myconst', 13)\ntry:\n    myVars['myconst'] = 14 # <- this raises an error, since 'myconst' must not be changed\n    print(\"not allowed\")\nexcept AttributeError as e:\n    pass\n\n# rename a variable\nmyVars.renameVariable('myconst', 'myconstOther')\n\n# preserve locality\ndef testLocalVar():\n    myVars = VariableVariablesManager()\n    myVars['test'] = 13\n    print(\"inside function myVars['test']:\", myVars['test'])\ntestLocalVar()\nprint(\"outside function myVars['test']:\", myVars['test'])\n\n# define a global variable\nmyVars.defineGlobalVariable('globalVar', 12)\ndef testGlobalVar():\n    myVars = VariableVariablesManager()\n    print(\"inside function myVars['globalVar']:\", myVars['globalVar'])\n    myVars['globalVar'] = 13\n    print(\"inside function myVars['globalVar'] (having been changed):\", myVars['globalVar'])\ntestGlobalVar()\nprint(\"outside function myVars['globalVar']:\", myVars['globalVar'])\nIf you wish to allow overwriting of variables with the same type only:myVars = VariableVariablesManager(enforceSameTypeOnOverride = True)\nmyVars['test'] = 25\nmyVars['test'] = \"Cat\" # <- raises Exception (different type on overwriting)\n", "Any set of variables can also be wrapped up in a class. \n\"Variable\" variables may be added to the class instance during runtime by directly accessing the built-in dictionary through __dict__ attribute. The following code defines Variables class, which adds variables (in this case attributes) to its instance during the construction. Variable names are taken from a specified list (which, for example, could have been generated by program code):# some list of variable names\nL = ['a', 'b', 'c']\n\nclass Variables:\n    def __init__(self, L):\n        for item in L:\n            self.__dict__[item] = 100\n\nv = Variables(L)\nprint(v.a, v.b, v.c)\n#will produce 100 100 100\n"]}
{"index":{"_id":2}}
{"question": "Why are these constructs using pre and post-increment undefined behavior?", "details": "#include <stdio.h>\n\nint main(void)\n{\n   int i = 0;\n   i = i++ + ++i;\n   printf(\"%d\\n\", i); // 3\n\n   i = 1;\n   i = (i++);\n   printf(\"%d\\n\", i); // 2 Should be 1, no ?\n\n   volatile int u = 0;\n   u = u++ + ++u;\n   printf(\"%d\\n\", u); // 1\n\n   u = 1;\n   u = (u++);\n   printf(\"%d\\n\", u); // 2 Should also be one, no ?\n\n   register int v = 0;\n   v = v++ + ++v;\n   printf(\"%d\\n\", v); // 3 (Should be the same as u ?)\n\n   int w = 0;\n   printf(\"%d %d\\n\", ++w, w); // shouldn't this print 1 1\n\n   int x[2] = { 5, 8 }, y = 0;\n   x[y] = y ++;\n   printf(\"%d %d\\n\", x[0], x[1]); // shouldn't this print 0 8? or 5 0?\n}\n", "answers": ["#include <stdio.h>\n\nint main(void)\n{\n   int i = 0;\n   i = i++ + ++i;\n   printf(\"%d\\n\", i); // 3\n\n   i = 1;\n   i = (i++);\n   printf(\"%d\\n\", i); // 2 Should be 1, no ?\n\n   volatile int u = 0;\n   u = u++ + ++u;\n   printf(\"%d\\n\", u); // 1\n\n   u = 1;\n   u = (u++);\n   printf(\"%d\\n\", u); // 2 Should also be one, no ?\n\n   register int v = 0;\n   v = v++ + ++v;\n   printf(\"%d\\n\", v); // 3 (Should be the same as u ?)\n\n   int w = 0;\n   printf(\"%d %d\\n\", ++w, w); // shouldn't this print 1 1\n\n   int x[2] = { 5, 8 }, y = 0;\n   x[y] = y ++;\n   printf(\"%d %d\\n\", x[0], x[1]); // shouldn't this print 0 8? or 5 0?\n}\n", "C has the concept of undefined behavior, i.e. some language constructs are syntactically valid but you can't predict the behavior when the code is run.As far as I know, the standard doesn't explicitly say  the concept of undefined behavior exists. In my mind, it's simply because the language designers wanted there to be some leeway in the semantics, instead of i.e. requiring that all implementations handle integer overflow in the exact same way, which would very likely impose serious performance costs, they just left the behavior undefined so that if you write code that causes integer overflow, anything can happen.So, with that in mind, why are these \"issues\"? The language clearly says that certain things lead to . There is no problem, there is no \"should\" involved. If the undefined behavior changes when one of the involved variables is declared volatile, that doesn't prove or change anything. It is ; you cannot reason about the behavior.Your most interesting-looking example, the one withu = (u++);\nis a text-book example of undefined behavior (see Wikipedia's entry on ).", "Just compile and disassemble your line of code, if you are so inclined to know how exactly it is you get what you are getting.This is what I get on my machine, together with what I think is going on:$ cat evil.c\nvoid evil(){\n  int i = 0;\n  i+= i++ + ++i;\n}\n$ gcc evil.c -c -o evil.bin\n$ gdb evil.bin\n(gdb) disassemble evil\nDump of assembler code for function evil:\n   0x00000000 <+0>:   push   %ebp\n   0x00000001 <+1>:   mov    %esp,%ebp\n   0x00000003 <+3>:   sub    $0x10,%esp\n   0x00000006 <+6>:   movl   $0x0,-0x4(%ebp)  // i = 0   i = 0\n   0x0000000d <+13>:  addl   $0x1,-0x4(%ebp)  // i++     i = 1\n   0x00000011 <+17>:  mov    -0x4(%ebp),%eax  // j = i   i = 1  j = 1\n   0x00000014 <+20>:  add    %eax,%eax        // j += j  i = 1  j = 2\n   0x00000016 <+22>:  add    %eax,-0x4(%ebp)  // i += j  i = 3\n   0x00000019 <+25>:  addl   $0x1,-0x4(%ebp)  // i++     i = 4\n   0x0000001d <+29>:  leave  \n   0x0000001e <+30>:  ret\nEnd of assembler dump.\n(I... suppose that the 0x00000014 instruction was some kind of compiler optimization?)", "I think the relevant parts of the C99 standard are 6.5 Expressions, \u00a72Between the previous and next sequence point an object shall have its stored value\n  modified at most once by the evaluation of an expression. Furthermore, the prior value\n  shall be read only to determine the value to be stored.and 6.5.16 Assignment operators, \u00a74:The order of evaluation of the operands is unspecified. If an attempt is made to modify\n  the result of an assignment operator or to access it after the next sequence point, the\n  behavior is undefined. ", "Most of the answers here quoted from C standard emphasizing that the behavior of these constructs are undefined. To understand , let's understand these terms first in the light of C11 standard: (5.1.2.3)Given any two evaluations A and B, if A is sequenced before B, then the execution of A shall precede the execution of B.If A is not sequenced before or after B, then A and B are unsequenced.Evaluations can be one of two things:\n\n\nThe presence of a sequence point between the evaluation of expressions A and B implies that every  and  associated with A is sequenced before every  and  associated with B.Now coming to the question, for the expressions likeint i = 1;\ni = i++;\nstandard says that: either  or a value computation using the value of the same scalar object, . [...]Therefore, the above expression invokes UB because two side effects on the same object i is unsequenced relative to each other. That means it is not sequenced whether the side effect by assignment to i will be done before or after the side effect by ++.\nDepending on whether assignment occurs before or after the increment, different results will be produced and that's the one of the case of .Lets rename the i at left of assignment be il and at the right of assignment (in the expression i++) be ir, then the expression be likeil = ir++     // Note that suffix l and r are used for the sake of clarity.\n              // Both il and ir represents the same object.  \n regarding Postfix ++ operator is that:++. The increment can happen as early as the compiler likes .It means the expression il = ir++ could be evaluated either astemp = ir;      // i = 1\nir = ir + 1;    // i = 2   side effect by ++ before assignment\nil = temp;      // i = 1   result is 1  \nortemp = ir;      // i = 1\nil = temp;      // i = 1   side effect by assignment before ++\nir = ir + 1;    // i = 2   result is 2  \nresulting in two different results 1 and 2 which depends on the sequence of side effects by assignment and ++ and hence invokes UB.", "The behavior can't really be explained because it invokes both  and , so we can not make any general predictions about this code, although if you read  work such as  and  sometimes you can make good guesses in very specific cases with a specific compiler and environment but please don't do that anywhere near production.So moving on to , in  section6.5 paragraph  says():The grouping of operators and operands is indicated by the syntax.74) Except as specified\n  later (for the function-call (), &&, ||, ?:, and comma operators), So when we have a line like this:i = i++ + ++i;\nwe do not know whether i++ or ++i will be evaluated first. This is mainly to give the compiler .We also have  here as well since the program is modifying variables(i, u, etc..) more than once between . From draft standard section 6.5 paragraph (): by the evaluation of an expression. Furthermore, .it cites the following code examples as being undefined:i = ++i + 1;\na[i++] = i; \nIn all these examples the code is attempting to modify an object more than once in the same sequence point, which will end with the ; in each one of these cases:i = i++ + ++i;\n^   ^       ^\n\ni = (i++);\n^    ^\n\nu = u++ + ++u;\n^   ^       ^\n\nu = (u++);\n^    ^\n\nv = v++ + ++v;\n^   ^       ^\n is defined in the  in section 3.4.4 as:use of an unspecified value, or other behavior where this International Standard provides\n  two or more possibilities and imposes no further requirements on which is chosen in any\n  instanceand  is defined in section 3.4.3 as:behavior, upon use of a nonportable or erroneous program construct or of erroneous data,\n  for which this International Standard imposes no requirementsand notes that:Possible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving during translation or program execution in a documented manner characteristic of the environment (with or without the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message).", "Another way of answering this, rather than getting bogged down in arcane details of sequence points and undefined behavior, is simply to ask,  The first fragment asked about, i = i++ + ++i, is pretty clearly insane in my book.  No one would ever write it in a real program, it's not obvious what it does, there's no conceivable algorithm someone could have been trying to code that would have resulted in this particular contrived sequence of operations.  And since it's not obvious to you and me what it's supposed to do, it's fine in my book if the compiler can't figure out what it's supposed to do, either.The second fragment, i = i++, is a little easier to understand.  Someone is clearly trying to increment i, and assign the result back to i.  But there are a couple ways of doing this in C.  The most basic way to add 1 to i, and assign the result back to i, is the same in almost any programming language:i = i + 1\nC, of course, has a handy shortcut:i++\nThis means, \"add 1 to i, and assign the result back to i\".  So if we construct a hodgepodge of the two, by writingi = i++\nwhat we're really saying is \"add 1 to i, and assign the result back to i, and assign the result back to i\".  We're confused, so it doesn't bother me too much if the compiler gets confused, too.Realistically, the only time these crazy expressions get written is when people are using them as artificial examples of how ++ is supposed to work.  And of course it is important to understand how ++ works.  But one practical rule for using ++ is, \"If it's not obvious what an expression using ++ means, don't write it.\"We used to spend countless hours on comp.lang.c discussing expressions like these and  they're undefined.  Two of my longer answers, that try to really explain why, are archived on the web:\n\n\nSee also  and the rest of the questions in  of the .", "Often this question is linked as a duplicate of questions related to code likeprintf(\"%d %d\\n\", i, i++);\nor printf(\"%d %d\\n\", ++i, i++);\nor similar variants.While this is also  as stated already, there are subtle differences when printf() is involved when comparing to a statement such as:x = i++ + i++;\nIn the following statement:printf(\"%d %d\\n\", ++i, i++);\nthe  of arguments in printf() is . That means, expressions i++ and ++i could be evaluated in any order.  has some relevant descriptions on this:The order in which the function designator, arguments, and\n  subexpressions within the arguments are evaluated in a function call\n  (6.5.2.2).Use of an unspecified value, or other behavior where this\n  International Standard provides two or more possibilities and imposes\n  no further requirements on which is chosen in any instance.EXAMPLE An example of unspecified behavior is the order in which the\n  arguments to a function are evaluated.The  itself is NOT an issue. Consider this example:printf(\"%d %d\\n\", ++x, y++);\nThis too has  because the order of evaluation of ++x and y++ is unspecified. But it's perfectly legal and valid statement. There's  undefined behaviour in this statement. Because the modifications (++x and y++) are done to  objects.What renders the following statement printf(\"%d %d\\n\", ++i, i++);\nas  is the fact that these two expressions modify the  object i without an intervening .Another detail is that the  involved in the printf() call is a , not the .This is an important distinction because the  does introduce a  between the evaluation of their operands, which makes the following legal:int i = 5;\nint j;\n\nj = (++i, i++);  // No undefined behaviour here because the comma operator \n                 // introduces a sequence point between '++i' and 'i++'\n\nprintf(\"i=%d j=%d\\n\",i, j); // prints: i=7 j=6\nThe comma operator evaluates its operands left-to-right and yields only the value of the last operand. So in j = (++i, i++);, ++i increments i to 6 and i++ yields old value of i (6) which is assigned to j. Then i becomes 7 due to post-increment.So if the  in the function call were to be a comma operator then printf(\"%d %d\\n\", ++i, i++);\nwill not be a problem. But it invokes  because the  here is a .For those who are new to  would benefit from reading   to understand the concept and many other variants of undefined behaviour in C.This post:  is also relevant.", "While it is unlikely that any compilers and processors would actually do so, it would be legal, under the C standard, for the compiler to implement \"i++\" with the sequence:In a single operation, read `i` and lock it to prevent access until further notice\nCompute (1+read_value)\nIn a single operation, unlock `i` and store the computed value\nWhile I don't think any processors support the hardware to allow such a thing to be done efficiently, one can easily imagine situations where such behavior would make multi-threaded code easier (e.g. it would guarantee that if two threads try to perform the above sequence simultaneously, i would get incremented by two) and it's not totally inconceivable that some future processor might provide a feature something like that.If the compiler were to write i++ as indicated above (legal under the standard) and were to intersperse the above instructions throughout the evaluation of the overall expression (also legal), and if it didn't happen to notice that one of the other instructions happened to access i, it would be possible (and legal) for the compiler to generate a sequence of instructions that would deadlock.  To be sure, a compiler would almost certainly detect the problem in the case where the same variable i is used in both places, but if a routine accepts references to two pointers p and q, and uses (*p) and (*q) in the above expression (rather than using i twice) the compiler would not be required to recognize or avoid the deadlock that would occur if the same object's address were passed for both p and q.", "While the  of the expressions like a = a++ or a++ + a++ is legal, the  of these constructs is  because a  in C standard is not obeyed. :With  further clarifying thatThis paragraph renders undefined statement expressions such asi = ++i + 1;\na[i++] = i;\nwhile allowingi = i + 1;\na[i] = i;\nThe various sequence points are listed in Annex C of  (and ):The following are the sequence points described in 5.1.2.3:\n  \n  \n  \n  \n  \n  \n  \n  \n  The wording of the same  is:You can detect such errors in a program by for example using a recent version of GCC with -Wall and -Werror, and then GCC will outright refuse to compile your program. The following is the output of gcc (Ubuntu 6.2.0-5ubuntu12) 6.2.0 20161005:% gcc plusplus.c -Wall -Werror -pedantic\nplusplus.c: In function \u2018main\u2019:\nplusplus.c:6:6: error: operation on \u2018i\u2019 may be undefined [-Werror=sequence-point]\n    i = i++ + ++i;\n    ~~^~~~~~~~~~~\nplusplus.c:6:6: error: operation on \u2018i\u2019 may be undefined [-Werror=sequence-point]\nplusplus.c:10:6: error: operation on \u2018i\u2019 may be undefined [-Werror=sequence-point]\n    i = (i++);\n    ~~^~~~~~~\nplusplus.c:14:6: error: operation on \u2018u\u2019 may be undefined [-Werror=sequence-point]\n    u = u++ + ++u;\n    ~~^~~~~~~~~~~\nplusplus.c:14:6: error: operation on \u2018u\u2019 may be undefined [-Werror=sequence-point]\nplusplus.c:18:6: error: operation on \u2018u\u2019 may be undefined [-Werror=sequence-point]\n    u = (u++);\n    ~~^~~~~~~\nplusplus.c:22:6: error: operation on \u2018v\u2019 may be undefined [-Werror=sequence-point]\n    v = v++ + ++v;\n    ~~^~~~~~~~~~~\nplusplus.c:22:6: error: operation on \u2018v\u2019 may be undefined [-Werror=sequence-point]\ncc1: all warnings being treated as errors\nThe important part is to know . For example the  is a sequence point, soj = (i ++, ++ i);\nis well-defined, and will increment i by one, yielding the old value, discard that value; then at comma operator, settle the side effects; and then increment i by one, and the resulting value becomes the value of the expression - i.e. this is just a contrived way to write j = (i += 2) which is yet again a \"clever\" way to writei += 2;\nj = i;\nHowever, the , in function argument lists is  a comma operator, and there is no sequence point between evaluations of distinct arguments; instead their evaluations are unsequenced with regard to each other; so the function call int i = 0;\nprintf(\"%d %d\\n\", i++, ++i, i);\nhas  because i++++i, and the value of i is therefore modified twice, by both i++ and ++i, between the previous and the next sequence point.", "The C standard says that a variable should only be assigned at most once between two sequence points. A semi-colon for instance is a sequence point. \nSo every statement of the form:i = i++;\ni = i++ + ++i;\nand so on violate that rule. The standard also says that behavior is undefined and not unspecified. Some compilers do detect these and produce some result but this is not per standard.However, two different variables can be incremented between two sequence points.while(*src++ = *dst++);\nThe above is a common coding practice while copying/analysing strings.", "In  someone asked about a statement like:int k[] = {0,1,2,3,4,5,6,7,8,9,10};\nint i = 0;\nint num;\nnum = k[++i+k[++i]] + k[++i];\nprintf(\"%d\", num);\nwhich prints 7... the OP expected it to print 6.The ++i increments aren't guaranteed to all complete before the rest of the calculations. In fact, different compilers will get different results here.  In the example you provided, the first 2 ++i executed, then the values of k[] were read, then the last ++i then k[].num = k[i+1]+k[i+2] + k[i+3];\ni += 3\nModern compilers will optimize this very well. In fact, possibly better than the code you originally wrote (assuming it had worked the way you had hoped).", "Your question was probably not, \"Why are these constructs undefined behavior in C?\".  Your question was probably, \"Why did this code (using ++) not give me the value I expected?\", and someone marked your question as a duplicate, and sent you here. answer tries to answer that question: why did your code not give you the answer you expected, and how can you learn to recognize (and avoid) expressions that will not work as expected.I assume you've heard the basic definition of C's ++ and -- operators by now, and how the prefix form ++x differs from the postfix form x++.  But these operators are hard to think about, so to make sure you understood, perhaps you wrote a tiny little test program involving something likeint x = 5;\nprintf(\"%d %d %d\\n\", x, ++x, x++);\nBut, to your surprise, this program did  help you understand -- it printed some strange, unexpected, inexplicable output, suggesting that maybe ++ does something completely different, not at all what you thought it did.Or, perhaps you're looking at a hard-to-understand expression likeint x = 5;\nx = x++ + ++x;\nprintf(\"%d\\n\", x);\nPerhaps someone gave you that code as a puzzle.  This code also makes no sense, especially if you run it -- and if you compile and run it under two different compilers, you're likely to get two different answers!  What's up with that?  Which answer is correct?  (And the answer is that both of them are, or neither of them are.)As you've heard by now, all of these expressions are , which means that the C language makes no guarantee about what they'll do.  This is a strange and surprising result, because you probably thought that any program you could write, as long as it compiled and ran, would generate a unique, well-defined output.  But in the case of undefined behavior, that's not so.What makes an expression undefined?  Are expressions involving ++ and -- always undefined?  Of course not: these are useful operators, and if you use them properly, they're perfectly well-defined.For the expressions we're talking about what makes them undefined is when there's too much going on at once, when we're not sure what order things will happen in, but when the order matters to the result we get.Let's go back to the two examples I've used in this answer.  When I wroteprintf(\"%d %d %d\\n\", x, ++x, x++);\nthe question is, before calling printf, does the compiler compute the value of x first, or x++, or maybe ++x?  But it turns out .  There's no rule in C which says that the arguments to a function get evaluated left-to-right, or right-to-left, or in some other order.  So we can't say whether the compiler will do x first, then ++x, then x++, or x++ then ++x then x, or some other order.  But the order clearly matters, because depending on which order the compiler uses, we'll clearly get different results printed by printf.What about this crazy expression?x = x++ + ++x;\nThe problem with this expression is that it contains three different attempts to modify the value of x: (1) the x++ part tries to add 1 to x, store the new value in x, and return the old value of x; (2) the ++x part tries to add 1 to x, store the new value in x, and return the new value of x; and (3) the x = part tries to assign the sum of the other two back to x.  Which of those three attempted assignments will \"win\"?  Which of the three values will actually get assigned to x?  Again, and perhaps surprisingly, there's no rule in C to tell us.You might imagine that precedence or associativity or left-to-right evaluation tells you what order things happen in, but they do not.  You may not believe me, but please take my word for it, and I'll say it again: precedence and associativity do not determine every aspect of the evaluation order of an expression in C.  In particular, if within one expression there are multiple different spots where we try to assign a new value to something like x, precedence and associativity do  tell us which of those attempts happens first, or last, or anything.So with all that background and introduction out of the way, if you want to make sure that all your programs are well-defined, which expressions can you write, and which ones can you not write?These expressions are all fine:y = x++;\nz = x++ + y++;\nx = x + 1;\nx = a[i++];\nx = a[i++] + b[j++];\nx[i++] = a[j++] + b[k++];\nx = *p++;\nx = *p++ + *q++;\nThese expressions are all undefined:x = x++;\nx = x++ + ++x;\ny = x + x++;\na[i] = i++;\na[i++] = i;\nprintf(\"%d %d %d\\n\", x, ++x, x++);\nAnd the last question is, how can you tell which expressions are well-defined, and which expressions are undefined?As I said earlier, the undefined expressions are the ones where there's too much going at once, where you can't be sure what order things happen in, and where the order matters:As an example of #1, in the expressionx = x++ + ++x;\nthere are three attempts to modify `x.As an example of #2, in the expressiony = x + x++;\nwe both use the value of x, and modify it.So that's the answer: make sure that in any expression you write, each variable is modified at most once, and if a variable is modified, you don't also attempt to use the value of that variable somewhere else.", "A good explanation about what happens in this kind of computation is provided in the document  from .I explain the ideas.The main rule from the standard ISO 9899 that applies in this situation is  6.5p2.Between the previous and next sequence point an object shall have its stored value modified at most once by the evaluation of an expression.   Furthermore, the prior value shall be read only to determine the value to be stored.The sequence points in an expression like i=i++ are before i= and after i++.  In the paper that I quoted above it is explained that you can figure out the program as being formed by small boxes, each box containing the instructions between 2 consecutive sequence points.  The sequence points are defined in annex C of the standard, in the case of i=i++ there are 2 sequence points that delimit a full-expression.  Such an expression is syntactically equivalent with an entry of expression-statement in the Backus-Naur form of the grammar (a grammar is provided in annex A of the Standard).So the order of instructions inside a box has no clear order.i=i++\ncan be interpreted astmp = i\ni=i+1\ni = tmp\nor astmp = i\ni = tmp\ni=i+1\nbecause both all these forms to interpret the code i=i++ are valid and because both generate different answers, the behavior is undefined.So a sequence point can be seen by the beginning and the end of each box that composes the program [the boxes are atomic units in C] and inside a box the order of instructions is not defined in all cases.  Changing that order one can change the result sometimes.EDIT:Other good source for explaining such ambiguities are the entries from  site (also published ) , namely  and  and  .", "The reason is that the program is running undefined behavior. The problem lies in the evaluation order, because there is no sequence points required according to C++98 standard ( no operations is sequenced before or after another according to C++11 terminology).However if you stick to one compiler, you will find the behavior persistent, as long as you don't add function calls or pointers, which would make the behavior more messy.\nSo first the GCC:\nUsing  15 GCC 7.1 you will get:#include<stdio.h>\nint main(int argc, char ** argv)\n{\nint i = 0;\ni = i++ + ++i;\nprintf(\"%d\\n\", i); // 2\n\ni = 1;\ni = (i++);\nprintf(\"%d\\n\", i); //1\n\nvolatile int u = 0;\nu = u++ + ++u;\nprintf(\"%d\\n\", u); // 2\n\nu = 1;\nu = (u++);\nprintf(\"%d\\n\", u); //1\n\nregister int v = 0;\nv = v++ + ++v;\nprintf(\"%d\\n\", v); //2\n}\nHow does GCC work? it evaluates sub expressions at a left to right order for the right hand side (RHS) , then assigns the value to the left hand side (LHS) . This is exactly how Java and C# behave and define their standards. (Yes, the equivalent software in Java and C# has defined behaviors). It evaluate each sub expression one by one in the RHS Statement in a left to right order; for each sub expression: the ++c (pre-increment)  is evaluated first then the value c is used for the operation, then the post increment c++).according to In GCC C++,  the precedence of the operators controls the order in\n  which the individual operators are evaluatedthe equivalent code in defined behavior C++ as   GCC understands:#include<stdio.h>\nint main(int argc, char ** argv)\n{\n    int i = 0;\n    //i = i++ + ++i;\n    int r;\n    r=i;\n    i++;\n    ++i;\n    r+=i;\n    i=r;\n    printf(\"%d\\n\", i); // 2\n\n    i = 1;\n    //i = (i++);\n    r=i;\n    i++;\n    i=r;\n    printf(\"%d\\n\", i); // 1\n\n    volatile int u = 0;\n    //u = u++ + ++u;\n    r=u;\n    u++;\n    ++u;\n    r+=u;\n    u=r;\n    printf(\"%d\\n\", u); // 2\n\n    u = 1;\n    //u = (u++);\n    r=u;\n    u++;\n    u=r;\n    printf(\"%d\\n\", u); // 1\n\n    register int v = 0;\n    //v = v++ + ++v;\n    r=v;\n    v++;\n    ++v;\n    r+=v;\n    v=r;\n    printf(\"%d\\n\", v); //2\n}\nThen we go to . Visual Studio 2015, you get:#include<stdio.h>\nint main(int argc, char ** argv)\n{\n    int i = 0;\n    i = i++ + ++i;\n    printf(\"%d\\n\", i); // 3\n\n    i = 1;\n    i = (i++);\n    printf(\"%d\\n\", i); // 2 \n\n    volatile int u = 0;\n    u = u++ + ++u;\n    printf(\"%d\\n\", u); // 3\n\n    u = 1;\n    u = (u++);\n    printf(\"%d\\n\", u); // 2 \n\n    register int v = 0;\n    v = v++ + ++v;\n    printf(\"%d\\n\", v); // 3 \n}\nHow does visual studio work, it takes another approach, it evaluates all pre-increments expressions in first pass, then uses variables values in the operations in second pass,  assign from RHS to LHS in third pass, then at last pass it evaluates all the post-increment expressions in one pass. So the equivalent in defined behavior C++ as Visual C++ understands:#include<stdio.h>\nint main(int argc, char ** argv)\n{\n    int r;\n    int i = 0;\n    //i = i++ + ++i;\n    ++i;\n    r = i + i;\n    i = r;\n    i++;\n    printf(\"%d\\n\", i); // 3\n\n    i = 1;\n    //i = (i++);\n    r = i;\n    i = r;\n    i++;\n    printf(\"%d\\n\", i); // 2 \n\n    volatile int u = 0;\n    //u = u++ + ++u;\n    ++u;\n    r = u + u;\n    u = r;\n    u++;\n    printf(\"%d\\n\", u); // 3\n\n    u = 1;\n    //u = (u++);\n    r = u;\n    u = r;\n    u++;\n    printf(\"%d\\n\", u); // 2 \n\n    register int v = 0;\n    //v = v++ + ++v;\n    ++v;\n    r = v + v;\n    v = r;\n    v++;\n    printf(\"%d\\n\", v); // 3 \n}\nas Visual Studio documentation states at :Where several operators appear together, they have equal precedence and are evaluated according to their associativity. The operators in the table are described in the sections beginning with Postfix Operators. "]}
{"index":{"_id":3}}
{"question": "PHP code is not being executed, instead code shows on the page", "details": "I'm trying to execute some PHP code on a project (using Dreamweaver) but the code isn't being run.When I check the source code, the PHP code appears as HTML tags (I can see it in the source code). Apache is running properly (I'm working with XAMPP), the PHP pages are being opened properly but the PHP code isn't being executed.Does someone have a suggestion about what is happening? The file is already named as filename.php\nThe Code..:<?\ninclude_once(\"/code/configs.php\");\n?>\n", "answers": ["I'm trying to execute some PHP code on a project (using Dreamweaver) but the code isn't being run.When I check the source code, the PHP code appears as HTML tags (I can see it in the source code). Apache is running properly (I'm working with XAMPP), the PHP pages are being opened properly but the PHP code isn't being executed.Does someone have a suggestion about what is happening? The file is already named as filename.php\nThe Code..:<?\ninclude_once(\"/code/configs.php\");\n?>\n", "Sounds like there is something wrong with your configuration, here are a few things you can check:Make sure that PHP is installed and running correctly. This may sound silly, but you never know. An easy way to check is to run php -v from a command line and see if returns version information or any errors.Make sure that the PHP module is listed  inside of your Apache's httpd.conf This should be something like LoadModule php5_module \"c:/php/php5apache2_2.dll\" in the file. Search for LoadModule php, and make sure that there is no comment (;) in front of it.Make sure that Apache's httpd.conf file has the PHP MIME type in it. This should be something like AddType application/x-httpd-php .php. This tells Apache to run .php files as PHP. Search for AddType, and then make sure there is an entry for PHP, .Make sure your file has the .php extension on it, or whichever extension specified in the MIME definition in point #3, otherwise it will not be executed as PHP.Make sure you are not using  in the PHP file (<?), these are   by default and their use is discouraged. Use <?php instead (or  with short_open_tag=On if you have code that relies on them). Make sure you are accessing your file over your webserver using an URL like http://localhost/file.php not via local file access file://localhost/www/file.phpAnd lastly check the .", "php7 : sudo a2enmod proxy_fcgi setenvif\nsudo a2enconf php7.0-fpm\nsudo service apache2 restart\n", "I'm running Apache on Ubuntu and my issue was that the /etc/apache2/mods-available/php5.conf file was missing this:<FilesMatch \".+\\.ph(p[345]?|t|tml)$\">\n    SetHandler application/x-httpd-php\n</FilesMatch>\nI added it back in and php was parsing php files correctly.", "note for php 7 users, add this to your httpd.conf file:# PHP 7 specific configuration\n<IfModule php7_module>\n    AddType application/x-httpd-php .php\n    AddType application/x-httpd-php-source .phps\n    <IfModule dir_module>\n        DirectoryIndex index.html index.php\n    </IfModule>\n</IfModule>\n", "I found another problem causing this issue and already solved it. I accidentally saved my script in UTF-16 encoding. It seems that PHP5 can't recognize <?php tag in 16 bit encoding by default.", "Also, be sure to check that none of your website config files related to this specific host or virtualhost have any php_admin_value's in them that turn off PHP, like this:php_admin_value engine Off\nWhen in doubt, comment it...# php_admin_value engine Off\nAnd restart your webserver.", "You're just opening your php file into browser. You have to open it using localhost url. if you open a file directly from your directory it will not execute the php code in any case.http://locahost/index.phphttp:127.0.0.1/index.phpEnable php short code. In your case, you are using <? which is php short code for <?php. By default php short codes are disabled.Also use: sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt if you are a ubuntu user.", "I know it should sound silly... but seldom it happens.Check if you are trying to execute php from **http://localhost/info.php**\nand not from file:///var/www/info.php\nps> you can notice that if you write from shellphp info.php \nit answer with the code (it means php functions)..", "This just happened to me again, along with the server downloading html files, rather than processing. I had not use the webserver apache for some time on the computer and meanwhile Ubuntu updated like two more versions from originally installed LTS. Now it is $ cat /etc/issue\nUbuntu 16.04 LTS\nSo the php worked after like so:$ sudo apt-get install lamp-server^\n$ sudo a2enmod php7.0\n$ sudo service apache2 restart \nThe webserver was now parsing the php. Maybe now got to update some webs since php7.0 now running where as it was before running php5. Oh well.", "I've solved this by uninstalling XAMPP, and installing WAMP.\nThanks for the help.", "I faced this issue on php 7.1 that comes with High Sierra (OS X 10.13.5), editing /etc/apache2/httpd.conf with following changes helped:Uncomment this lineLoadModule php7_module libexec/apache2/libphp7.so\nPaste following at the end<IfModule php7_module>\n    AddType application/x-httpd-php .php\n    AddType application/x-httpd-php-source .phps\n\n    <IfModule dir_module>\n        DirectoryIndex index.html index.php\n    </IfModule>\n</IfModule>\n", "on my ubuntu 14.04, apache 2.4, php 5.5.9 install,  I tried with a sample.php on /var/www/html (default document root) and it worked ok. \nSo the problem was on my Virtual Servers config.\nThe solution was to include, on the Directory def containing the .php, this line:    php_admin_flag engine on\n", "Make sure the script contains <?php\nbefore the code that should be executed. There should be no space between <? and php in this.", "i had similar problem but in my case solution was different.\nmy file that held php code was called \nchanged it to  worked fine", "For fresh setup of LAMP running php 7\nedit the file /etc/httpd/conf/httpd.conf\nNote: make sure to make backup for it before changing anything.Paste this at the very bottom of the file:<IfModule php7_module>\nAddType application/x-httpd-php .php\nAddType application/x-httpd-php-source .phps\n<IfModule dir_module>\n    DirectoryIndex index.html index.php\n</IfModule>\nThen, search for LoadModule and paste the following line:LoadModule php7_module modules/libphp7.so\nThis line will simply ask httpd to load the php 7 moduleThen restart httpd", "Check all the packages you have installed for  using:yum list installed | grep remi\nInstall all relevant  packages, especially  on your machine.", "This was in my .htaccessDirectoryIndex index.html index.htm\nindex.html contained PHP code.  By default, PHP won't process files with extentions like htm* as PHP code.You can override this, by adding the following to .htaccess:<FilesMatch \".+\\.html$\">\n    SetHandler application/x-httpd-php\n</FilesMatch>\n", "Add AddType application/x-httpd-php .php to your httpd.conf file if you are using Apache 2.4", "In case we are in the same page do followingsudo apt-get install php -y\nsudo apt-get install php-{bcmath,bz2,intl,gd,mbstring,mysql,zip,fpm} -yTo enable PHP 7.2 FPM in Apache2 do:a2enmod proxy_fcgi setenvifa2enconf php7.2-fpmAfter that, I faced above issue. There are similar questions like .I don't know why but it only happened for my .php files in /var/www/html/ root folder. everything was ok for sub-directories. (for example wordpress and phpmyadmin worked fine)So here is my solution. I decided to enable php module. so I ran this command:a2enmod php7.2but I got this errors:Considering dependency mpm_prefork for php7.2:\n  Considering conflict mpm_event for mpm_prefork:\n  ERROR: Module mpm_event is enabled - cannot proceed due to conflicts. It needs to be disabled first!\n  Considering conflict mpm_worker for mpm_prefork:\n  ERROR: Could not enable dependency mpm_prefork for php7.2, abortingso I decided to disable mpm by running following commands:sudo a2dismod mpm_prefork\nsudo a2dismod mpm_worker\nsudo a2dismod mpm_event\nthen restart apache:systemctl restart apache2then enable php7.2 (my installed version):sudo a2enmod php7.2and right now everything works fine.", "Another possible cause of this problem could be that you are trying to run the script in a \"user directory\" from the UserDir module.  Running PHP scripts in user directories is disabled by default.  You will run into this problem if the script is in the public_html directory in your home folder and you are trying to access it from http://localhost/~your_username.To fix this, open up /etc/apache2/mods-enabled/php7.2.conf.  You must comment or delete the tag block at the bottom that reads<IfModule mod_userdir.c>\n    <Directory /home/*/public_html>\n        php_admin_flag engine Off\n    </Directory>\n</IfModule>\n", "In my case the php module was not loaded. Try this:apache2ctl -Mphp7_module (shared)libapache2-mod-php7.3a2enmod php7.3", "I think the problem that it is showing code instead of the result is that it is not going to local host . recheck what address u r going in. are u going to a local file directory or to the local host.from the screenshot u sent it is going to ur computer not to the localhost.\"file:/// \" it should be  \"localhost/\"", "Reinstalling the mcrypt module worked for me.$sudo apt-get install php5-mcrypt\n$sudo php5enmod mcrypt\n", "I had a case that I accidentally started untaring my files directory in root.  It added the .htaccess file from my files folder that would block all php# If we know how to do it safely, disable the PHP engine entirely.\n<IfModule mod_php5.c>\n  php_flag engine off\n</IfModule>\nBottom line check the .htaccess file on root.", "If you have configuration like this:  <VirtualHost *:80>\n    ServerName example.com\n    DocumentRoot \"/var/www/example.com\"\n\n    <FilesMatch \"\\.php$\">\n        SetHandler \"proxy:fcgi://127.0.0.1:9000\"\n    </FilesMatch>\n</VirtualHost>\nUncomment next lines in your httpd.confLoadModule proxy_module lib/httpd/modules/mod_proxy.so\nLoadModule proxy_fcgi_module lib/httpd/modules/mod_proxy_fcgi.so\nIt works for me", "Just spent hours of trying to get . Finally for me it was a typo in  LoadModule. Drew attention to writing and exact module path through the . Thank you!After two nights I discovered... My directory was written c: (lower case)I had LoadModule php5_module \"c:/php/php5apache2.dll\" but  is:LoadModule php5_module \"C:/php/php5apache2_4.dll\"\nSo I also missed the _4 before (for ). The full snippet that worked for me:# PHP\nLoadModule php5_module \"C:/php/php5apache2_4.dll\"\nAddHandler application/x-httpd-php .php\n<FilesMatch \\.php$>\n    SetHandler application/x-httpd-php\n</FilesMatch>\nJust tried . There the LoadModule line in  for Apache 2.4 readsLoadModule php7_module \"C:/php/php7apache2_4.dll\"\nCurrently  c:/php/php5apache2.dll which of course needs to be adjusted.", "in my case (Apache/2.4.34), after uncommenting the specific module \"LoadModule php7_module libexec/apache2/libphp7.so\"from\"/etc/apache2/httpd.conf\"my problem was gone.", "Try restarting the apache server. This was the mistake I had made - forgetting to restart the server after installing php!service httpd restart\n"]}
{"index":{"_id":4}}
{"question": "Passing Data between View Controllers", "details": "I'm new to iOS and Objective-C and the whole MVC paradigm and I'm stuck with the following:I have a view that acts as a data entry form and I want to give the user the option to select multiple products. The products are listed on another view with a UITableViewController and I have enabled multiple selections.My question is, how do I transfer the data from one view to another? I will be holding the selections on the UITableView in an array, but how do I then pass that back to the previous data entry form view so it can be saved along with the other data to Core Data on submission of the form?I have surfed around and seen some people declare an array in the app delegate. I read something about Singletons but don't understand what these are and I read something about creating a data model.What would be the correct way of performing this and how would I go about it?", "answers": ["I'm new to iOS and Objective-C and the whole MVC paradigm and I'm stuck with the following:I have a view that acts as a data entry form and I want to give the user the option to select multiple products. The products are listed on another view with a UITableViewController and I have enabled multiple selections.My question is, how do I transfer the data from one view to another? I will be holding the selections on the UITableView in an array, but how do I then pass that back to the previous data entry form view so it can be saved along with the other data to Core Data on submission of the form?I have surfed around and seen some people declare an array in the app delegate. I read something about Singletons but don't understand what these are and I read something about creating a data model.What would be the correct way of performing this and how would I go about it?", "This question seems to be very popular here on stackoverflow so I thought I would try and give a better answer to help out people starting in the world of iOS like me.I hope this answer is clear enough for people to understand and that I have not missed anything.Passing data forward to a view controller from another view controller. You would use this method if you wanted to pass an object/value from one view controller to another view controller that you may be pushing on to a navigation stack.For this example, we will have ViewControllerA and ViewControllerBTo pass a BOOL value from ViewControllerA to ViewControllerB we would do the following.in ViewControllerB.h create a property for the BOOL@property (nonatomic, assign) BOOL isSomethingEnabled;\nin ViewControllerA you need to tell it about ViewControllerB so use an #import \"ViewControllerB.h\"\nThen where you want to load the view eg. didSelectRowAtIndex or some IBAction you need to set the property in ViewControllerB before you push it onto nav stack.ViewControllerB *viewControllerB = [[ViewControllerB alloc] initWithNib:@\"ViewControllerB\" bundle:nil];\nviewControllerB.isSomethingEnabled = YES;\n[self pushViewController:viewControllerB animated:YES];\nThis will set isSomethingEnabled in ViewControllerB to BOOL value YES.If you are using Storyboards you are most likely using segues and will need this procedure to pass data forward. This is similar to the above but instead of passing the data before you push the view controller, you use a method called-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender\nSo to pass a BOOL from ViewControllerA to ViewControllerB we would do the following:in ViewControllerB.h create a property for the BOOL@property (nonatomic, assign) BOOL isSomethingEnabled;\nin ViewControllerA you need to tell it about ViewControllerB so use an#import \"ViewControllerB.h\"\nCreate a the segue from ViewControllerA to ViewControllerB on the storyboard and give it an identifier, in this example we'll call it \"showDetailSegue\"Next, we need to add the method to ViewControllerA that is called when any segue is performed, because of this we need to detect which segue was called and then do something. In our example we will check for \"showDetailSegue\" and if that's performed we will pass our BOOL value to ViewControllerB-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender{\n    if([segue.identifier isEqualToString:@\"showDetailSegue\"]){\n        ViewControllerB *controller = (ViewControllerB *)segue.destinationViewController;\n        controller.isSomethingEnabled = YES;\n    }\n}\nIf you have your views embedded in a navigation controller you need to change the method above slightly to the following-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender{\n    if([segue.identifier isEqualToString:@\"showDetailSegue\"]){\n        UINavigationController *navController = (UINavigationController *)segue.destinationViewController;\n        ViewControllerB *controller = (ViewControllerB *)navController.topViewController;\n        controller.isSomethingEnabled = YES;\n    }\n}\nThis will set isSomethingEnabled in ViewControllerB to BOOL value YES.To pass data back from ViewControllerB to ViewControllerA you need to use  or , the latter can be used as a loosely coupled mechanism for callbacks.To do this we will make ViewControllerA a delegate of ViewControllerB. This allows ViewControllerB to send a message back to ViewControllerA enabling us to send data back.For ViewControllerA to be a delegate of ViewControllerB it must conform to ViewControllerB's protocol which we have to specify. This tells ViewControllerA which methods it must implement.In ViewControllerB.h, below the #import, but above @interface you specify the protocol.@class ViewControllerB;\n\n@protocol ViewControllerBDelegate <NSObject>\n- (void)addItemViewController:(ViewControllerB *)controller didFinishEnteringItem:(NSString *)item;\n@end\nnext still in the ViewControllerB.h you need to setup a delegate property and synthesize in ViewControllerB.m@property (nonatomic, weak) id <ViewControllerBDelegate> delegate;\nIn ViewControllerB we call a message on the delegate when we pop the view controller.NSString *itemToPassBack = @\"Pass this value back to ViewControllerA\";\n[self.delegate addItemViewController:self didFinishEnteringItem:itemToPassBack];\nThat's it for ViewControllerB. Now in ViewControllerA.h, tell ViewControllerA to import ViewControllerB and conform to its protocol.#import \"ViewControllerB.h\"\n\n@interface ViewControllerA : UIViewController <ViewControllerBDelegate>\nIn ViewControllerA.m implement the following method from our protocol- (void)addItemViewController:(ViewControllerB *)controller didFinishEnteringItem:(NSString *)item\n{\n    NSLog(@\"This was returned from ViewControllerB %@\",item);\n}\nBefore pushing viewControllerB to navigation stack we need to tell  ViewControllerB that ViewControllerA is its delegate, otherwise we will get an error.ViewControllerB *viewControllerB = [[ViewControllerB alloc] initWithNib:@\"ViewControllerB\" bundle:nil];\nviewControllerB.delegate = self\n[[self navigationController] pushViewController:viewControllerB animated:YES];\n\nIt's another way to pass data. // add observer in controller(s) where you want to receive data\n[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleDeepLinking:) name:@\"handleDeepLinking\" object:nil];\n\n-(void) handleDeepLinking:(NSNotification *) notification {\n    id someObject = notification.object // some custom object that was passed with notification fire.\n}\n\n// post notification\nid someObject;\n[NSNotificationCenter.defaultCenter postNotificationName:@\"handleDeepLinking\" object:someObject];\n (A class can be any controller, Network/session manager, UIView subclass or any other class)This example passes data from  to @property void(^selectedVoucherBlock)(NSString *); // in ContollerA.h\n\nwhere you need a value (for example you need your API response in ControllerA or you need ContorllerB data on A)// in ContollerA.m\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    __unsafe_unretained typeof(self) weakSelf = self;\n    self.selectedVoucherBlock = ^(NSString *voucher) {\n        weakSelf->someLabel.text = voucher;\n    };\n}\nUIStoryboard *storyboard = [UIStoryboard storyboardWithName:@\"Main\" bundle:nil];\nControllerB *vc = [storyboard instantiateViewControllerWithIdentifier:@\"ControllerB\"];\nvc.sourceVC = self;\n    [self.navigationController pushViewController:vc animated:NO];\n-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath: \n(NSIndexPath *)indexPath {\n    NSString *voucher = vouchersArray[indexPath.row];\n    if (sourceVC.selectVoucherBlock) {\n        sourceVC.selectVoucherBlock(voucher);\n    }\n    [self.navigationController popToViewController:sourceVC animated:YES];\n}\n", "There are tons and tons of explanations here and around StackOverflow, but if you are a beginner just trying to get something basic to work, try watching this YouTube tutorial (It's what helped me to finally understand how to do it).\n\nThe following is an example based on the video. The idea is to pass a string from the text field in the First View Controller to the label in the Second View Controller.Create the storyboard layout in the Interface Builder. To make the segue, you just  click on the button and drag over to the Second View Controller.The code for the First View Controller isimport UIKit\n\nclass FirstViewController: UIViewController {\n\n    @IBOutlet weak var textField: UITextField!\n    \n    // This function is called before the segue\n    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n        \n        // get a reference to the second view controller\n        let secondViewController = segue.destination as! SecondViewController\n        \n        // set a variable in the second view controller with the String to pass\n        secondViewController.receivedString = textField.text!\n    }\n\n}\nAnd the code for the Second View Controller isimport UIKit\n\nclass SecondViewController: UIViewController {\n\n    @IBOutlet weak var label: UILabel!\n    \n    // This variable will hold the data being passed from the First View Controller\n    var receivedString = \"\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // Used the text from the First View Controller to set the label\n        label.text = receivedString\n    }\n\n}\n\nUITextFieldUILabel\n\nTo pass data back from the second view controller to the first view controller, you use . This video is a very clear walk though of that process:\n\nThe following is an example based on the video (with a few modifications).Create the storyboard layout in the Interface Builder. Again, to make the segue, you just  drag from the button to the Second View Controller. Set the segue identifier to showSecondViewController. Also, don't forget to hook up the outlets and actions using the names in the following code.The code for the First View Controller isimport UIKit\n\nclass FirstViewController: UIViewController, DataEnteredDelegate {\n\n    @IBOutlet weak var label: UILabel!\n    \n    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n        if segue.identifier == \"showSecondViewController\" {\n            let secondViewController = segue.destination as! SecondViewController\n            secondViewController.delegate = self\n        }\n    }\n    \n    func userDidEnterInformation(info: String) {\n        label.text = info\n    }\n}\nNote the use of our custom DataEnteredDelegate protocol.The code for the second view controller isimport UIKit\n\n// protocol used for sending data back\nprotocol DataEnteredDelegate: AnyObject {\n    func userDidEnterInformation(info: String)\n}\n\nclass SecondViewController: UIViewController {\n\n    // making this a weak variable so that it won't create a strong reference cycle\n    weak var delegate: DataEnteredDelegate? = nil\n    \n    @IBOutlet weak var textField: UITextField!\n\n    @IBAction func sendTextBackButton(sender: AnyObject) {\n        \n        // call this method on whichever class implements our delegate protocol\n        delegate?.userDidEnterInformation(info: textField.text!)\n    \n        // go back to the previous view controller\n        _ = self.navigationController?.popViewController(animated: true)\n    }\n}\nNote that the protocol is outside of the View Controller class.That's it. Running the app now you should be able to send data back from the second view controller to the first.", "The M in MVC is for \"Model\" and in the MVC paradigm the role of model classes is to manage a program's data. A model is the opposite of a view -- a view knows how to display data, but it knows nothing about what to do with data, whereas a model knows everything about how to work with data, but nothing about how to display it. Models can be complicated, but they don't have to be -- the model for your app might be as simple as an array of strings or dictionaries.The role of a controller is to mediate between view and model. Therefore, they need a reference to one or more view objects and one or more model objects. Let's say that your model is an array of dictionaries, with each dictionary representing one row in your table. The root view for your app displays that table, and it might be responsible for loading the array from a file. When the user decides to add a new row to the table, they tap some button and your controller creates a new (mutable) dictionary and adds it to the array. In order to fill in the row, the controller creates a detail view controller and gives it the new dictionary. The detail view controller fills in the dictionary and returns. The dictionary is already part of the model, so nothing else needs to happen.", "There are various ways by which a data can be received to a different class in iOS. For example - NSUserDefaultsBut for the simple scenario of passing a value to a different class whose allocation is done in the current class, the most common and preferred method would be the direct setting of values after allocation. This is done as follows:-We can understand it using two controllers -  Suppose in Controller1 class you want to create the Controller2 object and push it with a String value being passed. This can be done as this:-- (void)pushToController2 {\n\n    Controller2 *obj = [[Controller2 alloc] initWithNib:@\"Controller2\" bundle:nil];\n    [obj passValue:@\"String\"];\n    [self pushViewController:obj animated:YES];\n}\nIn the implementation of the Controller2 class there will be this function as- @interface Controller2  : NSObject\n\n@property (nonatomic , strong) NSString* stringPassed;\n\n@end\n\n@implementation Controller2\n\n@synthesize stringPassed = _stringPassed;\n\n- (void) passValue:(NSString *)value {\n\n    _stringPassed = value; //or self.stringPassed = value\n}\n\n@end\nYou can also directly set the properties of the Controller2 class in the similar way as this:- (void)pushToController2 {\n\n    Controller2 *obj = [[Controller2 alloc] initWithNib:@\"Controller2\" bundle:nil];\n    [obj setStringPassed:@\"String\"];  \n    [self pushViewController:obj animated:YES];\n}\nTo pass multiple values you can use the multiple parameters like :-Controller2 *obj = [[Controller2 alloc] initWithNib:@\"Controller2\" bundle:nil];\n[obj passValue:@\u201cString1\u201d andValues:objArray withDate:date]; \nOr if you need to pass more than 3 parameters which are related to a common feature you can store the values to a Model class and pass that modelObject to the next classModelClass *modelObject = [[ModelClass alloc] init]; \nmodelObject.property1 = _property1;\nmodelObject.property2 = _property2;\nmodelObject.property3 = _property3;\n\nController2 *obj = [[Controller2 alloc] initWithNib:@\"Controller2\" bundle:nil];\n[obj passmodel: modelObject];\nSo in-short if you want to -1) set the private variables of the second class initialise the values by calling a custom function and passing the values.\n2) setProperties do it by directlyInitialising it using the setter method.\n3) pass more that 3-4 values related to each other in some manner , then create a model class and set values to its object and pass the object using any of the above process.\nHope this helps", "After more research it seemed that Protocols and Delegates is the correct/Apple prefered way of doing this.I ended up using this example @ iPhone Dev SDKWorked fine and allowed me to pass a string and an array forward and back between my views.Thanks for all your help", "I find simplest and most elegant version with passing blocks.\nLet's name view controller that waits for returned data as \"A\" and returning view controller as \"B\". In this example we want to get 2 values: first of Type1 and second of Type2.Assuming we use Storyboard, first controller sets callback block, for example during segue preparation:- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender\n{\n    if ([segue.destinationViewController isKindOfClass:[BViewController class]])\n    {\n        BViewController *viewController = segue.destinationViewController;\n\n        viewController.callback = ^(Type1 *value1, Type2 *value2) {\n            // optionally, close B\n            //[self.navigationController popViewControllerAnimated:YES];\n\n            // let's do some action after with returned values\n            action1(value1);\n            action2(value2);\n        };\n\n    }\n}\nand \"B\" view controller should declare callback property, BViewController.h:// it is important to use \"copy\"\n@property (copy) void(^callback)(Type1 *value1, Type2 *value2);\nThan in implementation file BViewController.m after we have desired values to return our callback should be called:if (self.callback)\n    self.callback(value1, value2);\nOne thing to remember is that using block often needs to manage strong and __weak references  like explained ", "There is some good information in many of the answers given, but none address the question fully.The question asks about passing information between view controllers. The specific example given asks about passing information between views, but given the self-stated newness to iOS, the original poster likely meant between viewControllers, not between views (without any involvement from the ViewControllers). It seems that all the answers focus on two view controllers, but what if the app evolves to need to involve more than two view controllers in the information exchange? The original poster also asked about  and the use of the . These questions need to be answered.To help anyone else looking at this question, who wants a full answer, I'm going to attempt to provide it.Rather than having a highly hypothetical, abstract discussion, it helps to have concrete applications in mind. To help define a two-view-controller situation and a more-than-two-view-controller situation, I am going to define two concrete application scenarios. maximum two view controllers ever need to share information.\nSee diagram one. There are two view controllers in the application. There is a ViewControllerA (Data Entry Form), and View Controller B (Product List). The items selected in the product list must match the items displayed in the text box in the data entry form. In this scenario, ViewControllerA and ViewControllerB must communicate directly with each other and no other view controllers. : more than two view controllers need to share the same information.\nSee diagram two.There are four view controllers in the application. It is a tab-based application for managing home inventory. Three view controllers present differently filtered views of the same data:\n\n\n\n\nAny time an individual item is created or edited, it must also synchronize with the other view controllers. For example, if we add a boat in ViewControllerD, but it is not yet insured, then the boat must appear when the user goes to ViewControllerA (Luxury Items), and also ViewControllerC (Entire Home Inventory), but not when the user goes to ViewControllerB (Non-insured Items). We need be concerned with not only adding new items, but also deleting items (which may be allowed from any of the four view controllers), or editing existing items (which may be allowed from the \"Add New Item Form\", repurposing the same for editing).Since all the view controllers do need to share the same data, all four view controllers need to remain in synchronization, and therefore there needs to be some sort of communication to all other view controllers, whenever any single view controller changes the underlying data. It should be fairly obvious that we do not want each view controller communicating directly with each other view controller in this scenario. In case it is not obvious, consider if we had 20 different view controllers (rather than just 4). How difficult and error-prone would it be to notify each of the other 19 view controllers any time one view controller made a change?In scenario one, we have several viable solutions, as other answers have given\n\n\n\n\nIn scenario two, we have other viable solutions:\n\n\nA  is an instance of a class, that instance being the only instance in existence during its lifetime. A singleton gets its name from the fact that it is the single instance. Normally developers who use singletons have special class methods for accessing them. + (HouseholdInventoryManager*) sharedManager; {\n    static dispatch_once_t onceQueue;\n    static HouseholdInventoryManager* _sharedInstance;\n\n    // dispatch_once is guaranteed to only be executed once in the\n    // lifetime of the application\n    dispatch_once(&onceQueue, ^{\n        _sharedInstance = [[self alloc] init];\n    });\n    return _sharedInstance;\n}\nNow that we understand what a singleton is, let's discuss how a singleton fits into the observer pattern. The observer pattern is used for one object to respond to changes by another object. In the second scenario, we have four different view controllers, who all want to know about changes to the underlying data. The \"underlying data\" should belong to a single instance, a singleton. The \"know about changes\" is accomplished by observing changes made to the singleton.The home inventory application would have a single instance of a class which is designed to manage a list of inventory items. The manager would manage a collection of household items. The following is a class definition for the data manager:#import <Foundation/Foundation.h>\n\n@class JGCHouseholdInventoryItem;\n\n@interface HouseholdInventoryManager : NSObject\n/*!\n The global singleton for accessing application data\n */\n+ (HouseholdInventoryManager*) sharedManager;\n\n\n- (NSArray *) entireHouseholdInventory;\n- (NSArray *) luxuryItems;\n- (NSArray *) nonInsuredItems;\n\n- (void) addHouseholdItemToHomeInventory:(JGCHouseholdInventoryItem*)item;\n- (void) editHouseholdItemInHomeInventory:(JGCHouseholdInventoryItem*)item;\n- (void) deleteHoueholdItemFromHomeInventory:(JGCHouseholdInventoryItem*)item;\n@end\nWhen the collection of home inventory items changes, the view controllers need to be made aware of this change. The class definition above does not make it obvious how this will happen. We need to follow the observer pattern. The view controllers must formally observe the sharedManager. There are two ways to observe another object:\n\n\nIn scenario two, we do not have a single property of the HouseholdInventoryManager which could be observed using KVO. Because we do not have a single property which is easily observable, the observer pattern, in this case, must be implemented using NSNotificationCenter. Each of the four view controllers would subscribe to notifications, and the sharedManager would send notifications to the notification center when appropriate. The inventory manager does not need to know anything about the view controllers or instances of any other classes which may be interested in knowing when the collection of inventory items changes; the NSNotificationCenter takes care of these implementation details. The View Controllers simply subscribe to notifications, and the data manager simply posts notifications.Many beginner programmers take advantage of the fact that there is always exactly one  in the lifetime of the application, which is globally accessible. Beginning programmers use this fact to stuff objects and functionality into the appDelegate as a convenience for access from anywhere else in the application. Just because the AppDelegate is a singleton doesn't mean it should replace all other singletons. This is a poor practice as it places too much burden on one class, breaking good object-oriented practices. Each class should have a clear role that is easily explained, often just by the name of the class.Any time your Application Delegate starts to get bloated, start to remove functionality into singletons. For example, the Core Data Stack should not be left in the AppDelegate, but should instead be put in its own class, a coreDataManager class. \n\n\n\n", "The OP didn't mention view controllers but so many of the answers do, that I wanted to chime in with what some of the new features of the LLVM allow to make this easier when wanting to pass data from one view controller to another and then getting some results back.Storyboard segues, ARC and LLVM blocks make this easier than ever for me.  Some answers above mentioned storyboards and segues already but still relied on delegation.  Defining delegates certainly works but some people may find it easier to pass pointers or code blocks.With UINavigators and segues, there are easy ways of passing information to the subservient controller and getting the information back.  ARC makes passing pointers to things derived from NSObjects simple so if you want the subservient controller to add/change/modify some data for you, pass it a pointer to a mutable instance.  Blocks make passing actions easy so if you want the subservient controller to invoke an action on your higher level controller, pass it a block.  You define the block to accept any number of arguments that makes sense to you.  You can also design the API to use multiple blocks if that suits things better.Here are two trivial examples of the segue glue.  The first is straightforward showing one parameter passed for input, the second for output.// Prepare the destination view controller by passing it the input we want it to work on\n// and the results we will look at when the user has navigated back to this controller's view.\n\n- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender\n{\n    [[segue destinationViewController]\n\n     // This parameter gives the next controller the data it works on.\n     segueHandoffWithInput:self.dataForNextController\n\n     // This parameter allows the next controller to pass back results\n     // by virtue of both controllers having a pointer to the same object.\n     andResults:self.resultsFromNextController];\n}\nThis second example shows passing a callback block for the second argument.  I like using blocks because it keeps the relevant details close together in the source - the higher level source.// Prepare the destination view controller by passing it the input we want it to work on\n// and the callback when it has done its work.\n\n- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender\n{\n    [[segue destinationViewController]\n\n     // This parameter gives the next controller the data it works on.\n     segueHandoffWithInput:self.dataForNextController\n\n     // This parameter allows the next controller to pass back results.\n     resultsBlock:^(id results) {\n         // This callback could be as involved as you like.\n         // It can use Grand Central Dispatch to have work done on another thread for example.\n        [self setResultsFromNextController:results];\n    }];\n}\n", "Passing data back from ViewController 2(destination) to viewController 1(Source) is the more interesting thing.\nAssuming you use storyBoard those are all the ways i found out:\n\n\n\n\nThose were  discussed here already.I found there are more ways:use it in the prepareForSegue method in the VC1NextViewController *destinationVC = (NextViewController *) segue.destinationViewController;\n[destinationVC setDidFinishUsingBlockCallback:^(NextViewController *destinationVC)\n{\n    self.blockLabel.text = destination.blockTextField.text;\n}];\nImplement a method with a    UIStoryboardSegue argument in  VC 1,    like this one:-(IBAction)UnWindDone:(UIStoryboardSegue *)segue { }\nIn the storyBoard hook the \"return\" button to the green Exit\nbutton(Unwind) of the vc.\n Now you have a segue that \"goes back\" so u can use the\ndestinationViewController property in the prepareForSegue of VC2 and\nchange any property of VC1 before it goes back.\nAnother option of using storyboards Undwind (Exit)  - you can\nuse the method you wrote in VC1-(IBAction)UnWindDone:(UIStoryboardSegue *)segue {\n    NextViewController *nextViewController = segue.sourceViewController;\n    self.unwindLabel.text = nextViewController.unwindPropertyPass;\n} \nAnd in the prepareForSegue of VC1 you can change any property you want to share.\nIn both unwind options you can set the tag property of the button and check it in\n        the prepareForSegue. Hope i added something to the discussion. :) Cheers.", "There are multiple methods for sharing data.You can always share data using NSUserDefaults. Set the value you want to share with respect to a key of your choice and get the value from NSUserDefault associated to that key in the next view controller. [[NSUserDefaults standardUserDefaults] setValue:value forKey:key]\n[[NSUserDefaults standardUserDefaults] objectForKey:key]\nYou can just create a property in viewcontrollerA. Create an object of viewcontrollerA in viewcontrollerB and assign the desired value to that property.You can also create custom delegates for this.", "If you want to pass data from one controller to other try this codeFirstViewController.h@property (nonatomic, retain) NSString *str;\nSecondViewController.h@property (nonatomic, retain) NSString *str1;\nFirstViewController.m- (void)viewDidLoad\n   {\n     // message for the second SecondViewController\n     self.str = @\"text message\";\n\n     [super viewDidLoad];\n   }\n\n-(IBAction)ButtonClicked\n {\n   SecondViewController *secondViewController = [[SecondViewController alloc] initWithNibName:@\"SecondViewController\" bundle:nil];\n   secondViewController.str1 = str;\n  [self.navigationController pushViewController:secondViewController animated:YES];\n }\n", " Create the instance of first View Controller in the second View Controller and make its property @property (nonatomic,assign). Assign the SecondviewController instance of this view controller. When you finish the selection operation copy the array to first View Controller,When u unload the SecondView ,FirstView will hold the Array Data.Hope This Helps.", "I was searching this solution for long time, Atlast I found it. First of all declare all the objects in your SecondViewController.h file like@interface SecondViewController: UIviewController \n{\n    NSMutableArray *myAray;\n    CustomObject *object;\n}\nNow in your implementation file allocate the memory for those objects like this- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil\n{\n     self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];\n     if (self) \n     {\n         // Custom initialization\n         myAray=[[NSMutableArray alloc] init];\n         object=[[CustomObject alloc] init];\n     }\n     return self;\n}\nNow you have allocated the memory for Array and object. now you can fill that memory before pushing this ViewControllerGo to your SecondViewController.h and write two methods-(void)setMyArray:(NSArray *)_myArray;\n-(void)setMyObject:(CustomObject *)_myObject;\nin implementation file you can implement the function -(void)setMyArray:(NSArray *)_myArray\n{\n     [myArra addObjectsFromArray:_myArray];\n}\n-(void)setMyObject:(CustomObject *)_myObject\n{\n     [object setCustomObject:_myObject];\n}\nexpecting that your CustomObject must have a setter function with it.now your basic work is done. go to the place where you want to push the SecondViewController and do the following stuffSecondViewController *secondView= [[SecondViewController alloc] initWithNibName:@\"SecondViewController \" bundle:[NSBundle MainBundle]] ;\n[secondView setMyArray:ArrayToPass];\n[secondView setMyObject:objectToPass];\n[self.navigationController pushViewController:secondView animated:YES ];\nTake care for spelling mistakes. ", "This is not the way to do it, you should use delegates, I'll assume we have two view controllers ViewController1 and ViewController2 and this check thing is in the first one and when its state changes, you want to do something in ViewController2, to achieve that in the proper way, you should do the below:Add a new file to your project (Objective-C Protocol) File -> New, now name it ViewController1Delegate or whatever you want and write these between the @interface and @end directives@optional\n\n- (void)checkStateDidChange:(BOOL)checked;\nNow go to ViewController2.h and add#import \"ViewController1Delegate.h\"\nthen change its definition to@interface ViewController2: UIViewController<ViewController1Delegate>\nNow go to ViewController2.m and inside the implementation add:- (void)checkStateDidChange:(BOOL)checked {\n     if (checked) {\n           // Do whatever you want here\n           NSLog(@\"Checked\");\n     }\n     else {\n           // Also do whatever you want here\n           NSLog(@\"Not checked\");\n     }\n}\nNow go to ViewController1.h and add the following property:@property (weak, nonatomic) id<ViewController1Delegate> delegate; \nNow if you are creating ViewController1 inside ViewController2 after some event, then you should do it this way using NIB files:ViewController1* controller = [[NSBundle mainBundle] loadNibNamed:@\"ViewController1\" owner:self options:nil][0];\ncontroller.delegate = self;\n[self presentViewController:controller animated:YES completion:nil];\nNow you are all set, whenever you detect the event of check changed in ViewController1, all you have to do is the below[delegate checkStateDidChange:checked]; // You pass here YES or NO based on the check state of your control\nPlease tell me if there's anything that's not clear of if I didn't understand your question properly.", "If you want to send data from one to another viewController, here's a way to it:Say we have viewControllers: viewControllerA and viewControllerBNow in viewControllerB.h@interface viewControllerB : UIViewController {\n\n  NSString *string;\n  NSArray *array;\n\n}\n\n- (id)initWithArray:(NSArray)a andString:(NSString)s;\nIn viewControllerB.m#import \"viewControllerB.h\"\n\n@implementation viewControllerB\n\n- (id)initWithArray:(NSArray)a andString:(NSString)s {\n\n   array = [[NSArray alloc] init];\n   array = a;\n\n   string = [[NSString alloc] init];\n   string = s;\n\n}\nIn viewControllerA.m #import \"viewControllerA.h\"\n#import \"viewControllerB.h\"\n\n@implementation viewControllerA\n\n- (void)someMethod {\n\n  someArray = [NSArray arrayWithObjects:@\"One\", @\"Two\", @\"Three\", nil];\n  someString = [NSString stringWithFormat:@\"Hahahahaha\"];\n\n  viewControllerB *vc = [[viewControllerB alloc] initWithArray:someArray andString:someString];\n\n  [self.navigationController pushViewController:vc animated:YES];\n  [vc release];\n\n}\nSo this is how you can pass data from viewControllerA to viewControllerB without setting any delegate. ;)", "I know this is a beaten subject but for those looking to answer this question with a SWIFT slant and want a bare-bones example, here my go-to method for passing data if you are using a segue to get around.It is similar to the above but without the buttons, labels and such.  Just simply passing data from one view to the next.There are three parts.  This is a very simple view layout with a segue between them.Here is the setup for the senderHere is the setup for the receiver.Lastly, the setup for the segue.We are keeping this simple so no buttons, not actions, we are simply moving data from the sender to the receiver when the application loads and then outputting the transmitted value to the console.This page takes the initially loaded value and passes it along.import UIKit\n\n\nclass ViewControllerSender: UIViewController {\n\n    // THE STUFF - put some info into a variable\n    let favoriteMovie = \"Ghost Busters\"\n\n    override func viewDidAppear(animated: Bool) {\n        // PASS IDENTIFIER - go to the recieving view controller.\n        self.performSegueWithIdentifier(\"goToReciever\", sender: self)\n    }\n\n    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {\n\n        //GET REFERENCE - ...to the receiver view.\n        var viewControllerReceiver = segue.destinationViewController as? ViewControllerReceiver\n\n        //PASS STUFF - pass the variable along to the target.\n        viewControllerReceiver!.yourFavMovie = self.favoriteMovie\n\n    }\n\n}\nThis page just sends the value of the variable to the console when it loads.  By this point, our favorite movie should be in that variable.import UIKit\n\nclass ViewControllerReceiver: UIViewController {\n\n    //Basic empty variable waiting for you to pass in your fantastic favorite movie.\n    var yourFavMovie = \"\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        //And now we can view it in the console.\n        println(\"The Movie is \\(self.yourFavMovie)\")\n\n    }   \n}\nThat is how you can tackle it if you want to use a segue and you don't have your pages under a navigation controller.Once it is run it should switch to the receiver view automatically and pass the value from the sender to the receiver, displaying the value in the console.", "Well  is perfectly fine for passing data but I\n  am going to rewrite it, in Latest Swift version because I believe new\n  programmers find it quit challenging due to new Syntax and\n  methods/frameworks, as original post is in Objective-C.There are multiple options for Passing Data between View Controllers.I am going to rewrite his logic in Swift with latest iOS Framework :  Declare variable in ViewControllerBvar isSomethingEnabled = false\n Print Variable in ViewControllerB' ViewDidLoad methodoverride func viewDidLoad() {\n        super.viewDidLoad()\n        //Print value received through segue, navigation push\n        print(\"Value of 'isSomethingEnabled' from ViewControllerA : \", isSomethingEnabled)\n    }\n In ViewControllerA Pass Data while pushing through Navigation Controllerif let viewControllerB = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"ViewControllerB\") as? ViewControllerB {\n        viewControllerB.isSomethingEnabled = true\n        if let navigator = navigationController {\n            navigator.pushViewController(viewControllerB, animated: true)\n        }\n    }\nSo Here is the complete code for :   import UIKit\n\nclass ViewControllerA: UIViewController  {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    //MARK:Passing Data through Navigation PushViewController\n    @IBAction func goToViewControllerB(_ sender: Any) {\n\n        if let viewControllerB = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"ViewControllerB\") as? ViewControllerB {\n            viewControllerB.isSomethingEnabled = true\n            if let navigator = navigationController {\n                navigator.pushViewController(viewControllerB, animated: true)\n            }\n        }\n    }\n}\nimport UIKit\n\nclass ViewControllerB: UIViewController {\n\n    //MARK:  - Variable for Passing Data through Navigation push   \n    var isSomethingEnabled = false\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        //Print value received through navigation push\n        print(\"Value of 'isSomethingEnabled' from ViewControllerA : \", isSomethingEnabled)\n    }\n}\n :  Create Segue from ViewControllerA to ViewControllerB and give Identifier = showDetailSegue in Storyboard as shown below In ViewControllerB Declare a viable named  and print its value. In ViewControllerA pass isSomethingEnabled's value while passing SegueSo Here is the complete code for : import UIKit\n\nclass ViewControllerA: UIViewController  {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    //MARK:  - - Passing Data through Segue  - - \n    @IBAction func goToViewControllerBUsingSegue(_ sender: Any) {\n        performSegue(withIdentifier: \"showDetailSegue\", sender: nil)\n    }\n\n    //Segue Delegate Method\n    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n        if (segue.identifier == \"showDetailSegue\") {\n            let controller = segue.destination as? ViewControllerB\n            controller?.isSomethingEnabled = true//passing data\n        }\n    }\n}\nimport UIKit\n\nclass ViewControllerB: UIViewController {\n    var isSomethingEnabled = false\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        //Print value received through segue\n        print(\"Value of 'isSomethingEnabled' from ViewControllerA : \", isSomethingEnabled)\n    }\n}\n :  Declare Protocol  in ViewControllerB file but outside the classprotocol ViewControllerBDelegate: NSObjectProtocol {\n\n    // Classes that adopt this protocol MUST define\n    // this method -- and hopefully do something in\n    // that definition.\n    func addItemViewController(_ controller: ViewControllerB?, didFinishEnteringItem item: String?)\n}\n Declare Delegate variable instance in ViewControllerBvar delegate: ViewControllerBDelegate?\n Send data for delegate inside viewDidLoad method of ViewControllerBdelegate?.addItemViewController(self, didFinishEnteringItem: \"Data for ViewControllerA\")\n Confirm ViewControllerBDelegate in ViewControllerAclass ViewControllerA: UIViewController, ViewControllerBDelegate  {\n// to do\n}\n Confirm that you will implement delegate in ViewControllerAif let viewControllerB = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"ViewControllerB\") as? ViewControllerB {\n            viewControllerB.delegate = self//confirming delegate\n            if let navigator = navigationController {\n                navigator.pushViewController(viewControllerB, animated: true)\n            }\n        }\n Implement delegate method for receiving data in ViewControllerAfunc addItemViewController(_ controller: ViewControllerB?, didFinishEnteringItem item: String?) {\n        print(\"Value from ViewControllerB's Delegate\", item!)\n    }\nSo Here is the complete code for : import UIKit\n\nclass ViewControllerA: UIViewController, ViewControllerBDelegate  {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    //Delegate method\n    func addItemViewController(_ controller: ViewControllerB?, didFinishEnteringItem item: String?) {\n        print(\"Value from ViewControllerB's Delegate\", item!)\n    }\n\n    @IBAction func goToViewControllerForDelegate(_ sender: Any) {\n\n        if let viewControllerB = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"ViewControllerB\") as? ViewControllerB {\n            viewControllerB.delegate = self\n            if let navigator = navigationController {\n                navigator.pushViewController(viewControllerB, animated: true)\n            }\n        }\n    }\n}\nimport UIKit\n\n//Protocol decleare\nprotocol ViewControllerBDelegate: NSObjectProtocol {\n    // Classes that adopt this protocol MUST define\n    // this method -- and hopefully do something in\n    // that definition.\n    func addItemViewController(_ controller: ViewControllerB?, didFinishEnteringItem item: String?)\n}\n\nclass ViewControllerB: UIViewController {\n    var delegate: ViewControllerBDelegate?\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        //MARK:  - - - -  Set Data for Passing Data through Delegate  - - - - - -\n        delegate?.addItemViewController(self, didFinishEnteringItem: \"Data for ViewControllerA\")\n    }\n}\n : Step 1. Set and Post data in Notification observer in ViewControllerBlet objToBeSent = \"Test Message from Notification\"\n        NotificationCenter.default.post(name: Notification.Name(\"NotificationIdentifier\"), object: objToBeSent)\nStep 2. Add Notification Observer in ViewControllerANotificationCenter.default.addObserver(self, selector: #selector(self.methodOfReceivedNotification(notification:)), name: Notification.Name(\"NotificationIdentifier\"), object: nil)\nStep 3. Receive Notification data value in ViewControllerA@objc func methodOfReceivedNotification(notification: Notification) {\n        print(\"Value of notification : \", notification.object ?? \"\")\n    }\nSo Here is the complete code for : import UIKit\n\nclass ViewControllerA: UIViewController{\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // add observer in controller(s) where you want to receive data\n        NotificationCenter.default.addObserver(self, selector: #selector(self.methodOfReceivedNotification(notification:)), name: Notification.Name(\"NotificationIdentifier\"), object: nil)\n    }\n\n    //MARK: Method for receiving Data through Post Notification \n    @objc func methodOfReceivedNotification(notification: Notification) {\n        print(\"Value of notification : \", notification.object ?? \"\")\n    }\n}\nimport UIKit\n\nclass ViewControllerB: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        //MARK:Set data for Passing Data through Post Notification\n        let objToBeSent = \"Test Message from Notification\"\n        NotificationCenter.default.post(name: Notification.Name(\"NotificationIdentifier\"), object: objToBeSent)\n    }\n}\n : Step 1. Declare block in ViewControllerBvar authorizationCompletionBlock:((Bool)->())? = {_ in}Step 2. Set data in block in ViewControllerBif authorizationCompletionBlock != nil\n        {\n            authorizationCompletionBlock!(true)\n        }\nStep 3. Receive block data in ViewControllerA//Receiver Block\n                controller!.authorizationCompletionBlock = { isGranted in\n                    print(\"Data received from Block is :\", isGranted)\n                }\nSo Here is the complete code for : import UIKit\n\nclass ViewControllerA: UIViewController  {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    //MARK:Method for receiving Data through Block\n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if (segue.identifier == \"showDetailSegue\") {\n                let controller = segue.destination as? ViewControllerB\n                controller?.isSomethingEnabled = true\n\n                //Receiver Block\n                controller!.authorizationCompletionBlock = { isGranted in\n                    print(\"Data received from Block is :\", isGranted)\n                }\n            }\n        }\n}\nimport UIKit\n\nclass ViewControllerB: UIViewController {\n\n    //MARK:Variable for Passing Data through Block\n    var authorizationCompletionBlock:((Bool)->())? = {_ in}\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        //MARK:Set data for Passing Data through Block\n        if authorizationCompletionBlock != nil\n        {\n            authorizationCompletionBlock!(true)\n        }\n    }\n}\n Please let me know if you have any question(s) on this.", "In my case I used a singleton class which can work as a global object allowing accesses to the data from almost everywhere in the app. First thing is to build a singleton class. Please refer to the page,\"  \"\nAnd what I did to make the object globally accessible was simply import it in appName_Prefix.pch which is for applying import statement in every classes.\nTo access this object and to use, I simply implemented class method to return the shared instance, which contains its own variables", "For example: FirstViewController String value asStrFirstValue = @\"first\";\nso we can pass this value in second class using below step1>We need to crate string object in SecondViewController.h fileNSString *strValue;\n2>Need to declare property as below below declaration in .h file @property (strong, nonatomic)  NSString *strSecondValue;\n3>Need synthesize that value in FirstViewController.m file below header declaration@synthesize strValue;\nand in FirstViewController.h :@property (strong, nonatomic)  NSString *strValue;\n4>In FirstViewController,From which method we navigate to second view please write below code in that method. SecondViewController *secondView= [[SecondViewController alloc]     \ninitWithNibName:@\"SecondViewController \" bundle:[NSBundle MainBundle]];\n\n[secondView setStrSecondValue:StrFirstValue];\n\n[self.navigationController pushViewController:secondView animated:YES ];\n", "I am currently contributing to an open source solution to this problem through a project called MCViewFactory, which may be found here:The idea is imitate Android's intent paradigm, using a global factory to manage which view you are looking at and using \"intents\" to switch and pass data between views. All the documentation is on the github page, but here are some highlights:You setup all your views in .XIB files and register them in the app delegate, while initializing the factory.// Register activities\n\nMCViewFactory *factory = [MCViewFactory sharedFactory];\n\n// the following two lines are optional. \n[factory registerView:@\"YourSectionViewController\"]; \nNow, in your VC, anytime you want to move to a new VC and pass data, you create a new intent and add data to its dictionary (savedInstanceState). Then, just set the current intent of factory:MCIntent* intent = [MCIntent intentWithSectionName:@\"YourSectionViewController\"];\n[intent setAnimationStyle:UIViewAnimationOptionTransitionFlipFromLeft];\n[[intent savedInstanceState] setObject:@\"someValue\" forKey:@\"yourKey\"];\n[[intent savedInstanceState] setObject:@\"anotherValue\" forKey:@\"anotherKey\"];\n// ...\n[[MCViewModel sharedModel] setCurrentSection:intent];\nAll of your views that conform to this need to be subclasses of MCViewController, which allow you to override the new onResume: method, allowing you access to the data you've passed in.-(void)onResume:(MCIntent *)intent {\n    NSObject* someValue = [intent.savedInstanceState objectForKey:@\"yourKey\"];\n    NSObject* anotherValue = [intent.savedInstanceState objectForKey:@\"anotherKey\"];\n\n    // ...\n\n    // ensure the following line is called, especially for MCSectionViewController\n    [super onResume:intent];\n}\nHope some of you find this solution useful/interesting.  ", "Create the property on next view controller .h and define getter and setter.Add this property in NextVC.h on nextVC@property (strong, nonatomic) NSString *indexNumber;\nAdd @synthesize  indexNumber;           in NextVC.mAnd lastNextVC *vc=[[NextVC alloc]init];\n\nvc.indexNumber=@\"123\";\n\n[self.navigationController vc animated:YES];\n", "There are tons of ways to do this and it's important to pick the right one. Probably one of the biggest architectural decisions lies on how the model code will be shared or accessed throughout the app.I wrote a blog post about this a while back: . Here's a brief summary:One approach is to share pointers to the model objects between view controllers. \n\n\nSince prepare for segue is the most common here is an example:override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {\n    var next = segue.destinationViewController as NextViewController\n    next.dataSource = dataSource\n}\nAnother approach is to handle a screen full of data at a time and instead of coupling the view controllers to each other couple each view controller to single data source that they can get to independently. The most common way I've seen this done is a  instance. So if your singleton object was DataAccess you could do the following in the viewDidLoad method of UIViewController:func viewDidLoad() {\n    super.viewDidLoad()\n    var data = dataAccess.requestData()\n}\nThere are addition tools that also help pass along data:\n\n\n\n\n\nThe nice thing about Core Data is that it has inverse relationships. So if you want to just give a NotesViewController the notes object you can because it'll have an inverse relationship to something else like the notebook. If you need data on the notebook in the NotesViewController you can walk back up the object graph by doing the following:let notebookName = note.notebook.name\nRead more about this in my blog post: ", "- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n{\n  [tbl_View deselectRowAtIndexPath:indexPath animated:YES];\n  News *newsObj = [newstitleArr objectAtIndex:indexPath.row];\n  NewsDetailViewController *newsDetailView = [[NewsDetailViewController alloc] initWithNibName:@\"NewsDetailViewController\" bundle:nil];\n\n  newsDetailView.newsHeadlineStr = newsObj.newsHeadline;\n\n  [self.navigationController pushViewController:newsDetailView animated:YES];\n}\n@interface NewsDetailViewController : UIViewController\n@property(nonatomic,retain) NSString *newsHeadlineStr;\n@end\n@synthesize newsHeadlineStr;\n", "Delegation is the only one solution to perform such operations when you are using .xib files however all answers described above are for storyboard for .xibs files you need to use delegation. that's only solution you can. Another solution is use singleton class pattern initialize it once and use it in your entire app.  ", "if you wants to pass data from ViewControlerOne to ViewControllerTwo try these.. do these in ViewControlerOne.h @property (nonatomic, strong) NSString *str1;\ndo these in ViewControllerTwo.h @property (nonatomic, strong) NSString *str2;\nSynthesize str2 in ViewControllerTwo.m@interface ViewControllerTwo ()\n@end\n@implementation ViewControllerTwo\n@synthesize str2;\ndo these in ViewControlerOne.m - (void)viewDidLoad\n {\n   [super viewDidLoad];\n\n  // Data or string you wants to pass in ViewControllerTwo..\n  self.str1 = @\"hello world\";\n\n }\non the buttons click event do this..-(IBAction)ButtonClicked\n{ //Navigation on buttons click event from ViewControlerOne to ViewControlerTwo with transferring data or string..\n  ViewControllerTwo *objViewTwo=[self.storyboard instantiateViewControllerWithIdentifier:@\"ViewControllerTwo\"];\n  obj.str2=str1;\n  [self.navigationController pushViewController: objViewTwo animated:YES];\n}\ndo these in ViewControllerTwo.m- (void)viewDidLoad\n{\n [super viewDidLoad];\n  NSLog(@\"%@\",str2);\n}\n", "You can save data in App delegate to access it across view controllers in your application. All you have to do is create a shared instance of app delegateAppDelegate *appDelegate = (AppDelegate *)[UIApplication sharedApplication].delegate;\nif you declare a NSArray object *arrayXYZ then you can access it in any view controller by appDelegate.arrayXYZ", "If you want to send data from one to another viewController, here's a way to it:Say we have viewControllers: ViewController and NewViewController.in ViewController.h#import <UIKit/UIKit.h>\n\n@interface ViewController : UIViewController\n{\n    IBOutlet UITextField *mytext1,*mytext2,*mytext3,*mytext4;\n}\n\n@property (nonatomic,retain) IBOutlet UITextField *mytext1,*mytext2,*mytext3,*mytext4;\n\n-(IBAction)goToNextScreen:(id)sender;\n\n@end\nin ViewController.m#import \"ViewController.h\"\n\n#import \"NewViewController.h\"\n\n@implementation ViewController\n@synthesize mytext1,mytext2,mytext3,mytext4;\n\n-(IBAction)goToNextScreen:(id)sender\n{\n    NSArray *arr = [NSArray arrayWithObjects:mytext1.text,mytext2.text,mytext3.text,mytext4.text, nil];\n\n\n    NewViewController *newVc = [[NewViewController alloc] initWithNibName:@\"NewViewController\" bundle:nil];\n\n    newVc.arrayList = arr;\n\n    [self.navigationController pushViewController:newVc animated:YES];\n\n}\nIn NewViewController.h#import <UIKit/UIKit.h>\n\n@interface NewViewController : UITableViewController\n{\n    NSArray *arrayList;\n\n    NSString *name,*age,*dob,*mobile;\n\n}\n\n@property(nonatomic, retain)NSArray *arrayList;\n\n@end\nIn NewViewController.m#import \"NewViewController.h\"\n\n#import \"ViewController.h\"\n\n@implementation NewViewController\n@synthesize arrayList;\n\n#pragma mark - Table view data source\n\n- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView\n{\n\n    // Return the number of sections.\n    return 1;\n}\n\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n{\n\n    // Return the number of rows in the section.\n    return [arrayList count];\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    static NSString *CellIdentifier = @\"Cell\";\n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];\n    if (cell == nil)\n    {\n         cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];      \n    }\n    // Configure the cell...\n    cell.textLabel.text = [arrayList objectAtIndex:indexPath.row];\n    return cell;\n\n\n}\n\n@end\nSo this way we can pass the data from one viewcontroller to another view controller...", "I like the idea of Model objects and Mock objects based on NSProxy to commit or discard data if what user selects can be cancelled. It's easy to pass data around since it's single object or couple of objects and if you have let's say UINavigationController controller, you can keep the reference to model inside and all pushed view controllers can access it directly from navigation controller.", "I have seen a lot of people over complicating this using the didSelectRowAtPath method. I am using Core Data in my example.- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{\n\n    //this solution is for using Core Data\n    YourCDEntityName * value = (YourCDEntityName *)[[self fetchedResultsController] objectAtIndexPath: indexPath];\n\n    YourSecondViewController * details = [self.storyboard instantiateViewControllerWithIdentifier:@\"nameOfYourSecondVC\"];//make sure in storyboards you give your second VC an identifier\n\n    //Make sure you declare your value in the second view controller\n    details.selectedValue = value;\n\n    //Now that you have said to pass value all you need to do is change views\n    [self.navigationController pushViewController: details animated:YES];\n\n}\n4 lines of code inside the method and you are done. ", "Think of @EnvironmentObject as a smarter, simpler way of using @ObservedObject on lots of views. Rather than creating some data in view A, then passing it to view B, then view C, then view D before finally using it, you can create it in view and put it into the environment so that views B, C, and D will automatically have access to it.Note: Environment objects must be supplied by an ancestor view \u2013 if  can\u2019t find an environment object of the correct type you\u2019ll get a crash. This applies for previews too, so be careful.As an example, here\u2019s an observable object that stores user settings:class UserSettings: ObservableObject {\n     @Published var score = 0\n}\n"]}
{"index":{"_id":5}}
{"question": "How to remove items from a list while iterating?", "details": "I'm iterating over a list of tuples in Python, and am attempting to remove them if they meet certain criteria. for tup in somelist:\n    if determine(tup):\n         code_to_remove_tup\nWhat should I use in place of code_to_remove_tup? I can't figure out how to remove the item in this fashion.", "answers": ["I'm iterating over a list of tuples in Python, and am attempting to remove them if they meet certain criteria. for tup in somelist:\n    if determine(tup):\n         code_to_remove_tup\nWhat should I use in place of code_to_remove_tup? I can't figure out how to remove the item in this fashion.", "You can use a list comprehension to create a new list containing only the elements you don't want to remove:somelist = [x for x in somelist if not determine(x)]\nOr, by assigning to the slice somelist[:], you can mutate the existing list to contain only the items you want:somelist[:] = [x for x in somelist if not determine(x)]\nThis approach could be useful if there are other references to somelist that need to reflect the changes.Instead of a comprehension, you could also use itertools. In Python 2:from itertools import ifilterfalse\nsomelist[:] = ifilterfalse(determine, somelist)\nOr in Python 3:from itertools import filterfalse\nsomelist[:] = filterfalse(determine, somelist)\nFor the sake of clarity and for those who find the use of the [:] notation hackish or fuzzy, here's a more explicit alternative. Theoretically, it should perform the same with regards to space and time than the one-liners above.temp = []\nwhile somelist:\n    x = somelist.pop()\n    if not determine(x):\n        temp.append(x)\nwhile temp:\n    somelist.append(templist.pop())\nIt also works in other languages that may not have the  ability of Python lists, with minimal modifications. For instance, not all languages cast empty lists to a False as Python does. You can substitute while somelist: for something more explicit like while len(somelist) > 0:. ", "The answers suggesting list comprehensions are ALMOST correct -- except that they build a completely new list and then give it the same name the old list as, they do NOT modify the old list in place. That's different from what you'd be doing by selective removal, as in  -- it's faster, but if your list is accessed via multiple references the fact that you're just reseating one of the references and NOT altering the list object itself can lead to subtle, disastrous bugs.Fortunately, it's extremely easy to get both the speed of list comprehensions AND the required semantics of in-place alteration -- just code:somelist[:] = [tup for tup in somelist if determine(tup)]\nNote the subtle difference with other answers: this one is NOT assigning to a barename - it's assigning to a list slice that just happens to be the entire list, thereby replacing the list  , rather than just reseating one reference (from previous list object to new list object) like the other answers.", "You need to take a copy of the list and iterate over it first, or the iteration will fail with what may be unexpected results.For example (depends on what type of list):for tup in somelist[:]:\n    etc....\nAn example:>>> somelist = range(10)\n>>> for x in somelist:\n...     somelist.remove(x)\n>>> somelist\n[1, 3, 5, 7, 9]\n\n>>> somelist = range(10)\n>>> for x in somelist[:]:\n...     somelist.remove(x)\n>>> somelist\n[]\n", "for i in range(len(somelist) - 1, -1, -1):\n    if some_condition(somelist, i):\n        del somelist[i]\nYou need to go backwards otherwise it's a bit like sawing off the tree-branch that you are sitting on :-)Python 2 users: replace range by xrange to avoid creating a hardcoded list", "Either:\nuse a linked list implementation/roll your own.A linked list is the proper data structure to support efficient item removal, and does not force you to make space/time tradeoffs.A CPython list is implemented with  as , which is not a good data type to support removals.There doesn't seem to be a linked list in the standard library however:\n\n\n\nstart a new list() from scratch, and .append() back at the end as mentioned at: This time efficient, but less space efficient because it keeps an extra copy of the array around during iteration.\nuse del with an index as mentioned at: This is more space efficient since it dispenses the array copy, but it is less time efficient, because removal from dynamic arrays requires shifting all following items back by one, which is O(N).\nGenerally, if you are doing it quick and dirty and don't want to add a custom LinkedList class, you just want to go for the faster .append() option by default unless memory is a big concern.This part of the docs makes it clear that:\n\n[:]\nIf you need to modify the sequence you are iterating over while inside the loop (for example to duplicate selected items), it is recommended that you first make a copy. Iterating over a sequence does not implicitly make a copy. The slice notation makes this especially convenient:>>> words = ['cat', 'window', 'defenestrate']\n>>> for w in words[:]:  # Loop over a slice copy of the entire list.\n...     if len(w) > 6:\n...         words.insert(0, w)\n...\n>>> words\n['defenestrate', 'cat', 'window', 'defenestrate']\nThis part of the docs says once again that you have to make a copy, and gives an actual removal example:Note: There is a subtlety when the sequence is being modified by the loop (this can only occur for mutable sequences, i.e. lists). An internal counter is used to keep track of which item is used next, and this is incremented on each iteration. When this counter has reached the length of the sequence the loop terminates. This means that if the suite deletes the current (or a previous) item from the sequence, the next item will be skipped (since it gets the index of the current item which has already been treated). Likewise, if the suite inserts an item in the sequence before the current item, the current item will be treated again the next time through the loop. This can lead to nasty bugs that can be avoided by making a temporary copy using a slice of the whole sequence, e.g.,for x in a[:]:\n    if x < 0: a.remove(x)\nHowever, I disagree with this implementation, since .remove() has to iterate the  to find the value.It seems like this particular Python API could be improved. Compare it, for instance, with:\n\nstd::vector::erase\nboth of which make it crystal clear that you cannot modify a list being iterated except with the iterator itself, and gives you efficient ways to do so without copying the list.Perhaps the underlying rationale is that Python lists are assumed to be dynamic array backed, and therefore any type of removal will be time inefficient anyways, while Java has a nicer interface hierarchy with both ArrayList and LinkedList implementations of ListIterator.There doesn't seem to be an explicit linked list type in the Python stdlib either: ", "Your best approach for such an example would be a somelist = [tup for tup in somelist if determine(tup)]\nIn cases where you're doing something more complex than calling a determine function, I prefer constructing a new list and simply appending to it as I go.  For examplenewlist = []\nfor tup in somelist:\n    # lots of code here, possibly setting things up for calling determine\n    if determine(tup):\n        newlist.append(tup)\nsomelist = newlist\nCopying the list using remove might make your code look a little cleaner, as described in one of the answers below.  You should definitely not do this for extremely large lists, since this involves first copying the entire list, and also performing an O(n) remove operation for each element being removed, making this an O(n^2) algorithm.for tup in somelist[:]:\n    # lots of code here, possibly setting things up for calling determine\n    if determine(tup):\n        newlist.append(tup)\n", "For those that like functional programming:somelist[:] = filter(lambda tup: not determine(tup), somelist)\norfrom itertools import ifilterfalse\nsomelist[:] = list(ifilterfalse(determine, somelist))\n", "I needed to do this with a huge list, and duplicating the list seemed expensive, especially since in my case the number of deletions would be few compared to the items that remain. I took this low-level approach.array = [lots of stuff]\narraySize = len(array)\ni = 0\nwhile i < arraySize:\n    if someTest(array[i]):\n        del array[i]\n        arraySize -= 1\n    else:\n        i += 1\nWhat I don't know is how efficient a couple of deletes are compared to copying a large list. Please comment if you have any insight.", "It might be smart to also just create a new list if the current list item meets the desired criteria. so:for item in originalList:\n   if (item != badValue):\n        newList.append(item)\nand to avoid having to re-code the entire project with the new lists name:originalList[:] = newList\nnote, from Python documentation: copy.copy(x) \n  Return a shallow copy of x.copy.deepcopy(x) \n  Return a deep copy of x.", "This answer was originally written in response to a question which has since been marked as duplicate:\nThere are two problems in your code:1) When using remove(), you attempt to remove integers whereas you need to remove a tuple.2) The for loop will skip items in your list.Let's run through what happens when we execute your code:>>> L1 = [(1,2), (5,6), (-1,-2), (1,-2)]\n>>> for (a,b) in L1:\n...   if a < 0 or b < 0:\n...     L1.remove(a,b)\n... \nTraceback (most recent call last):\n  File \"<stdin>\", line 3, in <module>\nTypeError: remove() takes exactly one argument (2 given)\nThe first problem is that you are passing both 'a' and 'b' to remove(), but remove() only accepts a single argument. So how can we get remove() to work properly with your list? We need to figure out what each element of your list is. In this case, each one is a tuple. To see this, let's access one element of the list (indexing starts at 0):>>> L1[1]\n(5, 6)\n>>> type(L1[1])\n<type 'tuple'>\nAha! Each element of L1 is actually a tuple. So that's what we need to be passing to remove(). Tuples in python are very easy, they're simply made by enclosing values in parentheses. \"a, b\" is not a tuple, but \"(a, b)\" is a tuple. So we modify your code and run it again:# The remove line now includes an extra \"()\" to make a tuple out of \"a,b\"\nL1.remove((a,b))\nThis code runs without any error, but let's look at the list it outputs: L1 is now: [(1, 2), (5, 6), (1, -2)]\nWhy is (1,-2) still in your list? It turns out modifying the list while using a loop to iterate over it is a very bad idea without special care. The reason that (1, -2) remains in the list is that the locations of each item within the list changed between iterations of the for loop. Let's look at what happens if we feed the above code a longer list:L1 = [(1,2),(5,6),(-1,-2),(1,-2),(3,4),(5,7),(-4,4),(2,1),(-3,-3),(5,-1),(0,6)]\n### Outputs:\nL1 is now: [(1, 2), (5, 6), (1, -2), (3, 4), (5, 7), (2, 1), (5, -1), (0, 6)]\nAs you can infer from that result, every time that the conditional statement evaluates to true and a list item is removed, the next iteration of the loop will skip evaluation of the next item in the list because its values are now located at different indices.The most intuitive solution is to copy the list, then iterate over the original list and only modify the copy. You can try doing so like this:L2 = L1\nfor (a,b) in L1:\n    if a < 0 or b < 0 :\n        L2.remove((a,b))\n# Now, remove the original copy of L1 and replace with L2\nprint L2 is L1\ndel L1\nL1 = L2; del L2\nprint (\"L1 is now: \", L1)\nHowever, the output will be identical to before:'L1 is now: ', [(1, 2), (5, 6), (1, -2), (3, 4), (5, 7), (2, 1), (5, -1), (0, 6)]\nThis is because when we created L2, python did not actually create a new object. Instead, it merely referenced L2 to the same object as L1. We can verify this with 'is' which is different from merely \"equals\" (==).>>> L2=L1\n>>> L1 is L2\nTrue\nWe can make a true copy using copy.copy(). Then everything works as expected:import copy\nL1 = [(1,2), (5,6),(-1,-2), (1,-2),(3,4),(5,7),(-4,4),(2,1),(-3,-3),(5,-1),(0,6)]\nL2 = copy.copy(L1)\nfor (a,b) in L1:\n    if a < 0 or b < 0 :\n        L2.remove((a,b))\n# Now, remove the original copy of L1 and replace with L2\ndel L1\nL1 = L2; del L2\n>>> L1 is now: [(1, 2), (5, 6), (3, 4), (5, 7), (2, 1), (0, 6)]\nFinally, there is one cleaner solution than having to make an entirely new copy of L1. The reversed() function:L1 = [(1,2), (5,6),(-1,-2), (1,-2),(3,4),(5,7),(-4,4),(2,1),(-3,-3),(5,-1),(0,6)]\nfor (a,b) in reversed(L1):\n    if a < 0 or b < 0 :\n        L1.remove((a,b))\nprint (\"L1 is now: \", L1)\n>>> L1 is now: [(1, 2), (5, 6), (3, 4), (5, 7), (2, 1), (0, 6)]\nUnfortunately, I cannot adequately describe how reversed() works. It returns a 'listreverseiterator' object when a list is passed to it. For practical purposes, you can think of it as creating a reversed copy of its argument. This is the solution I recommend.", "If you want to do anything else during the iteration, it may be nice to get both the index (which guarantees you being able to reference it, for example if you have a list of dicts) and the actual list item contents.inlist = [{'field1':10, 'field2':20}, {'field1':30, 'field2':15}]    \nfor idx, i in enumerate(inlist):\n    do some stuff with i['field1']\n    if somecondition:\n        xlist.append(idx)\nfor i in reversed(xlist): del inlist[i]\nenumerate gives you access to the item and the index at once. reversed is so that the indices that you're going to later delete don't change on you. ", "Most of the answers here want you to create a copy of the list. I had a use case where the list was quite long (110K items) and it was smarter to keep reducing the list instead.First of all you'll need to ,i = 0\nwhile i < len(somelist):\n    if determine(somelist[i]):\n         del somelist[i]\n    else:\n        i += 1\nThe value of i is not changed in the if block because you'll want to get value of the new item FROM THE SAME INDEX, once the old item is deleted.", "You can try for-looping in reverse so for some_list you'll do something like:list_len = len(some_list)\nfor i in range(list_len):\n    reverse_i = list_len - 1 - i\n    cur = some_list[reverse_i]\n\n    # some logic with cur element\n\n    if some_condition:\n        some_list.pop(reverse_i)\nThis way the index is aligned and doesn't suffer from the list updates (regardless whether you pop cur element or not).", "You might want to use filter() available as the built-in.For more details ", "One possible solution, useful if you want not only remove some things, but also do something with all elements in a single loop:alist = ['good', 'bad', 'good', 'bad', 'good']\ni = 0\nfor x in alist[:]:\n    if x == 'bad':\n        alist.pop(i)\n        i -= 1\n    # do something cool with x or just print x\n    print(x)\n    i += 1\n", "for loop will be iterate through index..consider you have a list,[5, 7, 13, 29, 65, 91]\nyou have using list variable called lis. and you using same to remove..your variable lis = [5, 7, 13, 29, 35, 65, 91]\n       0  1   2   3   4   5   6\nduring 5th iteration,your  was not a prime so you removed it from a list.lis.remove(y)\nand then  move on to previous index.lis = [5, 7, 13, 29, 65, 91]\n       0  1   2   3   4   5\nso 4th iteration done pointer moved onto 5th.. thats why your loop doesnt cover 65 since its moved into previous index.so you shouldn't reference list into another variable which still reference original instead of copy.ite = lis #dont do it will reference instead copy\nso do copy of list using list[::]now you it will give,[5, 7, 13, 29]\nProblem is you removed a value from a list during iteration then your list index will collapse.so you can try comprehension instead.which supports all the iterable like, list, tuple, dict, string etc ", "I needed to do something similar and in my case the problem was memory - I needed to merge multiple dataset objects within a list, after doing some stuff with them, as a new object, and needed to get rid of each entry I was merging to avoid duplicating all of them and blowing up memory. In my case having the objects in a dictionary instead of a list worked fine:```k = range(5)\nv = ['a','b','c','d','e']\nd = {key:val for key,val in zip(k, v)}\n\nprint d\nfor i in range(5):\n    print d[i]\n    d.pop(i)\nprint d\n```", "TLDR:I wrote a library that allows you to do this:from fluidIter import FluidIterable\nfSomeList = FluidIterable(someList)  \nfor tup in fSomeList:\n    if determine(tup):\n        # remove 'tup' without \"breaking\" the iteration\n        fSomeList.remove(tup)\n        # tup has also been removed from 'someList'\n        # as well as 'fSomeList'\nIt's best to use another method if possible that doesn't require modifying your iterable while iterating over it, but for some algorithms it might not be that straight forward. And so if you are sure that you really do want the code pattern described in the original question, it is possible.Should work on all mutable sequences not just lists.Full answer:Edit: The last code example in this answer gives a use case for  you might sometimes want to modify a list in place rather than use a list comprehension. The first part of the answers serves as tutorial of  an array can be modified in place.The solution follows on from  answer (for a related question) from senderle. Which explains how the the array index is updated while iterating through a list that has been modified. The solution below is designed to correctly track the array index even if the list is modified.Download fluidIter.py from  https://github.com/alanbacon/FluidIterator, it is just a single file so no need to install git. There is no installer so you will need to make sure that the file is in the python path your self. The code has been written for python 3 and is untested on python 2.from fluidIter import FluidIterable\nl = [0,1,2,3,4,5,6,7,8]  \nfluidL = FluidIterable(l)                       \nfor i in fluidL:\n    print('initial state of list on this iteration: ' + str(fluidL)) \n    print('current iteration value: ' + str(i))\n    print('popped value: ' + str(fluidL.pop(2)))\n    print(' ')\n\nprint('Final List Value: ' + str(l))\nThis will produce the following output:initial state of list on this iteration: [0, 1, 2, 3, 4, 5, 6, 7, 8]\ncurrent iteration value: 0\npopped value: 2\n\ninitial state of list on this iteration: [0, 1, 3, 4, 5, 6, 7, 8]\ncurrent iteration value: 1\npopped value: 3\n\ninitial state of list on this iteration: [0, 1, 4, 5, 6, 7, 8]\ncurrent iteration value: 4\npopped value: 4\n\ninitial state of list on this iteration: [0, 1, 5, 6, 7, 8]\ncurrent iteration value: 5\npopped value: 5\n\ninitial state of list on this iteration: [0, 1, 6, 7, 8]\ncurrent iteration value: 6\npopped value: 6\n\ninitial state of list on this iteration: [0, 1, 7, 8]\ncurrent iteration value: 7\npopped value: 7\n\ninitial state of list on this iteration: [0, 1, 8]\ncurrent iteration value: 8\npopped value: 8\n\nFinal List Value: [0, 1]\nAbove we have used the pop method on the fluid list object. Other common iterable methods are also implemented such as del fluidL[i], .remove, .insert, .append, .extend. The list can also be modified using slices (sort and reverse methods are not implemented).The only condition is that you must only modify the list in place, if at any point fluidL or l were reassigned to a different list object the code would not work. The original fluidL object would still be used by the for loop but would become out of scope for us to modify.i.e.fluidL[2] = 'a'   # is OK\nfluidL = [0, 1, 'a', 3, 4, 5, 6, 7, 8]  # is not OK\nIf we want to access the current index value of the list we cannot use enumerate, as this only counts how many times the for loop has run. Instead we will use the iterator object directly.fluidArr = FluidIterable([0,1,2,3])\n# get iterator first so can query the current index\nfluidArrIter = fluidArr.__iter__()\nfor i, v in enumerate(fluidArrIter):\n    print('enum: ', i)\n    print('current val: ', v)\n    print('current ind: ', fluidArrIter.currentIndex)\n    print(fluidArr)\n    fluidArr.insert(0,'a')\n    print(' ')\n\nprint('Final List Value: ' + str(fluidArr))\nThis will output the following:enum:  0\ncurrent val:  0\ncurrent ind:  0\n[0, 1, 2, 3]\n\nenum:  1\ncurrent val:  1\ncurrent ind:  2\n['a', 0, 1, 2, 3]\n\nenum:  2\ncurrent val:  2\ncurrent ind:  4\n['a', 'a', 0, 1, 2, 3]\n\nenum:  3\ncurrent val:  3\ncurrent ind:  6\n['a', 'a', 'a', 0, 1, 2, 3]\n\nFinal List Value: ['a', 'a', 'a', 'a', 0, 1, 2, 3]\nThe FluidIterable class just provides a wrapper for the original list object. The original object can be accessed as a property of the fluid object like so:originalList = fluidArr.fixedIterable\nMore examples / tests can be found in the if __name__ is \"__main__\": section at the bottom of fluidIter.py. These are worth looking at because they explain what happens in various situations. Such as: Replacing a large sections of the list using a slice. Or using (and modifying) the same iterable in nested for loops.As I stated to start with: this is a complicated solution that will hurt the readability of your code and make it more difficult to debug. Therefore other solutions such as the list comprehensions mentioned in David Raznick's  should be considered first. That being said, I have found times where this class has been useful to me and has been easier to use than keeping track of the indices of elements that need deleting.Edit: As mentioned in the comments, this answer does not really present a problem for which this approach provides a solution. I will try to address that here:List comprehensions provide a way to generate a new list but these approaches tend to look at each element in isolation rather than the current state of the list as a whole.i.e.newList = [i for i in oldList if testFunc(i)]\nBut what if the result of the testFunc depends on the elements that have been added to newList already? Or the elements still in oldList that might be added next? There might still be a way to use a list comprehension but it will begin to lose it's elegance, and for me it feels easier to modify a list in place.The code below is one example of an algorithm that suffers from the above problem. The algorithm will reduce a list so that no element is a multiple of any other element.randInts = [70, 20, 61, 80, 54, 18, 7, 18, 55, 9]\nfRandInts = FluidIterable(randInts)\nfRandIntsIter = fRandInts.__iter__()\n# for each value in the list (outer loop)\n# test against every other value in the list (inner loop)\nfor i in fRandIntsIter:\n    print(' ')\n    print('outer val: ', i)\n    innerIntsIter = fRandInts.__iter__()\n    for j in innerIntsIter:\n        innerIndex = innerIntsIter.currentIndex\n        # skip the element that the outloop is currently on\n        # because we don't want to test a value against itself\n        if not innerIndex == fRandIntsIter.currentIndex:\n            # if the test element, j, is a multiple \n            # of the reference element, i, then remove 'j'\n            if j%i == 0:\n                print('remove val: ', j)\n                # remove element in place, without breaking the\n                # iteration of either loop\n                del fRandInts[innerIndex]\n            # end if multiple, then remove\n        # end if not the same value as outer loop\n    # end inner loop\n# end outerloop\n\nprint('')\nprint('final list: ', randInts)\nThe output and the final reduced list are shown belowouter val:  70\n\nouter val:  20\nremove val:  80\n\nouter val:  61\n\nouter val:  54\n\nouter val:  18\nremove val:  54\nremove val:  18\n\nouter val:  7\nremove val:  70\n\nouter val:  55\n\nouter val:  9\nremove val:  18\n\nfinal list:  [20, 61, 7, 55, 9]\n", "The other answers are correct that it is usually a bad idea to delete from a list that you're iterating. Reverse iterating avoids the pitfalls, but it is much more difficult to follow code that does that, so usually you're better off using a list comprehension or filter.There is, however, one case where it is safe to remove elements from a sequence that you are iterating: if you're only removing one item while you're iterating. This can be ensured using a return or a break. For example:for i, item in enumerate(lst):\n    if item % 4 == 0:\n        foo(item)\n        del lst[i]\n        break\nThis is often easier to understand than a list comprehension when you're doing some operations with side effects on the first item in a list that meets some condition and then removing that item from the list immediately after.", "The most effective method is list comprehension, many people show their case, of course, it is also a good way to get an iterator through filter.Filter receives a function and a sequence. Filter applies the passed function to each element in turn, and then decides whether to retain or discard the element depending on whether the function return value is True or False.There is an example  (get the odds in the tuple):list(filter(lambda x:x%2==1, (1, 2, 4, 5, 6, 9, 10, 15)))  \n# result: [1, 5, 9, 15]\n", "If you want to delete elements from a list while iterating, use a while-loop so you can alter the current index and end index after each deletion.Example:i = 0\nlength = len(list1)\n\nwhile i < length:\n    if condition:\n        list1.remove(list1[i])\n        i -= 1\n        length -= 1\n\n    i += 1\n", "In some situations, where you're doing more than simply filtering a list one item at time, you want your iteration to change while iterating.Here is an example where copying the list beforehand is incorrect, reverse iteration is impossible and a list comprehension is also not an option.\"\"\" Sieve of Eratosthenes \"\"\"\n\ndef generate_primes(n):\n    \"\"\" Generates all primes less than n. \"\"\"\n    primes = list(range(2,n))\n    idx = 0\n    while idx < len(primes):\n        p = primes[idx]\n        for multiple in range(p+p, n, p):\n            try:\n                primes.remove(multiple)\n            except ValueError:\n                pass #EAFP\n        idx += 1\n        yield p\n", "I can think of three approaches to solve your problem. As an example, I will create a random list of tuples somelist = [(1,2,3), (4,5,6), (3,6,6), (7,8,9), (15,0,0), (10,11,12)]. The condition that I choose is sum of elements of a tuple = 15. In the final list we will only have those tuples whose sum is not equal to 15.   Use the framework that you had suggested (where one fills in a code inside a for loop). I use a small code with del to delete a tuple that meets the said condition. However, this method will miss a tuple (which satisfies the said condition) if two consecutively placed tuples meet the given condition. for tup in somelist:\n    if ( sum(tup)==15 ): \n        del somelist[somelist.index(tup)]\n\nprint somelist\n>>> [(1, 2, 3), (3, 6, 6), (7, 8, 9), (10, 11, 12)]\n Construct a new list which contains elements (tuples) where the given condition is not met (this is the same thing as removing elements of list where the given condition is met). Following is the code for that:newlist1 = [somelist[tup] for tup in range(len(somelist)) if(sum(somelist[tup])!=15)]\n\nprint newlist1\n>>>[(1, 2, 3), (7, 8, 9), (10, 11, 12)]\n Find indices where the given condition is met, and then use remove elements (tuples) corresponding to those indices. Following is the code for that.indices = [i for i in range(len(somelist)) if(sum(somelist[i])==15)]\nnewlist2 = [tup for j, tup in enumerate(somelist) if j not in indices]\n\nprint newlist2\n>>>[(1, 2, 3), (7, 8, 9), (10, 11, 12)]\n. Method2 and method3 are more efficient than method1. I . For the aforementioned example, time(method1) : time(method2) : time(method3) = 1 : 1 : 1.7", "For anything that has the potential to be really big, I use the following. import numpy as np\n\norig_list = np.array([1, 2, 3, 4, 5, 100, 8, 13])\n\nremove_me = [100, 1]\n\ncleaned = np.delete(orig_list, remove_me)\nprint(cleaned)\nThat should be significantly faster than anything else. ", "If you will use the new list later, you can simply set the elem to None, and then judge it in the later loop, like thisfor i in li:\n    i = None\n\nfor elem in li:\n    if elem is None:\n        continue\nIn this way, you dont't need copy the list and it's easier to understand. ", "uppose a list of number and you want to remove all no which are divisible by 3,list_number =[i for i in range(100)]\nusing list comprehension,this will careate a new list and create new memory spacenew_list =[i for i in list_number if i%3!=0]\nusing lambda filter function, this will create resultant new list and consume memeory spacenew_list = list(filter(lambda x:x%3!=0, list_number))\nwithout consuming memory space for new list and modify existing listfor index, value in enumerate(list_number):\n    if list_number[index]%3==0:\n        list_number.remove(value)\n"]}
