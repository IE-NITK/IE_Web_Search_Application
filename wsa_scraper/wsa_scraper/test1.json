[
{"question": "List of lists changes reflected across sublists unexpectedly", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>I needed to create a list of lists in Python, so I typed the following:  </p>\n\n<pre><code>myList = [[1] * 4] * 3\n</code></pre>\n\n<p>The list looked like this:  </p>\n\n<pre><code>[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]  \n</code></pre>\n\n<p>Then I changed one of the innermost values:  </p>\n\n<pre><code>myList[0][0] = 5\n</code></pre>\n\n<p>Now my list looks like this:  </p>\n\n<pre><code>[[5, 1, 1, 1], [5, 1, 1, 1], [5, 1, 1, 1]]  \n</code></pre>\n\n<p>which is not what I wanted or expected. Can someone please explain what's going on, and how to get around it?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>When you write <code>[x]*3</code> you get, essentially, the list <code>[x, x, x]</code>. That is, a list with 3 references to the same <code>x</code>. When you then modify this single <code>x</code> it is visible via all three references to it:</p>\n\n<pre><code>x = [1] * 4\nl = [x] * 3\nprint(f\"id(x): {id(x)}\")\n# id(x): 140560897920048\nprint(\n    f\"id(l[0]): {id(l[0])}\\n\"\n    f\"id(l[1]): {id(l[1])}\\n\"\n    f\"id(l[2]): {id(l[2])}\"\n)\n# id(l[0]): 140560897920048\n# id(l[1]): 140560897920048\n# id(l[2]): 140560897920048\n\nx[0] = 42\nprint(f\"x: {x}\")\n# x: [42, 1, 1, 1]\nprint(f\"l: {l}\")\n# l: [[42, 1, 1, 1], [42, 1, 1, 1], [42, 1, 1, 1]]\n</code></pre>\n\n<p>To fix it, you need to make sure that you create a new list at each position. One way to do it is</p>\n\n<pre><code>[[1]*4 for _ in range(3)]\n</code></pre>\n\n<p>which will reevaluate <code>[1]*4</code> each time instead of evaluating it once and making 3 references to 1 list.</p>\n\n<hr>\n\n<p>You might wonder why <code>*</code> can't make independent objects the way the list comprehension does. That's because the multiplication operator <code>*</code> operates on objects, without seeing expressions. When you use <code>*</code> to multiply <code>[[1] * 4]</code> by 3, <code>*</code> only sees the 1-element list <code>[[1] * 4]</code> evaluates to, not the <code>[[1] * 4</code> expression text. <code>*</code> has no idea how to make copies of that element, no idea how to reevaluate <code>[[1] * 4]</code>, and no idea you even want copies, and in general, there might not even be a way to copy the element.</p>\n\n<p>The only option <code>*</code> has is to make new references to the existing sublist instead of trying to make new sublists. Anything else would be inconsistent or require major redesigning of fundamental language design decisions.</p>\n\n<p>In contrast, a list comprehension reevaluates the element expression on every iteration. <code>[[1] * 4 for n in range(3)]</code> reevaluates <code>[1] * 4</code> every time for the same reason <code>[x**2 for x in range(3)]</code> reevaluates <code>x**2</code> every time. Every evaluation of <code>[1] * 4</code> generates a new list, so the list comprehension does what you wanted.</p>\n\n<p>Incidentally, <code>[1] * 4</code> also doesn't copy the elements of <code>[1]</code>, but that doesn't matter, since integers are immutable. You can't do something like <code>1.value = 2</code> and turn a 1 into a 2.</p>\n    </div>", "total_vectors": [0.011150498874485493, -0.021597886458039284, 0.03035169281065464, -0.06322678923606873, 0.005661452189087868, 0.04757152125239372, 0.04374290257692337, 0.021907668560743332, -0.0406620018184185, 0.06099746748805046, -0.05233785882592201, 0.07425784319639206, -0.018788844347000122, -0.02216346375644207, 0.06519096344709396, 0.09174780547618866, 0.02281247265636921, 0.010797707363963127, 0.03785242140293121, 0.05235503986477852, 0.016106922179460526, -0.062480129301548004, -0.0004379014135338366, 0.029387466609477997, 0.012017223052680492, -0.00944098923355341, 0.06539340317249298, -0.022544728592038155, -0.053632475435733795, 0.005913967732340097, -0.03248566389083862, 0.04390285164117813, -0.03678480535745621, -0.05021387338638306, -0.009914522990584373, 0.013981861062347889, -0.02832837402820587, 0.015580553561449051, 0.011441447772085667, 0.010366174392402172, -0.005438439082354307, -0.034572191536426544, -0.03462892025709152, -0.0469108447432518, 0.0753096491098404, -0.030537180602550507, -0.049528125673532486, -0.0740966871380806, 0.06301004439592361, 0.010328413918614388, 0.017799433320760727, 0.011827883310616016, -0.0210068728774786, -0.018896853551268578, 0.03312639519572258, -0.059847209602594376, -0.013749443925917149, -0.024637848138809204, 0.026295950636267662, -0.005618765950202942, 0.006124371197074652, 0.038113370537757874, 0.02610727772116661, -0.041952840983867645, -0.001962143462151289, 0.05687262862920761, 0.03671957552433014, -0.050569746643304825, -0.07230519503355026, -0.0028326171450316906, 0.03721418231725693, 0.0743192508816719, 0.037403058260679245, 0.09297359734773636, 0.05663251504302025, 0.07271599024534225, 0.038478340953588486, 0.058737125247716904, -0.009154294617474079, 0.010644876398146152, 0.034936003386974335, -0.030436867848038673, -0.016405120491981506, 0.022219067439436913, 0.006788960192352533, -0.028959568589925766, 0.06848534941673279, 0.02998536266386509, -0.08862946927547455, 0.016009971499443054, -0.0560590997338295, 0.06869617104530334, 0.06297792494297028, 0.008138374425470829, -0.08387371152639389, 0.03756667673587799, 0.026414182037115097, 0.06415677815675735, -0.03764282166957855, -0.060908544808626175, 0.06003618240356445, 0.01633908972144127, -0.059491001069545746, -0.005984888877719641, 0.017990943044424057, 0.034290049225091934, -0.08567191660404205, 0.01912388950586319, 0.03788117691874504, 0.0013332540402188897, -0.02494526095688343, -0.0303242988884449, -0.03385579213500023, 0.0185648612678051, 0.07865575700998306, -0.03756888210773468, 0.00847778283059597, -0.07981181889772415, -0.015669092535972595, 0.019542213529348373, 0.06780973821878433, 0.005266438703984022, -0.021083490923047066, 0.02447698451578617, -0.04442929849028587, -0.03864533454179764, -0.06613481044769287, 0.01850852370262146, 0.0037113381549715996, -0.00016419688472524285, 0.0657692700624466, -0.0370539054274559, -0.01734897680580616, -0.07038295269012451, 0.018841907382011414, -0.03121182695031166, -0.025128668174147606, -0.04569017142057419, 0.01790647953748703, 0.04784410446882248, -0.0399390384554863, -0.051482975482940674, -0.001159601379185915, -0.02833026833832264, 0.05659777671098709, -0.05426187440752983, 0.03681027889251709, 0.0004076792683918029, -0.009118759073317051, -0.04958132281899452, -0.075193852186203, -0.051156070083379745, 0.007332487963140011, 0.024888593703508377, 0.05697467550635338, 0.040001899003982544, -0.04565814509987831, -0.07163100689649582, 0.0846281424164772, -0.006563802249729633, -0.08429672569036484, 0.021797997877001762, 0.03329268842935562, 0.04148951172828674, -0.018079109489917755, -0.07726438343524933, -0.018169961869716644, 0.060933616012334824, -0.01818837597966194, -0.023943744599819183, -0.021433912217617035, 0.023263903334736824, 0.08621224761009216, -0.04796665534377098, 0.056065429002046585, -0.041277606040239334, -0.07415657490491867, -0.0335727334022522, 0.06059038266539574, -0.008635791949927807, 0.08236290514469147, -0.01181005872786045, -0.048999615013599396, 0.0038971896283328533, 0.04537903890013695, -0.00554397888481617, 0.004747029393911362, 0.07399211823940277, 0.025671111419796944, 0.018376579508185387, 0.07049011439085007, 0.0040438296273350716, -0.011344925500452518, -0.027891213074326515, -0.023955587297677994, -0.0013877962483093143, -0.004528994206339121, 0.09263191372156143, 0.012638519518077374, -0.033422939479351044, 0.02002638950943947, 0.02175746113061905, -0.003560388693585992, 0.018064210191369057, 0.031907036900520325, 0.07058077305555344, -0.060217633843421936, -0.011339123360812664, -0.017320796847343445, -0.0020453499164432287, -0.016502372920513153, 0.06179603561758995, -0.03269365802407265, 0.003238451899960637, 0.005290073808282614, -0.0005698305321857333, 0.006508166901767254, 0.07531420141458511, -0.03637111186981201, -0.0303929653018713, 0.036146435886621475, -0.013018649071455002, -0.0494610033929348, 0.06150218844413757, 0.02037637308239937, -0.032779619097709656, 0.03510654345154762, -0.07628300040960312, 0.037269510328769684, 0.034817226231098175, -0.013311830349266529, 0.08442497998476028, -0.02024650201201439, -0.042914025485515594, 0.08519139885902405, 0.06949645280838013, 0.026473306119441986, 0.02310413122177124, 0.02581951767206192, 0.005148163065314293, -0.019710538908839226, -0.04941582307219505, 0.0236041322350502, 0.029045345261693, 0.0346062146127224, 0.0644403025507927, 0.04101186618208885, 0.07753075659275055, 0.08717700839042664, 0.06764478236436844, 0.06697205454111099, 0.04385463148355484, -0.0018176039448007941, -0.0841808095574379, 0.06280653923749924, 0.02195548079907894, -0.08608325570821762, -0.08682454377412796, -0.01307618711143732, -0.02365262620151043, -0.07512002438306808, -0.02663533389568329, 0.07868696004152298, -0.0018244626699015498, -0.007576688192784786, -0.00466338824480772, -0.0011992302024737, 0.025779958814382553, 0.04543110728263855, -0.03282414749264717, -0.08367272466421127, -0.016219420358538628, 0.06837848573923111, 0.02910917066037655, -0.05061522498726845, 0.05789201706647873, -0.066473089158535, -0.029949547722935677, 0.07374459505081177, 0.06581437587738037, 0.02622075565159321, 0.0011578331468626857, -0.02464766427874565, -0.06395113468170166, 0.03538213297724724, 0.006054753437638283, -0.047968149185180664, 0.02796768955886364, -0.01807609386742115, 0.010668902657926083, 0.043467797338962555, 0.031309325248003006, -0.052447445690631866, -0.05754600465297699, -0.03699910268187523, 0.07556886225938797, 0.04249238967895508, -0.06789273023605347, -0.007850425317883492, 0.04446762427687645, -0.01729477383196354, 0.006205751094967127, 0.062355928122997284, 0.01798289828002453, -0.04482491686940193, -0.026678945869207382, 0.01682525873184204, 0.013740929774940014, -0.0269332192838192, -0.07171425968408585, -0.06004343181848526, 0.04563210904598236, -0.08765939623117447, 0.05160865560173988, -0.06253127753734589, -0.015424779616296291, -0.03471258282661438, -0.0014720424078404903, 0.005582711659371853, 0.05959014967083931, 0.0548049733042717, -0.04101017862558365, 0.05528330057859421, -0.0014953573700040579, 0.041400134563446045, -0.06744346022605896, -0.004969386383891106, -0.04508334398269653, 0.025172360241413116, 0.01478474773466587, 0.007186217233538628, -0.055096935480833054, 0.001939033973030746, -0.08854760974645615, -0.025355996564030647, -0.05835165083408356, -0.03943033516407013, 0.056487683206796646, 0.048166483640670776, 0.023504741489887238, 0.003421979956328869, 0.03483179584145546, 0.007015622686594725, -0.047849684953689575, -0.09341605007648468, 0.025255179032683372, -0.02171802520751953, -0.02977524884045124, 0.025617258623242378, -0.03850391507148743, 0.007790642324835062, 0.02998638153076172, -0.04329017922282219, -0.040308937430381775, 0.062020443379879, 0.04368267208337784, -0.08859425038099289, 0.021788736805319786, -0.006806196179240942, -0.07457897067070007, 0.06221958249807358, 0.022079801186919212, -0.09149864315986633, -0.02588776685297489, -0.015300213359296322, 0.03785775229334831, 0.03806423768401146, 0.06963879615068436, 0.016252931207418442, 0.04564972594380379, 0.06304224580526352, -0.07314358651638031, -0.04099654033780098, 0.08179410547018051, -0.06459295004606247, -0.05969000980257988, 0.04102504253387451, 0.027323488146066666, -0.004469343926757574, -0.007604118902236223, 0.016052430495619774, 0.029073897749185562, 0.020525479689240456, -0.07128765434026718, 0.045919980853796005, 0.06290716677904129, 0.06523048877716064, 0.025830848142504692, -0.0731348767876625, -0.020844994112849236, -0.03256796672940254, -0.0011797122424468398, -0.08510978519916534, 0.05004894360899925, -0.06295277178287506, 0.0424116887152195, -0.01507227960973978, 0.03656305372714996, -0.0508747473359108, -0.01514986902475357, 0.003237817669287324, -0.03562634810805321, -0.034187670797109604, 0.03666822239756584, -0.023902086541056633, 0.0235353484749794, -0.07475117594003677, -0.016084065660834312, -0.019735215231776237, 0.06721162050962448, -0.030885061249136925, 0.058280833065509796, 0.0334460474550724, 0.023940250277519226, -0.00830980483442545, 0.024720143526792526, -0.03939935937523842, 0.034341249614953995, 0.04695256054401398, 0.048802927136421204, 0.0029192003421485424, -0.03240833431482315, -0.004671081434935331, 0.030323419719934464, -0.001864820602349937, 0.030622759833931923, -0.01774095930159092, 0.08481214195489883, -0.06781035661697388, 0.06784266233444214, -0.0402967631816864, -0.00012103503831895068, 0.021208524703979492, -0.0013540696818381548, -0.011123367585241795, 1.903105658129789e-05, -0.011353245936334133, 0.05248361453413963, -0.024600248783826828, -0.049930717796087265, 0.04390242323279381, 0.03380931168794632, 0.03543269634246826, -0.015577644109725952, 0.03315512463450432, 0.07250067591667175, 0.004811940249055624, -0.05489472672343254, -0.027209697291254997, -0.05886807292699814, -0.03213069587945938, 0.023422636091709137, 0.09135337173938751, 0.05277792736887932, 0.062152761965990067, 0.033579472452402115, -0.0029850713908672333, 0.03375784680247307, -0.02700006775557995, -0.010305932722985744, 0.002057502279058099, 0.09208019822835922, 0.051935967057943344, 0.0694684386253357, -0.050825413316488266, -0.09221971035003662, 0.0024656574241816998, -0.032115474343299866, 0.03969452902674675, -0.04383949562907219, 0.06747924536466599, 0.04969174042344093, 0.028880557045340538, -0.030486643314361572, -0.01317090354859829, -0.055840373039245605, -0.05616147443652153, 0.0020413026213645935, -0.02095945179462433, -0.027390576899051666, 0.022091329097747803, -0.010832865722477436, -0.05201459303498268, 0.042900148779153824, -0.06698580831289291, 0.021465012803673744, 0.0052484069019556046, -0.007703382987529039, 0.019744735211133957, 0.047790758311748505, -0.07897152006626129, -6.33277086308226e-05, 0.045989152044057846, 0.035546980798244476, -0.00856360699981451, 0.0065928613767027855, 0.05340173840522766, -0.04279136285185814, -0.020388592034578323, 0.013696199283003807, 0.01874009147286415, -0.008258786052465439, -0.008222362026572227, -0.019129198044538498, 0.001784765045158565, -0.028894895687699318, -0.03711558133363724, 0.012349939905107021, 0.044593293219804764, 0.08935030549764633, -0.013394532725214958, 0.06712685525417328]},
{"question": "Are 'Arrow Functions' and 'Functions' equivalent / interchangeable?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>Arrow functions in ES2015 provide a more concise syntax. </p>\n\n<ul>\n<li>Can I replace all my function declarations / expressions with arrow functions now? </li>\n<li>What do I have to look out for?</li>\n</ul>\n\n<p>Examples:</p>\n\n<p>Constructor function</p>\n\n<pre><code>function User(name) {\n  this.name = name;\n}\n\n// vs\n\nconst User = name =&gt; {\n  this.name = name;\n};\n</code></pre>\n\n<p>Prototype methods</p>\n\n<pre><code>User.prototype.getName = function() {\n  return this.name;\n};\n\n// vs\n\nUser.prototype.getName = () =&gt; this.name;\n</code></pre>\n\n<p>Object (literal) methods</p>\n\n<pre><code>const obj = {\n  getName: function() {\n    // ...\n  }\n};\n\n// vs\n\nconst obj = {\n  getName: () =&gt; {\n    // ...\n  }\n};\n</code></pre>\n\n<p>Callbacks</p>\n\n<pre><code>setTimeout(function() {\n  // ...\n}, 500);\n\n// vs\n\nsetTimeout(() =&gt; {\n  // ...\n}, 500);\n</code></pre>\n\n<p>Variadic functions</p>\n\n<pre><code>function sum() {\n  let args = [].slice.call(arguments);\n  // ...\n}\n\n// vs\nconst sum = (...args) =&gt; {\n  // ...\n};\n</code></pre>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p><strong>tl;dr:</strong> <strong>No!</strong> Arrow functions and function declarations / expressions are not equivalent and cannot be replaced blindly.<br>\nIf the function you want to replace does <em>not</em> use <code>this</code>, <code>arguments</code> and is not called with <code>new</code>, then yes.</p>\n<hr>\n<p>As so often: <strong>it depends</strong>. Arrow functions have different behavior than function declarations / expressions, so let's have a look at the differences first:</p>\n<p><strong>1. Lexical <code>this</code> and <code>arguments</code></strong></p>\n<p>Arrow functions don't have their own <code>this</code> or <code>arguments</code> binding. Instead, those identifiers are resolved in the lexical scope like any other variable. That means that inside an arrow function, <code>this</code> and <code>arguments</code> refer to the values of <code>this</code> and <code>arguments</code> in the environment the arrow function is <em>defined</em> in (i.e. \"outside\" the arrow function):</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Example using a function expression\nfunction createObject() {\n  console.log('Inside `createObject`:', this.foo);\n  return {\n    foo: 42,\n    bar: function() {\n      console.log('Inside `bar`:', this.foo);\n    },\n  };\n}\n\ncreateObject.call({foo: 21}).bar(); // override `this` inside createObject</code></pre>\r\n</div>\r\n</div>\r\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Example using a arrow function\nfunction createObject() {\n  console.log('Inside `createObject`:', this.foo);\n  return {\n    foo: 42,\n    bar: () =&gt; console.log('Inside `bar`:', this.foo),\n  };\n}\n\ncreateObject.call({foo: 21}).bar(); // override `this` inside createObject</code></pre>\r\n</div>\r\n</div>\r\n\n<p>In the function expression case, <code>this</code> refers to the object that was created inside the <code>createObject</code>. In the arrow function case, <code>this</code> refers to <code>this</code> of <code>createObject</code> itself.</p>\n<p>This makes arrow functions useful if you need to access the <code>this</code> of the current environment:</p>\n<pre><code>// currently common pattern\nvar that = this;\ngetData(function(data) {\n  that.data = data;\n});\n\n// better alternative with arrow functions\ngetData(data =&gt; {\n  this.data = data;\n});\n</code></pre>\n<p><strong>Note</strong> that this also means that is <em>not</em> possible to set an arrow function's <code>this</code> with <code>.bind</code> or <code>.call</code>.</p>\n<p>If you are not very familiar with <code>this</code>, consider reading</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" rel=\"noreferrer\">MDN - this</a></li>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20&amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes\" rel=\"noreferrer\">YDKJS - this &amp; Object prototypes</a></li>\n</ul>\n<p><strong>2. Arrow functions cannot be called with <code>new</code></strong></p>\n<p>ES2015 distinguishes between functions that are <em>call</em>able and functions that are <em>construct</em>able. If a function is constructable, it can be called with  <code>new</code>, i.e. <code>new User()</code>. If a function is callable, it can be called without <code>new</code> (i.e. normal function call).</p>\n<p>Functions created through function declarations / expressions are both constructable and callable.<br>\nArrow functions (and methods) are only callable.\n<code>class</code> constructors are only constructable.</p>\n<p>If you are trying to call a non-callable function or to construct a non-constructable function, you will get a runtime error.</p>\n<hr>\n<p>Knowing this, we can state the following.</p>\n<p>Replaceable:</p>\n<ul>\n<li>Functions that don't use <code>this</code> or <code>arguments</code>.</li>\n<li>Functions that are used with <code>.bind(this)</code></li>\n</ul>\n<p><em>Not</em> replaceable:</p>\n<ul>\n<li>Constructor functions</li>\n<li>Function / methods added to a prototype (because they usually use <code>this</code>)</li>\n<li>Variadic functions (if they use <code>arguments</code> (see below))</li>\n</ul>\n<hr>\n<p>Lets have a closer look at this using your examples:</p>\n<p><strong>Constructor function</strong></p>\n<p>This won't work because arrow functions cannot be called with <code>new</code>. Keep using a function declaration / expression or use <code>class</code>.</p>\n<p><strong>Prototype methods</strong></p>\n<p>Most likely not, because prototype methods usually use <code>this</code> to access the instance. If they don't use <code>this</code>, then you can replace it. However, if you primarily care for concise syntax, use <code>class</code> with its concise method syntax:</p>\n<pre><code>class User {\n  constructor(name) {\n    this.name = name;\n  }\n  \n  getName() {\n    return this.name;\n  }\n}\n</code></pre>\n<p><strong>Object methods</strong></p>\n<p>Similarly for methods in an object literal. If the method wants to reference the object itself via <code>this</code>, keep using function expressions,  or use the new method syntax:</p>\n<pre><code>const obj = {\n  getName() {\n    // ...\n  },\n};\n</code></pre>\n<p><strong>Callbacks</strong></p>\n<p>It depends. You should definitely replace it if you are aliasing the outer <code>this</code> or are using <code>.bind(this)</code>:</p>\n<pre><code>// old\nsetTimeout(function() {\n  // ...\n}.bind(this), 500);\n\n// new\nsetTimeout(() =&gt; {\n  // ...\n}, 500);\n</code></pre>\n<p><strong>But:</strong> If the code which calls the callback explicitly sets <code>this</code> to a specific value, as is often the case with event handlers, especially with jQuery, and the callback uses <code>this</code> (or <code>arguments</code>), you <em>cannot</em> use an arrow function!</p>\n<p><strong>Variadic functions</strong></p>\n<p>Since arrow functions don't have their own <code>arguments</code>, you cannot simply replace them with an arrow  function. However, ES2015 introduces an alternative to using <code>arguments</code>: the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\" rel=\"noreferrer\">rest parameter</a>.</p>\n<pre><code>// old\nfunction sum() {\n  let args = [].slice.call(arguments);\n  // ...\n}\n\n// new\nconst sum = (...args) =&gt; {\n  // ...\n};\n</code></pre>\n<hr>\n<p>Related question:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/22939130/218196\">When should I use Arrow functions in ECMAScript 6?</a></li>\n<li><a href=\"https://stackoverflow.com/q/33288998/1048572\">Do ES6 arrow functions have their own arguments or not?</a></li>\n<li><a href=\"https://stackoverflow.com/q/32535110/1048572\">What are the differences (if any) between ES6 arrow functions and functions bound with Function.prototype.bind?</a></li>\n<li><a href=\"https://stackoverflow.com/q/31362292/1048572\">How to use arrow functions (public class fields) as class methods?</a></li>\n</ul>\n<p>Further resources:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" rel=\"noreferrer\">MDN - Arrow functions</a></li>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/es6%20&amp;%20beyond/ch2.md#arrow-functions\" rel=\"noreferrer\">YDKJS - Arrow functions</a></li>\n</ul>\n    </div>", "total_vectors": [0.0011235999409109354, -0.0711832121014595, -0.05783170834183693, 0.034104686230421066, 0.029101397842168808, 0.018520189449191093, -0.052567481994628906, 0.03387221321463585, -0.0542914979159832, 0.060730017721652985, -0.0036854140926152468, -0.06328237801790237, 0.0009515703422948718, 0.056489333510398865, 0.049142759293317795, 0.06464692950248718, -0.006776065565645695, 0.07694127410650253, -0.0004646084562409669, 0.04602394253015518, 0.06326911598443985, 0.05334386229515076, 0.03370587155222893, 0.02864193357527256, 0.006824221927672625, -0.020508354529738426, 0.052242461591959, 0.0721646249294281, 0.025378184393048286, 0.027537785470485687, -0.013336541131138802, 0.043620191514492035, 0.058659765869379044, -0.00925940927118063, -0.011291964910924435, -0.04100712388753891, 0.0662199929356575, 0.03854899853467941, -0.059497933834791183, 0.05151468515396118, 0.01178936567157507, -0.059517476707696915, 0.07768796384334564, -0.0009710842277854681, 0.06862235069274902, -0.04196206107735634, -0.059610847383737564, -0.057993609458208084, 0.033019669353961945, -0.032354436814785004, 0.04510871320962906, 0.08178703486919403, 0.07262960821390152, 0.019083721563220024, 0.026284610852599144, 0.06365393847227097, -0.008966243825852871, 0.025184020400047302, -0.04503118246793747, -0.06634725630283356, 0.03554099053144455, 0.07112212479114532, 0.0494893342256546, 0.019697487354278564, 0.038019854575395584, -0.0763666033744812, 0.0074606784619390965, 0.010666456073522568, 0.010354401543736458, -0.002333519048988819, 0.033615950495004654, 0.04829617217183113, 0.024361183866858482, -0.027218423783779144, 0.002301907865330577, -0.04998570308089256, -0.033137280493974686, -0.06591907888650894, -0.03600185364484787, 0.033471204340457916, 0.017877602949738503, -0.012620659545063972, 0.04703085124492645, 0.002292562508955598, 0.06107218563556671, -0.0007991644670255482, 0.07801295071840286, -0.07026928663253784, 0.017961876466870308, 0.07460742443799973, 0.0716426894068718, 0.02793516404926777, 0.00191280129365623, -0.018731605261564255, -0.05068191513419151, -0.010434555821120739, -0.01563609205186367, 0.022193793207406998, 0.02077571116387844, -0.07784555852413177, 0.018363507464528084, 0.028199143707752228, 0.029771702364087105, -0.052223242819309235, 0.05938113480806351, 0.07111193239688873, -0.07229790836572647, -0.015184929594397545, 0.07504715770483017, 0.036209382116794586, -0.06283574551343918, 0.04851154237985611, 0.053060971200466156, -0.017299994826316833, 0.05118285492062569, 0.013105514459311962, -0.04877106472849846, 0.044887520372867584, -0.05059115216135979, -0.0009806769667193294, -0.005358767230063677, -0.07578769326210022, 0.06133073940873146, 0.020678028464317322, 0.03658650442957878, -0.02823248691856861, -0.052225105464458466, -0.018860982730984688, 0.07435361295938492, -0.010829894803464413, -0.04945320263504982, 0.05595027282834053, -0.05661357566714287, 0.005119736772030592, 0.02399643510580063, 0.04950929060578346, 0.05903584137558937, -0.02675337716937065, -0.023743290454149246, 0.018652746453881264, 0.014207245782017708, -0.06383779644966125, -0.007584687788039446, 0.03790765628218651, -0.015228256583213806, -0.0823955237865448, 0.050740163773298264, 0.0038792232517153025, 0.06004966050386429, -0.0023650939110666513, -0.05464057996869087, -0.054716210812330246, -0.0748024582862854, -0.02161998674273491, -0.05631021782755852, 0.03276028484106064, 0.05581315979361534, -0.024415748193860054, 0.03108571656048298, 0.011129138991236687, 0.04367399215698242, -0.024593912065029144, 0.01080256886780262, 0.06218253821134567, -0.0036634046118706465, 0.04001105949282646, 0.005338016431778669, -0.00914168730378151, -0.0021466321777552366, 0.05536516383290291, 0.0463147908449173, 0.05816788226366043, 0.07774379104375839, -0.05391111224889755, -0.01658012717962265, -0.016377229243516922, -0.05504386126995087, -0.038878846913576126, 0.04485735669732094, 0.012828843668103218, -0.004092696588486433, 0.0036818322259932756, -0.0787152647972107, 0.03390263766050339, -0.03652874380350113, -0.046008143573999405, -0.02511407807469368, 0.07193450629711151, 0.04529174044728279, -0.009100242517888546, 0.05867224559187889, 0.06661578267812729, 0.032520975917577744, -0.022907540202140808, -0.048301104456186295, 0.01828860491514206, 0.011547195725142956, 0.08375578373670578, -0.020710432901978493, 0.052685532718896866, -0.0068557001650333405, -0.03851207718253136, -0.05662642791867256, -0.03633032739162445, -0.02145097777247429, 0.0029514527413994074, 0.07479105144739151, 0.057001955807209015, -0.07087445259094238, 0.014127331785857677, -0.023847663775086403, 0.016637956723570824, -0.0799819752573967, 0.01710023358464241, 0.0387410968542099, -0.008546998724341393, -0.04170849919319153, 0.018067307770252228, -0.018238408491015434, 0.06587348878383636, 0.05222676321864128, 0.02787037566304207, 0.003978624939918518, 0.05241822078824043, -0.03328365460038185, -0.044123634696006775, -0.040887895971536636, -0.04238360375165939, 0.04294036328792572, 0.024004856124520302, -0.011861184611916542, 0.0657925009727478, 0.01326647400856018, -0.02109627053141594, 0.055058661848306656, -0.07375095784664154, 0.06550642848014832, 0.030201224610209465, 0.04932911694049835, 0.02666592039167881, 0.035793859511613846, 0.04368693009018898, -0.08315940946340561, 0.028404029086232185, 0.051001109182834625, 0.02390298619866371, 0.07849401980638504, 0.006902594584971666, -0.08367813378572464, 0.06842288374900818, -0.04293863847851753, 0.029549242928624153, 0.026276983320713043, 0.002290282165631652, 0.034498486667871475, -0.022436125203967094, -0.06532083451747894, -0.056138668209314346, -0.036343470215797424, -0.059431251138448715, -0.0215471014380455, -0.013220755383372307, -0.07538070529699326, -0.006487029604613781, -0.0341864638030529, -0.04537661001086235, 0.008386930450797081, -0.08252786099910736, 0.047921016812324524, -0.05564709007740021, -0.014935565181076527, -0.07049708068370819, 0.0527668222784996, 0.043022315949201584, 0.05921323597431183, -0.031007833778858185, -0.05538848042488098, 0.02525278553366661, 0.07134618610143661, -0.058318037539720535, 0.04394145309925079, -0.03440191596746445, -0.0009224683744832873, 0.004727585706859827, 0.04645082727074623, -0.010107340291142464, 0.00898408330976963, 0.029836390167474747, -0.0518050380051136, 0.03282875940203667, -0.020819297060370445, -0.035765696316957474, 0.0006085919449105859, 0.03580784797668457, 0.02535938285291195, 0.06562197208404541, -0.041908688843250275, 0.004010453820228577, 0.058849409222602844, 0.07753965258598328, -0.0193018801510334, -0.03806516155600548, 0.05937282741069794, -0.009159645065665245, -0.02787144109606743, 0.008137233555316925, 0.020419275388121605, -0.052522189915180206, -0.03288616985082626, -0.0050635929219424725, 0.033319707959890366, -0.015297933481633663, 0.01746150478720665, 0.08168942481279373, 0.036346305161714554, -0.04667266458272934, -0.06329755485057831, 0.03549524396657944, 0.07550931721925735, -0.004231865983456373, 0.02499111369252205, -0.07863271981477737, -0.020677214488387108, 0.00026227920898236334, 0.024925826117396355, 0.012856661342084408, -0.010492156259715557, 0.07733400166034698, 0.04376896843314171, 0.06602943688631058, -0.03153027594089508, 0.0017831807490438223, 0.0023220954462885857, 0.04975351691246033, -0.05910365283489227, -0.025466999039053917, 0.029857682064175606, 0.06011134386062622, 0.06965647637844086, -0.05278000235557556, -0.04124903306365013, 0.03163931518793106, 0.06134302541613579, 0.0006044839974492788, -0.0836959034204483, 0.06654836237430573, 0.07413909584283829, 0.0028513483703136444, 0.012024861760437489, 0.05911080166697502, -0.006856024265289307, 0.032836802303791046, 0.007399906404316425, -0.07080557942390442, 0.036317795515060425, 0.0036425890866667032, -0.08113139867782593, -0.01611676998436451, -0.06627681851387024, -0.052508823573589325, -0.06013910099864006, -0.058107275515794754, -0.08194815367460251, -0.03804472088813782, -0.016623958945274353, -0.012433337979018688, -0.04859789460897446, -0.032701149582862854, -0.05263068899512291, 0.07015479356050491, -0.0462968610227108, 0.0635969415307045, 0.01809929497539997, 0.02803792431950569, -0.0001637216191738844, -0.052944719791412354, 0.03608926758170128, 0.03252189978957176, 0.00555788679048419, -0.008836952969431877, 0.04679371416568756, 0.02637053281068802, -0.03472936153411865, -0.02981012873351574, 0.057439692318439484, 0.023388264700770378, 0.05623145401477814, 0.040835414081811905, 0.03440222889184952, -0.04393242299556732, -0.0013663971330970526, -0.04706714302301407, -0.03266157582402229, -0.017336010932922363, 0.017702708020806313, -0.03227681666612625, -0.061105336993932724, 0.041003718972206116, 0.026816174387931824, 0.0672164186835289, -0.07185660302639008, 0.01324317418038845, 0.030776498839259148, 0.042490165680646896, 0.017243923619389534, 0.03651890903711319, -0.038297951221466064, 0.037529245018959045, -0.03624148294329643, 0.061099834740161896, 0.02913513407111168, 0.08196105062961578, -0.0009465208859182894, -0.056819405406713486, -0.022673290222883224, -0.050242651253938675, 0.035416170954704285, 0.05659065395593643, -0.03847774490714073, -0.05277575924992561, 0.010186880826950073, 0.005296360235661268, -0.01531500369310379, -0.002273838734254241, -0.004173561930656433, -0.020224470645189285, 0.04815401881933212, 0.06381337344646454, 0.041124895215034485, -0.06356288492679596, 0.00828094407916069, -0.04169894754886627, 0.035572346299886703, -0.0659700557589531, 0.04717770963907242, 0.010433927178382874, -0.0684259831905365, 0.04104136675596237, 0.06930585205554962, -0.05370942875742912, 0.017112063243985176, 0.05257069692015648, -0.034575290977954865, -0.035071272403001785, 0.05926555022597313, 0.01482261810451746, -0.037698306143283844, 0.024873947724699974, -0.02181066945195198, 0.04557322710752487, -0.039962273091077805, -0.006297579500824213, -0.016792798414826393, 0.01953178085386753, 0.014956357888877392, -0.0631798803806305, -0.006947995629161596, 0.03382158651947975, 0.07247805595397949, -0.000740871939342469, -0.017346614971756935, 0.06734602153301239, 0.06676164269447327, -0.020986327901482582, 0.03305284306406975, -0.0740867331624031, 0.028476379811763763, -0.06653662025928497, -0.05291299894452095, -0.03984115272760391, 0.02577921934425831, 0.03372718766331673, 0.06251952797174454, -0.02343040145933628, 0.07520352303981781, -0.0681629478931427, -0.04954700544476509, 0.028237359598279, -0.03457555174827576, -0.0775420218706131, -0.024896666407585144, 0.06619179248809814, -0.03366874158382416, -0.004064363427460194, -0.042891696095466614, -0.01122183259576559, -0.07904857397079468, -0.03114493563771248, -0.025625349953770638, -0.025346843525767326, -0.0024729720316827297, 0.04437714070081711, -0.004910215735435486, -0.013427366502583027, -0.027608929201960564, 0.043522272258996964, -0.0032548997551202774, -0.02447078749537468, 0.049141474068164825, -0.0312705896794796, 0.046598173677921295, -0.03096955269575119, 0.03476042300462723, 0.024723652750253677, 0.010999235324561596, -0.06513697654008865, 0.055781666189432144, 0.04276471585035324, 0.06915764510631561, -0.016973476856946945, -0.007399360649287701, 0.054437022656202316]},
{"question": "What are the rules about using an underscore in a C++ identifier?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>It's common in C++ to name member variables with some kind of prefix to denote the fact that they're member variables, rather than local variables or parameters. If you've come from an MFC background, you'll probably use <code>m_foo</code>. I've also seen <code>myFoo</code> occasionally.</p>\n\n<p>C# (or possibly just .NET) seems to recommend using just an underscore, as in <code>_foo</code>. Is this allowed by the C++ standard?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>The rules (which did not change in C++11):</p>\n\n<ul>\n<li>Reserved in any scope, including for use as <a href=\"https://stackoverflow.com/questions/4297933/c-implementation#4297974\">implementation</a> macros:\n\n<ul>\n<li>identifiers beginning with an underscore followed immediately by an uppercase letter</li>\n<li>identifiers containing adjacent underscores (or \"double underscore\")</li>\n</ul></li>\n<li>Reserved in the global namespace:\n\n<ul>\n<li>identifiers beginning with an underscore</li>\n</ul></li>\n<li>Also, everything in the <code>std</code> namespace is reserved. (You are allowed to add template specializations, though.) </li>\n</ul>\n\n<p>From the 2003 C++ Standard:</p>\n\n<blockquote>\n  <h3>17.4.3.1.2 Global names [lib.global.names]</h3>\n  \n  <p>Certain sets of names and function signatures are always reserved to the implementation:</p>\n  \n  <ul>\n  <li>Each name that contains a double underscore (<code>__</code>) or begins with an underscore followed by an uppercase letter (2.11) is reserved to the implementation for any use.</li>\n  <li>Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.<sup>165</sup></li>\n  </ul>\n  \n  <p><sup>165)</sup> Such names are also reserved in namespace <code>::std</code> (17.4.3.1). </p>\n</blockquote>\n\n<p>Because C++ is based on the C standard (1.1/2, C++03) and C99 is a normative reference (1.2/1, C++03) these also apply, from the 1999 C Standard:</p>\n\n<blockquote>\n  <h3>7.1.3 Reserved identifiers</h3>\n  \n  <p>Each header declares or defines all identifiers listed in its associated subclause, and\n  optionally declares or defines identifiers listed in its associated future library directions subclause and identifiers which are always reserved either for any use or for use as file scope identifiers.</p>\n  \n  <ul>\n  <li>All identifiers that begin with an underscore and either an uppercase letter or another\n  underscore are always reserved for any use.</li>\n  <li>All identifiers that begin with an underscore are always reserved for use as identifiers\n  with file scope in both the ordinary and tag name spaces.</li>\n  <li>Each macro name in any of the following subclauses (including the future library\n  directions) is reserved for use as specified if any of its associated headers is included;\n  unless explicitly stated otherwise (see 7.1.4).</li>\n  <li>All identifiers with external linkage in any of the following subclauses (including the\n  future library directions) are always reserved for use as identifiers with external\n  linkage.<sup>154</sup></li>\n  <li>Each identifier with file scope listed in any of the following subclauses (including the\n  future library directions) is reserved for use as a macro name and as an identifier with\n  file scope in the same name space if any of its associated headers is included.</li>\n  </ul>\n  \n  <p>No other identifiers are reserved. If the program declares or defines an identifier in a\n  context in which it is reserved (other than as allowed by 7.1.4), or defines a reserved\n  identifier as a macro name, the behavior is undefined.</p>\n  \n  <p>If the program removes (with <code>#undef</code>) any macro definition of an identifier in the first\n  group listed above, the behavior is undefined.</p>\n  \n  <p><sup>154)</sup> The list of reserved identifiers with external linkage includes <code>errno</code>, <code>math_errhandling</code>, <code>setjmp</code>, and <code>va_end</code>.</p>\n</blockquote>\n\n<p>Other restrictions might apply. For example, the POSIX standard reserves a lot of identifiers that are likely to show up in normal code:</p>\n\n<ul>\n<li>Names beginning with a capital <code>E</code> followed a digit or uppercase letter:\n\n<ul>\n<li>may be used for additional error code names.</li>\n</ul></li>\n<li>Names that begin with either <code>is</code> or <code>to</code> followed by a lowercase letter\n\n<ul>\n<li>may be used for additional character testing and conversion functions.</li>\n</ul></li>\n<li>Names that begin with <code>LC_</code> followed by an uppercase letter\n\n<ul>\n<li>may be used for additional macros specifying locale attributes.</li>\n</ul></li>\n<li>Names of all existing mathematics functions suffixed with <code>f</code> or <code>l</code> are reserved\n\n<ul>\n<li>for corresponding functions that operate on float and long double arguments, respectively.</li>\n</ul></li>\n<li>Names that begin with <code>SIG</code> followed by an uppercase letter are reserved\n\n<ul>\n<li>for additional signal names.</li>\n</ul></li>\n<li>Names that begin with <code>SIG_</code> followed by an uppercase letter are reserved\n\n<ul>\n<li>for additional signal actions.</li>\n</ul></li>\n<li>Names beginning with <code>str</code>, <code>mem</code>, or <code>wcs</code> followed by a lowercase letter are reserved\n\n<ul>\n<li>for additional string and array functions.</li>\n</ul></li>\n<li>Names beginning with <code>PRI</code> or <code>SCN</code> followed by any lowercase letter or <code>X</code> are reserved\n\n<ul>\n<li>for additional format specifier macros</li>\n</ul></li>\n<li>Names that end with <code>_t</code> are reserved\n\n<ul>\n<li>for additional type names.</li>\n</ul></li>\n</ul>\n\n<p>While using these names for your own purposes right now might not cause a problem, they do raise the possibility of conflict with future versions of that standard.</p>\n\n<hr>\n\n<p>Personally I just don't start identifiers with underscores. New addition to my rule: Don't use double underscores anywhere, which is easy as I rarely use underscore.</p>\n\n<p>After doing research on this article I no longer end my identifiers with <code>_t</code>\nas this is reserved by the POSIX standard.</p>\n\n<p>The rule about any identifier ending with <code>_t</code> surprised me a lot. I think that is a POSIX standard (not sure yet) looking for clarification and official chapter and verse. This is from the <a href=\"http://www.gnu.org/software/libtool/manual/libc/Reserved-Names.html\" rel=\"noreferrer\">GNU libtool manual</a>, listing reserved names.</p>\n\n<p>CesarB provided the following link to the <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/xsh_chap02_02.html\" rel=\"noreferrer\">POSIX 2004</a> reserved symbols and notes 'that many other reserved prefixes and suffixes ... can be found there'.  The\n<a href=\"http://www.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html\" rel=\"noreferrer\">POSIX 2008</a> reserved symbols are defined here.  The restrictions are somewhat more nuanced than those above.</p>\n    </div>", "total_vectors": [0.015943454578518867, 0.017330050468444824, 0.016858220100402832, -0.003370261751115322, 0.0419723279774189, -0.03268076851963997, 0.022023307159543037, 0.026603367179632187, -0.04195498675107956, 0.01714552380144596, -0.04797697812318802, 0.04150215536355972, -0.030412131920456886, 0.024895424023270607, 0.039185989648103714, 0.08990201354026794, 0.0024612504057586193, 0.00423038937151432, -0.011490905657410622, 0.0067454432137310505, 0.003198815742507577, 0.02375643141567707, -0.011898678727447987, -0.010987681336700916, 0.022404195740818977, 0.022513585165143013, 0.005993581376969814, 0.007877037860453129, 0.03673112019896507, 0.021148065105080605, -0.0101836659014225, 0.0696885883808136, 0.03060999885201454, 0.04391076788306236, 0.026683978736400604, -0.0208094734698534, -0.0680721253156662, 0.03630945086479187, -0.05489012598991394, 0.023937737569212914, 0.02114630863070488, -0.045522063970565796, 0.015568230301141739, 0.004584158770740032, 0.08940896391868591, 0.06927409768104553, -0.029153961688280106, -0.019564392045140266, -0.02782721444964409, -0.030958611518144608, 0.0230950266122818, 0.08864719420671463, 0.05290902778506279, -0.04383403807878494, -0.04562021419405937, -0.043288376182317734, -0.0015855674864724278, 0.036109305918216705, -0.005979892332106829, -0.031173525378108025, -0.036882467567920685, 0.04911122843623161, -0.03173905611038208, -0.07801249623298645, 0.0027806684374809265, -0.04827304556965828, -0.039064064621925354, 0.039643604308366776, -0.014339075423777103, -0.00032343168277293444, -0.05108005926012993, 0.04395793750882149, 0.07494207471609116, 0.05031772702932358, -0.0468619242310524, 0.025370925664901733, -0.04741372913122177, 0.012039021588861942, -0.016975922510027885, 0.05810539424419403, -0.05824192613363266, 0.046028368175029755, 0.015915265306830406, -0.005758147221058607, 0.08453834801912308, 0.005834112409502268, 0.06058795377612114, 0.041694216430187225, -0.0691400095820427, -0.055659592151641846, -0.03490703925490379, -8.596092084189877e-05, -0.05005355924367905, 0.0074478620663285255, -0.017796993255615234, 0.02514719031751156, -0.016920723021030426, 0.007612304296344519, -0.019668472930788994, -0.0897056832909584, 0.0452854186296463, 0.01962399110198021, 0.0006672994350083172, -0.023966366425156593, -0.02867455966770649, 0.05783520266413689, -0.053719114512205124, -0.044764842838048935, -0.03848390653729439, 0.028853708878159523, 0.051427219063043594, 0.012382018379867077, 0.002144798170775175, -0.013819057494401932, -0.042016804218292236, 0.031537339091300964, -0.020232927054166794, 0.06458418071269989, -0.04521924629807472, -0.048394422978162766, -0.058699361979961395, -0.05667692795395851, -0.05782143026590347, -0.05585380643606186, 0.02571916952729225, 0.048271507024765015, -0.02586129680275917, 0.02596464939415455, 0.08312971144914627, 0.00682960357517004, 0.03071134351193905, 0.055183690041303635, -0.038581281900405884, -0.06695783138275146, -0.02400941029191017, -0.0014488869346678257, 0.004716964438557625, -0.016676880419254303, -0.033404894173145294, -0.04558845981955528, 0.05085970088839531, 0.0045910789631307125, -0.04050847887992859, 0.0031764982268214226, -0.07222853600978851, -0.08961639553308487, -0.004813093226402998, -0.003210573922842741, 0.025584524497389793, -0.0076977708376944065, 0.009648758918046951, 0.0032678518909960985, -0.0005762127111665905, 0.014128963463008404, 0.006877129897475243, -0.023157188668847084, 0.0051128678023815155, 0.057064544409513474, -0.038351379334926605, -0.04655611142516136, -0.053514543920755386, 0.04294663295149803, -0.010580690577626228, -0.03372892737388611, 0.015911845490336418, 0.03963446989655495, -0.035085711628198624, -0.012008595280349255, 0.028906719759106636, -0.01253162045031786, 0.0061177946627140045, -0.03392963111400604, 0.08356102555990219, -0.006406179629266262, -0.06810672581195831, 0.001370446989312768, -0.04845847189426422, 0.06396373361349106, -0.002214182401075959, 0.06249235197901726, 0.03471801057457924, 0.0149390809237957, 0.0018907011253759265, -0.0350365936756134, 0.055931299924850464, -0.03032662346959114, -0.010886752977967262, 0.08435218036174774, -0.06980251520872116, 0.045653972774744034, 0.08709580451250076, 0.08417940139770508, -0.03687359392642975, -0.07288960367441177, -0.04732378572225571, -0.01112603023648262, -0.015135901048779488, 0.08990992605686188, -0.031759969890117645, -0.06601415574550629, -0.0747625008225441, -0.04137963056564331, 0.06723751127719879, 0.025674710050225258, 0.01059733610600233, 0.004295003600418568, -0.03443339467048645, 0.04198534041643143, -0.08705262094736099, -0.050695911049842834, -0.07038641721010208, 0.024528415873646736, 0.008249402046203613, 0.008687171153724194, 0.07365099340677261, -0.02088480442762375, -0.07965236902236938, -0.01246513519436121, -0.04145573452115059, 0.013562407344579697, -0.08222245424985886, 0.054086461663246155, -0.04145928844809532, -0.02882365509867668, -0.019767528399825096, 0.040048956871032715, -0.0061945840716362, 0.07209589332342148, 0.047431934624910355, -0.008456401526927948, 0.015522739849984646, 0.04267428070306778, -0.00038052554009482265, 0.0021933421958237886, 0.04973378777503967, -0.08153865486383438, 0.059138454496860504, -0.059184730052948, 0.003934317734092474, -0.04809357970952988, -0.023307396098971367, 0.02327634021639824, -0.03238644450902939, 0.017606161534786224, 0.04901018366217613, 0.08125880360603333, -0.03567182272672653, -0.06413378566503525, 0.08785837888717651, 0.07717639952898026, -0.08802228420972824, 0.06045810878276825, 0.021054387092590332, -0.01448016706854105, -0.06330732256174088, -0.07940564304590225, 0.03709464520215988, -0.07412208616733551, 0.022103745490312576, 0.038646627217531204, -0.050280142575502396, 0.048442382365465164, -0.04921731352806091, -0.0560886487364769, -0.02487885393202305, -0.017474962398409843, 0.0010637175291776657, -0.0731041207909584, -0.036465276032686234, -0.0006008078926242888, -0.014615445397794247, -0.0062047201208770275, 0.023118268698453903, 0.01565219648182392, 0.03470631316304207, 0.009770525619387627, 0.07596742361783981, -0.019826676696538925, 0.08716398477554321, -0.0002641249157022685, -0.009939005598425865, -0.06641902029514313, -0.02205786481499672, 0.02439219318330288, 0.04475928470492363, -0.08173957467079163, -0.029733091592788696, 0.037037868052721024, 0.03778638690710068, -0.07880495488643646, -0.0452558808028698, -0.009522555395960808, 0.03070349618792534, 0.010811848565936089, 0.06805648654699326, -0.015726445242762566, -0.03157901391386986, 0.02290911041200161, 0.005864109843969345, 0.02988550253212452, -0.013698811642825603, 0.04206389561295509, -0.00733985798433423, 0.07403140515089035, -0.08183836191892624, 0.025588424876332283, 0.015804247930645943, 0.005435495171695948, -0.05948289856314659, -0.03286807984113693, -0.012189079076051712, 0.0685429722070694, 0.0061614541336894035, 0.06990794092416763, 0.05370445176959038, 0.06356995552778244, 0.019193878397345543, -0.02683001570403576, 0.062328122556209564, 0.010541369207203388, 0.0412922240793705, -0.03669194132089615, -0.0338943675160408, -0.03210098668932915, -0.06297579407691956, 0.043882280588150024, -0.053715165704488754, 0.03286387771368027, 0.0246492438018322, 0.003612770698964596, -0.07114916294813156, -0.055840689688920975, -0.017193542793393135, -0.021992797031998634, -0.03785345330834389, -0.05024874955415726, 0.06055544316768646, -0.03776876628398895, 0.08426688611507416, -0.0130960987880826, -0.014202694408595562, 0.006016136612743139, 0.0007039498304948211, -0.002957211574539542, -0.08987251669168472, 0.0321665033698082, 0.06862132996320724, 0.018201883882284164, 0.05141426995396614, -0.011601513251662254, 0.04154554009437561, -0.0010211319895461202, 0.04345482960343361, -0.05644043907523155, 0.028397953137755394, -0.034318845719099045, -0.08897764980792999, -0.008654830977320671, 0.02763957716524601, -0.024184543639421463, -0.06436441838741302, 0.061981819570064545, -0.08773507177829742, -0.01952335424721241, 0.025247864425182343, -0.020381594076752663, -0.0723830908536911, -0.017233366146683693, 0.06782310456037521, -0.01901382766664028, -0.03293265029788017, 0.052460670471191406, 0.007090218365192413, 0.0818539410829544, 0.012361356057226658, -0.07699702680110931, 0.032200902700424194, 0.040258441120386124, 0.00294829485937953, -0.06691566854715347, 0.04535980150103569, 0.026707684621214867, -0.0796615406870842, 0.04154219105839729, -0.06658823043107986, 0.027299189940094948, 0.07060769200325012, 0.011668736115098, 0.042738087475299835, 0.08376362174749374, -0.02153857611119747, 0.024706676602363586, -0.08042197674512863, 0.03265094384551048, -0.006370058748871088, -0.018196942284703255, -0.06358630210161209, -0.02660970389842987, 0.052461784332990646, 0.07699865102767944, 0.028440076857805252, -0.005877838935703039, 0.0004762957105413079, -0.0004817740118596703, -0.042362745851278305, 0.05510520935058594, -0.08445656299591064, -0.060563091188669205, -0.03751552477478981, -0.07965291291475296, -0.039443157613277435, 0.05377592518925667, -0.06262814998626709, -0.008145077154040337, -0.044200364500284195, -0.0652206763625145, 0.0530906580388546, 0.048393189907073975, 0.033281151205301285, 0.0016670236364006996, -0.05821184068918228, -0.014865957200527191, 0.05706673115491867, 0.03258335590362549, 0.02193845622241497, 0.04485397785902023, -0.006820672191679478, 0.04543842375278473, 0.045312702655792236, -0.008606495335698128, -0.009437656961381435, -0.014110091142356396, 0.021946066990494728, -0.03359249234199524, -0.049283526837825775, 0.012379005551338196, -0.0015877382829785347, 0.06750898063182831, 0.05236464738845825, 0.07259217649698257, 0.03716341033577919, 0.025203444063663483, -0.03130354732275009, -0.0325661301612854, -0.04331595450639725, 0.07493830472230911, 0.050238024443387985, 0.005897005554288626, 0.04331658408045769, -0.010328204371035099, 0.009232542477548122, 0.03716779500246048, 0.08967186510562897, -0.02402198500931263, -0.029560765251517296, -0.063165083527565, 0.0017493441700935364, 0.014622599817812443, -0.06863436102867126, 0.004647430963814259, 0.05388839170336723, 0.06486465036869049, -0.05167337879538536, -0.05275023356080055, -0.013584223575890064, -0.0714193657040596, -0.05562029778957367, -0.07289852946996689, 0.015026325359940529, 0.07134593278169632, 0.0035555793438106775, -0.006966935005038977, 0.07530909031629562, 0.033266495913267136, -0.0686420425772667, -0.023913679644465446, 0.011399384588003159, 0.04691656306385994, -0.04732954129576683, 0.014696764759719372, -0.03305325284600258, -0.04555390030145645, 0.02488253265619278, -0.05712250992655754, 0.054662954062223434, 0.029930399730801582, -0.03990459442138672, 0.045551080256700516, 0.055236250162124634, -0.018370509147644043, -0.002539664274081588, -0.03292626515030861, 0.004539818968623877, -0.0510486401617527, -0.011658663861453533, -0.025370795279741287, 0.0662127137184143, 0.02882588841021061, -0.019798416644334793, -0.022691523656249046, 0.0513831302523613, 0.05806129798293114, -0.025281459093093872, 0.06965900957584381, 0.025365516543388367, -0.007403891533613205, 0.04027407243847847, -0.06776723265647888, -0.062250446528196335, -0.022294307127594948, -0.03410043194890022, -0.018222087994217873]},
{"question": "How to remove items from a list while iterating?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                    <div>\r\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\r\n        <div class=\"grid fd-column fw-nowrap\">\r\n            <div class=\"grid fw-nowrap\">\r\n                    <div class=\"grid--cell mr8\">\r\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconLock\" width=\"18\" height=\"18\" viewbox=\"0 0 18 18\"><path d=\"M16 9a2 2 0 00-2-2V6A5 5 0 004 6v1a2 2 0 00-2 2v6c0 1.1.9 2 2 2h10a2 2 0 002-2V9zm-7 5a2 2 0 110-4 2 2 0 010 4zm3.1-7H5.9V6a3.1 3.1 0 016.2 0v1z\"></path></svg>\r\n                    </div>\r\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\r\n                    <div class=\"grid--cell fl1 lh-lg\">\r\n                        <b>This question's answers are a <a href=\"/help/privileges/edit-community-wiki\">community effort</a></b>. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n</aside>\r\n\r\n    </div>\r\n\r\n<p>I'm iterating over a list of tuples in Python, and am attempting to remove them if they meet certain criteria. </p>\n\n<pre><code>for tup in somelist:\n    if determine(tup):\n         code_to_remove_tup\n</code></pre>\n\n<p>What should I use in place of <code>code_to_remove_tup</code>? I can't figure out how to remove the item in this fashion.</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>You can use a list comprehension to create a new list containing only the elements you don't want to remove:</p>\n\n<pre><code>somelist = [x for x in somelist if not determine(x)]\n</code></pre>\n\n<p>Or, by assigning to the slice <code>somelist[:]</code>, you can mutate the existing list to contain only the items you want:</p>\n\n<pre><code>somelist[:] = [x for x in somelist if not determine(x)]\n</code></pre>\n\n<p>This approach could be useful if there are other references to <code>somelist</code> that need to reflect the changes.</p>\n\n<p>Instead of a comprehension, you could also use <code>itertools</code>. In Python 2:</p>\n\n<pre><code>from itertools import ifilterfalse\nsomelist[:] = ifilterfalse(determine, somelist)\n</code></pre>\n\n<p>Or in Python 3:</p>\n\n<pre><code>from itertools import filterfalse\nsomelist[:] = filterfalse(determine, somelist)\n</code></pre>\n\n<p>For the sake of clarity and for those who find the use of the <code>[:]</code> notation hackish or fuzzy, here's a more explicit alternative. Theoretically, it should perform the same with regards to space and time than the one-liners above.</p>\n\n<pre><code>temp = []\nwhile somelist:\n    x = somelist.pop()\n    if not determine(x):\n        temp.append(x)\nwhile temp:\n    somelist.append(templist.pop())\n</code></pre>\n\n<p>It also works in other languages that may not have the <em>replace items</em> ability of Python lists, with minimal modifications. For instance, not all languages cast empty lists to a <code>False</code> as Python does. You can substitute <code>while somelist:</code> for something more explicit like <code>while len(somelist) &gt; 0:</code>. </p>\n    </div>", "total_vectors": [-0.013737167231738567, -0.06635940074920654, 0.0810539647936821, -0.040167227387428284, -0.011534325778484344, 0.04521951824426651, 0.05810576304793358, -0.051599983125925064, -0.05307938903570175, 0.07007578760385513, 0.05162832513451576, 0.054796844720840454, 0.026671765372157097, 0.04572877287864685, 0.03639460727572441, 0.08951129019260406, -0.01863975077867508, -0.005269606597721577, 0.023344736546278, 0.055409520864486694, 0.007362643722444773, -0.05613205209374428, 0.01106406468898058, -0.02705543115735054, 0.02263161540031433, -0.019919883459806442, -0.007058529648929834, -0.0034156078472733498, -0.022514186799526215, 0.05021751672029495, 0.015748344361782074, 0.054036274552345276, -0.04248621314764023, 0.02202571928501129, 0.026323139667510986, 0.04713305085897446, -0.03684614598751068, -0.03141360357403755, -0.024890217930078506, -0.018812105059623718, 0.037560924887657166, -0.07307375967502594, -0.04847562313079834, -0.01348892692476511, 0.0876750648021698, -0.00760373380035162, -0.023025359958410263, -0.06888677179813385, 0.06313677132129669, -0.0317707322537899, 0.029312843456864357, 0.08478660136461258, 0.024441977962851524, -0.032931167632341385, -0.02017545886337757, -0.0072152880020439625, -0.02220069244503975, 0.04120156168937683, -0.0019849641248583794, 0.009853138588368893, 0.005036205984652042, -0.007559671998023987, -0.00032751011895015836, -0.026018233969807625, 0.012449098750948906, -0.0324782058596611, -0.026687823235988617, -0.010112512856721878, -0.026451703161001205, -0.058077096939086914, -0.01717119850218296, 0.038303911685943604, 0.010239934548735619, 0.08479752391576767, 0.005945246666669846, -0.008039237931370735, 0.038642141968011856, 0.038749706000089645, -0.06509465724229813, 0.053454626351594925, 0.014905697666108608, 0.04017815738916397, 0.010001348331570625, -0.00020056449284311384, 0.0756305456161499, -0.05837160721421242, 0.04681989178061485, -0.03775246813893318, -0.0833749771118164, -0.04254905506968498, -0.00640459731221199, 0.005371902137994766, 0.009886227548122406, 0.03601419925689697, -0.0202292799949646, -0.017826495692133904, 0.05945456773042679, 0.021325519308447838, -0.06326226145029068, -0.0884726345539093, 0.03549502044916153, 0.06295598298311234, -0.06142285466194153, 0.007924819365143776, 0.011102099902927876, -0.03452017530798912, -0.033305440098047256, 0.026371236890554428, 0.07136380672454834, 0.056465473026037216, -0.009690525010228157, -0.06629162281751633, -0.03623499721288681, 0.03641625493764877, -0.025243625044822693, 0.003997364547103643, 0.026165787130594254, -0.07008113712072372, -0.027681976556777954, -0.0026316691655665636, 0.03702418878674507, 0.006905087269842625, -0.04551033675670624, -0.0009271906455978751, 0.04194795340299606, 0.02148282527923584, 0.010459240525960922, 0.02768029272556305, 0.05541447177529335, -0.03006722778081894, 0.039215318858623505, -0.040387433022260666, -0.024952514097094536, -0.05424848198890686, 0.0146982716396451, -0.04528672248125076, -0.06563897430896759, -0.05496753007173538, 0.02811923250555992, 0.05923572927713394, -0.006196263711899519, 0.024458356201648712, 0.017239857465028763, -0.011205239221453667, -0.011816132813692093, -0.08269131183624268, 0.0828300416469574, -0.029954655095934868, 0.016805043444037437, -0.00019822607282549143, -0.07576148957014084, -0.0612800158560276, 0.06517665833234787, -0.010805003345012665, 0.08066365122795105, 0.054852403700351715, -0.05315656587481499, -0.0777619406580925, 0.06882163137197495, 0.011491539888083935, -0.05762988328933716, -0.046286582946777344, 9.545613283989951e-05, -0.03447718918323517, -0.05185411125421524, -0.07879191637039185, -0.0634610652923584, 0.026798611506819725, -0.04653536528348923, -0.03566133603453636, -0.05562479421496391, -0.08244763314723969, 0.07858283817768097, -0.03273342549800873, -0.05988575890660286, 0.020899739116430283, -0.03723448887467384, -0.0031008257064968348, 0.04156557098031044, -0.020418312400579453, 0.06926197558641434, -0.044821299612522125, -0.045486949384212494, -0.026226799935102463, 0.004670308902859688, -0.0010473595466464758, -0.001401504734531045, 0.08855592459440231, -0.022177180275321007, 0.04661409556865692, 0.03000393696129322, 0.009912043809890747, -0.0066033462062478065, -0.0567476786673069, -0.022494707256555557, 0.034280795603990555, -0.07191283255815506, 0.08949201554059982, 0.0064688511192798615, -0.06805456429719925, -0.007809399627149105, 0.02926570177078247, 0.023207832127809525, 0.08301147818565369, -0.05042390897870064, 0.06210726127028465, -0.07632129639387131, 0.02448425628244877, -0.07596297562122345, -0.014151982963085175, -0.014435391873121262, 0.06966187059879303, -0.04046966880559921, 0.047496333718299866, 0.002878478728234768, -0.006483037956058979, -0.05182192102074623, 0.08723246306180954, -0.01705310121178627, -0.03269164636731148, 0.007790716364979744, 0.0007633828790858388, 0.004179693292826414, 0.021088076755404472, 0.011283230036497116, 0.024490853771567345, -0.005201972555369139, 0.0008470095344819129, 0.04037213325500488, -0.07150684297084808, 0.025338370352983475, 0.04846087098121643, 0.03180472180247307, -0.07163046300411224, 0.08238804340362549, 0.058468274772167206, 0.08099207282066345, 0.020796606317162514, -0.021747607737779617, 0.04658344015479088, -0.027883531525731087, -0.02756853587925434, 0.03758922964334488, 0.04789584502577782, 0.057409174740314484, 0.08740796893835068, 0.008993907831609249, 0.07354733347892761, 0.08733361959457397, 0.08406156301498413, -0.04753975570201874, 0.036259379237890244, 0.015941724181175232, -0.08133266121149063, -0.017686253413558006, 0.04293563961982727, 0.0073981620371341705, -0.08292803913354874, -0.010812189429998398, -0.031875498592853546, -0.0775761678814888, -0.061598438769578934, -0.07731832563877106, 0.01446979958564043, 0.04218858480453491, 0.006103282794356346, -0.04959186911582947, -0.07810984551906586, 0.0502147451043129, 0.007432641461491585, -0.07613320648670197, -0.054357968270778656, -0.05358103662729263, -0.014184091240167618, 0.048365268856287, 0.07639633864164352, 0.006750079337507486, 0.028842315077781677, 0.08607926219701767, 0.08626792579889297, 0.05196978524327278, -0.051265571266412735, 0.004438255447894335, -0.06918975710868835, -0.051848918199539185, -0.07573225349187851, -0.03930974379181862, 0.008903422392904758, 0.00927279144525528, -0.0003356977831572294, -0.028653251007199287, -2.5078275939449668e-05, -0.0034696264192461967, 0.013791711069643497, 0.08586963266134262, 0.0670512318611145, 0.002734844107180834, -0.07990682125091553, -0.03695054352283478, 0.030831480398774147, -0.007115060463547707, 0.029839467257261276, -0.0039647831581532955, 0.04397215321660042, -0.03259430080652237, -0.025534553453326225, 0.020443910732865334, -0.009332843124866486, -0.05301038548350334, -0.05821889266371727, 0.01966695301234722, 0.010457034222781658, -0.07212873548269272, -0.03031272254884243, 0.021500591188669205, 0.02338840812444687, -0.025054877623915672, 0.028862282633781433, 0.02377636730670929, 0.04866530001163483, 0.03906440734863281, 0.05389440804719925, 0.007596250623464584, 0.03485661745071411, 0.013444806449115276, -0.02732459083199501, -0.005068793427199125, -0.06672929227352142, 0.06085158884525299, 0.006982583552598953, 0.02837136574089527, -0.014677990227937698, -0.07192663103342056, -0.002944652456790209, -0.039441704750061035, -0.023778147995471954, -0.04129990562796593, -0.010566463693976402, 0.04788021743297577, -0.05859816446900368, -0.011322117410600185, -0.0027153168339282274, -0.022816503420472145, 0.019948648288846016, -0.0892394408583641, -0.05553054437041283, 0.04061503708362579, 0.003498645266517997, 0.030075769871473312, 0.00791140366345644, -0.012906706891953945, -0.0060919285751879215, -0.014319201931357384, -0.007622262462973595, -0.07020248472690582, 0.03628479689359665, -0.08849509060382843, 0.030602937564253807, 0.05159423127770424, 0.044549621641635895, -0.04175321385264397, -0.015586834400892258, -0.08941438049077988, 0.00848627183586359, 0.011040660552680492, 0.06563454121351242, -0.06568204611539841, 0.04191546514630318, 0.058014877140522, -0.018983015790581703, 0.03792635351419449, -0.0644829198718071, -0.030583517625927925, 0.08386983722448349, -0.04425151273608208, -0.0760604739189148, 0.0065969317220151424, -0.007738025393337011, 0.024872204288840294, -0.023852618411183357, 0.019927091896533966, -0.013925191946327686, -0.01940920203924179, -0.05639096722006798, 0.044222474098205566, 0.05496828258037567, 0.07733272016048431, -0.010017055086791515, 0.025986285880208015, 0.00023687041539233178, -0.022386059165000916, 0.017118562012910843, -0.04432150721549988, 0.01978316903114319, -0.027646489441394806, -0.02970670908689499, -0.03596261143684387, 0.028769830241799355, 0.000808388867881149, 0.032231833785772324, 0.06068511679768562, 0.030912382528185844, 0.01672234758734703, 0.06904569268226624, 0.028471793979406357, 0.0067026312462985516, -0.08209063857793808, -0.03974638879299164, -0.01748916693031788, 0.03919820860028267, -0.03079385682940483, 0.05035453662276268, 0.0006819176487624645, 0.02417546510696411, -0.059456925839185715, 2.4460656277369708e-05, -0.013940609060227871, 0.014994538389146328, 0.07563510537147522, 0.05087446793913841, -0.009765660390257835, -0.05292834714055061, 0.003637632355093956, 0.015981590375304222, -0.03227377310395241, 0.05029766261577606, -0.026303192600607872, 0.08036137372255325, -0.06635202467441559, 0.027106555178761482, -0.040184758603572845, -0.03105086460709572, 0.05284076929092407, 0.03761628642678261, -0.05177214741706848, -0.06403499096632004, 0.01245913002640009, 0.0038325642235577106, -0.007898690178990364, 0.02785561792552471, 0.028368717059493065, -0.021693723276257515, 0.011983025819063187, 0.009549256414175034, -0.0049180276691913605, 0.06571757048368454, 0.06676974147558212, -0.015207705087959766, -0.026897674426436424, -0.03331705927848816, 0.05162128433585167, -0.048037249594926834, 0.08913968503475189, 0.03351687639951706, 0.025481510907411575, -0.06747040897607803, -0.006173410918563604, 0.005349188577383757, -0.07682037353515625, 0.03421787545084953, -0.01516744028776884, 0.08555392920970917, 0.03808622807264328, 0.04397837445139885, 0.00552142271772027, -0.08521643280982971, 0.0009021256119012833, -0.0019495754968374968, -0.0178535133600235, 0.05593137815594673, 0.039397403597831726, -0.03584383800625801, 0.030621537938714027, -0.03484649211168289, 0.00438027223572135, 0.0036093913950026035, 0.02358800545334816, 0.015925994142889977, -0.03401060774922371, -0.0743253156542778, -0.020716015249490738, -0.05660967901349068, -0.0315198078751564, 0.037051696330308914, -0.0814349576830864, -0.014774523675441742, 0.08818992972373962, -0.026490703225135803, -0.03950120136141777, 0.013153186067938805, 0.013016557320952415, 0.023675020784139633, 0.021973686292767525, 0.04380461946129799, -0.01459551602602005, 0.05459722504019737, 0.08585032820701599, -0.04288792982697487, -0.051473215222358704, 0.08049727231264114, -0.009158858098089695, 0.03451653942465782, -0.00012184365186840296, 0.01216448936611414, 0.012229707092046738, -0.019101455807685852, -0.014407115988433361, -0.016143089160323143, 0.009837846271693707, 0.0870290994644165, 0.03793216869235039, 0.015355762094259262]},
{"question": "SQL select only rows with max value on a column [duplicate]", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                    <div>\r\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\r\n        <div class=\"grid fd-column fw-nowrap\">\r\n            <div class=\"grid fw-nowrap\">\r\n                    <div class=\"grid--cell mr8\">\r\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" width=\"18\" height=\"18\" viewbox=\"0 0 18 18\"><path d=\"M15 6.38A6.48 6.48 0 007.78.04h-.02A6.49 6.49 0 002.05 5.6a6.31 6.31 0 002.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0015 6.37zM4.03 5.85A4.49 4.49 0 018 2.02a4.48 4.48 0 015 4.36 4.3 4.3 0 01-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 01-1.64-3.94zM10 18a1 1 0 000-2H7a1 1 0 100 2h3z\"></path></svg>\r\n                    </div>\r\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\r\n                    <div class=\"grid--cell fl1 lh-lg\">\r\n                        <b>Want to improve this post?</b> Provide detailed answers to this question, including citations and an explanation of why your answer is correct. Answers without enough detail may be edited or deleted.\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n</aside>\r\n\r\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\r\n        <div class=\"grid fd-column fw-nowrap\">\r\n            <div class=\"grid fw-nowrap\">\r\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\r\n                    <div class=\"grid--cell fl1 lh-lg\">\r\n                        <b>This question already has answers here</b>:\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n                    <div class=\"grid--cell mb0 mt4\">\r\n                        <a href=\"/questions/1313120/retrieving-the-last-record-in-each-group-mysql\" dir=\"ltr\">Retrieving the last record in each group - MySQL</a>\r\n                            <span class=\"question-originals-answer-count\">\r\n                                (29 answers)\r\n                            </span>\r\n                    </div>\r\n                <div class=\"grid--cell mb0 mt8\">Closed <span title=\"2019-03-20 00:19:10Z\" class=\"relativetime\">1 year ago</span>.</div>\r\n        </div>\r\n</aside>\r\n\r\n    </div>\r\n\r\n<p>I have this table for documents (simplified version here):</p>\n\n<pre><code>+------+-------+--------------------------------------+\n| id   | rev   | content                              |\n+------+-------+--------------------------------------+\n| 1    | 1     | ...                                  |\n| 2    | 1     | ...                                  |\n| 1    | 2     | ...                                  |\n| 1    | 3     | ...                                  |\n+------+-------+--------------------------------------+\n</code></pre>\n\n<p>How do I select one row per id and only the greatest rev?<br>\nWith the above data, the result should contain two rows: <code>[1, 3, ...]</code> and <code>[2, 1, ..]</code>. I'm using <strong><em>MySQL</em></strong>.</p>\n\n<p>Currently I use checks in the <code>while</code> loop to detect and over-write old revs from the resultset. But is this the only method to achieve the result? Isn't there a <strong>SQL</strong> solution?</p>\n\n<p><strong>Update</strong><br>\nAs the answers suggest, there <em>is</em> a SQL solution, and <a href=\"http://sqlfiddle.com/#!9/3d74dc/1\" rel=\"noreferrer\">here a sqlfiddle demo</a>. </p>\n\n<p><strong>Update 2</strong><br>\nI noticed after adding the above <em>sqlfiddle</em>, the rate at which the question is upvoted has surpassed the upvote rate of the answers. That has not been the intention! The fiddle is based on the answers, especially the accepted answer.</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<h2>At first glance...</h2>\n\n<p>All you need is a <code>GROUP BY</code> clause with the <code>MAX</code> aggregate function:</p>\n\n<pre><code>SELECT id, MAX(rev)\nFROM YourTable\nGROUP BY id\n</code></pre>\n\n<h2>It's never that simple, is it?</h2>\n\n<p>I just noticed you need the <code>content</code> column as well.</p>\n\n<p>This is a very common question in SQL: find the whole data for the row with some max value in a column per some group identifier. I heard that a lot during my career. Actually, it was one the questions I answered in my current job's technical interview. </p>\n\n<p>It is, actually, so common that StackOverflow community has created a single tag just to deal with questions like that: <a href=\"/questions/tagged/greatest-n-per-group\" class=\"post-tag\" title=\"show questions tagged 'greatest-n-per-group'\" rel=\"tag\">greatest-n-per-group</a>.</p>\n\n<p>Basically, you have two approaches to solve that problem:</p>\n\n<h2>Joining with simple <code>group-identifier, max-value-in-group</code> Sub-query</h2>\n\n<p>In this approach, you first find the <code>group-identifier, max-value-in-group</code> (already solved above) in a sub-query. Then you join your table to the sub-query with equality on both <code>group-identifier</code> and <code>max-value-in-group</code>:</p>\n\n<pre><code>SELECT a.id, a.rev, a.contents\nFROM YourTable a\nINNER JOIN (\n    SELECT id, MAX(rev) rev\n    FROM YourTable\n    GROUP BY id\n) b ON a.id = b.id AND a.rev = b.rev\n</code></pre>\n\n<h2>Left Joining with self, tweaking join conditions and filters</h2>\n\n<p>In this approach, you left join the table with itself. Equality goes in the <code>group-identifier</code>. Then, 2 smart moves: </p>\n\n<ol>\n<li>The second join condition is having left side value less than right value</li>\n<li>When you do step 1, the row(s) that actually have the max value will have <code>NULL</code> in the right side (it's a <code>LEFT JOIN</code>, remember?). Then, we filter the joined result, showing only the rows where the right side is <code>NULL</code>.</li>\n</ol>\n\n<p>So you end up with:</p>\n\n<pre><code>SELECT a.*\nFROM YourTable a\nLEFT OUTER JOIN YourTable b\n    ON a.id = b.id AND a.rev &lt; b.rev\nWHERE b.id IS NULL;\n</code></pre>\n\n<h2>Conclusion</h2>\n\n<p>Both approaches bring the exact same result. </p>\n\n<p>If you have two rows with <code>max-value-in-group</code> for <code>group-identifier</code>, both rows will be in the result in both approaches.</p>\n\n<p>Both approaches are SQL ANSI compatible, thus, will work with your favorite RDBMS, regardless of its \"flavor\".</p>\n\n<p>Both approaches are also performance friendly, however your mileage may vary (RDBMS, DB Structure, Indexes, etc.). So when you pick one approach over the other, <em>benchmark</em>. And make sure you pick the one which make most of sense to you.</p>\n    </div>", "total_vectors": [-0.03176768496632576, -0.08147518336772919, 0.07560104876756668, 0.04538910835981369, -0.0018591542029753327, -0.015971610322594643, 0.025868985801935196, -0.06579285860061646, 0.01668880693614483, 0.05892341211438179, 0.051900893449783325, 0.024806808680295944, -0.024279247969388962, 0.06450140476226807, 0.04392591491341591, 0.08179758489131927, 0.0035213525407016277, 0.034852948039770126, 0.021984947845339775, -0.00687254685908556, 0.04702597111463547, -0.020075015723705292, -0.0014546627644449472, 0.007940152660012245, 0.005478825885802507, 0.030723778530955315, -0.051396653056144714, -0.03539585694670677, 0.0488264374434948, -0.015726052224636078, 0.03209562227129936, 0.030312813818454742, 0.08072879910469055, 0.005313454661518335, 0.027959410101175308, 0.036882393062114716, 0.006505977362394333, 0.009789728559553623, -0.03738141432404518, 0.06368368864059448, 0.0317520871758461, -0.05262155458331108, 0.007120293565094471, -0.005444572307169437, 0.08178160339593887, 0.010461270809173584, -0.007096763700246811, 0.06693904846906662, -0.024469319730997086, 0.02562730573117733, 0.053401220589876175, 0.07080727070569992, 0.026748033240437508, 0.021509617567062378, -0.0487154945731163, 0.02453998103737831, -0.0641172006726265, -0.05682053416967392, -0.07138856500387192, 0.05941489711403847, 0.0019627558067440987, -0.016560763120651245, -0.006081736646592617, -0.018188102170825005, -0.041536152362823486, 0.023543264716863632, -0.017681609839200974, -0.030013281852006912, 0.017303399741649628, -0.011532832868397236, 0.04078145697712898, 0.013713945634663105, 0.0003076913708355278, 0.08137516677379608, 0.07184546440839767, -0.02122499607503414, 0.08179525285959244, 0.009158547036349773, -0.06330650299787521, 0.06184288486838341, 0.08139954507350922, 0.0299222469329834, 0.0395340621471405, 0.014177724719047546, -0.05975395441055298, -0.02608015574514866, -0.020481271669268608, 0.041406866163015366, -0.06753621250391006, -0.025697434321045876, -0.002696284791454673, -0.0181169081479311, -0.06835231184959412, 0.016326619312167168, 0.02375004068017006, -0.011522668413817883, 0.01058372762054205, 0.0322004109621048, -0.07564308494329453, -0.08078105002641678, -0.04135989025235176, 0.031521182507276535, -0.0577789731323719, -0.08144032210111618, -0.03388716280460358, 0.023176778107881546, 0.06801626831293106, 0.051823440939188004, -0.023610921576619148, 0.03171815350651741, 0.04096450284123421, 0.02579062059521675, -0.024589458480477333, 0.06858927011489868, -0.042232368141412735, -0.018208365887403488, 0.04677538201212883, -0.07217627763748169, 0.02547592483460903, -0.07745297998189926, 0.06354442983865738, -0.032408177852630615, 0.025237232446670532, 0.009969587437808514, 0.011127599515020847, -0.00735814031213522, -0.049390871077775955, -0.03422590345144272, 0.010306081734597683, 0.04723987728357315, -0.02325093001127243, -0.05607389286160469, -0.07073674350976944, 0.011693527922034264, -0.020210178568959236, 0.03191637992858887, 0.024682627990841866, 0.029650386422872543, -0.03212355077266693, -0.08064280450344086, 0.03651605546474457, 0.016976166516542435, 0.02924249693751335, 0.002045408356934786, -0.007071554660797119, -0.07068588584661484, -0.07981258630752563, -0.025861036032438278, 0.04652239754796028, 0.006397760473191738, -0.009601876139640808, 0.06144450232386589, 0.027554312720894814, -0.005589148495346308, 0.06384681910276413, 0.048769574612379074, -0.04483133926987648, -0.07317139953374863, -0.020258013159036636, 0.012359079904854298, -0.08032737672328949, -0.05772293359041214, -0.03835134580731392, -0.023011835291981697, -0.02010633423924446, -0.08179324120283127, -0.03492157906293869, 0.008760605938732624, -0.03330792486667633, -0.023424852639436722, -0.006195243913680315, 0.042725786566734314, -0.015103325247764587, 0.03434217348694801, 0.038565196096897125, 0.03514454513788223, -0.04196154326200485, 0.01455802470445633, 0.01488427259027958, -0.04324880242347717, -0.08059701323509216, 0.009013251401484013, 0.04008166119456291, -0.025877254083752632, 0.022620797157287598, -0.03857525438070297, 0.05161034315824509, 0.08158794045448303, -0.007288397755473852, 0.018126223236322403, 0.06257296353578568, 0.00281055667437613, 0.02473004348576069, 0.006854989565908909, -0.07972681522369385, 0.030349381268024445, 0.014578445814549923, 0.08179762959480286, 0.03383558616042137, -0.04328780248761177, 0.0033756052143871784, 0.018622329458594322, 0.003548865206539631, 0.04212726280093193, -0.047150298953056335, 0.027557747438549995, -0.035887978971004486, -0.06678114086389542, -0.07760021835565567, -0.006085647270083427, -0.005757971201092005, -0.02247435599565506, -0.04604310914874077, 0.042741529643535614, 0.0026366400998085737, 0.006188299972563982, -0.07197679579257965, 0.021921418607234955, 0.0342690534889698, -0.03519268333911896, -0.07540390640497208, 0.02419561892747879, 0.024562044069170952, -0.04567253962159157, 0.016398899257183075, 0.031472574919462204, 0.032638005912303925, -0.07289266586303711, 0.05164134502410889, -0.05205792561173439, 0.03330714628100395, -0.07253216207027435, 0.015384023077785969, -0.07999378442764282, 0.08167975395917892, -0.04199587553739548, 0.08133858442306519, 0.0817965716123581, 0.06845953315496445, 0.024422097951173782, -0.051988229155540466, 0.044039007276296616, 0.011241579428315163, 0.016811100766062737, 0.04079499468207359, 0.06857052445411682, 0.002710188739001751, 0.046938326209783554, 0.06596331298351288, 0.08093107491731644, 0.0026974701322615147, -0.015989255160093307, 0.05337325483560562, -0.08135111629962921, -0.0027755368500947952, -2.6615463866619393e-05, 0.05010596290230751, -0.07950104773044586, 0.025964977219700813, 0.06739205867052078, -0.07487650960683823, 0.031060652807354927, -0.04255427420139313, 0.008039151318371296, 0.01352065708488226, -0.03572061285376549, -0.006566154770553112, -0.06469462066888809, 0.01671416126191616, -0.010921434499323368, -0.0776904970407486, -0.028752293437719345, 0.015111968852579594, -0.004736826755106449, 0.009219522587954998, 0.018703943118453026, -0.013580065220594406, 0.0035439340863376856, 0.08174319565296173, 0.04748229309916496, 0.048694510012865067, -0.03059600479900837, -0.012190978042781353, 0.04490390419960022, -0.04402388259768486, -0.08086385577917099, -0.05686801299452782, 0.043556176126003265, -0.006260790396481752, -0.04301582649350166, 0.04127898067235947, 0.02014698088169098, 0.060822706669569016, -0.04189305752515793, 0.06540370732545853, 0.05703045427799225, -0.048569247126579285, 0.05735352635383606, -0.03420546278357506, -0.013483772054314613, 0.04770457372069359, -0.02214670181274414, -0.02655230648815632, -0.016437044367194176, 0.03371940180659294, -0.050315726548433304, -0.0462627187371254, 0.0170022901147604, 0.02118903398513794, 0.059094373136758804, -0.08138803392648697, -0.05278654396533966, 0.03204810619354248, -0.036650076508522034, -0.024214360862970352, -0.08048826456069946, -0.035667162388563156, -0.041027870029211044, -0.0008606913033872843, 0.037596020847558975, 0.0029450806323438883, 0.02015874534845352, -0.049637582153081894, -0.014336632564663887, 0.009890379384160042, 0.016022510826587677, 0.0377451553940773, -0.028205474838614464, -0.057659491896629333, 0.07260001450777054, 0.02891017496585846, -0.026644092053174973, -0.010772870853543282, 0.06741970032453537, 0.03425922244787216, 0.08155931532382965, 0.0522569939494133, 0.0013005206128582358, 0.02239135652780533, -0.0619538277387619, 0.0028151986189186573, -0.026549557223916054, 0.055900149047374725, -0.014682170003652573, -0.08179734647274017, 0.06315530091524124, 0.05194177106022835, -0.04615430906414986, -0.054595932364463806, -0.010971657931804657, -0.00953257828950882, -0.03982774168252945, 0.037050869315862656, -0.07794774323701859, -0.005843730643391609, -0.0816512405872345, -0.0817628726363182, -0.043033044785261154, -0.007360026240348816, 0.05692746862769127, -0.07093583047389984, -0.04407789930701256, -0.0817972719669342, -0.024796459823846817, -0.011364719830453396, 0.03324098140001297, -0.017576662823557854, 0.007574205752462149, 0.07616797834634781, -0.0011150646023452282, -0.0162874273955822, -0.0756877213716507, -0.0033138699363917112, 0.08054842054843903, -0.011769113130867481, -0.06772346794605255, -0.009930716827511787, 0.03589509427547455, -0.060625482350587845, -0.050781264901161194, 0.04934384673833847, 0.010575453750789165, 0.02415275014936924, 0.06233515962958336, -0.02621592953801155, -0.018143152818083763, 0.07779010385274887, -0.026515832170844078, -0.005225535482168198, -0.0397111177444458, -0.0643177404999733, -0.02827308513224125, -0.0607428252696991, -0.012754467315971851, 0.016593322157859802, -0.025040166452527046, -0.029187854379415512, -0.026545224711298943, -0.03335316851735115, 0.04086831212043762, -0.02082870714366436, 0.044318847358226776, 0.03247292339801788, -0.014555362984538078, 0.022962788119912148, -0.023102061823010445, -0.07314334809780121, -0.061027560383081436, -0.018711848184466362, -0.002103944309055805, -0.04598291218280792, -0.0187834482640028, -0.025836020708084106, -0.004277142696082592, -0.048144396394491196, 0.03264104947447777, 0.020368773490190506, -0.010022873058915138, -0.07545572519302368, 0.02942553535103798, 0.023372238501906395, 0.008821939118206501, 0.03643939644098282, -0.044156502932310104, -0.004616482183337212, 0.06486166268587112, 0.007500010076910257, 0.0808403417468071, 0.012689454481005669, -0.045364655554294586, -0.022246507927775383, -0.08129721134901047, -0.030836330726742744, -0.05213400349020958, -0.06677687913179398, -0.009592373855412006, -0.04289492592215538, 0.07435794919729233, -0.038438912481069565, 0.01884913630783558, -0.018892761319875717, -0.05662400275468826, 0.0004989569424651563, 0.053355295211076736, -0.03790302947163582, -0.06335833668708801, 0.03425187990069389, 0.05640124902129173, 0.06068370118737221, 0.05371619388461113, 0.037438344210386276, 0.026100333780050278, 0.08172701299190521, 0.08033903688192368, -0.007491805125027895, -0.0751817524433136, 0.002732920227572322, -0.01679283380508423, -0.019341813400387764, -0.06358727812767029, 0.02597779594361782, 0.041206251829862595, 0.016853265464305878, 0.06274767965078354, 0.02093152143061161, -0.0703304260969162, 0.009337796829640865, -0.01090196892619133, -0.051035817712545395, 0.025043578818440437, -0.016448969021439552, -0.02176777273416519, 0.01866833120584488, -0.0056692673824727535, -0.017732948064804077, -0.05304117500782013, -0.04261871054768562, -0.06457488238811493, 0.05372096970677376, -0.08029153198003769, 0.01860545389354229, 0.03013000451028347, -0.031899936497211456, 0.07173178344964981, 0.011642422527074814, 0.07364405691623688, 0.06400955468416214, -0.059268269687891006, 0.06538279354572296, 0.012593052349984646, 0.017670750617980957, 0.04741961881518364, -0.03337406739592552, -0.0464186929166317, -0.06986087560653687, 0.023648058995604515, -0.05488693714141846, 0.03664663806557655, 0.00951580610126257, -0.02741776779294014, 0.038794275373220444, -0.005982191767543554, 0.0052039953880012035, 0.006841427180916071, -0.05668653920292854, -0.025336557999253273, 0.04913536459207535, -0.0392020046710968, -0.019313404336571693, 0.08137068897485733, 0.011540648527443409, -0.0037419048603624105]},
{"question": "Undefined, unspecified and implementation-defined behavior", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>What is undefined behavior in C and C++?  What about unspecified behavior and implementation-defined behavior?  What is the difference between them?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p><em><strong>Undefined behavior</strong></em> is one of those aspects of the C and C++ language that can be surprising to programmers coming from other languages (other languages try to hide it better). Basically,  it is possible to write C++ programs that do not behave in a predictable way, even though many C++ compilers will not report any errors in the program!</p>\n<p>Let's look at a classic example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    char* p = \"hello!\\n\";   // yes I know, deprecated conversion\n    p[0] = 'y';\n    p[5] = 'w';\n    std::cout &lt;&lt; p;\n}\n</code></pre>\n<p>The variable <code>p</code> points to the string literal <code>\"hello!\\n\"</code>, and the two assignments below try to modify that string literal. What does this program do? According to section 2.14.5 paragraph 11 of the C++ standard, it invokes <em>undefined behavior</em>:</p>\n<blockquote>\n<p>The effect of attempting to modify a string literal is undefined.</p>\n</blockquote>\n<p>I can hear people screaming \"But wait, I can compile this no problem and get the output <code>yellow</code>\" or \"What do you mean undefined, string literals are stored in read-only memory, so the first assignment attempt results in a core dump\". This is exactly the problem with undefined behavior. Basically, the standard allows anything to happen once you invoke undefined behavior (even nasal demons). If there is a \"correct\" behavior according to your mental model of the language, that model is simply wrong; The C++ standard has the only vote, period.</p>\n<p>Other examples of undefined behavior include accessing an array beyond its bounds, <a href=\"https://stackoverflow.com/q/2894891\">dereferencing the null pointer</a>, <a href=\"https://stackoverflow.com/q/6441218\">accessing objects after their lifetime ended</a> or writing <a href=\"https://stackoverflow.com/q/949433\">allegedly clever expressions</a> like <code>i++ + ++i</code>.</p>\n<p>Section 1.9 of the C++ standard also mentions undefined behavior's two less dangerous brothers, <strong>unspecified behavior</strong> and <strong>implementation-defined behavior</strong>:</p>\n<blockquote>\n<p>The semantic descriptions in this International Standard define a parameterized nondeterministic abstract machine.</p>\n<p>Certain aspects and operations of the abstract machine are described in this International Standard as <strong>implementation-defined</strong> (for example, <code>sizeof(int)</code>). These constitute the parameters of the abstract machine. Each implementation shall include documentation describing its characteristics and behavior in these respects.</p>\n<p>Certain other aspects and operations of the abstract machine are described in this International Standard as <strong>unspecified</strong> (for example, order of evaluation of arguments to a function). Where possible, this International Standard defines a set of allowable behaviors. These define the nondeterministic aspects of the abstract machine.</p>\n<p>Certain other operations are described in this International Standard as <strong>undefined</strong> (for example, the  effect of dereferencing the null pointer). [ <em>Note</em>: <strong>this International Standard imposes no requirements on the behavior of programs that contain undefined behavior.</strong> \u2014<em>end note</em> ]</p>\n</blockquote>\n<p>Specifically, section 1.3.24 states:</p>\n<blockquote>\n<p>Permissible undefined behavior ranges from <strong>ignoring the situation completely with unpredictable results</strong>, to behaving during translation or program execution in a documented manner characteristic of the environment (with or without the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message).</p>\n</blockquote>\n<p>What can you do to avoid running into undefined behavior? Basically, you have to read <a href=\"https://stackoverflow.com/questions/388242/\">good C++ books</a> by authors who know what they're talking about. Screw internet tutorials. Screw bullschildt.</p>\n    </div>", "total_vectors": [0.014137027785182, -0.020619411021471024, 0.019804520532488823, -0.044586047530174255, 0.037277951836586, 0.0463394932448864, -0.006621224340051413, -0.039918452501297, -0.04370430111885071, 0.06496670842170715, 0.030533794313669205, 0.026113828644156456, 0.06527797877788544, -0.012037980370223522, -0.04147011414170265, 0.0864383801817894, -0.010682832449674606, 0.04134746268391609, 0.03018418326973915, 0.004544607363641262, 0.0704333633184433, 0.03134144842624664, 0.053678400814533234, 0.030390627682209015, 0.06339786946773529, -0.047132428735494614, 0.0676610916852951, -0.05019654333591461, 0.040208812803030014, 0.03745219111442566, -0.006601616274565458, -0.0034739014226943254, -0.03467929735779762, -0.06457490473985672, -0.07379134744405746, 0.023564258590340614, -0.011257019825279713, -0.0393124520778656, 0.012182713486254215, 0.02157486416399479, -0.029242129996418953, -0.0270554032176733, -0.022539127618074417, 0.07353606075048447, 0.08650989085435867, 0.02022324688732624, -0.05067598447203636, 0.030599087476730347, 0.026266848668456078, -0.045903757214546204, 0.04233027622103691, -0.055071961134672165, -0.05165686830878258, 0.019490087404847145, 0.006610598880797625, 0.006415331736207008, -0.02581263706088066, 0.008380524814128876, 0.0320778489112854, -0.011071065440773964, 0.006769766099750996, 0.07450022548437119, -0.045417215675115585, -0.03275858610868454, 0.01428134087473154, -0.07376544177532196, -0.019288374111056328, -0.018552744761109352, -0.05619152635335922, 0.0014940269757062197, -0.011095130816102028, 0.0009797723032534122, -0.0012519937008619308, 0.0390983410179615, 0.002383125713095069, 0.03399860858917236, -0.028248995542526245, 0.03582771122455597, -0.0466071292757988, -0.05709914118051529, -0.053788475692272186, 0.002404831349849701, 0.023518148809671402, -0.025988679379224777, 0.08283520489931107, -0.01186151709407568, 0.07171422243118286, -0.0705723986029625, -0.06535252928733826, 0.0593155138194561, 0.04533297196030617, 0.021411942318081856, 0.024660401046276093, 0.04735918715596199, -0.04614497348666191, 0.040984928607940674, 0.012936737388372421, 0.06217236444354057, -0.017542624846100807, -0.06899496167898178, -0.03863845765590668, 0.039498284459114075, -0.06441915035247803, -0.050144221633672714, 0.005305196158587933, 0.07800789177417755, -0.05966423451900482, -0.041508592665195465, -0.03179566189646721, -0.01740502193570137, 0.018123392015695572, -0.07252442091703415, 0.012350927107036114, -0.05551746115088463, -0.010973740369081497, 0.01210710871964693, -0.009744759649038315, -0.0006336147198453546, 0.05896937847137451, -0.0041083465330302715, -0.005368547514081001, 0.05965327098965645, 0.027606647461652756, 0.042183056473731995, 0.06376391649246216, -0.03896624594926834, -0.051365140825510025, -0.06208599731326103, 0.058344222605228424, -0.05943887680768967, 0.028908729553222656, -0.0054079946130514145, 0.014698647893965244, -0.01025572419166565, 0.019919082522392273, 0.029029730707406998, 0.04377523437142372, 0.008185360580682755, 0.001277559669688344, -0.022696787491440773, 0.01316821575164795, -0.031086528673768044, -0.05072377994656563, 0.018402153626084328, -0.02219897322356701, -0.08992847800254822, -0.02612275257706642, 0.034676726907491684, 0.04294036701321602, -0.06354671716690063, -0.019014181569218636, 0.016977841034531593, -0.013386135920882225, 0.012465409934520721, 0.008973958902060986, 0.05826956033706665, -0.049528755247592926, -0.08046780526638031, -0.031077446416020393, 0.011522532440721989, 0.03883083537220955, 0.022316889837384224, -0.02381138876080513, -0.04949946701526642, 0.026729725301265717, 0.05934009328484535, -0.034475747495889664, -0.06087140738964081, 0.008908781222999096, -0.031229177489876747, -0.035536643117666245, -0.08739082515239716, 0.08437873423099518, -0.050992388278245926, -0.01319708488881588, 0.007059294730424881, 0.0026790776755660772, 0.04950390011072159, 0.035052184015512466, -0.041870180517435074, 0.014983011409640312, 0.037765294313430786, -0.07367375493049622, 0.044334739446640015, -0.04562187194824219, 0.04677911847829819, 0.028340378776192665, 0.0773046612739563, 0.058875180780887604, -0.05178599804639816, 0.0527210533618927, 0.06418123841285706, 0.06857603043317795, -0.024282488971948624, -0.021856406703591347, -0.014230296015739441, 0.03688547760248184, 0.09107846766710281, 0.014337832108139992, 0.09003256261348724, -0.007558019366115332, -0.020809372887015343, -0.06808687001466751, 0.053247325122356415, 0.0720786601305008, -0.07492965459823608, 0.03391004726290703, 0.04217171669006348, -0.05188260227441788, 0.01524304412305355, 0.001739397644996643, -0.025655418634414673, -0.07911109179258347, -0.003990150056779385, -0.06696701049804688, 0.00289240013808012, -0.0007192295743152499, -0.009092984721064568, -0.07121870666742325, 0.005323475226759911, -0.049282532185316086, -0.043818265199661255, -0.00935657974332571, 0.01634255424141884, 0.002013326855376363, 0.07464945316314697, -0.011194813996553421, 0.006166353821754456, -0.02957693114876747, 0.029659222811460495, 0.010496009141206741, 0.07895639538764954, 0.07262307405471802, 0.050119344145059586, 0.06620221585035324, -0.07216739654541016, 0.04238487035036087, 0.04361914470791817, -0.03528037667274475, -0.06618808209896088, 0.06999937444925308, -0.05386081337928772, -0.06942448765039444, 0.037845317274332047, -0.0307465810328722, 0.028963521122932434, -0.010816429741680622, -0.02080034837126732, 0.06271904706954956, 0.04539940506219864, 0.0007078025955706835, 0.029032837599515915, -0.03509289026260376, -0.006980407517403364, 0.05434732511639595, -0.01936408318579197, -0.061272840946912766, -0.07429402321577072, 0.0001784816267900169, 0.05819994956254959, 0.013562522828578949, -0.04637710377573967, 0.009058966301381588, -0.08588936924934387, 0.03676985949277878, -0.03379253298044205, -0.07056771218776703, 0.06801851093769073, 0.05479748919606209, -0.04748409241437912, -0.01335805281996727, -0.0640135332942009, 0.02568904496729374, 0.05980054661631584, 0.032014548778533936, -0.032111529260873795, -0.04212240129709244, -0.019084837287664413, 0.0744946151971817, -0.03445877507328987, -0.04551825672388077, -0.05863625556230545, 0.038566626608371735, -0.04483417049050331, -0.026402650400996208, -0.029789676889777184, 0.06235130503773689, 0.045155078172683716, 0.03208064287900925, 0.020894130691885948, -0.014883344992995262, 0.024052996188402176, -0.01770733669400215, -0.01871550641953945, -0.0675424113869667, 0.02836601436138153, 0.01384453009814024, -0.056090179830789566, 0.05259934812784195, 0.021940499544143677, 0.0028262860141694546, 0.004136997275054455, -0.031371861696243286, 0.047640543431043625, -0.023491254076361656, -0.03239766135811806, -0.05774891376495361, 0.0037421740125864744, 0.06551704555749893, -0.054907675832509995, -0.01215171068906784, 0.07071859389543533, 0.025195278227329254, -0.012255323119461536, -0.0009197865729220212, 0.06717398762702942, 0.04253498092293739, -0.032552771270275116, -0.019243750721216202, 0.0030488346237689257, -0.05606843903660774, -0.034451864659786224, 0.05024750530719757, -0.02003595605492592, -0.06469099223613739, -0.07310017198324203, 0.07078558951616287, -0.061628829687833786, -0.017562828958034515, -0.014038546942174435, 0.02489333413541317, -0.044024739414453506, 0.05551355332136154, 0.043699681758880615, 0.022405842319130898, -0.08072888106107712, -0.0035230841021984816, -0.03218090161681175, 0.05612283572554588, 0.04206443950533867, -0.00013696828682441264, 0.05763914808630943, -0.0647178590297699, 0.00415304908528924, -0.09095557034015656, 0.050852563232183456, -0.011225983500480652, -0.05105859786272049, -0.03745999559760094, -0.0026957490481436253, 0.012283478863537312, 0.03814367949962616, 0.016595523804426193, 0.05558183416724205, 0.014744853600859642, 0.013464236631989479, -0.08939432352781296, -0.03708436340093613, 0.013827703893184662, -0.02685178630053997, 0.03730941191315651, 0.002012476557865739, -0.0880802646279335, 0.04212585836648941, 0.015005328692495823, -0.03171497583389282, 0.07191186398267746, -0.0573081411421299, 0.08110342174768448, 0.04368341341614723, -0.05049103498458862, 0.05243309587240219, -0.03212245553731918, 0.07675766944885254, 0.0650951936841011, -0.07741915434598923, 0.025672543793916702, 0.03422711789608002, 0.013960062526166439, 0.059762436896562576, 0.042465392500162125, 0.006833425257354975, -0.054171908646821976, 0.0492144413292408, 0.09039033204317093, -0.0679437592625618, 0.0505843423306942, 0.0785461962223053, 0.01851319707930088, 0.04893852025270462, 0.043971721082925797, 0.030125202611088753, -0.011666957288980484, -0.0757538378238678, 0.04482363909482956, -0.057706139981746674, -0.07964813709259033, 0.04165450111031532, 0.017400695011019707, 0.07325047254562378, -0.06665856391191483, -0.011135616339743137, 0.03734462335705757, -0.0461944118142128, 0.009334288537502289, -0.022606823593378067, -0.07125622779130936, 0.053708139806985855, -0.05820053815841675, 0.024621007964015007, 0.026511721312999725, -0.0001643962605157867, 0.00769206415861845, -0.04435167461633682, 0.0317428819835186, 0.030882293358445168, -0.037893522530794144, 0.019479237496852875, 0.024600233882665634, 0.03178564831614494, -0.03189925476908684, 0.014492119662463665, -0.0129833510145545, -0.019160160794854164, 0.07111216336488724, -0.05798114463686943, 0.022477619349956512, 0.04580345377326012, 0.06332278251647949, -0.0077062309719622135, 0.02095835655927658, -0.07153770327568054, -0.0031406464986503124, -0.06106090173125267, 0.05578577145934105, 0.028447505086660385, 0.028564482927322388, 0.04625320807099342, 0.01410177256911993, -0.001272629713639617, 0.05048876628279686, 0.027748113498091698, 0.02364450879395008, 0.07641050219535828, 0.0623382069170475, -0.031589921563863754, -0.042391616851091385, 0.0394800566136837, 0.00793613214045763, 0.005274039693176746, -0.04461054876446724, 0.03346997871994972, 0.08574668318033218, -0.04516202583909035, 0.054613836109638214, -0.053218990564346313, -0.022962097078561783, -0.002041430911049247, -0.02966982312500477, -0.041999515146017075, 0.04247735068202019, -0.023285547271370888, 0.0261720921844244, 0.032716356217861176, 0.013926566578447819, -0.07356394827365875, -0.03607679530978203, -0.06193278729915619, -0.02560495212674141, -0.045083023607730865, -0.05326474457979202, 0.021603433415293694, -0.023808903992176056, -0.07724396884441376, 0.06737077236175537, 0.028331466019153595, 0.007499754894524813, 0.00636979890987277, -0.07717344164848328, -0.007378666196018457, -0.033451471477746964, 0.02337799035012722, -0.02351570874452591, -0.018113795667886734, -0.04838580638170242, 0.03509097918868065, 0.002633932512253523, 0.047028400003910065, 0.03387776017189026, 0.00786595605313778, -0.054624639451503754, -0.04166827350854874, -0.04283875599503517, -0.029991338029503822, -0.05939886346459389, -0.03944797068834305, -0.047746848315000534, 0.019429359585046768, 0.052856847643852234, 0.006679747719317675, -0.01294561754912138, -0.008183121681213379, 0.03775441274046898, -0.06630196422338486, 0.060962922871112823, 0.051376670598983765, -0.014815273694694042, -0.0042097256518900394, 0.046981874853372574, 0.05775344371795654, 0.011112571693956852, 0.04629315063357353]},
{"question": "How do I get PHP errors to display?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>I have checked my PHP ini file (<code>php.ini</code>) and <code>display_errors</code> is set and also error reporting is <code>E_ALL</code>. I have restarted my Apache webserver.</p>\n\n<p>I have even put these lines at the top of my script, and it doesn't even catch simple parse errors. For example, I declare variables with a <code>\"$\"</code> and I don't close statements<code>\";\"</code>. But all my scripts show a blank page on these errors, but I want to actually see the <strong>errors</strong> in my browser output. </p>\n\n<pre><code>error_reporting(E_ALL);\nini_set('display_errors', 1);\n</code></pre>\n\n<p>What is left to do?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>This always works for me:</p>\n\n<pre><code>ini_set('display_errors', '1');\nini_set('display_startup_errors', '1');\nerror_reporting(E_ALL);\n</code></pre>\n\n<p>However, this doesn't make PHP to show parse errors - the only way to show those errors is to modify your php.ini with this line:</p>\n\n<pre><code>display_errors = on\n</code></pre>\n\n<p>(if you don't have access to <code>php.ini</code>, then putting this line in <code>.htaccess</code> might work too):</p>\n\n<pre><code>php_flag display_errors 1\n</code></pre>\n    </div>", "total_vectors": [-0.020633578300476074, -0.015878399834036827, -0.008873963728547096, 0.04193195328116417, 0.03677342087030411, -0.014224544167518616, -0.04254364222288132, 0.030066968873143196, -0.04619065672159195, 0.0285605788230896, 0.0028762323781847954, 0.002130878856405616, -0.0273546501994133, 0.06390079110860825, -0.0032318218145519495, 0.09169085323810577, 0.014029886573553085, 0.043541859835386276, -0.0019741232972592115, -0.0028959934134036303, 0.07170051336288452, 0.020463498309254646, 0.051545798778533936, -0.04676802083849907, 0.020680734887719154, -0.026940084993839264, -0.04318124055862427, -0.019269414246082306, 0.006290243472903967, -0.027422867715358734, -0.044523272663354874, 0.053708650171756744, 0.05263436585664749, 0.08231080323457718, -0.08238337934017181, -0.023588936775922775, -0.06308665126562119, -0.053544528782367706, -0.013130644336342812, -0.032036807388067245, -0.03533840924501419, -0.02391047030687332, -0.013524690642952919, 0.041363995522260666, 0.09149442613124847, 0.012425851076841354, -0.054252464324235916, -0.001627233810722828, -0.031102582812309265, -0.06435573846101761, 0.08306721597909927, 0.09007498621940613, 0.01599586009979248, -0.04676271229982376, -0.08659597486257553, 0.008239571005105972, -0.052358921617269516, 0.0021598823368549347, -0.005428922828286886, 0.012810394167900085, 0.05836693197488785, -0.04169721156358719, -0.03682573139667511, -0.07111315429210663, -0.06768383085727692, -0.07547684758901596, -0.0840146392583847, 0.0030919238924980164, -0.0011835370678454638, 0.005040876567363739, -0.057357750833034515, 0.039274778217077255, 0.05084192007780075, -0.021331390365958214, 0.046776726841926575, -0.00656603230163455, -0.00853564590215683, 0.02609005756676197, 0.07671689987182617, 0.08536238223314285, 0.08104869723320007, 0.021339232102036476, -0.04532116279006004, -0.0003460328734945506, 0.07137513905763626, 0.022079071030020714, 0.017502550035715103, 0.049543511122465134, -0.04626626521348953, -0.02613859809935093, 0.05123057961463928, -0.006726033519953489, -0.00013864680659025908, 0.03246043249964714, 0.052443727850914, 0.03703823685646057, 0.01621871627867222, 0.04768843948841095, -0.0577164851129055, -0.08970518410205841, 0.06581616401672363, -0.028331467881798744, -0.08022329211235046, -0.00035991883487440646, -0.0009930493542924523, -0.011517247185111046, 0.09090885519981384, 0.042664773762226105, -0.06246715784072876, 0.017529016360640526, 0.0023195454850792885, -0.030857207253575325, 0.03650379553437233, -0.03070693649351597, 0.013594958931207657, -0.004397613927721977, 0.05187787488102913, 0.022318139672279358, 0.005616607144474983, -0.07028970122337341, 0.01881997101008892, -0.015559297055006027, -0.019234029576182365, 0.008726930245757103, -0.0032976313959807158, 0.05587606132030487, -0.0027177261654287577, 0.005975503008812666, 0.06191539391875267, 0.0117389727383852, -0.03956826403737068, -0.026505833491683006, -0.05342792719602585, 0.03442582115530968, -0.0002499554248061031, -0.0453759990632534, -0.06856141239404678, -0.049952004104852676, 0.008766000159084797, 0.023447541519999504, -0.002110610483214259, -0.014254421927034855, -0.018213126808404922, -0.014355726540088654, 0.03944864496588707, -0.0882272943854332, -0.021811267361044884, -0.012547055259346962, 0.036332111805677414, -0.003287044819444418, -0.002742295851930976, 0.031596675515174866, 0.0716053694486618, -0.02304847165942192, -0.043726686388254166, -0.04037341848015785, -0.009927550330758095, 0.017176607623696327, -0.01584184542298317, -0.025460492819547653, 0.00017595195095054805, 0.01292438805103302, 0.03240266069769859, -0.03503219783306122, 0.0863908976316452, -0.0777190625667572, -0.03152202442288399, -0.010732810012996197, 0.03988570347428322, 0.03794052451848984, -0.0541180819272995, -0.0866268128156662, -0.025962304323911667, -0.02048204094171524, 0.008769902400672436, -0.009191623888909817, 0.022644774988293648, 0.037132568657398224, -0.014556855894625187, -0.007237118203192949, -0.022688282653689384, 0.05505511537194252, -0.060368604958057404, -0.045080214738845825, 0.03064495138823986, 0.011359317228198051, 0.004658468998968601, 0.02669043466448784, -0.006505913566797972, 0.06376928091049194, 0.08273105323314667, 0.0021908078342676163, 0.0071727316826581955, -0.06801988184452057, 0.004567938856780529, -0.014868750236928463, -0.004472990520298481, 0.09168965369462967, -0.05878162384033203, 0.01759933866560459, -0.07778353989124298, 0.050994567573070526, -0.09152714163064957, 0.09013903886079788, 0.04178231209516525, -0.024165373295545578, -0.04140692576766014, 0.016960544511675835, -0.08926844596862793, -0.05219128727912903, -0.020730670541524887, 0.05199088901281357, -0.011043712496757507, 0.04511177912354469, 0.050875019282102585, 0.004859607666730881, -0.011768253520131111, 0.0489644929766655, -0.01311539951711893, -0.049914129078388214, -0.0020637568086385727, 0.024490581825375557, 0.030953072011470795, 0.007050854619592428, -0.01273075956851244, 0.052272599190473557, -0.04261964187026024, 0.015734557062387466, 0.02510220557451248, -0.01796996034681797, 0.0431986004114151, -0.025082096457481384, 0.07700514793395996, -0.02606099098920822, 0.055182162672281265, -0.0883605107665062, 0.053898707032203674, 0.005310545209795237, 0.010493243113160133, 0.026573054492473602, -0.01578202098608017, -0.019696006551384926, 0.061284203082323074, -0.08551571518182755, -0.026173213496804237, 0.09126902371644974, -0.008156202733516693, 0.025337697938084602, 0.09099533408880234, 0.07972759008407593, -0.08214259147644043, 0.03461042419075966, -0.022923355922102928, 0.029870305210351944, -0.0537615641951561, -0.0765029639005661, -0.016898145899176598, -0.08222150057554245, 0.013003882020711899, 0.05291765555739403, -0.010821945033967495, -0.009749418124556541, -0.08208916336297989, 0.01475217193365097, 0.061712004244327545, 0.05963073670864105, -0.005646949168294668, -0.0863901898264885, 0.02286520041525364, 0.05068434774875641, -0.049368374049663544, -0.00040946289664134383, 0.04289799928665161, -0.04262141138315201, -0.03181716799736023, -0.0008699517347849905, -0.036642368882894516, -0.06596140563488007, 0.0899726152420044, 0.05454159900546074, -0.05764176696538925, 0.04003879055380821, 0.010865376330912113, -0.00525159016251564, -0.031526174396276474, -0.08876187354326248, 0.02188781648874283, 0.030153464525938034, 0.01553715392947197, 0.08857112377882004, -0.03676693141460419, 0.05089988559484482, 0.04329848289489746, 0.022702882066369057, 0.0768279954791069, -0.0669139176607132, -0.06050826609134674, -0.025768306106328964, 0.0004656825040001422, 0.050076816231012344, -0.010101771913468838, -0.05716526135802269, -0.04641593620181084, -0.0868605449795723, -0.008771117776632309, -0.06408120691776276, -0.002771500963717699, -0.021156884729862213, 0.05521349981427193, 0.010568971745669842, -0.001456134021282196, 0.013471730053424835, -0.03128304332494736, 0.014750538393855095, 0.04150860384106636, 0.02063191868364811, 0.07348667085170746, -0.024700531736016273, 0.029060492292046547, 0.016106808558106422, 0.08714370429515839, -0.019214041531085968, -0.010874852538108826, 0.013713072054088116, 0.04423203691840172, 0.042404405772686005, 0.0061672525480389595, 0.041925277560949326, -0.011426414363086224, 0.028980152681469917, 0.05013763904571533, 0.04070565849542618, -0.04625890403985977, 0.0001324313343502581, 0.07691415399312973, 0.009395085275173187, 0.02346944250166416, -0.01187219936400652, 0.05753074213862419, -0.004267885349690914, -0.003260569181293249, -0.01143273152410984, -0.02942691557109356, 0.04441869258880615, -0.09163538366556168, -0.01575830578804016, -0.001720138592645526, 0.010174763388931751, 0.007462654262781143, -0.04159129038453102, 0.008573145605623722, 0.037930142134428024, 0.05215475708246231, -0.07352626323699951, -0.021144159138202667, -0.0872763991355896, -0.09097283333539963, 0.004100395366549492, -0.0117989182472229, -0.02399655617773533, -0.04973078891634941, 0.016625065356492996, -0.09017742425203323, -0.013276375830173492, -0.09141858667135239, -0.03875449672341347, -0.08426429331302643, 0.0035482377279549837, 0.08890154212713242, -0.03286513313651085, 0.005476991645991802, -0.00575018348172307, 0.031161844730377197, 0.06021576374769211, -0.025196382775902748, -0.07678410410881042, 0.029653970152139664, 0.016162145882844925, 0.016254140064120293, -0.009402045980095863, -0.058300551027059555, 0.02674824371933937, -0.002443718258291483, 0.07917417585849762, 0.037521447986364365, -0.06755680590867996, 0.06333767622709274, 0.02707170508801937, 0.00018900868599303067, -0.052561644464731216, -0.01714499481022358, 0.08956904709339142, 0.09124824404716492, 0.04798959195613861, 0.047672051936388016, -0.009583274833858013, -0.07741955667734146, -0.019105764105916023, 0.007884006947278976, 0.055592939257621765, 0.044699277728796005, 0.010852659121155739, -0.016885895282030106, -0.07109537720680237, 0.07304685562849045, -0.014892973937094212, -0.08338844776153564, -0.019485637545585632, 0.000993114896118641, 0.05764974653720856, -0.06836304813623428, -0.03413863480091095, -0.03363379091024399, -0.005198415368795395, -0.0017993738874793053, 0.021138625219464302, -0.02553299255669117, 0.022338053211569786, 0.007524190936237574, -0.04221192002296448, -0.001840987242758274, 0.006369359791278839, 0.04972049593925476, -0.04654794558882713, 0.06626206636428833, 0.06830696016550064, 0.059674546122550964, 0.07125063240528107, 0.014625979587435722, 0.033073540776968, 0.06610063463449478, -0.013291762210428715, 0.019474457949399948, -0.03956937789916992, -0.0678139477968216, -0.01117278914898634, 0.049085721373558044, -0.04271339997649193, 0.012470702640712261, 0.04634872078895569, 0.04440908879041672, 0.05814399942755699, 0.04563622921705246, -0.0011893190676346421, 0.006161283235996962, -0.056002844125032425, 0.0327913872897625, 0.024831734597682953, 0.023413676768541336, 0.006656669545918703, -0.03513459488749504, -0.08610862493515015, 0.09100312739610672, -0.0032719550654292107, 0.023971226066350937, -0.054939933121204376, 0.05571998655796051, 0.02075582928955555, 0.024300752207636833, -0.0153642687946558, 0.00040046434151008725, -0.01924661360681057, 0.009392227046191692, -0.024928444996476173, -0.001561877317726612, 0.031853992491960526, -0.007041562348604202, -0.08554989099502563, 0.03118034638464451, 0.04027623310685158, 0.020723897963762283, 0.002500421367585659, -0.015307135879993439, 0.02686825953423977, -0.029979899525642395, -0.025099556893110275, -0.019768767058849335, -0.05800887942314148, 0.024252187460660934, -0.010636214166879654, 0.05697283148765564, -0.039642319083213806, 0.020924635231494904, -0.007737272884696722, 0.006136623211205006, 0.020331082865595818, 0.08952125161886215, 0.011678294278681278, 0.046003662049770355, 0.023599619045853615, 0.010805509984493256, -0.024013249203562737, 0.05328116938471794, 0.030898060649633408, 0.03369205817580223, -0.01365401316434145, -0.011883440427482128, -0.027279743924736977, -0.03595373407006264, 0.0319463312625885, -0.020604336634278297, 0.038801927119493484, -0.004248340614140034, 0.06436534225940704, 0.0361468605697155, 0.0434519462287426, 0.02530294843018055, -0.015044426545500755, 0.022737203165888786, 0.0478874035179615, -0.015250587835907936, -0.07259501516819]},
{"question": "How does the SQL injection from the \u201cBobby Tables\u201d XKCD comic work?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>Just looking at:</p>\n\n<p><img src=\"https://i.stack.imgur.com/G0ifh.png\" alt=\"XKCD Strip\" title=\"Her daughter is named Help I'm trapped in a driver's license factory.\">\n<em>(Source: <a href=\"https://xkcd.com/327/\" rel=\"noreferrer\">https://xkcd.com/327/</a>)</em></p>\n\n<p>What does this SQL do:</p>\n\n<pre><code>Robert'); DROP TABLE STUDENTS; --\n</code></pre>\n\n<p>I know both <code>'</code> and <code>--</code> are for comments, but doesn't the word <code>DROP</code> get commented as well since it is part of the same line?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p><strong>It drops the students table.</strong></p>\n\n<p>The original code in the school's program probably looks something like</p>\n\n<pre><code>q = \"INSERT INTO Students VALUES ('\" + FNMName.Text + \"', '\" + LName.Text + \"')\";\n</code></pre>\n\n<p>This is the naive way to add text input into a query, and is <em>very bad</em>, as you will see.</p>\n\n<p>After the values from the first name, middle name textbox <em>FNMName.Text</em> (which is <code>Robert'); DROP TABLE STUDENTS; --</code>) and the last name textbox <em>LName.Text</em> (let's call it <code>Derper</code>) are concatenated with the rest of the query, the result is now actually <em>two queries</em> separated by the <a href=\"http://en.wikipedia.org/wiki/SQL#Language_elements\" rel=\"noreferrer\">statement terminator</a> (semicolon).  The second query has been <strong>injected</strong> into the first.  When the code executes this query against the database, it will look like this</p>\n\n<pre><code>INSERT INTO Students VALUES ('Robert'); DROP TABLE Students; --', 'Derper')\n</code></pre>\n\n<p>which, in plain English, roughly translates to the two queries:</p>\n\n<blockquote>\n  <p>Add a new record to the Students table with a Name value of 'Robert'</p>\n</blockquote>\n\n<p>and</p>\n\n<blockquote>\n  <p>Delete the Students table</p>\n</blockquote>\n\n<p>Everything past the second query is <a href=\"http://msdn.microsoft.com/en-us/library/ms181627.aspx\" rel=\"noreferrer\">marked as a comment</a>:  <code>--', 'Derper')</code></p>\n\n<p>The <code>'</code> in the student's name is not a comment, it's the closing <a href=\"http://msdn.microsoft.com/en-us/library/ms179899.aspx\" rel=\"noreferrer\">string delimiter</a>.  Since the student's name is a string, it's needed syntactically to complete the hypothetical query.  Injection attacks only work <em>when the SQL query they inject results in valid SQL</em>.</p>\n\n<p><sup><sup>Edited <strong><em>again</em></strong> as per <a href=\"https://stackoverflow.com/users/287586/dan04\">dan04</a>'s astute comment</sup></sup></p>\n    </div>", "total_vectors": [0.04712348058819771, 0.052086833864450455, 0.009923453442752361, -0.01599697768688202, -0.01308110449463129, -0.014213396236300468, -0.02074972353875637, 0.005531491711735725, 0.006973665207624435, 0.01751687563955784, 0.055972885340452194, -0.045323748141527176, -0.0496981218457222, -0.016615761443972588, -0.028961146250367165, 0.05026386305689812, 0.011281857267022133, 0.03527826443314552, -0.00464391615241766, -0.03213513270020485, 0.048629820346832275, 0.046903252601623535, -0.056032173335552216, 0.03619672358036041, 0.04491038620471954, 0.020573776215314865, -0.05897245556116104, -0.014012361876666546, -0.015074259601533413, -0.01698317751288414, 0.019461272284388542, 0.07285051792860031, 0.06404569745063782, -0.059312015771865845, 0.04594612121582031, -0.03242389112710953, -0.03146478533744812, 0.030927905812859535, -0.0025827279314398766, 0.05847192928195, 0.06418370455503464, -0.009975128807127476, 0.0395921915769577, -0.05402841418981552, 0.06836769729852676, -0.03714548423886299, 0.019633308053016663, -0.04800597205758095, 0.06624570488929749, 0.005650671664625406, 0.037949126213788986, 0.06792572140693665, -0.021388059481978416, 2.576352471805876e-06, -0.04545897990465164, 0.06911692023277283, -0.0024948539212346077, -0.044602055102586746, -0.031497977674007416, -0.024044219404459, 0.0621705986559391, -0.019635798409581184, -0.0450238399207592, 0.023832332342863083, -0.03676849603652954, -0.03284822031855583, -0.02328038029372692, 0.006157668773084879, 0.015865284949541092, 0.044234175235033035, 0.01066721510142088, 0.05322927236557007, 0.019472120329737663, 0.006172582041472197, 0.009159385226666927, -0.007181266322731972, 0.07712042331695557, -0.06073018163442612, -0.00708760553970933, 0.04538031294941902, 0.07264392077922821, -0.021015344187617302, 0.0014740383485332131, -0.07233381271362305, -0.07413088530302048, -0.05217471718788147, 0.04633311554789543, 0.034421615302562714, -0.003987061325460672, -0.061241552233695984, -0.04583592712879181, 0.05128205567598343, 0.02887555956840515, -0.05673360079526901, -0.03071104921400547, 0.07589547336101532, 0.05241863429546356, 0.06057910993695259, -0.006151098757982254, -0.07429876178503036, 0.06412699818611145, 0.053852714598178864, 0.02996843308210373, -0.07626336067914963, 0.07438486814498901, 0.041512832045555115, 0.0700458362698555, -0.05133599415421486, -0.010148080997169018, -0.062336139380931854, 0.05762786790728569, -0.026738330721855164, -0.022737743332982063, -0.0644591823220253, -0.01875726506114006, 0.045713867992162704, 0.03390456736087799, -0.005396077409386635, 0.00436239643022418, -0.06979776173830032, 0.012276369147002697, -0.007452995050698519, -0.05262767896056175, 0.020138554275035858, 0.03807961940765381, -0.07339568436145782, -0.037133701145648956, -0.040153868496418, -0.009369011037051678, -0.025777725502848625, -0.056879397481679916, 0.05712549015879631, 0.03185391053557396, 0.03020062856376171, 0.005487657152116299, -0.062021881341934204, 0.031124522909522057, 0.06594441831111908, -0.05882694944739342, -0.07473059743642807, 0.04480995237827301, 0.016833167523145676, 0.015208188444375992, 0.03213077411055565, 0.013145466335117817, -0.0734303891658783, -0.006104584317654371, 0.04634983837604523, -0.04241874814033508, 0.047495026141405106, 0.0525788776576519, 0.040862198919057846, 0.03412623330950737, -0.011329343542456627, -0.06213453784584999, -0.039108555763959885, -0.02060779184103012, 0.06148702651262283, -0.05528188869357109, 0.039037298411130905, -0.0709538385272026, 0.047327861189842224, 0.06130126118659973, -0.050478819757699966, 0.03142966702580452, -0.0726100280880928, 0.012871473096311092, -0.06653004139661789, -0.023782769218087196, -0.017208699136972427, 0.027366362512111664, -0.019332464784383774, -0.056433163583278656, -0.04183100908994675, -0.04982241988182068, 0.02820180356502533, 0.06019124761223793, -0.04797722399234772, -0.027520138770341873, 0.05065424367785454, -0.06966228038072586, -0.06102616712450981, 0.053725000470876694, -0.03919573873281479, 0.055371057242155075, 0.031333327293395996, -0.004867560230195522, 0.005989575292915106, 0.05906010419130325, 0.024416403844952583, 0.04342014342546463, 0.004553803708404303, -0.031559161841869354, -0.0068810563534498215, -0.07471256703138351, -0.013932215981185436, -0.05256405845284462, 0.07557030767202377, -0.03534475713968277, -0.07097737491130829, 0.02101961150765419, -0.02841481752693653, -0.0735391229391098, -0.05161735787987709, -0.028301721438765526, 0.04072142392396927, -0.024689767509698868, 0.03974221274256706, -0.061790481209754944, 0.004712745547294617, -0.06346383690834045, -0.05197889357805252, 0.056235745549201965, -0.06630006432533264, 0.06691180169582367, 0.063168965280056, -0.03579695522785187, -0.06373154371976852, 0.011578017845749855, 0.06108880788087845, 0.05117420852184296, -0.009271037764847279, 0.06911160796880722, 0.052334025502204895, 0.011994383297860622, 0.0027312280144542456, 0.004963004030287266, -0.04382017254829407, 0.0706600770354271, -0.036958541721105576, -0.06455007940530777, -0.053209833800792694, 0.04449956491589546, -0.002122759586200118, -0.020353786647319794, -0.006612011231482029, 0.016892073675990105, 0.07694844156503677, 0.00674164155498147, 0.047145429998636246, -0.0034122737124562263, -0.06894423812627792, 0.060439448803663254, 0.04665904864668846, 0.03598664328455925, 0.06538461893796921, -0.028098849579691887, -0.027334699407219887, 0.06983097642660141, 0.06203223019838333, -0.0741942897439003, -0.049741484224796295, -0.013116830959916115, -0.06150510907173157, -0.0016848101513460279, -0.06660634279251099, 0.04907423257827759, -0.016652777791023254, -0.0027771848253905773, 0.062409501522779465, -0.01598913036286831, -0.030019570142030716, -0.0699591115117073, 0.017494678497314453, 0.0331215038895607, -0.05290277302265167, 0.006389366462826729, -0.03959175944328308, 0.05903847515583038, 0.06210201978683472, -0.047498323023319244, 0.010984359309077263, -0.03011530265212059, -0.04568416252732277, 0.037532638758420944, 0.02271740883588791, 0.03540150076150894, 0.025031380355358124, 0.06165846064686775, 0.00935659371316433, 0.04819215089082718, 0.003134781261906028, -0.016514603048563004, 0.039824824780225754, 0.054189614951610565, -0.07203890383243561, -0.03551691025495529, 0.05367434769868851, -0.049320437014102936, 0.04148933291435242, 0.022763725370168686, -0.0042001185938715935, 0.07492829114198685, 0.04933175444602966, -0.046286892145872116, -0.05618995055556297, 0.023021671921014786, -0.06725721806287766, 0.01877967081964016, 0.04605497792363167, 0.03947906941175461, 0.04362369701266289, -0.038899071514606476, -0.05862065777182579, 0.06879547238349915, 0.0025330500211566687, 0.02876114845275879, 0.050669364631175995, -0.0164877288043499, -0.05408710613846779, -0.07407502084970474, 0.05474303662776947, -0.07577496767044067, -0.030387410894036293, 0.0638585165143013, -0.06593338400125504, 0.05991640314459801, 0.03686809912323952, -0.013519699685275555, -0.04605529084801674, 0.054709285497665405, -0.04048781841993332, 0.004531618673354387, 0.040741581469774246, 0.047183625400066376, 0.02427264116704464, -0.05366097018122673, 0.0025025673676282167, 0.017245056107640266, 0.033235810697078705, 0.005543006118386984, -0.026495208963751793, -0.051832739263772964, 0.008708111010491848, -0.05944323539733887, 0.04221949726343155, 6.715940980939195e-05, -0.011965091340243816, 0.06654461473226547, -0.012385391630232334, 0.01327911950647831, 0.039297301322221756, 0.013133579865098, -0.03346288949251175, -0.07622892409563065, 0.01572844386100769, 0.03741006553173065, -0.010223763063549995, -0.06550335139036179, 0.040096793323755264, -0.01557379961013794, -0.026013173162937164, 0.043349407613277435, -0.07154515385627747, 0.03501567244529724, -0.07549329847097397, -0.07578714191913605, 0.047921229153871536, -0.03588740527629852, 0.012984673492610455, 0.05466895550489426, 0.043477613478899, 0.02230365015566349, -0.0448058657348156, -0.07104992121458054, -0.0016422405606135726, -0.07463673502206802, 0.011168383993208408, -0.03630322217941284, -0.024779988452792168, -0.055038027465343475, -0.011765415780246258, 0.006453666370362043, 0.03723377361893654, 0.052870847284793854, -0.023160859942436218, 0.04502751678228378, -0.02546628750860691, 0.02166539989411831, -0.060133498162031174, 0.033976539969444275, -0.023584701120853424, 0.044790834188461304, 0.04881634563207626, -0.010459784418344498, -0.05552182346582413, -0.06631305068731308, -0.010521753691136837, 0.05614377558231354, -0.042891085147857666, 0.05526427552103996, 0.03810563683509827, 0.06988877058029175, -0.06706614792346954, 0.028095627203583717, -0.0025760948192328215, -0.06589359790086746, 0.07039020955562592, 0.05799821764230728, 0.011450446210801601, 0.04553961753845215, 0.03146475926041603, 0.03486194089055061, -0.008677814155817032, 0.0040633464232087135, 0.02221711538732052, -0.013971364125609398, -0.05892828851938248, -0.026410460472106934, 0.025919409468770027, -0.03167688846588135, -0.009319527074694633, 0.07226547598838806, 0.07395245879888535, 0.06521102041006088, -0.025456951931118965, -0.06691408157348633, 0.05150110647082329, -0.04469678923487663, -0.03033062256872654, 0.034614741802215576, -0.0004062530060764402, 0.008733212016522884, -0.06708656996488571, 0.0007716112886555493, 0.06751549988985062, -0.03318518027663231, 0.000860322848893702, -0.06818179786205292, 0.015904800966382027, -0.05801091343164444, -0.07324988394975662, 0.0497916117310524, -0.017968550324440002, -0.03128056600689888, 0.00845625251531601, 0.005675458814948797, 0.033286165446043015, 0.04425062611699104, 0.002551020821556449, 0.030505502596497536, -0.010582946240901947, -0.0040359655395150185, 0.07212221622467041, -0.059821899980306625, -0.03345252573490143, -0.0026764697395265102, 0.04609930142760277, -0.05014491081237793, -0.030528606846928596, 0.05263613164424896, -0.0048924703150987625, 0.07420460134744644, 0.04525309056043625, -0.02651098370552063, -0.03443709760904312, -0.009760700166225433, -0.02991648018360138, -0.032846853137016296, 0.0659838542342186, 0.026153745129704475, -0.025125842541456223, -0.07322315126657486, -0.0281152855604887, 0.012426012195646763, -0.011775372549891472, 0.055163946002721786, 0.0245442483574152, -0.004394801799207926, 0.05622340366244316, -0.06805206835269928, 0.005226987414062023, -0.027982836589217186, 0.05093998461961746, 0.01717308536171913, -0.020389659330248833, -0.06184165179729462, 0.04064672440290451, 0.04906326159834862, -0.0581946037709713, -0.06499557197093964, 0.0067183938808739185, -0.035099055618047714, -0.04757421091198921, -0.001809017499908805, -0.01669243350625038, -0.046511389315128326, -0.04244076833128929, -0.032107654958963394, -0.05627410113811493, -0.06750340014696121, 0.07060186564922333, -0.053232964128255844, 0.04743841663002968, -0.013961724936962128, 0.014192250557243824, -0.017197152599692345, 0.04826079681515694, -0.06356184184551239, 0.06282567232847214, 0.02092091180384159, 0.050629425793886185, 0.022857975214719772, 0.04997378587722778, -0.039122216403484344, 0.002397336298599839, 0.05259311571717262, -0.019959313794970512, -0.04650837555527687, -0.009016058407723904, 0.06975778937339783, 0.027805600315332413]},
{"question": "What is the difference between single-quoted and double-quoted strings in PHP?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>I'm a little confused why I see some code in PHP with string placed in single quotes and sometimes in double quotes.</p>\n\n<p>I just know in .NET, or the C language, if it is in a single quote, that means it is a character, not a string.</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p><a href=\"https://php.net/manual/en/language.types.string.php\" rel=\"noreferrer\"><strong>PHP strings</strong></a> can be specified not just in <em>two</em> ways, but in <strong>four</strong> ways.</p>\n\n<ol>\n<li><a href=\"https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.single\" rel=\"noreferrer\"><strong>Single quoted strings</strong></a> will display things almost completely \"as is.\" Variables and most escape sequences will not be interpreted. The exception is that to display a literal single quote, you can escape it with a back slash <code>\\'</code>, and to display a back slash, you can escape it with another backslash <code>\\\\</code> (<strong>So yes, even single quoted strings are parsed</strong>).</li>\n<li><a href=\"https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.double\" rel=\"noreferrer\"><strong>Double quote strings</strong></a> will display a host of escaped characters (including some regexes), and variables in the strings will be evaluated. An important point here is that <strong>you can use curly braces to isolate the name of the variable you want evaluated</strong>. For example let's say you have the variable <code>$type</code> and you want to <code>echo \"The $types are\"</code>. That will look for the variable <code>$types</code>. To get around this use <code>echo \"The {$type}s are\"</code> You can put the left brace before or after the dollar sign. Take a look at <a href=\"https://www.php.net/manual/en/language.types.string.php#language.types.string.parsing\" rel=\"noreferrer\">string parsing</a> to see how to use array variables and such.</li>\n<li><a href=\"https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc\" rel=\"noreferrer\"><strong>Heredoc</strong></a> string syntax works like double quoted strings. It starts with <code>&lt;&lt;&lt;</code>. After this operator, an identifier is provided, then a newline. The string itself follows, and then the same identifier again to close the quotation. You don't need to escape quotes in this syntax. </li>\n<li><a href=\"https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.nowdoc\" rel=\"noreferrer\"><strong>Nowdoc</strong></a> (since PHP 5.3.0) string syntax works essentially like single quoted strings. The difference is that not even single quotes or backslashes have to be escaped. A nowdoc is identified with the same <code>&lt;&lt;&lt;</code> sequence used for heredocs, but the identifier which follows is enclosed in single quotes, e.g. <code>&lt;&lt;&lt;'EOT'</code>. <strong>No parsing is done in nowdoc.</strong></li>\n</ol>\n\n<p><strong>Notes:</strong>\nSingle quotes inside of single quotes and double quotes inside of double quotes must be escaped:</p>\n\n<pre><code>$string = 'He said \"What\\'s up?\"';\n$string = \"He said \\\"What's up?\\\"\";\n</code></pre>\n\n<p><strong>Speed:</strong><br>\nI would not put too much weight on single quotes being faster than double quotes. They probably are faster in certain situations. Here's an article <a href=\"https://web.archive.org/web/20170703004051/https://www.phplens.com/lens/php-book/optimizing-debugging-php.php\" rel=\"noreferrer\">explaining one manner in which single and double quotes are essentially equally fast since PHP 4.3</a> (<code>Useless Optimizations</code> toward the bottom, section <code>C</code>). Also, this <a href=\"https://www.phpbench.com/\" rel=\"noreferrer\"><strong>benchmarks page</strong></a> has a single vs double quote comparison. Most of the comparisons are the same. There is one comparison where double quotes are slower than single quotes.</p>\n    </div>", "total_vectors": [0.0038906338158994913, -0.06800723820924759, 0.047061219811439514, 0.06986045837402344, 0.010388459078967571, -0.007124353665858507, -0.01079661026597023, 0.009882967919111252, -0.06659629195928574, 0.062016263604164124, -0.009592488408088684, 0.051166631281375885, -0.010616090148687363, 0.029057154431939125, -0.029828986153006554, 0.09660645574331284, -0.011844511143863201, 0.03244619816541672, 0.015624061226844788, 0.01194834616035223, 0.08857052773237228, 0.01990092545747757, 0.03816604241728783, 0.0015895513352006674, -0.05907170847058296, -0.018222929909825325, -0.021410824730992317, 0.048376645892858505, 0.0029929978772997856, 0.0011312548303976655, -0.017352942377328873, 0.04886006563901901, -0.022178001701831818, 0.08165820688009262, -0.017834214493632317, 0.02622922509908676, 0.001554905786179006, 0.005660192109644413, -0.02140604332089424, -0.012142477557063103, 0.005691910162568092, -0.017057426273822784, -0.029691658914089203, -0.013440351001918316, 0.09351741522550583, -0.029216881841421127, -0.003951379097998142, 0.014264638535678387, 0.02678809128701687, -0.019902652129530907, 0.056740693747997284, 0.09423376619815826, -0.025034328922629356, -0.028091344982385635, -0.06905658543109894, 0.002855385886505246, -0.03457760438323021, 0.0510309599339962, 0.056311532855033875, 0.04389496520161629, 0.013116077519953251, -0.009682795964181423, -0.026119360700249672, 0.003401990747079253, 0.03995790332555771, -0.07326570898294449, 0.009948723018169403, 0.016648966819047928, 0.013415868394076824, 0.039601944386959076, -0.03268834576010704, 0.03976905345916748, 0.04877547547221184, -0.06388767063617706, -0.048293404281139374, 0.06524915248155594, -0.010485864244401455, 0.01533141452819109, 0.03469156473875046, 0.07152388244867325, 0.0601968988776207, 0.053558144718408585, 0.04829585179686546, -0.03107305057346821, 0.09292753040790558, -0.01304871216416359, 0.01886671409010887, 0.03473442792892456, -0.07005421817302704, -0.014369118958711624, 0.04141667112708092, 0.011308783665299416, 0.029478130862116814, 0.02221750095486641, 0.06799159944057465, 0.0017991091590374708, -0.07526829838752747, 0.03717834874987602, -0.04983805492520332, -0.08412309736013412, 0.041531097143888474, 0.057249072939157486, 0.05225752294063568, -0.018628299236297607, -0.012399619445204735, -0.00022212337353266776, 0.088924840092659, -0.01092477422207594, -0.07688542455434799, 0.010685683228075504, -0.0532245896756649, 0.02163543738424778, -0.012230480089783669, 0.0179890226572752, -0.04664187505841255, 0.008305898867547512, 0.03974622115492821, 0.06290806084871292, -0.001227242755703628, -0.019697796553373337, -0.01826711930334568, -0.007616023998707533, -0.006884461268782616, -0.042323071509599686, -0.05325724184513092, -3.5887838748749346e-05, 0.02031911537051201, -0.017311464995145798, 0.08164839446544647, 0.01279255747795105, -0.05824980139732361, 0.018282024189829826, 0.007387095130980015, -0.03249380365014076, 0.024998551234602928, 0.009995845146477222, 0.07232020050287247, 0.0398499071598053, -0.048657484352588654, 0.008647944778203964, -0.012068728916347027, -0.028485193848609924, -0.0009496398270130157, 0.001153277582488954, -0.03073013760149479, -0.09628640115261078, -0.009209544397890568, -0.0332300029695034, 0.020699582993984222, 0.011875812895596027, 0.011673958972096443, -0.06100316345691681, -0.04568156227469444, 0.04397384077310562, -0.010469000786542892, -0.048886340111494064, -0.012115253135561943, 0.041108258068561554, -0.005930601619184017, 0.007095422595739365, 0.021973418071866035, 0.05421910434961319, -0.005321939010173082, 0.018283434212207794, 0.0701964795589447, -0.051684945821762085, -0.003085968317463994, -0.03298063948750496, -0.021483706310391426, 0.036231376230716705, -0.014589390717446804, -0.002927290741354227, 0.02717006392776966, -0.01926104724407196, -0.010282562114298344, -0.02712038904428482, 0.022182900458574295, 0.01180280465632677, 0.0024379603564739227, 0.052424270659685135, 0.011645869351923466, 0.03769531846046448, 0.0076445345766842365, 0.014505499973893166, 0.03661822900176048, -2.9402641303022392e-05, -0.040367793291807175, 0.08160866796970367, -0.020118921995162964, 0.05977902188897133, 0.08674360811710358, -0.03938668221235275, 0.016520818695425987, -0.08116462081670761, -0.057070307433605194, 0.008865333162248135, 0.01291929092258215, 0.09631850570440292, 0.02978583425283432, 0.02127671241760254, -0.09336628764867783, -0.04325159266591072, -0.0934363305568695, -0.010686438530683517, -0.011697824113070965, -0.0004380709142424166, -0.05852721631526947, 0.03741102293133736, -0.08588261902332306, -0.03456319496035576, -0.0388479009270668, 0.02848842740058899, 0.00902961939573288, 0.026699626818299294, 0.08051797747612, 0.008436135947704315, 0.008506400510668755, -0.0936625674366951, 0.031639717519283295, 0.040862713009119034, -0.02687147818505764, 0.007036282680928707, -0.0014386472757905722, -0.030848825350403786, -0.06112326681613922, 0.02832185849547386, -0.03388088196516037, -0.034593626856803894, 0.007250047288835049, 0.011457516811788082, -0.009521257132291794, 0.07875232398509979, -0.02668415755033493, -0.08720538765192032, 0.06572441011667252, -0.09087255597114563, 0.08720485866069794, -0.018755769357085228, 0.03196180611848831, 0.017017485573887825, -0.07027231156826019, -0.013905148953199387, -0.09504612535238266, -0.06890407204627991, 0.010803505778312683, 0.07347328215837479, -0.01460306067019701, -0.02956520952284336, 0.09592591971158981, 0.0744970366358757, -0.06887878477573395, -0.007582843769341707, 0.010481178760528564, 0.07828738540410995, 0.04245197772979736, -0.09561587125062943, -0.042419709265232086, -0.05457102507352829, -0.03473895043134689, 0.013854501768946648, -0.0513332337141037, -0.04010707139968872, -0.08545609563589096, -0.03601737320423126, 0.027017300948500633, 0.0032973557244986296, 0.006896033883094788, -0.09067532420158386, -0.07828692346811295, 0.026108933612704277, -0.07190835475921631, -0.07366891205310822, 0.07044069468975067, -0.005330776330083609, -0.036121804267168045, -0.012053386308252811, -0.026476167142391205, 0.07571876794099808, 0.08208498358726501, -0.013963364064693451, -0.016003083437681198, 0.04532734677195549, 0.010120948776602745, 0.03405272588133812, -0.04581312835216522, -0.08250375092029572, 0.019390355795621872, 0.022323155775666237, 0.03631211444735527, 0.07199609279632568, 0.014901543967425823, -0.0039118435233831406, 0.03773198276758194, 0.011535679921507835, -0.02768145129084587, -0.06316854059696198, -0.03659387677907944, -0.002069562440738082, 0.017762331292033195, 0.029188381507992744, -0.021594859659671783, -0.0559861846268177, -0.06038034334778786, -0.07413720339536667, -0.05007156729698181, -0.04160159081220627, -0.020702697336673737, 0.014173230156302452, 0.004240038339048624, -0.008154907263815403, -0.011112703941762447, 0.0611061155796051, 0.048633724451065063, 0.027429768815636635, -0.006365786772221327, -0.005935164634138346, 0.031600724905729294, 0.06093538925051689, 0.07728097587823868, -0.05332740768790245, 0.07777769863605499, -0.032627616077661514, 0.01919962279498577, -0.0073670740239322186, 0.04475826025009155, -0.02047058194875717, 0.008620308712124825, 0.053589243441820145, 0.06363912671804428, 0.008519498631358147, -0.03192589804530144, -0.009514372795820236, 0.02159147523343563, 0.04101535677909851, 0.04382084310054779, -0.009063346311450005, 0.005022140685468912, -0.04676206782460213, 0.0214696004986763, 0.017736567184329033, -0.05369541421532631, 0.024993959814310074, 0.02474772371351719, 0.01772465370595455, -0.09620439261198044, 0.04190981388092041, 0.060817960649728775, 0.004701126366853714, 0.04060978442430496, 0.00421924889087677, 0.018812425434589386, -0.0474863275885582, 0.0628402978181839, -0.08239177614450455, -0.037166204303503036, -0.07883740216493607, -0.09425248950719833, -0.010613061487674713, -0.04329993203282356, -0.07267940789461136, 0.020268931984901428, 0.017654290422797203, -0.0934872105717659, -0.004766910802572966, -0.09322642534971237, -0.005473053548485041, -0.07692933082580566, 0.02939859963953495, -0.016818512231111526, -0.08342991024255753, -0.02959327958524227, 0.0506046861410141, 0.06895887851715088, 0.045657917857170105, -0.007377274800091982, -0.08022896945476532, 0.03330732509493828, 0.022459300234913826, 0.0412784107029438, -0.04825698211789131, 0.029892755672335625, 0.030569275841116905, 0.02684031054377556, 0.06827804446220398, -0.03687534108757973, -0.029590418562293053, 0.032053347676992416, 0.033586256206035614, 0.04079486429691315, -0.046738382428884506, 0.026350008323788643, 0.08477797359228134, 0.08749508857727051, -0.009863121435046196, 0.007651616353541613, -0.04847902059555054, -0.0457046702504158, 0.014031952247023582, -0.028635233640670776, 0.07483936101198196, 0.0046799564734101295, 0.04103913903236389, 0.0005512675270438194, -0.05908554792404175, 0.06993222236633301, 0.034933872520923615, -0.08543246984481812, -0.009894727729260921, -0.03518958389759064, 0.048499882221221924, -0.06456425040960312, 0.00951734371483326, 0.058051228523254395, 0.014698626473546028, 0.0020259879529476166, -0.05741822347044945, -0.015520358458161354, 0.002033597556874156, -0.03544162958860397, -0.04469980299472809, 0.01395128108561039, 0.031726349145174026, -0.01980232633650303, -0.019122103229165077, 0.05060239136219025, 0.05791807547211647, 0.0435481071472168, 0.03301186114549637, -0.02522466890513897, 0.044323913753032684, -0.008437610231339931, -0.013313736766576767, 0.04195285588502884, -0.004384237341582775, -0.005545289255678654, -0.03292592242360115, -0.009087075479328632, 0.06139203906059265, 0.013016979210078716, 0.013174284249544144, 0.019811231642961502, 0.05263091251254082, -0.009879173710942268, -0.0013340761652216315, 0.009113674983382225, -0.04241662472486496, 0.08186527341604233, -0.033291760832071304, -0.017525700852274895, 0.022934280335903168, 0.010143280029296875, -0.07322190701961517, 0.09549424797296524, -0.014941476285457611, 0.024246299639344215, -0.08801595121622086, 0.041363053023815155, 0.0027720793150365353, 0.03600722923874855, 0.06998729705810547, -0.010883631184697151, -0.01848435401916504, -0.015885256230831146, 0.05599069967865944, -0.01470904890447855, -0.08881015330553055, -0.04279732331633568, -0.08917262405157089, 0.043713536113500595, 0.037988390773534775, 0.005570985842496157, 0.04413441941142082, 0.019439244642853737, 0.03544114530086517, -0.01693735457956791, 0.03297533467411995, -0.018216446042060852, -0.024355703964829445, -0.0022773740347474813, -0.0647113248705864, -0.015729811042547226, -0.0038052969612181187, 0.0004680152633227408, -0.039824228733778, 0.015592537820339203, 0.06241116300225258, -0.09297303110361099, -0.01401942316442728, 0.017291506752371788, 0.0165384653955698, 0.060587916523218155, 0.002295777667313814, -0.0032709548249840736, 0.003474316094070673, -0.004654052667319775, 0.028794005513191223, 0.00409134803339839, -0.04162829369306564, 0.01489005796611309, 0.04023528844118118, 0.015280826017260551, -0.0267590694129467, 0.028038905933499336, 0.07716213166713715, 0.060345608741045, 0.03578505292534828, 0.045909199863672256, -0.014923474751412868, 0.047975558787584305, 0.0594237819314003, 0.0009573042625561357, -0.07909201085567474]},
{"question": "How can I read inputs as numbers?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                    <div>\r\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\r\n        <div class=\"grid fd-column fw-nowrap\">\r\n            <div class=\"grid fw-nowrap\">\r\n                    <div class=\"grid--cell mr8\">\r\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconLock\" width=\"18\" height=\"18\" viewbox=\"0 0 18 18\"><path d=\"M16 9a2 2 0 00-2-2V6A5 5 0 004 6v1a2 2 0 00-2 2v6c0 1.1.9 2 2 2h10a2 2 0 002-2V9zm-7 5a2 2 0 110-4 2 2 0 010 4zm3.1-7H5.9V6a3.1 3.1 0 016.2 0v1z\"></path></svg>\r\n                    </div>\r\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\r\n                    <div class=\"grid--cell fl1 lh-lg\">\r\n                        <b>This question's answers are a <a href=\"/help/privileges/edit-community-wiki\">community effort</a></b>. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n</aside>\r\n\r\n    </div>\r\n\r\n<p>Why are <code>x</code> and <code>y</code> strings instead of ints in the below code?</p>\n\n<p>(Note: in Python 2.x use <code>raw_input()</code>. In Python 3.x use <code>input()</code>. <code>raw_input()</code> was renamed to <code>input()</code> in Python 3.x)</p>\n\n<pre><code>play = True\n\nwhile play:\n\n    x = input(\"Enter a number: \")\n    y = input(\"Enter a number: \")\n\n    print(x + y)\n    print(x - y)\n    print(x * y)\n    print(x / y)\n    print(x % y)\n\n    if input(\"Play again? \") == \"no\":\n        play = False\n</code></pre>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<h3>Solution</h3>\n<p>Since Python 3, <code>input</code> returns a string which you have to explicitly convert to <code>int</code>s, with <a href=\"https://docs.python.org/3/library/functions.html#int\" rel=\"nofollow noreferrer\"><code>int</code></a>, like this</p>\n<pre><code>x = int(input(\"Enter a number: \"))\ny = int(input(\"Enter a number: \"))\n</code></pre>\n<p>You can accept numbers of any base and convert them directly to base-10 with the <code>int</code> function, like this</p>\n<pre><code>&gt;&gt;&gt; data = int(input(\"Enter a number: \"), 8)\nEnter a number: 777\n&gt;&gt;&gt; data\n511\n&gt;&gt;&gt; data = int(input(\"Enter a number: \"), 16)\nEnter a number: FFFF\n&gt;&gt;&gt; data\n65535\n&gt;&gt;&gt; data = int(input(\"Enter a number: \"), 2)\nEnter a number: 10101010101\n&gt;&gt;&gt; data\n1365\n</code></pre>\n<p>The second parameter tells what is the base of the numbers entered and then internally it understands and converts it. If the entered data is wrong it will throw a <code>ValueError</code>.</p>\n<pre class=\"lang-none prettyprint-override\"><code>&gt;&gt;&gt; data = int(input(\"Enter a number: \"), 2)\nEnter a number: 1234\nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\nValueError: invalid literal for int() with base 2: '1234'\n</code></pre>\n<p>For values that can have a fractional component, the type would be <code>float</code> rather than <code>int</code>:</p>\n<pre><code>x = float(input(\"Enter a number:\"))\n</code></pre>\n<h3>Differences between Python 2 and 3</h3>\n<p><strong>Summary</strong></p>\n<ul>\n<li>Python 2's <code>input</code> function evaluated the received data, converting it to an integer implicitly (read the next section to understand the implication), but Python 3's <code>input</code> function does not do that anymore.</li>\n<li>Python 2's equivalent of Python 3's <code>input</code> is the <code>raw_input</code> function.</li>\n</ul>\n<p><strong>Python 2.x</strong></p>\n<p>There were two functions to get user input, called <a href=\"https://docs.python.org/2/library/functions.html#input\" rel=\"nofollow noreferrer\"><code>input</code></a> and <a href=\"https://docs.python.org/2/library/functions.html#raw_input\" rel=\"nofollow noreferrer\"><code>raw_input</code></a>. The difference between them is, <code>raw_input</code> doesn't evaluate the data and returns as it is, in string form. But, <code>input</code> will evaluate whatever you entered and the result of evaluation will be returned. For example,</p>\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.version\n'2.7.6 (default, Mar 22 2014, 22:59:56) \\n[GCC 4.8.2]'\n&gt;&gt;&gt; data = input(\"Enter a number: \")\nEnter a number: 5 + 17\n&gt;&gt;&gt; data, type(data)\n(22, &lt;type 'int'&gt;)\n</code></pre>\n<p>The data <code>5 + 17</code> is evaluated and the result is <code>22</code>. When it evaluates the expression <code>5 + 17</code>, it detects that you are adding two numbers and so the result will also be of the same <code>int</code> type. So, the type conversion is done for free and <code>22</code> is returned as the result of <code>input</code> and stored in <code>data</code> variable. You can think of <code>input</code> as the <code>raw_input</code> composed with an <a href=\"https://docs.python.org/2/library/functions.html#eval\" rel=\"nofollow noreferrer\"><code>eval</code></a> call.</p>\n<pre><code>&gt;&gt;&gt; data = eval(raw_input(\"Enter a number: \"))\nEnter a number: 5 + 17\n&gt;&gt;&gt; data, type(data)\n(22, &lt;type 'int'&gt;)\n</code></pre>\n<p><strong>Note:</strong> you should be careful when you are using <code>input</code> in Python 2.x. I explained why one should be careful when using it, in <a href=\"https://stackoverflow.com/a/21122817/1903116\">this answer</a>.</p>\n<p>But, <code>raw_input</code> doesn't evaluate the input and returns as it is, as a string.</p>\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.version\n'2.7.6 (default, Mar 22 2014, 22:59:56) \\n[GCC 4.8.2]'\n&gt;&gt;&gt; data = raw_input(\"Enter a number: \")\nEnter a number: 5 + 17\n&gt;&gt;&gt; data, type(data)\n('5 + 17', &lt;type 'str'&gt;)\n</code></pre>\n<p><strong>Python 3.x</strong></p>\n<p>Python 3.x's <a href=\"https://docs.python.org/3/library/functions.html#input\" rel=\"nofollow noreferrer\"><code>input</code></a> and Python 2.x's <code>raw_input</code> are similar and <code>raw_input</code> is not available in Python 3.x.</p>\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.version\n'3.4.0 (default, Apr 11 2014, 13:05:11) \\n[GCC 4.8.2]'\n&gt;&gt;&gt; data = input(\"Enter a number: \")\nEnter a number: 5 + 17\n&gt;&gt;&gt; data, type(data)\n('5 + 17', &lt;class 'str'&gt;)\n</code></pre>\n    </div>", "total_vectors": [0.02126697450876236, -0.08854503929615021, 0.001254760310985148, 0.01576058380305767, -0.031443528831005096, -0.013314330950379372, 0.030660832300782204, -0.014755954034626484, -0.08914201706647873, 0.027718907222151756, -0.033103249967098236, -0.0009546757210046053, -0.029211940243840218, -0.030592752620577812, 0.03057885728776455, 0.09804237633943558, 0.024066729471087456, 0.007876747287809849, -0.018071262165904045, 0.017354894429445267, 0.04144806042313576, -0.008263444527983665, 0.04289228469133377, -0.002893478609621525, -0.05734269693493843, 0.03541385754942894, -0.05792137235403061, 0.0265060905367136, 0.02598448097705841, -0.036303870379924774, -0.07712879031896591, -0.0007006213418208063, 0.06917847692966461, 0.03387262299656868, -0.034830909222364426, -0.023110199719667435, -0.024799637496471405, 0.026186835020780563, -0.011582165025174618, 0.045487575232982635, 0.021075494587421417, 0.03593304380774498, 0.03064451366662979, 0.0425628125667572, 0.05404222384095192, -0.011676798574626446, 0.009507197886705399, 0.01169242151081562, -0.04786207899451256, -0.001235766103491187, 0.013810542412102222, 0.10548841953277588, 0.00647500017657876, -0.03341809660196304, -0.00585589837282896, 0.0015396572416648269, -0.05543316528201103, -0.007950305938720703, -0.016694074496626854, -0.0021455329842865467, -0.030940789729356766, 0.023958537727594376, 0.002454174682497978, -0.08557841926813126, 0.018258199095726013, -0.08288164436817169, -0.06366752833127975, -0.00847324263304472, 0.06991855055093765, 0.0008328697294928133, 0.0539495013654232, 0.002149786800146103, 0.040187448263168335, 0.08944885432720184, 0.059999797493219376, 0.06714794784784317, -0.017234476283192635, 0.008780897594988346, 0.06814300268888474, 0.08600703626871109, -0.013980955816805363, -0.006092764902859926, 0.016443340107798576, 0.035813260823488235, -0.033437732607126236, -0.004964923020452261, 0.04543841630220413, 0.03646201640367508, -0.03282162919640541, -0.05342578887939453, 0.02466929331421852, -0.03367028385400772, 0.011296403594315052, -0.046242620795965195, -0.0604296550154686, 0.06240168586373329, 0.00834790337830782, 0.06271234899759293, -0.03313848376274109, -0.08892934024333954, -0.025510597974061966, 0.06632173806428909, -0.08234350383281708, 0.058785852044820786, 0.0706920251250267, -0.005310853477567434, -0.0003667940618470311, 0.0031830158550292253, 0.015855103731155396, 0.06993573904037476, 0.024424951523542404, 0.0084563372656703, -0.00228841882199049, -0.01869935356080532, -0.09051096439361572, 0.017104649916291237, 0.06326743960380554, -0.028552640229463577, 0.04155193269252777, 0.047116510570049286, 0.06500855833292007, 0.018627749755978584, -0.005171796306967735, -0.04612099006772041, -0.03446997329592705, 0.062639519572258, -0.05262336507439613, -0.04919334128499031, 0.07863815873861313, -0.01627393439412117, -0.050583068281412125, -0.059464480727910995, -0.07296031713485718, 0.04091653972864151, 0.027336247265338898, 0.003098436165601015, -0.050903499126434326, -0.002045363886281848, 0.024900510907173157, -0.027147019281983376, -0.04900152608752251, -0.0359620600938797, 0.0003382687864359468, -0.020707624033093452, 0.024006111547350883, -0.019437193870544434, -0.027865182608366013, 0.015964839607477188, -0.024278495460748672, 0.02050841972231865, 0.05162792652845383, 0.05716520547866821, 0.0018565263599157333, 0.003943112678825855, -0.06744988262653351, 0.008246125653386116, 0.008418037556111813, 0.05041705444455147, -0.04470697417855263, -0.03038552962243557, -0.06144561618566513, -0.020209714770317078, -0.01800176315009594, -0.04161772504448891, 0.027291635051369667, -0.0612347312271595, -0.036514073610305786, -0.06772611290216446, -0.01578422077000141, 0.05559123679995537, -0.034673452377319336, 0.03125748410820961, 0.043494198471307755, -0.02194417268037796, -0.002602766267955303, -0.04289741441607475, -0.036470022052526474, -0.017250724136829376, -0.03375786915421486, -0.0006258607609197497, -0.016297247260808945, -0.0883253887295723, 0.01097759697586298, -0.010545052587985992, 0.05183996260166168, 0.01853792555630207, 0.012251630425453186, 0.0639595091342926, -0.008099926635622978, 0.08598507195711136, 0.07918853312730789, 0.008999839425086975, 0.015323750674724579, -0.01279779989272356, 0.02236679568886757, -0.024217164143919945, 0.015938743948936462, 0.0764368548989296, 0.0750732347369194, -0.06552434712648392, -0.01636327989399433, -0.033175788819789886, -0.03726530447602272, 0.08956219255924225, -0.03581758588552475, -0.04195118695497513, -0.012643485330045223, -0.060158561915159225, 0.008941128849983215, 0.048077404499053955, -0.02990335412323475, 0.015564256347715855, -0.032790545374155045, 0.06062496453523636, 0.0409725122153759, 0.05920233950018883, -0.061765022575855255, -0.005995230749249458, 0.006719109136611223, -0.028894569724798203, 0.053767286241054535, 0.010641193017363548, -0.024631626904010773, 0.013597927987575531, -0.03386709466576576, 0.0429985411465168, -0.029218852519989014, -0.030606472864747047, 0.07637865841388702, 0.06061934307217598, 0.06995439529418945, -0.043338436633348465, -0.07203259319067001, 0.04178909212350845, 0.08965196460485458, -0.012989349663257599, 0.07350357621908188, -0.04461788013577461, -0.014920545741915703, 0.045898549258708954, -0.0427633635699749, -0.023034678772091866, 0.0496881864964962, 0.010582326911389828, -0.0023828695993870497, 0.1022292822599411, 0.03248157352209091, 0.024497248232364655, 0.10389821976423264, 0.03154337406158447, -0.019576236605644226, -0.0037855806294828653, -0.021505670621991158, -0.029005633667111397, -0.027337688952684402, -0.08759793639183044, 0.035893261432647705, -0.07127483189105988, -0.043486565351486206, 0.008840801194310188, -0.03760796785354614, -0.036970801651477814, -0.10100223869085312, -0.048424165695905685, 0.0527677983045578, 0.04086624085903168, 0.02670222520828247, -0.09949222952127457, -0.03742434084415436, 0.061560019850730896, -0.028740139678120613, -0.019015995785593987, 0.005965616088360548, -0.0895821824669838, 0.01212221011519432, 0.036898985505104065, -0.01662190444767475, 0.012384995818138123, 0.03190397843718529, -0.01779598742723465, -0.049679502844810486, -0.037922829389572144, 0.023431308567523956, -0.008010233752429485, -0.005632287357002497, -0.023675547912716866, 0.003971755504608154, 0.028861546888947487, -0.001152444863691926, -0.0486152358353138, 0.04919174313545227, -0.021420881152153015, -0.05115022137761116, 0.052539531141519547, 0.09635838866233826, -0.048742830753326416, 0.01047123409807682, -0.0559811145067215, 0.001018670154735446, -0.04663749039173126, 0.03603947535157204, 0.042398836463689804, -0.07603080570697784, -0.03238457813858986, -0.014865671284496784, -0.01617487706243992, -0.05343141406774521, -0.0677989050745964, -0.05857972800731659, -0.027538863942027092, 0.0005651253159157932, 0.03362150117754936, -0.09678267687559128, 0.05059928447008133, 0.011235316284000874, 0.05520569533109665, -0.0594760961830616, -0.0024521835148334503, 0.08853556215763092, -0.05137258395552635, 0.024007147178053856, -0.044935841113328934, -0.004631022922694683, -0.03360406681895256, -0.023957546800374985, -0.029107963666319847, 0.021690838038921356, 0.016076941043138504, -0.0984618291258812, -0.008165804669260979, 0.002146858489140868, 0.02087433449923992, -0.04302595555782318, 0.04070427268743515, -0.027887258678674698, -0.02579648047685623, -0.045945148915052414, -0.0533108115196228, -0.012943621724843979, -0.03324884921312332, 0.017299888655543327, 0.0015275547048076987, -0.010486342944204807, 0.053041011095047, -0.08847865462303162, 0.00811586994677782, 0.06286253035068512, 0.07684285938739777, 0.058135878294706345, -0.011990845203399658, -0.01061340793967247, -0.04609295353293419, -0.02364163100719452, 0.04219847172498703, -0.010210998356342316, 0.03574945777654648, -0.09997527301311493, -0.05299598351120949, 0.032594144344329834, -0.02949846163392067, -0.09719380736351013, -0.01147546712309122, -0.03541211038827896, -0.01996557042002678, -0.020072268322110176, -0.027916129678487778, -0.09913963079452515, 0.013260713778436184, 0.07068875432014465, 0.010946376249194145, 0.03833141177892685, -0.02215931937098503, -0.06471611559391022, -0.004790512844920158, -0.004025221802294254, -0.10011693090200424, -0.04804502800107002, -0.05069299042224884, -0.002876944374293089, 0.025024645030498505, -0.029967544600367546, 0.0645875558257103, -0.01373673602938652, -0.020666511729359627, 0.010349361225962639, 0.03150831162929535, 0.07447004318237305, 0.021828733384609222, 0.011843163520097733, -0.04869727045297623, -0.034509625285863876, 0.011972841806709766, -0.003965128678828478, -0.014100239612162113, 0.004614067729562521, -0.024958599358797073, 0.033141184598207474, -0.036834221333265305, 0.008648913353681564, -0.022427314892411232, 0.054655250161886215, 0.004400537349283695, 0.03180926665663719, 0.026821108534932137, 0.0350395105779171, -0.04030941426753998, -0.0638970211148262, 0.0389334075152874, -0.028302613645792007, 0.011792129836976528, -0.09510395675897598, 0.021478358656167984, -0.02364681102335453, -0.03580356016755104, -0.01180102489888668, -0.05332677438855171, -0.02559799887239933, 0.05191032215952873, 0.039020996540784836, -0.010077998973429203, 0.0423726961016655, 0.02233770303428173, 0.024613067507743835, -0.0591900609433651, 0.011018904857337475, 0.01780969463288784, 0.007713225670158863, 0.08493407815694809, -0.058625370264053345, -0.06133170798420906, 0.019463805481791496, -0.027071595191955566, 0.021096426993608475, -0.02988465689122677, -0.07089020311832428, 0.01476375013589859, 0.04933696985244751, 0.01799940876662731, -0.010170758701860905, 0.0864986926317215, 0.025573141872882843, 0.053028300404548645, -0.01003881637006998, -0.01427515409886837, 0.024294158443808556, -0.07812617719173431, 0.08990082889795303, 0.040259335190057755, 0.012269697152078152, -0.02474830485880375, 0.012524530291557312, -0.009350868873298168, 0.016252627596259117, 0.007303003221750259, -0.0672735869884491, -0.05977223813533783, 0.06281173974275589, -0.07648710906505585, 0.06753949820995331, 0.05785232037305832, -0.02378743700683117, -0.011598803102970123, 0.08259021490812302, -0.04452389106154442, 0.021082749590277672, -0.058196306228637695, 0.03248040750622749, -0.04507088288664818, 0.03514726832509041, 0.025051696226000786, -0.046446386724710464, -0.011239612475037575, 0.0010923279915004969, 0.03856252506375313, 0.06819658726453781, -0.03944835811853409, -0.06779888272285461, -0.03691086545586586, -0.0014347512042149901, -0.03949468955397606, 0.08633275330066681, -0.061569809913635254, -0.06422165781259537, 0.0106004374101758, 0.027063824236392975, 0.07687009125947952, 0.10068687796592712, 0.016407577320933342, -0.032629843801259995, -0.006763026118278503, 0.037011194974184036, -0.0242950227111578, -0.01947077549993992, 0.017616303637623787, 0.006274763029068708, -0.03193414956331253, -0.04788700118660927, 0.013375329785048962, -0.05766889452934265, 0.028541013598442078, 0.07038801908493042, -0.025915255770087242, -0.0317242406308651, 0.08964718133211136, -0.004433929454535246, -0.03572871536016464, 0.01620469242334366, -0.04394000768661499, 0.02385561726987362, 0.04299519211053848, 0.035366300493478775, 0.017404915764927864]},
{"question": "How to make a flat list out of list of lists?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>I wonder whether there is a shortcut to make a simple list out of list of lists in Python.</p>\n\n<p>I can do that in a <code>for</code> loop, but maybe there is some cool \"one-liner\"? I tried it with <code>reduce()</code>, but I get an error.</p>\n\n<p><strong>Code</strong></p>\n\n<pre><code>l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\nreduce(lambda x, y: x.extend(y), l)\n</code></pre>\n\n<p><strong>Error message</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 1, in &lt;lambda&gt;\nAttributeError: 'NoneType' object has no attribute 'extend'\n</code></pre>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>Given a list of lists <code>t</code>,</p>\n<pre class=\"lang-py prettyprint-override\"><code>flat_list = [item for sublist in t for item in sublist]\n</code></pre>\n<p>which means:</p>\n<pre><code>flat_list = []\nfor sublist in t:\n    for item in sublist:\n        flat_list.append(item)\n</code></pre>\n<p>is faster than the shortcuts posted so far. (<code>t</code> is the list to flatten.)</p>\n<p>Here is the corresponding function:</p>\n<pre><code>flatten = lambda t: [item for sublist in t for item in sublist]\n</code></pre>\n<p>As evidence, you can use the <code>timeit</code> module in the standard library:</p>\n<pre><code>$ python -mtimeit -s't=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in t for item in sublist]'\n10000 loops, best of 3: 143 usec per loop\n$ python -mtimeit -s't=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(t, [])'\n1000 loops, best of 3: 969 usec per loop\n$ python -mtimeit -s't=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,t)'\n1000 loops, best of 3: 1.1 msec per loop\n</code></pre>\n<p>Explanation: the shortcuts based on <code>+</code> (including the implied use in <code>sum</code>) are, of necessity, <code>O(T**2)</code> when there are T sublists -- as the intermediate result list keeps getting longer, at each step a new intermediate result list object gets allocated, and all the items in the previous intermediate result must be copied over (as well as a few new ones added at the end). So, for simplicity and without actual loss of generality, say you have T sublists of k items each: the first k items are copied back and forth T-1 times, the second k items T-2 times, and so on; total number of copies is k times the sum of x for x from 1 to T excluded, i.e., <code>k * (T**2)/2</code>.</p>\n<p>The list comprehension just generates one list, once, and copies each item over (from its original place of residence to the result list) also exactly once.</p>\n    </div>", "total_vectors": [-0.007331473287194967, -0.08004318177700043, 0.04412401467561722, -0.04199408367276192, 0.017983362078666687, 0.06668993085622787, 0.036089494824409485, 0.03297639638185501, -0.04575269669294357, -0.007266970816999674, -0.008348547853529453, 0.07265501469373703, 0.022866349667310715, -0.006507773417979479, 0.031118102371692657, 0.09662200510501862, 0.00584543077275157, 0.02890048362314701, -0.04604966193437576, 0.047207750380039215, 0.039186716079711914, -0.05791325122117996, -0.019395537674427032, 0.07048442214727402, -0.03620181232690811, -0.005403298884630203, 0.043909702450037, -0.07289085537195206, -0.031312551349401474, -0.0390687920153141, -0.016720609739422798, 0.04360298439860344, -0.04476917162537575, -0.02754824608564377, 0.05176446586847305, 0.03546755015850067, -0.03542596474289894, 0.045575063675642014, -0.02738705277442932, -0.011091540567576885, 0.012204970233142376, -0.029209638014435768, -0.04800344631075859, 0.031014425680041313, 0.04195795953273773, -0.06354976445436478, -0.017996162176132202, -0.07515204697847366, 0.05104109272360802, -0.05461271107196808, 0.0008510471670888364, 0.08610799908638, -0.0633595809340477, -0.0028847891371697187, 0.032298214733600616, 0.022318949922919273, 0.030709024518728256, -0.0016385158523917198, -0.0032906888518482447, -0.03343488276004791, -0.018657123669981956, -0.009916328825056553, 0.004344649612903595, -0.08047128468751907, 0.031294893473386765, 0.04333975166082382, -0.044644810259342194, -0.05166011303663254, -0.012069781310856342, -0.04324633255600929, 0.0560591034591198, 0.07871662825345993, -0.010596905834972858, 0.0976041853427887, 0.08055698126554489, 0.05405896529555321, 0.06375615298748016, 0.0315181128680706, 0.0045252107083797455, 0.03660573810338974, 0.051327187567949295, 0.024670163169503212, -0.024283502250909805, -0.004666854627430439, -0.03881381079554558, -0.06894378364086151, 0.060962826013565063, 0.03487323597073555, -0.047338053584098816, -0.01766945607960224, 0.027590114623308182, 0.028416333720088005, 0.0342097245156765, -0.0039421068504452705, -0.043219685554504395, 0.042894765734672546, 0.04926789179444313, 0.05426075682044029, -0.017769400030374527, -0.08586704730987549, -0.008743730373680592, 0.07199832051992416, -0.05766762048006058, -0.00723206577822566, 0.024570593610405922, 0.00671063456684351, -0.06248924881219864, 0.04773925989866257, 0.02827116660773754, 0.0016610331367701292, -0.02717765048146248, -0.07927276939153671, -0.014484567567706108, 0.045971017330884933, 0.054355595260858536, -0.05489572137594223, -0.012999388389289379, 0.03665563836693764, -0.06462966650724411, 0.009846330620348454, 0.061820853501558304, 0.01884770765900612, -0.07160018384456635, 0.03694047033786774, -0.02676190435886383, -0.015138198621571064, -0.0029900900553911924, 0.021339062601327896, 0.009514899924397469, 0.031211581081151962, 0.04069077968597412, -0.026310604065656662, -0.0658373013138771, -0.01680940017104149, 0.046865370124578476, -0.0010544989490881562, -0.04689553380012512, -0.07589686661958694, -0.014057783409953117, 0.02433793433010578, -0.029296839609742165, -0.06468191742897034, 0.02219208888709545, -0.0258331298828125, 0.005857363343238831, -0.04562779515981674, 0.060741547495126724, 0.06898219138383865, 0.019405482336878777, -0.04846334457397461, -0.08239429444074631, -0.05637659132480621, -0.003616288071498275, -0.04316016659140587, 0.0703296884894371, 0.016407612711191177, -0.07532349973917007, -0.045184776186943054, 0.0627531036734581, -0.013729723170399666, -0.0510479137301445, -0.01916133612394333, 0.05108407512307167, 0.021718136966228485, 0.002740526106208563, -0.07953662425279617, -0.008167083375155926, 0.003464010776951909, -0.02215953730046749, -0.04390557482838631, 0.00860715564340353, 0.032897163182497025, 0.08774140477180481, -0.03657738119363785, 0.038188569247722626, -0.020011594519019127, -0.01631009206175804, -0.06126880273222923, 0.01802145130932331, -0.03946274146437645, 0.07635577768087387, -0.014885446056723595, 0.0014937566593289375, -0.004466078244149685, 0.04732772707939148, -0.03481854870915413, -0.01710980199277401, 0.06225168704986572, 0.021300358697772026, 0.05992778390645981, 0.03855391964316368, 0.01318062748759985, 0.013044027611613274, -0.011852053925395012, -0.05255952104926109, -0.005404348485171795, -0.007946239784359932, 0.09144078195095062, 0.014747871086001396, -0.06934509426355362, -0.04685220867395401, 0.0490032397210598, -0.02618863806128502, 0.06514129042625427, 0.00011361214274074882, 0.03506191447377205, -0.02929810807108879, -0.050535477697849274, -0.0028337277472019196, -0.012573909014463425, -0.021116377785801888, 0.03386186435818672, 0.011863069608807564, 0.07905633747577667, 0.05043359100818634, 0.030901014804840088, 0.011902750469744205, 0.09660253673791885, 0.06513848900794983, -0.03548978641629219, 0.015519540756940842, 0.005090462043881416, -0.021045107394456863, 0.0504593551158905, 0.02946372888982296, 0.0009446017793379724, -0.022842153906822205, 0.006587162613868713, 0.009912781417369843, -0.05321970954537392, -0.03843412548303604, 0.055176641792058945, -0.017824776470661163, -0.055653948336839676, 0.06660006195306778, 0.06310827285051346, 0.04267595335841179, 0.050099246203899384, 0.03236227482557297, 0.018286023288965225, -0.03452282398939133, -0.0740809217095375, 0.0855783075094223, 0.03041745163500309, 0.0060801515355706215, 0.09571941196918488, 0.015241893008351326, 0.060222428292036057, 0.09697242826223373, 0.033404286950826645, 0.049706388264894485, 0.008931663818657398, -0.04614326357841492, -0.08304446935653687, 0.0181919876486063, -0.008105097338557243, -0.042770057916641235, -0.07707610726356506, 0.022452691569924355, 0.002072031144052744, -0.06684394925832748, 0.0252212006598711, -0.01436292752623558, 0.03215056285262108, -0.00799177773296833, -0.04243289306759834, -0.0106082484126091, -0.09310892224311829, 0.06552059948444366, -0.01834750920534134, -0.06540749222040176, -0.04371793940663338, -0.004063708707690239, -0.027337081730365753, -0.06241583451628685, 0.038148194551467896, -0.026131125167012215, 0.042315781116485596, 0.0467957966029644, 0.0844459980726242, 0.0038061311934143305, -0.0204670038074255, -0.031247388571500778, -0.06770440936088562, 0.05394955724477768, -0.015535763464868069, -0.04390517994761467, -0.01190728135406971, 0.008023175410926342, -0.018994025886058807, 0.0119784539565444, 0.007351579610258341, -0.020205548033118248, 0.01199822686612606, 0.09131346642971039, 0.07102259993553162, 0.053721942007541656, -0.06333543360233307, -0.025019600987434387, 0.053887005895376205, -0.042826976627111435, 0.0348236970603466, 0.02277551405131817, -0.00032333520357497036, 0.003929596859961748, 0.028362682089209557, 0.016228917986154556, -0.0107881473377347, -0.05636874586343765, -0.06614800542593002, 0.010811567306518555, -0.025059521198272705, -0.0935598835349083, -0.025461161509156227, -0.006504538934677839, 0.004983489867299795, -0.03918614983558655, -0.015638945624232292, 0.030682945623993874, 0.08215369284152985, 0.04291176795959473, 0.024696221575140953, -0.004489812534302473, 0.03472559526562691, 0.019571516662836075, -0.040383752435445786, -0.0026082030963152647, 0.015580390579998493, -0.003256913973018527, 0.028812812641263008, 0.04930005967617035, -0.04078894481062889, -0.009511413984000683, -0.0653754398226738, -0.02024213783442974, -0.01143792737275362, 0.014617196284234524, 0.042119771242141724, 0.04081002250313759, 0.009679808281362057, -0.016074523329734802, 0.03599822148680687, 0.06492038071155548, -0.03237085044384003, -0.09103827178478241, -0.05988018214702606, 0.0500754714012146, -0.009680147282779217, 0.0268801748752594, 0.002495202934369445, -0.02888665720820427, 0.014105238951742649, -0.029487134888768196, 0.009116986766457558, 0.011224264279007912, 0.004406739491969347, -0.09142864495515823, -0.045890893787145615, -0.015417460352182388, -0.016123412176966667, -0.03869695961475372, -0.07179915904998779, -0.07735749334096909, -0.027219021692872047, -0.020285561680793762, 0.038959916681051254, -0.06570620834827423, 0.05272796377539635, 0.00994202122092247, 0.04545651376247406, 0.06492732465267181, -0.0730847418308258, -0.05479813367128372, 0.06637352705001831, -0.06859993934631348, -0.08732958137989044, -0.028155334293842316, -0.030782531946897507, -0.05920564755797386, 0.01247452199459076, 0.012254768051207066, -0.004810642916709185, -0.037086617201566696, -0.011173170991241932, 0.0772281289100647, 0.06585089862346649, 0.029657287523150444, 0.024695497006177902, -0.04450137913227081, -0.03848584368824959, -0.04074990004301071, 0.029461802914738655, -0.06160722300410271, 0.05561627447605133, -0.06024385988712311, 0.04837987944483757, -0.06305700540542603, 0.00605435948818922, -0.023435479030013084, 0.03907057270407677, 0.04170756787061691, -0.02854987233877182, 0.06794869154691696, 0.04329318553209305, -0.00035405679955147207, 0.02554912306368351, -0.06949561834335327, -0.0023759149480611086, -0.025270676240324974, 0.0494115985929966, -0.046478286385536194, -0.011187240481376648, -0.008596819825470448, 0.04696832224726677, 0.006220412906259298, 0.009166836738586426, -0.022968381643295288, 0.05976881459355354, 0.07009951025247574, 0.02951340191066265, -0.02187151089310646, -0.05695490166544914, -0.039611268788576126, 0.05856817215681076, 0.02755008265376091, 0.03241575136780739, 0.029165364801883698, 0.08950734883546829, -0.06484724581241608, 0.04227396473288536, -0.0037473486736416817, 0.02163724973797798, 0.02752196043729782, -0.06407526135444641, -0.04386894404888153, -0.05451763793826103, 0.050184499472379684, 0.016082990914583206, 0.029862405732274055, -0.011935090646147728, 0.003178410464897752, 0.02150467410683632, -0.024234920740127563, 0.020639613270759583, 0.019245116040110588, 0.05834854021668434, 0.035244714468717575, -0.026567703112959862, -0.042703915387392044, -0.029425881803035736, -0.056862641125917435, 0.006018747575581074, 0.08947370201349258, 0.05288924276828766, 0.07662748545408249, -0.06045941635966301, -1.8404329239274375e-05, -0.0057105193845927715, 0.017505794763565063, -0.004742314573377371, 0.010901052504777908, 0.0934317484498024, 0.08109218627214432, -0.01993083953857422, 0.003848873544484377, -0.09400830417871475, 0.04547840729355812, 0.025739990174770355, -0.052611347287893295, -0.030866170302033424, 0.03991284221410751, 0.01704268343746662, 0.03145390376448631, -0.0346975177526474, 0.06045634672045708, -0.05454561859369278, -0.07358714193105698, -0.031006300821900368, -0.035559654235839844, -0.039345089346170425, 0.0420360341668129, -0.04752662777900696, -0.028048546984791756, 0.05051381513476372, -0.09425648301839828, 0.030341554433107376, 0.09298641979694366, 0.04801839217543602, -0.01074871327728033, 0.03963012993335724, -0.07324478775262833, 0.0240224227309227, -0.008958463557064533, 0.033908020704984665, 0.020693112164735794, -0.032390009611845016, -0.046708520501852036, -0.041385818272829056, -0.029087752103805542, 0.05376704782247543, -0.008342143148183823, -0.023920278996229172, -0.01679028570652008, 0.060761548578739166, 0.05230453610420227, -0.009646708145737648, -0.018538253381848335, 0.05159517005085945, -0.019890204071998596, 0.06935752928256989, -0.014221815392374992, 0.0073830606415867805]},
{"question": "Should I avoid the use of set(Preferred|Maximum|Minimum)Size methods in Java Swing?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>Several times I've been criticized for having suggested the use of the following methods:</p>\n\n<ol>\n<li><strong>setPreferredSize</strong></li>\n<li><strong>setMinimumSize</strong></li>\n<li><strong>setMaximumSize</strong></li>\n</ol>\n\n<p>on <code>Swing</code> components. I don't see any alternative to their use when I want to define proportions between displayed components. I have been told this:</p>\n\n<blockquote>\n  <p>With layouts the answer is always the same: use a suitable\n  LayoutManager</p>\n</blockquote>\n\n<p>I have searched the web a little bit, but I haven't found any comprehensive analysis of the subject. So I have the following questions:</p>\n\n<ol>\n<li>Should I completely avoid the use of those methods?</li>\n<li>The methods have been defined for a reason. So when should I use them? In which context? For what purposes? </li>\n<li>What exactly are the negative consequences of using those methods? (I can only think adding portability between systems with different screen resolution).</li>\n<li>I don't think any LayoutManager can exactly satisfy all desired layout needs. Do I really need to implement a new LayoutManager for every little variation on my layout ? </li>\n<li>If the answer to 4 is \"yes\", won't this lead to a proliferation of LayoutManager classes which will become difficult to maintain?</li>\n<li>In a situation where I need to define proportions between children of a Component (eg, child1 should use 10% of space, child2 40% ,child3 50%), is it possible to achieve that without implementing a custom LayoutManager?</li>\n</ol>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<ol>\n<li><blockquote>\n  <p>Should I completely avoid the use of those methods?</p>\n</blockquote>\n\n<p>Yes for application code.</p></li>\n<li><blockquote>\n  <p>The methods have been defined for a reason. So when should I use them? In which context? For what purposes?</p>\n</blockquote>\n\n<p>I don't know, personally I think of it as an API design accident. Slightly forced by compound components having special ideas about child sizes. \"Slightly\", because they should have implemented their needs with a custom LayoutManager.</p></li>\n<li><blockquote>\n  <p>What exactly are the negative consequences of using those methods? (I can only think adding portability between systems with different screen resolution.)</p>\n</blockquote>\n\n<p>Some (incomplete, and unfortunately the links are broken due to migration of SwingLabs to java.net) technical reasons are for instance mentioned in the <a href=\"http://web.archive.org/web/20110614145256/http://wiki.java.net/twiki/bin/view/Javadesktop/SwingLabsImperialRules?TWIKISID=e1a6667476691b56753dc9b0744828c6#Do_not_use_component_setXXSize\" rel=\"noreferrer\">Rules (hehe)</a> or in the <a href=\"http://web.archive.org/web/20100207211337/http://www.jguru.com/faq/view.jsp?EID=237070\" rel=\"noreferrer\">link</a> @bendicott found in his/her comment to <a href=\"https://stackoverflow.com/questions/7074514/images-in-jtable-cells-off-by-one-pixel\">my answer</a>. Socially, posing tons of work onto your unfortunate fellow who has to maintain the code and has to track down a broken layout.</p></li>\n<li><blockquote>\n  <p>I don't think any LayoutManager can exactly satisfy all desired layout needs. Do I really need to implement a new LayoutManager for every little variation on my layout?</p>\n</blockquote>\n\n<p>Yes, there are LayoutManagers powerful enough to satisfy a very good approximation to \"all layout needs\". The big three are JGoodies FormLayout, MigLayout, DesignGridLayout. So no, in practice, you rarely write LayoutManagers except for simple highly specialized environments.</p></li>\n<li><blockquote>\n  <p>If the answer to 4 is \"yes\", won't this lead to a proliferation of LayoutManager classes which will become difficult to maintain? </p>\n</blockquote>\n\n<p>(The answer to 4 is \"no\".)</p></li>\n<li><blockquote>\n  <p>In a situation where I need to define proportions between children of a Component (for example, child 1 should use 10% of space, child 2 40%, child 3 50%), is it possible to achieve that without implementing a custom LayoutManager?</p>\n</blockquote>\n\n<p>Any of the Big-Three can, can't even GridBag (never bothered to really master, too much trouble for too little power).</p></li>\n</ol>\n    </div>", "total_vectors": [-1.8466313122189604e-05, 0.03317277133464813, 0.035704538226127625, -0.059267736971378326, -0.04416343942284584, 0.08656398952007294, -0.012753967195749283, -0.045356303453445435, 3.2434508057122e-07, 0.07090889662504196, -0.024111216887831688, -0.031184682622551918, -0.016473710536956787, 0.017554640769958496, 0.05821722000837326, 0.08866502344608307, 0.05474671721458435, -0.01566481404006481, 0.002372958930209279, -0.0647355243563652, 0.0339561365544796, -0.0323483906686306, -0.0334654226899147, 0.023544544354081154, -0.010042891837656498, 0.013265550136566162, 0.006567632779479027, -0.016749931499361992, 0.047546759247779846, -0.01414680015295744, -0.01447755191475153, -0.009712962433695793, 0.06467520445585251, -0.0362049825489521, 0.011628272011876106, -0.0346807986497879, -0.04976937547326088, 0.0007063327357172966, -0.05421482026576996, 0.01979091204702854, -0.013844932429492474, -0.016689708456397057, 0.024343341588974, -0.008996614255011082, 0.08216525614261627, -0.00011394382454454899, -0.05852528661489487, 0.028753075748682022, 0.024140385910868645, -0.026591647416353226, 0.07150151580572128, 0.08946257829666138, 0.07822570204734802, -0.03546946123242378, 0.07004673779010773, -0.05054888874292374, 0.007163260132074356, -0.024619661271572113, -0.0026105691213160753, -0.002965455874800682, 0.0026343499775975943, -0.08650603145360947, 0.034524962306022644, -0.07053574174642563, -0.0037847335916012526, 0.04087229445576668, -0.06754958629608154, -0.02849678322672844, 0.08764734864234924, -0.012251165695488453, -0.08650125563144684, -0.0012463348684832454, 0.05913202464580536, -0.06314502656459808, -0.01808978244662285, 0.008576424792408943, 0.03227464482188225, -0.007155488710850477, 0.018664443865418434, 0.08105256408452988, -0.011414388194680214, 0.022882167249917984, 0.019551493227481842, -0.0574268139898777, 0.08354945480823517, -0.05131709203124046, 0.05335013568401337, -0.003260266501456499, -0.0478697270154953, 0.005411289166659117, -0.02841728925704956, -0.04175826907157898, -0.0805109515786171, -0.011568327434360981, -0.045333560556173325, 0.029724452644586563, -0.012136535719037056, 0.02460619993507862, -0.0019071812275797129, -0.08888716250658035, -0.014113814570009708, -0.019323382526636124, 0.086424820125103, 0.06919781863689423, 0.009412914514541626, 0.00850272923707962, -0.04750784859061241, -0.02035771869122982, 0.06544138491153717, 0.03341522067785263, 0.06789302080869675, -0.06531123071908951, -0.03792440518736839, 0.016123918816447258, 0.05594049021601677, 0.007698386907577515, 0.04593172296881676, 0.020492414012551308, 0.06043141707777977, -0.05719734728336334, 0.04598943144083023, 0.05668589845299721, 0.010197093710303307, -0.007631928659975529, 0.0352204293012619, -0.011308746412396431, -0.002304910449311137, 0.014868434518575668, 0.05170562118291855, 0.04523196816444397, 0.03724151477217674, -0.007842251099646091, -0.04122183099389076, -0.06285437196493149, -0.04490910843014717, 0.0185686144977808, -0.012416803278028965, -0.05648234859108925, 0.024431101977825165, 0.025599174201488495, 0.044539012014865875, -0.004252059850841761, 0.007653503678739071, -0.020242834463715553, -0.008290779776871204, -0.08573904633522034, 0.07266497611999512, 0.012152882292866707, 0.056275904178619385, 0.08710124343633652, 0.05893969535827637, -0.05202173441648483, -0.06624143570661545, 0.04487287625670433, -0.043853409588336945, 0.003305419348180294, 0.050885166972875595, -0.023253994062542915, -0.04593736305832863, -0.014908812940120697, 0.01675800234079361, 0.03647620230913162, 0.024235449731349945, -0.06473234295845032, 0.03769003599882126, 0.037130843847990036, -0.012302657589316368, -0.016139691695570946, 0.006764410529285669, 0.007695595268160105, -0.008151497691869736, -0.06297413259744644, -0.008339116349816322, -0.02679895982146263, -0.05536014959216118, 0.04588032141327858, -0.007700346875935793, 0.027958162128925323, 0.01743311434984207, 0.02986849471926689, 0.027965232729911804, 0.004049354232847691, -0.07067642360925674, 0.013124840334057808, 0.015460588037967682, -0.003098579589277506, 0.02924632839858532, 0.04250728338956833, -0.04027742147445679, 0.06614931672811508, 0.08007241785526276, -0.0611514151096344, -0.0613151453435421, -0.01764923706650734, -0.014726809225976467, 0.020367905497550964, -0.002704354701563716, 0.08883730322122574, -0.018412591889500618, -0.04508953541517258, -0.04951221123337746, 0.0011379574425518513, 0.07756868004798889, 0.08517510443925858, -0.03992433473467827, -0.03076152317225933, 0.01311883982270956, 0.058100324124097824, -0.08719483017921448, -0.005383026320487261, -0.07899220287799835, -0.009368117898702621, 0.06042095273733139, -0.033815864473581314, 0.05197944864630699, 0.06499054282903671, -0.05942118912935257, 0.0249840896576643, 0.05247989296913147, -0.04652576148509979, -0.07693233340978622, -0.006873246282339096, -0.009661689400672913, 0.004595516715198755, 0.01871630921959877, 0.028841910883784294, -0.0424906462430954, 0.0858701765537262, -0.0019145471742376685, 0.03691829741001129, 0.049333393573760986, -0.028166264295578003, 0.023365197703242302, -0.05807999148964882, -0.013476484455168247, -0.018039006739854813, 0.0600002221763134, -0.0195225328207016, -0.0358913317322731, 0.028386898338794708, -0.07963094115257263, -0.06037161126732826, -0.06211339309811592, 0.013784435577690601, 0.07575498521327972, 0.08696231245994568, 0.06699516624212265, 0.02879190258681774, -0.08770751953125, 0.0688478872179985, -0.06946086883544922, 0.0500488206744194, -0.007011934649199247, 0.008257723413407803, -0.07875223457813263, 0.03328011929988861, -0.009623313322663307, -0.046217333525419235, 0.05630401894450188, -0.01325403805822134, -0.040311239659786224, -0.02157185599207878, -0.08715309947729111, -0.04908214882016182, -0.012358433566987514, -0.002557927742600441, -0.01975865848362446, -0.06273259967565536, -0.03955811634659767, 0.052462898194789886, -0.07329922169446945, -0.056933145970106125, -0.07595008611679077, 0.051155347377061844, -0.021737614646553993, -0.05219777673482895, 0.014856461435556412, -0.06943676620721817, 0.06300865113735199, -0.03830261528491974, 0.008438785560429096, 0.02812826633453369, -0.009558702819049358, 0.0022230560425668955, -0.0221803430467844, -0.08105966448783875, 0.02111881785094738, -0.010310839861631393, -0.04337626323103905, -0.05629507079720497, 0.05819294974207878, 0.08138036727905273, 0.06890810281038284, -0.016748609021306038, 0.08617419749498367, 0.03089105896651745, 0.008447145111858845, -0.05957470461726189, -0.05071147531270981, -0.0077196513302624226, 0.02901613712310791, -0.040178366005420685, -0.0029338954482227564, 0.08578111976385117, -0.055206477642059326, 0.017951294779777527, 0.019225966185331345, -0.01218512374907732, -0.010932928882539272, -0.00012561221956275403, -0.04182155430316925, 0.04193311184644699, 0.017825767397880554, -0.009250245988368988, -0.024409262463450432, -0.0540720596909523, 0.06661172211170197, 0.006693609058856964, -0.012228761799633503, -0.0005883801495656371, 0.011697457171976566, 0.036569856107234955, -0.002967874752357602, -0.02541060745716095, 0.007705828174948692, 0.00948108546435833, 0.04244483634829521, -0.026987146586179733, 0.014241128228604794, -0.025167062878608704, -0.0428423210978508, -0.044117510318756104, -0.01469846535474062, 0.0713435560464859, -0.023485548794269562, 0.045141227543354034, 0.047859158366918564, -0.025562606751918793, 0.04921216890215874, -0.059295330196619034, -0.0026712690014392138, -0.05208742991089821, -0.0452362522482872, 0.0450580008327961, -0.08887936919927597, 0.03926338627934456, 0.06261216849088669, 0.04543717950582504, 0.03966585919260979, -0.0073066595941782, -0.06909629702568054, -0.016202522441744804, -0.007918352261185646, 0.007777429651468992, 0.04595291242003441, -0.005748264491558075, -0.08789865672588348, 0.04530398175120354, 0.0061396886594593525, 0.01024174876511097, -0.04812305420637131, -0.007502479944378138, -0.07488176226615906, -0.013469508849084377, -0.005264449864625931, -0.047239020466804504, -0.08014266937971115, -0.000887475092895329, 0.037830352783203125, -0.0103636234998703, 0.022746507078409195, -0.028659533709287643, -0.0010111193405464292, 0.023957878351211548, -0.009986556135118008, -0.058648042380809784, -0.014782707206904888, -0.03234526887536049, 0.05527570843696594, -0.07684969156980515, 0.035562220960855484, -0.0021417748648673296, -0.03117157332599163, -0.0520891509950161, -0.023802489042282104, -0.013954035937786102, 0.07716915011405945, 0.07159855961799622, 0.019931787624955177, 0.003267080755904317, -0.008487414568662643, -0.08405754715204239, -0.03137129172682762, -0.014618974179029465, -0.030610881745815277, -0.011922381818294525, -0.021590596064925194, -0.02198697254061699, 0.04276874288916588, 0.07819286733865738, 0.01787133514881134, 0.06564415991306305, 0.05737999454140663, 0.022166844457387924, 0.018474170938134193, 0.00965020153671503, -0.05933983996510506, -0.02076653763651848, -0.06081821396946907, -0.002683978294953704, 0.04775172099471092, 0.022296477109193802, -0.052521731704473495, 0.05295359715819359, -0.029064113274216652, 0.006634860299527645, 0.07282910495996475, 0.08451148122549057, 0.026632485911250114, -0.018168164417147636, -0.08506511896848679, -0.08291080594062805, -0.006592947524040937, -0.0786149725317955, -0.0004523654351942241, 0.04210703819990158, -0.025708017870783806, 0.029883891344070435, -0.08849375694990158, -0.04589032754302025, 0.016458503901958466, -0.031990937888622284, 0.043212514370679855, -0.0017634524265304208, -0.03226521983742714, 0.03589634224772453, -0.06498253345489502, 0.018911996856331825, 0.0064652408473193645, 0.016692722216248512, 0.018525652587413788, 0.027582723647356033, 0.01908283308148384, 0.03320804983377457, 0.03660910576581955, 0.0694265365600586, 0.022862650454044342, -0.04268017038702965, 0.047941502183675766, -0.026377806439995766, 0.026618877425789833, 0.063430055975914, 0.0877155289053917, 0.027705248445272446, -0.05989918112754822, -0.07692058384418488, -0.0014765594387426972, 0.04853617772459984, -0.061346385627985, 0.04463228955864906, -0.0613134391605854, 0.026625165715813637, -0.047552019357681274, -0.02811277098953724, 0.021125612780451775, -0.021255848929286003, 0.022821461781859398, 0.08754468709230423, 0.03518739342689514, 0.009507847018539906, -0.02018844336271286, 0.019855672493577003, -0.02344769798219204, 0.005937620531767607, 0.03492095321416855, -0.06196480989456177, 0.0248800590634346, -0.006636749487370253, 0.06170430779457092, -0.01113377045840025, 0.04911624267697334, 0.0041473968885838985, 0.03740910068154335, -0.05659012123942375, 0.04587266221642494, 0.013007834553718567, 0.03783772140741348, 0.054837994277477264, -0.031794045120477676, -0.05961623415350914, -0.0648108571767807, -0.023175761103630066, -0.018932539969682693, 0.023305688053369522, 0.026165461167693138, -0.0047125001437962055, 0.08238638192415237, 0.024211520329117775, -0.05288032442331314, -0.013442146591842175, 0.05521314591169357, 0.02276921644806862, -0.015166466124355793, 0.04817533493041992, 0.06104486435651779, 0.06553837656974792, -0.015530946664512157, 0.02793872356414795, 0.02949425019323826, 0.06648345291614532, -0.03181704878807068, -0.015805330127477646]},
{"question": "How can I avoid Java code in JSP files, using JSP 2?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>I'm new to Java EE and I know that something like the following three lines</p>\n<pre><code>&lt;%= x+1 %&gt;\n&lt;%= request.getParameter(\"name\") %&gt;\n&lt;%! counter++; %&gt;\n</code></pre>\n<p>is an old school way of coding and in JSP version 2 there exists a method to avoid Java code in JSP files. What are the alternative JSP 2 lines, and what is this technique called?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>The use of <em>scriptlets</em> (those <code>&lt;% %&gt;</code> things) in <a href=\"https://stackoverflow.com/tags/jsp/info\">JSP</a> is indeed highly discouraged since the birth of <em>taglibs</em> (like <a href=\"https://stackoverflow.com/tags/jstl/info\">JSTL</a>) and <a href=\"https://stackoverflow.com/tags/el/info\">EL</a> (<a href=\"https://stackoverflow.com/tags/el/info\">Expression Language</a>, those <code>${}</code> things) way back in 2001.</p>\n\n<p>The major disadvantages of <em>scriptlets</em> are:</p>\n\n<ol>\n<li><strong>Reusability:</strong> you can't reuse scriptlets.</li>\n<li><strong>Replaceability:</strong> you can't make scriptlets abstract.</li>\n<li><strong>OO-ability:</strong> you can't make use of inheritance/composition.</li>\n<li><strong>Debuggability:</strong> if scriptlet throws an exception halfway, all you get is a blank page.</li>\n<li><strong>Testability:</strong> scriptlets are not unit-testable.</li>\n<li><strong>Maintainability:</strong> per saldo more time is needed to maintain mingled/cluttered/duplicated code logic.</li>\n</ol>\n\n<p><strike>Sun</strike> Oracle itself also recommends in the <a href=\"http://www.oracle.com/technetwork/articles/javase/code-convention-138726.html\" rel=\"noreferrer\">JSP coding conventions</a> to avoid use of <em>scriptlets</em> whenever the same functionality is possible by (tag) classes. Here are several cites of relevance:</p>\n\n<blockquote>\n  <p>From JSP 1.2 Specification, it is highly recommended that the JSP Standard Tag Library  (JSTL) be used in your web application to help <strong>reduce the need for JSP scriptlets</strong> in your pages. Pages that use JSTL are, in general, easier to read and maintain. </p>\n  \n  <p>...</p>\n  \n  <p>Where possible, <strong>avoid JSP scriptlets</strong> whenever tag libraries provide equivalent functionality. This makes pages easier to read and maintain, helps to separate business logic from presentation logic, and will make your pages easier to evolve into JSP 2.0-style pages (JSP 2.0 Specification supports but de-emphasizes the use of scriptlets).</p>\n  \n  <p>...</p>\n  \n  <p>In the spirit of adopting the model-view-controller (MVC) design pattern to reduce coupling between the presentation tier from the business logic, <strong>JSP scriptlets should not be used</strong> for writing business logic. Rather, JSP scriptlets are used if necessary to transform data (also called \"value objects\") returned from processing the client's requests into a proper client-ready format. Even then, this would be better done with a front controller servlet or a custom tag.</p>\n</blockquote>\n\n<hr>\n\n<p><strong>How to replace <em>scriptlets</em> entirely depends on the sole purpose of the code/logic. More than often this code is to be placed in a fullworthy Java class:</strong></p>\n\n<ul>\n<li><p>If you want to invoke the <strong>same</strong> Java code on <em>every</em> request, less-or-more regardless of the requested page, e.g. checking if a user is logged in, then implement a <a href=\"https://stackoverflow.com/tags/servlet-filters/info\">filter</a> and write code accordingly in <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter%28javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain%29\" rel=\"noreferrer\"><code>doFilter()</code></a> method. E.g.:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException {\n    if (((HttpServletRequest) request).getSession().getAttribute(\"user\") == null) {\n        ((HttpServletResponse) response).sendRedirect(\"login\"); // Not logged in, redirect to login page.\n    } else {\n        chain.doFilter(request, response); // Logged in, just continue request.\n    }\n}\n</code></pre>\n\n<p>When mapped on an appropriate <code>&lt;url-pattern&gt;</code> covering the JSP pages of interest, then you don't need to copypaste the same piece of code overall JSP pages.</p>\n\n<hr></li>\n<li><p>If you want to invoke some Java code to <strong>preprocess</strong> a request, e.g. preloading some list from a database to display in some table, if necessary based on some query parameters, then implement a <a href=\"https://stackoverflow.com/tags/servlets/info\">servlet</a> and write code accordingly in <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29\" rel=\"noreferrer\"><code>doGet()</code></a> method. E.g.:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    try {\n        List&lt;Product&gt; products = productService.list(); // Obtain all products.\n        request.setAttribute(\"products\", products); // Store products in request scope.\n        request.getRequestDispatcher(\"/WEB-INF/products.jsp\").forward(request, response); // Forward to JSP page to display them in a HTML table.\n    } catch (SQLException e) {\n        throw new ServletException(\"Retrieving products failed!\", e);\n    }\n}\n</code></pre>\n\n<p>This way dealing with exceptions is easier. The DB is not accessed in the midst of JSP rendering, but far before the JSP is been displayed. You still have the possibility to change the response whenever the DB access throws an exception. In the above example, the default error 500 page will be displayed which you can anyway customize by an <code>&lt;error-page&gt;</code> in <code>web.xml</code>.</p>\n\n<hr></li>\n<li><p>If you want to invoke some Java code to <strong>postprocess</strong> a request, e.g. processing a form submit, then implement a <a href=\"https://stackoverflow.com/tags/servlets/info\">servlet</a> and write code accordingly in <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29\" rel=\"noreferrer\"><code>doPost()</code></a> method. E.g.:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    String username = request.getParameter(\"username\");\n    String password = request.getParameter(\"password\");\n    User user = userService.find(username, password);\n\n    if (user != null) {\n        request.getSession().setAttribute(\"user\", user); // Login user.\n        response.sendRedirect(\"home\"); // Redirect to home page.\n    } else {\n        request.setAttribute(\"message\", \"Unknown username/password. Please retry.\"); // Store error message in request scope.\n        request.getRequestDispatcher(\"/WEB-INF/login.jsp\").forward(request, response); // Forward to JSP page to redisplay login form with error.\n    }\n}\n</code></pre>\n\n<p>This way dealing with different result page destinations is easier: redisplaying the form with validation errors in case of an error (in this particular example you can redisplay it using <code>${message}</code> in <a href=\"https://stackoverflow.com/tags/el/info\">EL</a>), or just taking to the desired target page in case of success.</p>\n\n<hr></li>\n<li><p>If you want to invoke some Java code to <strong>control</strong> the execution plan and/or the destination of the request and the response, then implement a <a href=\"https://stackoverflow.com/tags/servlets/info\">servlet</a> according to the <a href=\"https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/3542297#3542297\">MVC's Front Controller Pattern</a>. E.g.:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    try {\n        Action action = ActionFactory.getAction(request);\n        String view = action.execute(request, response);\n\n        if (view.equals(request.getPathInfo().substring(1)) {\n            request.getRequestDispatcher(\"/WEB-INF/\" + view + \".jsp\").forward(request, response);\n        } else {\n            response.sendRedirect(view);\n        }\n    } catch (Exception e) {\n        throw new ServletException(\"Executing action failed.\", e);\n    }\n}\n</code></pre>\n\n<p>Or just adopt an MVC framework like <a href=\"https://stackoverflow.com/tags/jsf/info\">JSF</a>, <a href=\"https://stackoverflow.com/tags/spring-mvc/info\">Spring MVC</a>, <a href=\"https://stackoverflow.com/tags/wicket/info\">Wicket</a>, etc so that you end up with just a JSP/Facelets page and a JavaBean class without the need for a custom servlet.</p>\n\n<hr></li>\n<li><p>If you want to invoke some Java code to <strong>control the flow</strong> inside a JSP page, then you need to grab an (existing) flow control taglib like <a href=\"http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/c/tld-summary.html\" rel=\"noreferrer\">JSTL core</a>. E.g. displaying <code>List&lt;Product&gt;</code> in a table:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %&gt;\n...\n&lt;table&gt;\n    &lt;c:forEach items=\"${products}\" var=\"product\"&gt;\n        &lt;tr&gt;\n            &lt;td&gt;${product.name}&lt;/td&gt;\n            &lt;td&gt;${product.description}&lt;/td&gt;\n            &lt;td&gt;${product.price}&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/c:forEach&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>With XML-style tags which fit nicely among all that HTML, the code is better readable (and thus better maintainable) than a bunch of scriptlets with various opening and closing braces (<em>\"Where the heck does this closing brace belong to?\"</em>). An easy aid is to configure your web application to throw an exception whenever <em>scriptlets</em> are still been used by adding the following piece to <code>web.xml</code>:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;jsp-config&gt;\n    &lt;jsp-property-group&gt;\n        &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;\n        &lt;scripting-invalid&gt;true&lt;/scripting-invalid&gt;\n    &lt;/jsp-property-group&gt;\n&lt;/jsp-config&gt;\n</code></pre>\n\n<p>In <a href=\"https://stackoverflow.com/tags/facelets/info\">Facelets</a>, the successor of JSP, which is part of the Java EE provided MVC framework <a href=\"https://stackoverflow.com/tags/jsf/info\">JSF</a>, it is already <strong>not</strong> possible to use <em>scriptlets</em>. This way you're automatically forced to do things \"the right way\".</p>\n\n<hr></li>\n<li><p>If you want to invoke some Java code to <strong>access and display</strong> \"backend\" data inside a JSP page, then you need to use EL (Expression Language), those <code>${}</code> things. E.g. redisplaying submitted input values:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;input type=\"text\" name=\"foo\" value=\"${param.foo}\" /&gt;\n</code></pre>\n\n<p>The <code>${param.foo}</code> displays the outcome of <code>request.getParameter(\"foo\")</code>.</p>\n\n<hr></li>\n<li><p>If you want to invoke some <strong>utility</strong> Java code directly in the JSP page (typically <code>public static</code> methods), then you need to define them as EL functions. There's a standard <a href=\"http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/fn/tld-summary.html\" rel=\"noreferrer\">functions taglib</a> in JSTL, but <a href=\"http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html#bnaiq\" rel=\"noreferrer\">you can also easily create functions yourself</a>. Here's an example how JSTL <code>fn:escapeXml</code> is useful to prevent <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\" rel=\"noreferrer\">XSS</a> <a href=\"http://ha.ckers.org/xss.html\" rel=\"noreferrer\">attacks</a>.</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %&gt;\n...\n&lt;input type=\"text\" name=\"foo\" value=\"${fn:escapeXml(param.foo)}\" /&gt;\n</code></pre>\n\n<p>Note that the XSS sensitivity is in no way specifically related to Java/JSP/JSTL/EL/whatever, this problem needs to be taken into account in <strong>every</strong> web application you develop. The problem of <em>scriptlets</em> is that it provides no way of builtin preventions, at least not using the standard Java API. JSP's successor Facelets has already implicit HTML escaping, so you don't need to worry about XSS holes in Facelets.</p></li>\n</ul>\n\n<h3>See also:</h3>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2095397/what-is-the-difference-between-jsf-servlet-and-jsp/2097732#2097732\">What's the difference between JSP, Servlet and JSF?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3106452/java-servlet-instantiation-and-session-variables/3106909#3106909\">How does Servlet, ServletContext, HttpSession and HttpServletRequest/Response work?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/5003142/jsp-using-mvc-and-jdbc\">Basic MVC example with JSP, Servlet and JDBC</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/\">Design patterns in Java web applications</a></li>\n<li><a href=\"http://balusc.blogspot.com/2010/01/hidden-features-of-jspservlet.html\" rel=\"noreferrer\">Hidden features of JSP/Servlet</a></li>\n</ul>\n    </div>", "total_vectors": [0.05428888648748398, 0.027134627103805542, -0.020130395889282227, 0.024391155689954758, 0.0077671208418905735, 0.07551831752061844, -0.06735388189554214, -0.037776798009872437, -0.07341328263282776, 0.04195364564657211, -0.029140658676624298, -0.03228490799665451, -0.039400722831487656, -0.003967941273003817, 0.03953740373253822, 0.0773521214723587, 0.027368605136871338, 0.02858297899365425, 0.0039091818034648895, -0.07390409708023071, 0.03693998605012894, -0.025240570306777954, 0.062796451151371, 0.06305443495512009, 0.06966276466846466, -0.06503865122795105, 0.0206927377730608, 0.028115957975387573, 0.031479645520448685, -0.007441665045917034, -0.0591658316552639, -0.029531601816415787, 0.061658043414354324, -0.005440232809633017, 0.014078567735850811, -0.009951752610504627, -0.06364531069993973, -0.00199815328232944, -0.05419859290122986, -0.012931198813021183, -0.07146039605140686, 0.026837117969989777, -0.059292737394571304, 0.03768565505743027, 0.0773395374417305, -0.015542262233793736, -0.07002268731594086, 0.03202633932232857, -0.020341183990240097, -0.02524409629404545, 0.07693153619766235, 0.07487775385379791, 0.00877987127751112, -0.03686501458287239, 0.0520160011947155, -0.015996968373656273, -0.05437436327338219, 0.0158243291079998, 0.04683901369571686, -0.0126423304900527, 0.058253154158592224, -0.07674951106309891, -0.055890653282403946, -0.06515577435493469, 0.0001072181694325991, 0.013496297411620617, 0.009357183240354061, -0.022116076201200485, 0.07691366970539093, -0.007107050623744726, -0.07691111415624619, 0.021865375339984894, 0.02872166410088539, -0.04670912027359009, -0.024190546944737434, -0.004893515724688768, 0.0669826790690422, 0.030895566567778587, 0.017107678577303886, 0.056236930191516876, 0.058247003704309464, -0.05193778872489929, 4.2467727325856686e-05, 0.015732740983366966, 0.07509807497262955, 0.006364288739860058, -0.015057222917675972, 0.06928969919681549, -0.011215707287192345, -0.013889070600271225, 0.04664381593465805, 0.0014335085870698094, -0.06682760268449783, 0.026098422706127167, -0.025964392349123955, -0.025710636749863625, -0.029282281175255775, 0.03862869367003441, -0.020848922431468964, -0.07587017118930817, -0.05292953923344612, -0.04784414917230606, -0.049891795963048935, 0.01374866720288992, 0.07580062001943588, -0.00649035070091486, 0.07656010240316391, -0.0013218437088653445, 0.042436398565769196, -0.0565558485686779, 0.07075132429599762, -0.07026280462741852, 0.04709206148982048, -0.033566489815711975, -0.009974285960197449, -0.019646646454930305, 0.06586111336946487, 0.028373224660754204, 0.03949837014079094, -0.01771507039666176, 0.03415769338607788, -0.053802113980054855, -0.053948886692523956, 0.06294004619121552, 0.02002858556807041, 0.017510129138827324, 0.020508911460638046, 0.0652972087264061, 0.07381228357553482, 0.05030322074890137, 0.05307432636618614, 0.011802561581134796, -0.027623213827610016, 0.05686930939555168, 0.04887906834483147, -0.06014866754412651, -0.036099568009376526, -0.00218352023512125, 0.04920980706810951, -0.04515185207128525, 0.01974940486252308, -0.0031345898751169443, 0.06969217211008072, 0.04925191402435303, 0.031008215621113777, -0.07733232527971268, 0.03758363053202629, 0.05871791020035744, 0.04613041505217552, 0.07732781767845154, -0.045578986406326294, -0.010755368508398533, 0.018243296071887016, -0.06432395428419113, -0.039179153740406036, 0.004085238091647625, -0.02735028974711895, 0.036043405532836914, -0.03451180085539818, 0.04473656788468361, -0.005468762945383787, 0.01185729168355465, 0.028135288506746292, 0.055832840502262115, 0.02491244114935398, 0.01580965518951416, 0.000816738698631525, 0.016647320240736008, -0.02969452552497387, 0.0014199886936694384, -0.06802942603826523, -0.014251158572733402, -0.024203091859817505, 0.027133937925100327, -0.017436346039175987, -0.06579608470201492, 0.046861715614795685, 0.015764879062771797, 0.029545245692133904, 0.034828200936317444, -0.028269626200199127, -0.049323730170726776, 0.028146248310804367, -0.04336050897836685, 0.04570811986923218, 0.029095500707626343, -0.07057789713144302, 0.06118191406130791, -0.001642312970943749, 0.06354453414678574, 0.06753500550985336, -0.06974349170923233, -0.02185550145804882, -0.01967962086200714, 0.013829801231622696, 0.011221312917768955, -0.023498432710766792, 0.07735207676887512, -0.03683236986398697, -0.0529218465089798, -0.06504867970943451, -0.0029361057095229626, -0.07643210887908936, 0.07696641236543655, -0.03255558758974075, -0.02858705259859562, -0.04751810431480408, 0.05206426605582237, -0.0770072489976883, -0.050354793667793274, 0.019698139280080795, 0.0630817785859108, 0.053345322608947754, 0.011708959937095642, -0.0006152321002446115, -0.004878624342381954, -0.008477231487631798, 0.056387171149253845, 0.05950409546494484, -0.04398837685585022, -0.056859973818063736, -0.04118125140666962, -0.013270262628793716, 0.004548804834485054, 0.0011889636516571045, 0.049467187374830246, -0.017216648906469345, 0.041461702436208725, 0.026439649984240532, -0.016151664778590202, -0.03465898707509041, -0.03663688898086548, 0.005596441682428122, -0.06905285269021988, -0.02883096970617771, -0.062146589159965515, 0.07478880137205124, -0.013795685023069382, -0.030283479019999504, 0.024052057415246964, -0.02634512633085251, -0.0009934798581525683, -0.039215777069330215, -0.015649065375328064, -0.035584285855293274, 0.07475036382675171, -0.01906786672770977, 0.03956218063831329, 0.07615809887647629, 0.07258779555559158, -0.07608138769865036, -0.007891003973782063, 0.06640937179327011, -0.04311998188495636, -0.06401845812797546, -0.06713300198316574, 0.012837446294724941, -0.043793175369501114, 0.052507080137729645, -0.012254630215466022, 0.03638214245438576, -0.05347505956888199, -0.07047843188047409, -0.07347239553928375, 0.02147938311100006, 0.03301715478301048, -0.035779789090156555, -0.07435966283082962, 0.039609212428331375, 0.06687164306640625, -0.05033113434910774, -0.017803194001317024, -0.0763496607542038, 0.02063058130443096, 0.020747100934386253, -0.029864279553294182, -0.04765899106860161, -0.03568968176841736, 0.07720008492469788, -0.029024995863437653, -0.0474134124815464, -0.010198449715971947, 0.03159087523818016, -0.005997085012495518, -0.03873167932033539, -0.0749557763338089, -0.04443149268627167, -0.007612583227455616, 0.05493777245283127, 0.07691052556037903, -0.049964308738708496, 0.019588060677051544, 0.07620905339717865, -0.008940315805375576, 0.06941763311624527, -0.05503218248486519, 0.040379106998443604, -0.014342098496854305, 0.006572670768946409, -0.03688584640622139, -0.04207047075033188, -0.01599932834506035, 0.03253938630223274, 0.07726800441741943, 0.03602185100317001, 0.0663248673081398, 0.027795787900686264, 0.03823515772819519, -0.03877130150794983, -0.029513055458664894, -0.04965396225452423, -0.0020560671109706163, -0.02735489420592785, 0.016173653304576874, -0.022567421197891235, 0.04959992691874504, -0.000600686704274267, -0.035623952746391296, 0.06999792158603668, -0.02534034103155136, 0.07429713010787964, -0.04501686990261078, -0.047170791774988174, -0.02189820259809494, 0.05548012629151344, 0.004253552295267582, -0.02907208353281021, -0.026521362364292145, 0.03868994489312172, 0.04570109769701958, -0.03847237676382065, -0.05269194766879082, 0.008932315744459629, 0.05961625277996063, -0.06980617344379425, 0.06804370880126953, 0.01872682012617588, -0.020280884578824043, 0.07068409770727158, -0.000812332727946341, -0.022792885079979897, -0.06754330545663834, -0.02228139340877533, 0.032677363604307175, -0.07734834402799606, -0.05684422329068184, 0.06084229797124863, -0.053688716143369675, 0.03460540622472763, -0.0016439050668850541, 0.02508857473731041, -0.01911228336393833, 0.032387033104896545, 0.021483222022652626, 0.03833087906241417, -0.07413405925035477, -0.07701118290424347, -0.05710061267018318, -0.011286486871540546, -0.027075152844190598, -0.033181868493556976, -0.013205021619796753, -0.07591433078050613, 0.06509555876255035, -0.07710795104503632, 0.018618488684296608, -0.014828522689640522, 0.0039523751474916935, 0.05928561091423035, 0.03806370496749878, 0.06827665120363235, -0.002708206418901682, -0.002609699498862028, 0.01330187264829874, -0.023585539311170578, -0.06764096766710281, -0.009796571917831898, 0.05485282838344574, 0.04922257736325264, -0.03210275247693062, 0.0031992364674806595, 0.04714835062623024, 0.03253162279725075, -0.07369475811719894, 0.05511792004108429, -0.0333670973777771, 0.06503850966691971, 0.02450384758412838, -0.03750745952129364, -0.04912668839097023, -0.018334336578845978, -0.07311912626028061, 0.07590262591838837, -0.03077223151922226, -0.01916811428964138, -0.04620123282074928, -0.06648781895637512, 0.013082820922136307, -0.007343602366745472, 0.07004216313362122, -0.005891844164580107, -0.046321719884872437, -0.007495363708585501, 0.02685239166021347, -0.007705268450081348, 0.023434292525053024, -0.07397779822349548, -0.006822060327976942, -0.0502876378595829, -0.02406233735382557, -0.059376250952482224, -0.044812802225351334, 0.004123294726014137, -0.002330464543774724, 0.05345265567302704, -0.05013187974691391, 0.0573878176510334, -0.010740348137915134, -0.04723906144499779, -0.03466000780463219, 0.004542687442153692, -0.05999240651726723, 0.03606053441762924, -0.05551766976714134, -0.021527737379074097, 0.07335183769464493, -0.024972299113869667, 0.022796733304858208, -0.07730749249458313, -0.014370257034897804, -0.05181712657213211, 0.007939919829368591, -0.010321909561753273, -0.04244927689433098, -0.03602863475680351, -0.002034023404121399, 0.007911451160907745, -0.0697004497051239, 0.02746768668293953, 0.0006788945756852627, -0.05130614712834358, 0.0538627915084362, 0.05086742341518402, 0.025452811270952225, -0.05769745633006096, -0.050174530595541, 0.03054412268102169, -0.024165095761418343, -0.013276568613946438, 0.050703778862953186, -0.004070756956934929, 0.046738509088754654, 0.07735098153352737, 0.06515416502952576, -0.019097207114100456, -0.07692310214042664, 0.07072968035936356, 0.025949230417609215, -0.05476090684533119, -0.005531917326152325, -0.04162716865539551, -0.00520686199888587, -0.04146242514252663, -0.0002856035716831684, 0.020919648930430412, 0.05785096064209938, 0.03873717784881592, 0.07728198170661926, 0.038179390132427216, 0.03450048714876175, -0.0031239199452102184, -0.06096859648823738, 0.020703425630927086, 0.013438775204122066, -0.013026660308241844, 0.023845020681619644, -0.018674541264772415, -0.034289367496967316, 0.037185292690992355, -0.00561387138441205, -0.04487593099474907, -0.043669361621141434, 0.0021573323756456375, 0.01451581809669733, 0.039408039301633835, 0.03250722587108612, 0.06964994966983795, 0.05634031072258949, 0.023287169635295868, 0.004673460498452187, -0.02779155783355236, -0.06349342316389084, 0.023641221225261688, -0.026448549702763557, -0.005783480126410723, -0.01140794437378645, 0.00031505528022535145, 0.003824992571026087, 0.04638634994626045, 0.0428445003926754, -0.04485001787543297, 0.028306996449828148, -0.06195176765322685, -0.0011507095769047737, -0.04519534856081009, 0.06859095394611359, -0.06347858905792236, 0.030438760295510292, 0.050380416214466095, 0.050359636545181274, 0.005085931159555912, -0.05460653081536293]},
{"question": "How to parse JSON in Java", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>I have the following JSON text. How can I parse it to get the values of <code>pageName</code>, <code>pagePic</code>, <code>post_id</code>, etc.?</p>\n<pre class=\"lang-json prettyprint-override\"><code>    {\n       \"pageInfo\": {\n             \"pageName\": \"abc\",\n             \"pagePic\": \"http://example.com/content.jpg\"\n        },\n        \"posts\": [\n             {\n                  \"post_id\": \"123456789012_123456789012\",\n                  \"actor_id\": \"1234567890\",\n                  \"picOfPersonWhoPosted\": \"http://example.com/photo.jpg\",\n                  \"nameOfPersonWhoPosted\": \"Jane Doe\",\n                  \"message\": \"Sounds cool. Can't wait to see it!\",\n                  \"likesCount\": \"2\",\n                  \"comments\": [],\n                  \"timeOfPost\": \"1234567890\"\n             }\n        ]\n    }\n</code></pre>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>The <a href=\"https://github.com/stleary/JSON-java\" rel=\"noreferrer\">org.json</a> library is easy to use.</p>\n<p>Just remember (while casting or using methods like <code>getJSONObject</code> and <code>getJSONArray</code>) that in JSON notation</p>\n<ul>\n<li><code>[ \u2026 ]</code> represents an array, so library will parse it to <code>JSONArray</code></li>\n<li><code>{ \u2026 }</code> represents an object, so library will parse it to <code>JSONObject</code></li>\n</ul>\n<p>Example code below:</p>\n<pre><code>import org.json.*;\n\nString jsonString = ... ; //assign your JSON String here\nJSONObject obj = new JSONObject(jsonString);\nString pageName = obj.getJSONObject(\"pageInfo\").getString(\"pageName\");\n\nJSONArray arr = obj.getJSONArray(\"posts\"); // notice that `\"posts\": [...]`\nfor (int i = 0; i &lt; arr.length(); i++)\n{\n    String post_id = arr.getJSONObject(i).getString(\"post_id\");\n    ......\n}\n</code></pre>\n<p>You may find more examples from: <a href=\"http://theoryapp.com/parse-json-in-java/\" rel=\"noreferrer\">Parse JSON in Java</a></p>\n<p>Downloadable jar:  <a href=\"http://mvnrepository.com/artifact/org.json/json\" rel=\"noreferrer\">http://mvnrepository.com/artifact/org.json/json</a></p>\n    </div>", "total_vectors": [0.004480466712266207, -0.05914735421538353, 0.03301948308944702, 0.03592240437865257, 0.07240375131368637, 0.058863043785095215, -0.06238548085093498, 0.0049355062656104565, -0.019056081771850586, 0.06611619889736176, 0.025985687971115112, -0.03850460425019264, -0.05308529734611511, 0.06356819719076157, -0.07953088730573654, 0.079947829246521, 0.07280861586332321, -0.057011235505342484, 0.0677567720413208, -0.06273937970399857, 0.03255506604909897, 0.014352679252624512, 0.0373222753405571, 0.06475712358951569, -0.03211025521159172, 0.04351009428501129, -0.023004960268735886, -0.06851080805063248, -0.010633274912834167, -0.010428538545966148, -0.01474735327064991, 0.02330622635781765, -0.02599971555173397, -0.020556120201945305, 0.00019608536968007684, 0.05971420928835869, -0.012732427567243576, -0.0038278326392173767, -0.03556639701128006, -0.07407859712839127, 0.028493689373135567, 0.03740689530968666, -0.05799327418208122, 0.04198747128248215, 0.07991546392440796, -0.017485598102211952, -0.05882047116756439, -0.018106326460838318, -0.031597938388586044, -0.03379007428884506, 0.04374568909406662, 0.05499845743179321, -0.018779098987579346, -0.036232203245162964, -0.03192100301384926, -0.034236036241054535, -0.04289163649082184, 0.027528509497642517, 0.040376514196395874, 0.04678470641374588, -0.009422923438251019, -0.07847876101732254, 0.017973359674215317, -0.008731982670724392, 0.01838393695652485, -0.035042595118284225, -0.024023929610848427, -0.014730680733919144, 0.07722806930541992, -0.0360071174800396, -0.07983459532260895, 0.029580768197774887, 0.048494819551706314, -0.03797918185591698, 0.04802638664841652, 0.057476695626974106, -0.03271161764860153, 0.06223312020301819, 0.0655757263302803, 0.05788509175181389, 0.0007189251482486725, 0.06204873323440552, -0.013726533390581608, -0.03976139426231384, 0.078587107360363, 0.05241535231471062, -0.022009072825312614, 0.0013680801494047046, -0.07359282672405243, -0.04688246175646782, 0.03299647569656372, 7.208170427475125e-05, 0.006681591738015413, 0.07329361885786057, 0.00021603915956802666, 0.0561937615275383, 0.02754732221364975, 0.03735652565956116, -0.0693359225988388, -0.07761804759502411, -0.022114494815468788, 0.0066054570488631725, -0.0717850923538208, 0.020786596462130547, -0.050647538155317307, 0.04292886331677437, 0.04272990673780441, 0.025049906224012375, 0.014933682978153229, 0.020577454939484596, -0.009026121348142624, -0.07154738903045654, 0.024002578109502792, 0.005686194635927677, -0.07247321307659149, -0.02928328886628151, 0.005699171684682369, 0.03059670515358448, -0.007978333160281181, -0.025865409523248672, -0.015207472257316113, 0.0011138793779537082, -0.014658022671937943, 0.027147753164172173, -0.011901254765689373, 0.04825543612241745, 0.018426991999149323, 0.006008964963257313, 0.06808993220329285, 0.025417910888791084, 0.04536585137248039, -0.041155602782964706, -0.06203921511769295, -0.03810221701860428, 0.049860913306474686, -0.03594944626092911, -0.042939092963933945, -0.01862221769988537, -0.02357025444507599, -0.07974013686180115, -0.002470868406817317, -0.029546547681093216, 0.05710615962743759, -0.01937068998813629, 0.015692980960011482, -0.07986894249916077, 0.03187156468629837, 0.051191069185733795, -0.029825029894709587, 0.07667499035596848, 0.05427372828125954, -0.026567718014121056, 0.03316329047083855, 0.047062311321496964, -0.022593678906559944, 0.006802459247410297, 0.009529337286949158, -0.0768405944108963, 0.049646347761154175, 0.019466035068035126, 0.021890435367822647, 0.04333982989192009, -0.009069233201444149, -0.04107337072491646, -0.02543482556939125, -0.07449083030223846, -0.04109670966863632, 0.026710914447903633, -0.05719597265124321, 0.04091755673289299, -0.040409620851278305, 0.004846137948334217, -0.01122275274246931, 0.017277255654335022, -0.02761712484061718, 0.03328143432736397, -0.0195307694375515, 0.02128550037741661, -0.05815032124519348, 0.04606057330965996, 0.06300639361143112, 0.055924419313669205, -0.008792044594883919, -0.04785440117120743, 0.013941877521574497, 0.02874675765633583, -0.06453598290681839, 0.07348061352968216, -0.049026574939489365, 0.04673754423856735, 0.07826496660709381, -0.035720646381378174, 0.020863045006990433, -0.05213820934295654, -0.05599583685398102, 0.025799168273806572, 0.04761889576911926, 0.07994779944419861, 0.006644479464739561, -0.027059456333518028, -0.07144466042518616, -0.019900411367416382, 0.03833398222923279, 0.07454659789800644, -0.03530287370085716, -0.045637890696525574, -0.05494231358170509, -0.007273862138390541, -0.07979504764080048, -0.041542988270521164, -0.057549651712179184, -0.028032440692186356, -0.04387087747454643, -0.015529969707131386, -0.039123497903347015, 0.06620004773139954, -0.02852947823703289, 0.06772122532129288, 0.06256601214408875, 0.009056943468749523, -0.061832528561353683, -0.00966055877506733, 0.04532145708799362, 0.04912610724568367, -0.0732739195227623, 0.01736331917345524, 0.014279499650001526, 0.009291776455938816, -0.010099734179675579, -0.036261823028326035, 0.02549869380891323, -0.04075998440384865, -0.02255638688802719, -0.04869178682565689, 0.05438847839832306, 0.008280059322714806, 0.07877268642187119, 0.050806038081645966, 0.028439022600650787, 0.04134172201156616, -0.04313788190484047, 0.07168424874544144, 0.05706002563238144, 0.013063637539744377, -0.04172152653336525, 0.07704544812440872, 0.07318392395973206, -0.048517122864723206, 0.07786880433559418, 0.07890211045742035, -0.06966661661863327, 0.021689357236027718, -0.04138380289077759, -0.015849212184548378, -0.0572594478726387, -0.058299142867326736, 0.020199831575155258, -0.07586362957954407, 0.06255735456943512, 0.030068449676036835, 0.0015054730465635657, -0.0006552672130055726, -0.05182977020740509, 0.06518199294805527, 0.05384055897593498, 0.04744274169206619, 0.0014580272836610675, -0.07796479761600494, -0.07946949452161789, 0.02519371546804905, -0.06380908936262131, -0.024964582175016403, -0.0023229066282510757, 0.015270653180778027, -0.044034313410520554, -0.029868191108107567, -0.06679325550794601, 0.0508924275636673, 0.07989869266748428, 0.018350979313254356, -0.049763575196266174, 0.0019906340166926384, 0.04876801371574402, -0.04528270661830902, 0.041721224784851074, -0.07941293716430664, 0.06760954111814499, 0.0034507145173847675, -0.05406501144170761, 0.07618791610002518, 0.037049803882837296, 0.0048324838280677795, 0.07500774413347244, -0.00641225278377533, 0.06593101471662521, -0.05686954781413078, -0.008508999831974506, 0.008730383589863777, -0.03538113087415695, -0.006759913172572851, -0.016446778550744057, 0.040316227823495865, 0.01500279363244772, 0.07914391905069351, -0.03363090381026268, -0.016587458550930023, 0.02904704585671425, 0.01574249565601349, -0.012201549485325813, -0.041568856686353683, 0.009153819642961025, 0.048611775040626526, -0.013923131860792637, -0.02352331392467022, -0.039157044142484665, 0.010955307632684708, -0.004857843741774559, 0.015077495016157627, -0.001132626784965396, 0.030229883268475533, -0.03970896080136299, -0.015567203052341938, 0.047092288732528687, -0.029699275270104408, 0.02753310650587082, 0.004659687168896198, -0.04425787925720215, -0.04180525615811348, 0.043966446071863174, -0.026082398369908333, 0.05632997304201126, 0.008865038864314556, -0.0055795772932469845, 0.0525389090180397, -0.030877135694026947, -0.059389110654592514, -0.011063429526984692, -0.0653664618730545, -0.002419298980385065, -0.06469850242137909, -0.04481540247797966, -0.015094787813723087, 0.07621697336435318, 0.011854385957121849, -0.07994773238897324, -0.03821498900651932, 0.0649949237704277, -0.03335591033101082, -0.04536086693406105, -0.0026992044877260923, -0.057107798755168915, 0.018123894929885864, 0.0059646740555763245, 0.0395139716565609, -0.016765492036938667, -0.026285676285624504, -0.07985762506723404, 0.041773125529289246, -0.06214066222310066, -0.03637733682990074, -0.06589862704277039, 0.051952116191387177, -0.07988337427377701, 0.0386657677590847, 0.025454001501202583, 0.058731045573949814, -0.04548485949635506, -0.03979633376002312, 0.07735203951597214, 0.059514373540878296, 0.006184253841638565, -0.054143112152814865, -0.06903604418039322, 0.0670929029583931, -0.021437589079141617, -0.07118041813373566, -0.060953933745622635, -0.0169293824583292, 0.004139012191444635, 0.07055001705884933, 0.022328725084662437, -0.02005831152200699, 0.00972234271466732, -0.012486908584833145, -0.03431648761034012, -0.05432803928852081, 0.058884043246507645, -0.002567645162343979, 0.047983940690755844, -0.02315336838364601, -0.02566719427704811, -0.07104704529047012, -0.014142753556370735, -0.01733098179101944, 0.035064447671175, 0.009150763042271137, -0.04921634495258331, -0.03818941116333008, 0.012120828963816166, 0.04364106431603432, 0.011271745897829533, -0.005787826143205166, 0.02725011296570301, 0.017540359869599342, 0.061775095760822296, 0.07600253075361252, -0.0792844146490097, -0.0248867180198431, -0.012570074759423733, 0.0035481685772538185, -0.036236606538295746, -0.05172653868794441, -0.002636214718222618, 0.03208932280540466, -0.056248683482408524, -0.07741694897413254, -0.012788108550012112, 0.018821731209754944, 0.03810874745249748, -0.003011537715792656, -0.05799172818660736, -0.07362617552280426, 0.003442028071731329, -0.05825241655111313, -0.0006136011797934771, 0.0656285211443901, -0.0028620336670428514, 0.07111289352178574, -0.07690703868865967, 0.0378330834209919, 0.02942952886223793, 0.03455888107419014, 0.006263246294111013, -0.05128674954175949, -0.061238329857587814, -0.015205931849777699, 0.04064704477787018, 0.041470348834991455, 0.047847189009189606, 0.010476609691977501, -0.016080079600214958, -0.014349272474646568, 0.01987137459218502, -0.04171562194824219, 0.006678191479295492, -0.06403949111700058, 0.07390548288822174, -0.03462501987814903, 0.027528617531061172, -0.035449959337711334, 0.01724633201956749, 0.04976851865649223, 0.07994578778743744, -0.024005845189094543, 0.034136079251766205, -0.07706862688064575, -0.026061883196234703, 0.022746294736862183, 0.020048050209879875, -0.05095549672842026, 0.07351472228765488, 0.05198756605386734, 0.07180953025817871, 0.06962398439645767, -0.013519744388759136, -0.03222249448299408, -0.04740408435463905, 0.07385551929473877, -0.015348486602306366, 0.00464595016092062, -0.03550562635064125, 0.017168061807751656, 0.06216372549533844, 0.05146341770887375, -0.027263294905424118, -0.05928188934922218, -0.023092146962881088, -0.02050287276506424, 0.03240155801177025, 0.015790294855833054, 0.006221090443432331, -0.02068972773849964, -0.0038958536460995674, -0.029066206887364388, 0.0011536992387846112, 0.06837309151887894, 0.07725000381469727, -0.011343034915626049, -0.017794614657759666, -0.004849386867135763, -0.028377069160342216, -0.0428348071873188, -0.06395575404167175, 0.03264453262090683, 0.04047231748700142, -0.006344724912196398, -0.052881184965372086, -0.010866574943065643, -0.07164134830236435, 0.007597201969474554, -0.022753793746232986, -0.025746282190084457, 0.020325476303696632, 0.02587171085178852, -0.029733914881944656, 0.021683810278773308, 0.020923936739563942, 0.02859135903418064, -0.011978753842413425, 0.0769251212477684, -0.007127226796001196, -0.00887040514498949]},
{"question": "Convert one date format into another in PHP", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>Is there a simple way to convert one date format into another date format in PHP?</p>\n\n<p>I have this:</p>\n\n<pre><code>$old_date = date('y-m-d-h-i-s');            // works\n\n$middle = strtotime($old_date);             // returns bool(false)\n\n$new_date = date('Y-m-d H:i:s', $middle);   // returns 1970-01-01 00:00:00\n</code></pre>\n\n<p>But I'd of course like it to return a current date rather than the crack 'o dawn. What am I doing wrong?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>The second parameter to <code>date()</code> needs to be a proper timestamp (seconds since January 1, 1970). You are passing a string, which date() can't recognize.</p>\n\n<p>You can use <a href=\"http://de.php.net/manual/en/function.strtotime.php\" rel=\"noreferrer\"><strong>strtotime()</strong></a> to convert a date string into a timestamp. However, even strtotime() doesn't recognize the <code>y-m-d-h-i-s</code> format.</p>\n\n<p><strong>PHP 5.3 and up</strong></p>\n\n<p>Use <a href=\"http://php.net/manual/en/datetime.createfromformat.php\" rel=\"noreferrer\"><code>DateTime::createFromFormat</code></a>. It allows you to specify an exact mask - using the <code>date()</code> syntax - to parse incoming string dates with.</p>\n\n<p><strong>PHP 5.2 and lower</strong></p>\n\n<p>You will have to parse the elements (year, month, day, hour, minute, second) manually using <code>substr()</code> and hand the results to <a href=\"http://de.php.net/manual/en/function.mktime.php\" rel=\"noreferrer\"><strong>mktime()</strong></a> that will build you a timestamp. </p>\n\n<p>But that's a lot of work! I recommend using a different format that strftime() can understand. strftime() understands <em>any</em>  date input short of <code>the next time joe will slip on the ice</code>. for example, this works:</p>\n\n<pre><code>$old_date = date('l, F d y h:i:s');              // returns Saturday, January 30 10 02:06:34\n$old_date_timestamp = strtotime($old_date);\n$new_date = date('Y-m-d H:i:s', $old_date_timestamp);   \n</code></pre>\n    </div>", "total_vectors": [-0.055431339889764786, -0.07843261957168579, -0.009314737282693386, 0.07346038520336151, 0.04212740436196327, -0.015196632593870163, -0.005100461654365063, -0.03677134960889816, -0.005045238416641951, 0.047276221215724945, -0.012037004344165325, -0.021280793473124504, -0.03764527291059494, 0.03794427961111069, -0.0367608480155468, 0.08069910854101181, -0.03126106038689613, -0.046861421316862106, -0.033054668456315994, 0.008082253858447075, -0.0005249390378594398, -0.06716251373291016, 0.06144871562719345, 0.019212989136576653, 0.00043409017962403595, -0.06581960618495941, -0.02848978154361248, 0.018871895968914032, -0.029284905642271042, 0.01967102475464344, -0.0035508815199136734, 0.03984270617365837, 0.014723870903253555, 0.07661379873752594, 0.025212906301021576, 0.025998549535870552, -0.03771476820111275, -0.07492184638977051, -0.05792248621582985, -0.003835843177512288, -0.0011272564297541976, -0.03904096037149429, 0.004806057550013065, 0.04119058698415756, 0.08066919445991516, 0.019599726423621178, -0.05669465661048889, -0.03607944771647453, -0.015649765729904175, -0.02173459343612194, 0.04472827538847923, 0.07460257411003113, 0.03384564816951752, 0.03523877635598183, -0.07508442550897598, 0.044140785932540894, -0.028099706396460533, -0.007279508747160435, -0.03153376653790474, 0.027424581348896027, -0.0370841920375824, -0.055624641478061676, -0.0161876417696476, -0.047855887562036514, -0.044628582894802094, -0.016079911962151527, -0.00018714882025960833, -0.06658248603343964, -0.025530530139803886, -0.00776226120069623, -0.04961526021361351, -0.07583211362361908, 0.039903268218040466, -0.01162821426987648, -0.01492523867636919, 0.05901727452874184, 0.034871842712163925, 0.04833831638097763, 0.05432569235563278, -0.029048165306448936, 0.06920257955789566, 0.06817834824323654, 0.022541049867868423, -0.044891465455293655, 0.05132651701569557, 0.018687991425395012, -0.03560996800661087, 0.06488826870918274, -0.07317659258842468, -0.009850035421550274, -0.014504602178931236, 0.020214779302477837, 0.03540635108947754, 0.018628869205713272, 0.0536748506128788, 0.05997699126601219, 0.036902736872434616, 0.041527457535266876, -0.03377123177051544, -0.0804518386721611, -0.036349110305309296, 0.027742018923163414, -0.06432025879621506, -0.0125131756067276, -0.06075473502278328, -0.04451965540647507, 0.07944287359714508, 0.04334568232297897, -0.06809525936841965, 0.04143063724040985, -0.05079057812690735, -0.05016576126217842, 0.015617161057889462, -0.03089262917637825, 0.02682807296514511, 0.02282482013106346, 0.037614766508340836, -0.020748624578118324, 0.008850815705955029, 0.04235139489173889, -0.03161151707172394, -0.057153500616550446, -0.03260049223899841, -0.01752329431474209, -0.04769495129585266, 0.044363588094711304, 0.03429599851369858, -0.04981500655412674, 0.07561304420232773, 0.018826158717274666, -0.034075431525707245, -0.0193950068205595, -0.060687173157930374, 0.016117317602038383, 0.036929596215486526, 0.05079163983464241, -0.039311449974775314, 0.06704480201005936, -0.016814840957522392, -0.017806626856327057, -0.04701847955584526, -0.033655524253845215, 0.04481738805770874, 0.0038192481733858585, -0.01427575945854187, -0.08024872839450836, -0.05706023797392845, -0.046946413815021515, 0.04365101084113121, 0.0133965527638793, -0.0014588665217161179, 0.040409430861473083, 0.011133397929370403, -0.0485350638628006, -0.003972870763391256, -0.04241687431931496, 0.04097802937030792, -0.0703788697719574, 0.05046108737587929, -0.006068593822419643, -0.0159529447555542, 0.06018143147230148, 0.005457296967506409, 0.022623198106884956, 0.06481118500232697, -0.06082499027252197, 0.00048623172915540636, 0.0032365620136260986, 0.04781694337725639, 0.04870488867163658, 0.02260059118270874, 0.005310392472893, 0.06311703473329544, -0.05100945383310318, -0.011663969606161118, 0.008386189118027687, -0.02713828906416893, -0.0068401456810534, -0.014187843538820744, 0.039262622594833374, 0.023217786103487015, 0.01683090440928936, 0.057273030281066895, -0.013774995692074299, -0.02377895824611187, -0.027195321395993233, 0.03029698319733143, 0.07985533028841019, 0.005651232320815325, 0.06201670691370964, 0.06955438107252121, -0.019181642681360245, -0.05391068011522293, -0.027079688385128975, -0.06409413367509842, -0.0021652623545378447, 0.05560905858874321, 0.08069902658462524, 0.002582233864814043, -0.04888557270169258, -0.07974779605865479, -0.001805528299883008, -0.08027921617031097, 0.021313508972525597, -0.018186427652835846, -0.03700990974903107, -0.02197146788239479, -0.06482497602701187, -0.07918499410152435, -0.015259037725627422, -0.057111915200948715, -0.0026316791772842407, 0.009809507988393307, 0.03185958415269852, 0.023090006783604622, 0.03582664579153061, 0.025571346282958984, 0.07189849019050598, 0.07308632880449295, -0.03966297209262848, 0.0337553545832634, 0.02549891360104084, 0.019578689709305763, 0.01490204967558384, -0.05451301485300064, -0.03783445060253143, 0.027250472456216812, -0.01690145581960678, -0.040744852274656296, -0.0268943402916193, -0.046379804611206055, -0.04804079979658127, -0.05088721588253975, -0.06906817853450775, 0.05760084465146065, -0.07753826677799225, 0.07683069258928299, 0.014142779633402824, 0.037332579493522644, 0.04769677668809891, -0.03742446005344391, 0.012383800931274891, -0.06509789824485779, -0.0754130557179451, -0.012194234877824783, 0.06739800423383713, -0.03991134837269783, -0.027788693085312843, 0.06262003630399704, 0.0784655287861824, -0.00766534311696887, 0.03049560636281967, -0.014312602579593658, 0.03794078528881073, -0.03850521147251129, -0.0769745260477066, -0.04991118982434273, -0.07713634520769119, -0.017597472295165062, 0.03504255786538124, -0.0602605864405632, 0.012324697338044643, -0.06070610508322716, 0.03582669049501419, 0.07347062230110168, 0.03831036388874054, 0.027175068855285645, -0.05775151401758194, -0.05731678754091263, -0.0030753742903470993, -0.0657084658741951, -0.025633279234170914, 0.054743386805057526, -0.06952173262834549, 0.016894981265068054, 0.012051021680235863, -0.053847786039114, 0.022138331085443497, 0.08062997460365295, -0.022428568452596664, 0.05018796771764755, -0.009096499532461166, -0.02480575256049633, 0.029949573799967766, 0.057190924882888794, -0.07867254316806793, -0.0030747205018997192, -0.010700516402721405, 0.002696018433198333, 0.06737522035837173, -0.005785055458545685, -0.023523151874542236, 0.05143347382545471, 0.035646818578243256, 0.07521649450063705, -0.07206651568412781, -0.04462583363056183, 0.006128726527094841, -0.013154341839253902, 0.06401944160461426, 0.029847009107470512, -0.03730056807398796, 0.01883159577846527, -0.07683166861534119, -0.0610666386783123, -0.03233470395207405, -0.023200834169983864, -0.02419871836900711, -0.042612820863723755, 0.007882893085479736, -0.03210023045539856, 0.053394731134176254, 0.021650217473506927, 0.012202617712318897, 0.04417738318443298, -0.01863456889986992, -0.026420412585139275, 0.037676289677619934, 0.01728866435587406, 0.021880025044083595, 0.06828499585390091, 0.017870372161269188, -0.01845976524055004, 0.0031484621576964855, 0.008091913536190987, -0.011946894228458405, -0.06129585951566696, 0.06693243980407715, 0.0594526082277298, 0.007189611438661814, 0.03477649763226509, 0.007855874486267567, 0.011689804494380951, 0.0379161573946476, 0.06383731216192245, 0.02776762843132019, 0.05498136952519417, -0.022071752697229385, 0.062109362334012985, 0.06471958011388779, -0.0585288405418396, -0.009541265666484833, 0.021888254210352898, 0.020687032490968704, -0.0806969702243805, 0.05168702080845833, 0.039279405027627945, -0.05297078564763069, 0.017852909862995148, 0.03675416484475136, -0.03167936950922012, -0.034726206213235855, 0.06553002446889877, -0.08022316545248032, 0.05273463577032089, -0.07570908963680267, -0.08050014823675156, -0.03618159890174866, -0.05911516025662422, -0.03441939502954483, -0.0379268042743206, 0.04018907621502876, -0.0805618166923523, 0.03369622677564621, -0.07870275527238846, -0.036709390580654144, 0.010445058345794678, -0.0026847226545214653, 0.06894595921039581, -0.04053943604230881, -0.005545724183320999, 0.0018005891470238566, 0.012666781432926655, 0.06855978071689606, 0.06479813158512115, -0.041955143213272095, 0.04003416374325752, -0.03292045742273331, 0.061821479350328445, -0.007806792389601469, -0.005789292510598898, 0.03316521272063255, -0.04215673729777336, 0.033846765756607056, -0.01059431117027998, -0.033331498503685, 0.013897361233830452, 0.05769046023488045, 0.061123959720134735, -0.03575796261429787, -0.07206766307353973, 0.07732705771923065, 0.07909483462572098, -0.0014872386818751693, 0.050307586789131165, 0.06860567629337311, -0.06597492843866348, 0.0466604046523571, -0.004479060880839825, 0.05211079865694046, -0.04717118665575981, 0.001028608065098524, -0.03141167387366295, -0.0721854642033577, 0.05663710832595825, 0.06760934740304947, -0.08044273406267166, 0.0007108795107342303, -0.03842785209417343, 0.04772135987877846, 0.0017721100011840463, -0.03590061143040657, -0.04449963942170143, -0.012765636667609215, -0.035961784422397614, -0.026446636766195297, -0.057350043207407, 0.0021521737799048424, -0.03410542383790016, -0.0004247709584888071, -0.044567789882421494, 0.005086707416921854, 0.0575043186545372, -0.04890900477766991, -0.06755723804235458, 0.07655631005764008, 0.01114068366587162, 0.07879595458507538, -0.025881070643663406, 0.018687309697270393, -0.042125403881073, -0.002373621566221118, 0.026751374825835228, 0.08018559217453003, -0.07530856132507324, 0.023779043927788734, -0.03621376305818558, 0.0030823531560599804, -0.021123796701431274, 0.059916459023952484, -0.011129872873425484, -0.017901897430419922, -0.021156899631023407, -0.050132256001234055, 0.008602823130786419, -0.048036977648735046, 0.07828986644744873, -0.009798954240977764, -0.057190362364053726, 0.012422323226928711, 0.03312258422374725, -0.0710502564907074, 0.08065953105688095, 0.0019843631889671087, -0.03806084766983986, -0.043016646057367325, -0.030494552105665207, 0.03588258475065231, 0.04169145226478577, -0.06212453544139862, 0.0504298098385334, 0.046487800776958466, -0.023033659905195236, 0.06353271007537842, -0.030802659690380096, 0.019722072407603264, -0.05826695263385773, -0.07830478250980377, 0.029476264491677284, -0.0007901301141828299, -0.009708152152597904, 0.01280588936060667, 0.034563686698675156, -0.02131066285073757, 0.004126135725528002, 0.04619772732257843, -0.04878982529044151, -0.07161891460418701, -0.05804968625307083, -0.05916224420070648, 0.0375172458589077, 0.01375658344477415, 0.03659120947122574, 0.038451243191957474, 0.06617609411478043, 0.04300440102815628, 0.044940799474716187, 0.01506861113011837, 0.005136801861226559, 0.003281193785369396, -0.000990354921668768, -0.030333181843161583, -0.025559067726135254, 0.011409568600356579, 0.016117211431264877, -0.021313628181815147, 0.04040038585662842, -0.07054993510246277, -0.02415507845580578, -0.015769585967063904, -0.042232029139995575, -0.0568026565015316, 0.010605174116790295, 0.020270245149731636, 0.06890582293272018, 0.04766504839062691, -0.0047746519558131695, 0.02229514718055725, 0.02824980393052101, 0.06228005886077881, -0.043576013296842575, -0.07326684892177582]},
{"question": "Reference \u2014 What does this symbol mean in PHP?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<h3>What is this?</h3>\n<p>This is a collection of questions that come up every now and then about syntax in PHP. This is also a Community Wiki, so everyone is invited to participate in maintaining this list.</p>\n<h3>Why is this?</h3>\n<p>It used to be hard to find questions about operators and other syntax tokens.\u00b9<br>\nThe main idea is to have links to existing questions on Stack Overflow, so it's easier for us to reference them, not to copy over content from the PHP Manual.</p>\n<p>Note: Since January 2013, Stack Overflow <a href=\"https://meta.stackexchange.com/questions/160100/a-new-search-engine-for-stack-exchange\">does support special characters</a>. Just surround the search terms by quotes, e.g. <a href=\"https://stackoverflow.com/search?q=%5Bphp%5D%20%22===%22%20vs%20%22==%22\"><code>[php] \"==\" vs \"===\"</code></a></p>\n<h3><strong>What should I do here?</strong></h3>\n<p>If you have been pointed here by someone because you have asked such a question, please find the particular syntax below. The linked pages to the <a href=\"http://php.net/manual/en/index.php\" rel=\"noreferrer\">PHP manual</a> along with the linked questions will likely answer your question then. If so, you are encouraged to upvote the answer. This list is not meant as a substitute to the help others provided.</p>\n<h2>The List</h2>\n<p>If your particular token is not listed below, you might find it in the <a href=\"http://secure.php.net/manual/en/tokens.php\" rel=\"noreferrer\">List of Parser Tokens</a>.</p>\n<hr>\n<p><code>&amp;</code> <a href=\"http://secure.php.net/manual/en/language.operators.bitwise.php\" rel=\"noreferrer\">Bitwise Operators</a> or <a href=\"http://secure.php.net/manual/en/language.references.php\" rel=\"noreferrer\">References</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1676897\">What does it mean to start a PHP function with an ampersand?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/600202\">Understanding PHP &amp; (ampersand, bitwise and) operator</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2209934/\">PHP \"&amp;\" operator</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2376348\">Difference between &amp; and &amp;&amp; in PHP</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1006652\">What does \"&amp;\" mean here in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2297592\">What does \"&amp;\" mean in this case?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2422907\">What does the \"&amp;\" sign mean in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2478149\">What does this signature mean (&amp;) in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3957584\">How does the \"&amp;\" operator work in a PHP function?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4705262\">What does &amp; in &amp;2 mean in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4705838\">When should I use a bitwise operator?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/21058439\">Is there ever a need to use ampersand in front of an object?</a> (&amp;$)</li>\n</ul>\n<hr>\n<p><code>=&amp;</code> <a href=\"http://secure.php.net/manual/en/language.references.php\" rel=\"noreferrer\">References</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1768343\">Reference assignment operator in PHP, =&amp;</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1367454\">What do the \"=&amp;\" and \"&amp;=\" operators in PHP mean?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3177342\">What do the '&amp;=' and '=&amp;' operators do?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2081806\">What does =&amp; mean in PHP?</a></li>\n</ul>\n<hr>\n<p><code>&amp;=</code> <a href=\"http://secure.php.net/manual/en/language.operators.bitwise.php\" rel=\"noreferrer\">Bitwise Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1367454\">What do the \"=&amp;\" and \"&amp;=\" operators in PHP mean?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3177342\">What do the '&amp;=' and '=&amp;' operators do?</a></li>\n</ul>\n<hr>\n<p><code>&amp;&amp;</code> <a href=\"http://secure.php.net/manual/en/language.operators.logical.php\" rel=\"noreferrer\">Logical Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2803321\">'AND' vs '&amp;&amp;' as operator</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2376348\">Difference between &amp; and &amp;&amp; in PHP</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4746865\">Is there any difference between \"and\" and \"&amp;&amp;\" operators in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4502092\">PHP - and / or keywords</a></li>\n</ul>\n<hr>\n<p><code>%</code> <a href=\"http://secure.php.net/manual/en/language.operators.arithmetic.php\" rel=\"noreferrer\">Arithmetic Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1934173\">What does the percent sign mean in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3204919\">What is the PHP operator % and how do I use it in real-world examples?</a></li>\n</ul>\n<hr>\n<p><code>!!</code> <a href=\"http://secure.php.net/manual/en/language.operators.logical.php\" rel=\"noreferrer\">Logical Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2127260\">Double not (!!) operator in PHP</a></li>\n</ul>\n<hr>\n<p><code>@</code> <a href=\"http://secure.php.net/manual/en/language.operators.errorcontrol.php\" rel=\"noreferrer\">Error Control Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1032161\">What is the use of the @ symbol in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3551527\">'At' symbol before variable name in PHP: @$_POST</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3984864\">PHP functions and @functions</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4872340\">Should I use @ in my PHP code?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3621215\">What does @ mean in PHP?</a></li>\n</ul>\n<hr>\n<p><code>?:</code> <a href=\"http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary\" rel=\"noreferrer\">Ternary Operator</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1080247\">What are the PHP operators \"?\" and \":\" called and what do they do?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1993409\">?: operator (the 'Elvis operator') in PHP</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4055355\">Where can I read about conditionals done with \"?\" and \":\" (colon)?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4210187\">Using PHP 5.3 ?: operator</a></li>\n</ul>\n<hr>\n<p><code>??</code> <a href=\"https://www.php.net/manual/en/migration70.new-features.php\" rel=\"noreferrer\">Null Coalesce Operator</a> (since PHP 7)</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/7278835\">C#'s null coalescing operator (??) in PHP</a></li>\n</ul>\n<hr>\n<p><code>?string</code>\n<code>?int</code>\n<code>?array</code>\n<code>?bool</code>\n<code>?float</code> <a href=\"https://www.php.net/manual/en/migration71.new-features.php\" rel=\"noreferrer\">Nullable return type declaration</a> (since PHP 7.1)</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/54217328/250259\">Nullable return type declaration</a></li>\n<li><a href=\"https://stackoverflow.com/questions/48881489/php-method-argument-type-hinting-with-question-mark-type\">php method argument type hinting with question mark (?type)</a></li>\n</ul>\n<hr>\n<p><code>:</code> <a href=\"http://secure.php.net/manual/en/control-structures.alternative-syntax.php\" rel=\"noreferrer\">Alternative syntax for control structures</a>, <a href=\"http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary\" rel=\"noreferrer\">Ternary Operator</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2908095\">What is \":\" in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4747761\">What does \":\" mean in PHP?</a></li>\n</ul>\n<hr>\n<p><code>::</code> <a href=\"http://secure.php.net/manual/en/language.oop5.paamayim-nekudotayim.php\" rel=\"noreferrer\">Scope Resolution Operator</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2903564\">What do two colons mean in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2588298\">What's the meaning of the PHP token name T_PAAMAYIM_NEKUDOTAYIM?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3173501\">What's the difference between :: (double colon) and -&gt; (arrow) in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1912902\">What exactly are late static bindings in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4120755\">static::staticFunctionName()</a></li>\n<li><a href=\"https://stackoverflow.com/questions/8734823\">Unexpected T_PAAMAYIM_NEKUDOTAYIM, expecting T_NS_Separator</a></li>\n</ul>\n<hr>\n<p><code>\\</code> <a href=\"http://php.net/namespaces\" rel=\"noreferrer\">Namespaces</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/10788400\">Backslash in PHP -- what does it mean?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4790020\">What does a \\ (backslash) do in PHP (5.3+)?</a></li>\n</ul>\n<hr>\n<p><code>-&gt;</code> <a href=\"http://secure.php.net/manual/en/language.oop5.php\" rel=\"noreferrer\">Classes And Objects</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2588149\">What is the \"-&gt;\" PHP operator called?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3037526\">Where do we use the object operator \"-&gt;\" in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3173501\">What's the difference between :: (double colon) and -&gt; (arrow) in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2316370\">What does the PHP syntax $var1-&gt;$var2 mean?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4502587\">What does \"-&gt;\" mean/refer to in PHP?</a></li>\n</ul>\n<hr>\n<p><code>=&gt;</code> <a href=\"http://secure.php.net/manual/en/language.types.array.php\" rel=\"noreferrer\">Arrays</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1241819\">What does \"=&gt;\" mean in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1655336\">Use of =&gt; in PHP</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4758791\">What does $k =&gt; $v in foreach($ex as $k=&gt;$v) mean?</a></li>\n</ul>\n<hr>\n<p><code>^</code> <a href=\"http://secure.php.net/manual/en/language.operators.bitwise.php\" rel=\"noreferrer\">Bitwise Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2674920\">How does the bitwise operator XOR ('^') work?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2724936\">What does ^ mean in PHP?</a></li>\n</ul>\n<hr>\n<p><code>&gt;&gt;</code> <a href=\"http://secure.php.net/manual/en/language.operators.bitwise.php\" rel=\"noreferrer\">Bitwise Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2790329\">What does &gt;&gt; mean in PHP?</a></li>\n</ul>\n<hr>\n<p><code>&lt;&lt;</code> <a href=\"http://secure.php.net/manual/en/language.operators.bitwise.php\" rel=\"noreferrer\">Bitwise Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/9718689/strange-print-behaviour-in-php\">Strange print behaviour in PHP?</a></li>\n</ul>\n<hr>\n<p><code>&lt;&lt;&lt;</code> <a href=\"http://php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc\" rel=\"noreferrer\">Heredoc or Nowdoc</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/5539669\">What does &lt;&lt;&lt;END mean in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1048481\">PHP expression &lt;&lt;&lt;EOB</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3700042\">In PHP, what does \"&lt;&lt;&lt;\" represent?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2090081\">Using &lt;&lt;&lt;CON in PHP</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2333779\">What's this kind of syntax in PHP?</a></li>\n</ul>\n<hr>\n<p><code>=</code> <a href=\"http://secure.php.net/manual/en/language.operators.assignment.php\" rel=\"noreferrer\">Assignment Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2063480\">The 3 different equals</a></li>\n</ul>\n<hr>\n<p><code>==</code> <a href=\"http://secure.php.net/manual/en/language.operators.comparison.php\" rel=\"noreferrer\">Comparison Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/80646\">How do the PHP equality (== double equals) and identity (=== triple equals) comparison operators differ?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1663451\">PHP != and == operators</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2063480\">The 3 different equals</a></li>\n<li><a href=\"https://stackoverflow.com/questions/15813490/\">Type-juggling and (strict) greater/lesser-than comparisons in PHP</a></li>\n</ul>\n<hr>\n<p><code>===</code> <a href=\"http://secure.php.net/manual/en/language.operators.comparison.php\" rel=\"noreferrer\">Comparison Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1117967\">What does \"===\" mean?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/80646\">How do the PHP equality (== double equals) and identity (=== triple equals) comparison operators differ?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2063480\">The 3 different equals</a></li>\n<li><a href=\"https://stackoverflow.com/questions/15813490/\">Type-juggling and (strict) greater/lesser-than comparisons in PHP</a></li>\n</ul>\n<hr>\n<p><code>!==</code> <a href=\"http://secure.php.net/manual/en/language.operators.comparison.php\" rel=\"noreferrer\">Comparison Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1298083\">What does !== comparison operator in PHP mean?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1139154\">Is there a difference between !== and != in PHP?</a></li>\n</ul>\n<hr>\n<p><code>!=</code> <a href=\"http://secure.php.net/manual/en/language.operators.comparison.php\" rel=\"noreferrer\">Comparison Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1663451\">PHP != and == operators</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1139154\">Is there a difference between !== and != in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6356826\">comparing, !== versus !=</a></li>\n<li><a href=\"https://stackoverflow.com/questions/9671785/what-is-the-difference-between-and\">What is the difference between &lt;&gt; and !=</a></li>\n</ul>\n<hr>\n<p><code>&lt;&gt;</code> <a href=\"http://secure.php.net/manual/en/language.operators.comparison.php\" rel=\"noreferrer\">Comparison Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/249312\">PHP operator &lt;&gt;</a></li>\n<li><a href=\"https://stackoverflow.com/questions/589391\">PHP's &lt;&gt; operator</a></li>\n<li><a href=\"https://stackoverflow.com/questions/9671785\">What is the difference between &lt;&gt; and !=</a></li>\n<li><a href=\"https://stackoverflow.com/questions/15813490/\">Type-juggling and (strict) greater/lesser-than comparisons in PHP</a></li>\n</ul>\n<hr>\n<p><code>&lt;=&gt;</code> <a href=\"http://secure.php.net/manual/en/language.operators.comparison.php\" rel=\"noreferrer\">Comparison Operators</a> (since PHP 7.0)</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/31298778\">Spaceship (three way comparison) operator</a></li>\n</ul>\n<hr>\n<p><code>|</code> <a href=\"http://secure.php.net/manual/en/language.operators.bitwise.php\" rel=\"noreferrer\">Bitwise Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2233835\">What is the difference between the | and || operators?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/13811922\">What Does Using A Single Pipe '|' In A Function Argument Do?</a></li>\n</ul>\n<hr>\n<p><code>||</code> <a href=\"http://secure.php.net/manual/en/language.operators.logical.php\" rel=\"noreferrer\">Logical Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2233835\">What is the difference between the | and || operators?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4502092\">PHP - and / or keywords</a></li>\n<li><a href=\"https://stackoverflow.com/questions/5666741\">What exactly does || mean?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/12213283\">The behaviour of the or operator in PHP</a></li>\n</ul>\n<hr>\n<p><code>~</code> <a href=\"http://secure.php.net/manual/en/language.operators.bitwise.php\" rel=\"noreferrer\">Bitwise Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1967360\">What does this ~ operator mean here?</a></li>\n</ul>\n<hr>\n<p><code>+</code> <a href=\"http://secure.php.net/manual/en/language.operators.arithmetic.php\" rel=\"noreferrer\">Arithmetic Operators</a>, <a href=\"http://secure.php.net/manual/en/language.operators.array.php\" rel=\"noreferrer\">Array Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2140090\">+ operator for array in PHP?</a></li>\n</ul>\n<hr>\n<p><code>+=</code> and <code>-=</code> <a href=\"http://secure.php.net/manual/en/language.operators.assignment.php\" rel=\"noreferrer\">Assignment Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/542995\">What is += used for?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/7140158\">What does `$page -= 1` in my PHP document mean?</a></li>\n</ul>\n<hr>\n<p><code>++</code> and <code>--</code> <a href=\"http://secure.php.net/manual/en/language.operators.increment.php\" rel=\"noreferrer\">Incrementing/Decrementing Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1968371\">Understanding Incrementing</a></li>\n<li><a href=\"https://stackoverflow.com/a/3737177\">Answer below</a></li>\n</ul>\n<hr>\n<p><code>.=</code> <a href=\"http://secure.php.net/manual/en/language.operators.assignment.php\" rel=\"noreferrer\">Assignment Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2202331\">What is the difference between .= and += in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1241432\">To understand a line of PHP</a></li>\n</ul>\n<hr>\n<p><code>.</code> <a href=\"http://secure.php.net/manual/en/language.operators.string.php\" rel=\"noreferrer\">String Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1466408\">Difference between period and comma when concatenating with echo versus return?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6484968\">What does a . (dot) do in PHP?</a></li>\n</ul>\n<hr>\n<p><code>,</code> <a href=\"http://php.net/manual/en/functions.arguments.php\" rel=\"noreferrer\">Function Arguments</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1466408\">Difference between period and comma when concatenating with echo versus return?</a></li>\n</ul>\n<p><code>,</code> <a href=\"http://php.net/manual/en/language.variables.scope.php\" rel=\"noreferrer\">Variable Declarations</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/41383218\">What do commas mean in a variable declaration?</a></li>\n</ul>\n<hr>\n<p><code>$$</code> <a href=\"http://php.net/manual/en/language.variables.variable.php\" rel=\"noreferrer\">Variable Variables</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2715654\">What does $$ (dollar dollar or double dollar) mean in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4169882\">what is \"$$\" in PHP</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4891872\">$function() and $$variable</a></li>\n</ul>\n<hr>\n<p><code>`</code> <a href=\"http://php.net/manual/en/language.operators.execution.php\" rel=\"noreferrer\">Execution Operator</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/6002296\">What are the backticks `` called?</a></li>\n</ul>\n<hr>\n<p><code>&lt;?=</code> <a href=\"http://php.net/manual/en/ini.core.php#ini.short-open-tag\" rel=\"noreferrer\">Short Open Tags</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1963901\">What does this symbol mean in PHP &lt;?=</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2020445\">What does '&lt;?=' mean in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1959256/what-does-mean\">What does &lt;?= mean?</a></li>\n</ul>\n<hr>\n<p><code>[]</code> <a href=\"http://secure.php.net/manual/en/language.types.array.php\" rel=\"noreferrer\">Arrays</a> (short syntax since PHP 5.4)</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/20709055/2758197\">PHP arrays... What is/are the meaning(s) of an empty bracket?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6933345\">What is the meaning of []</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2431629\">Php array_push() vs myArray[]</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3908576\">What does [] mean when reading from a PHP array?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4271874\">Shorthand for arrays: literal <code>$var = []</code> empty array</a></li>\n</ul>\n<hr>\n<p><code>&lt;?</code> <a href=\"http://secure.php.net/manual/en/language.basic-syntax.php\" rel=\"noreferrer\">Opening and Closing tags</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/200640\">Are PHP short tags acceptable to use?</a></li>\n</ul>\n<hr>\n<p><code>...</code> <a href=\"http://php.net/manual/en/functions.arguments.php#functions.variable-arg-list\" rel=\"noreferrer\">Argument unpacking</a> (since PHP 5.6)</p>\n<hr>\n<p><code>**</code> <a href=\"http://secure.php.net/manual/en/migration56.new-features.php#migration56.new-features.exponentiation\" rel=\"noreferrer\">Exponentiation</a> (since PHP 5.6)</p>\n<hr>\n<p><code>#</code> <a href=\"http://php.net/manual/en/language.basic-syntax.comments.php\" rel=\"noreferrer\">One-line shell-style comment</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/9093609/can-i-use-hashes-for-comments-in-php\">Can I use hashes for comments in PHP?</a></li>\n</ul>\n<hr>\n<p><code>?-&gt;</code> <a href=\"https://stackoverflow.com/a/62178856/250259\">NullSafe Operator Calls</a> (since PHP 8.0)</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/62178354/what-does-this-symbol-mean-in-php-within-an-object-or-null-value\">What does this symbol mean \"?-&gt;\" in php, within an object or null value</a></li>\n</ul>\n<hr>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p><strong><a href=\"http://php.net/manual/en/language.operators.increment.php\" rel=\"noreferrer\">Incrementing / Decrementing Operators</a></strong></p>\n\n<p><code>++</code> increment operator</p>\n\n<p><code>--</code> decrement operator</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Example    Name              Effect\n---------------------------------------------------------------------\n++$a       Pre-increment     Increments $a by one, then returns $a.\n$a++       Post-increment    Returns $a, then increments $a by one.\n--$a       Pre-decrement     Decrements $a by one, then returns $a.\n$a--       Post-decrement    Returns $a, then decrements $a by one.\n</code></pre>\n\n<p>These can go before or after the variable.</p>\n\n<p>If put before the variable, the increment/decrement operation is done to the variable <strong>first</strong> then the result is returned. If put after the variable, the variable is <strong>first</strong> returned, then the increment/decrement operation is done.</p>\n\n<p>For example:</p>\n\n<pre><code>$apples = 10;\nfor ($i = 0; $i &lt; 10; ++$i) {\n    echo 'I have ' . $apples-- . \" apples. I just ate one.\\n\";\n}\n</code></pre>\n\n<p><strong><a href=\"http://codepad.org/5ZD3j0xb\" rel=\"noreferrer\">Live example</a></strong></p>\n\n<p>In the case above <code>++$i</code> is used, since it is faster. <code>$i++</code> would have the same results.</p>\n\n<p>Pre-increment is a little bit faster because it really increments the variable and after that 'returns' the result. Post-increment creates a special variable, copies there the value of the first variable and only after the first variable is used, replaces its value with second's.</p>\n\n<p>However, you must use <code>$apples--</code>, since first, you want to display the current number of apples, and <strong>then</strong> you want to subtract one from it.</p>\n\n<p>You can also increment letters in PHP:</p>\n\n<pre><code>$i = \"a\";\nwhile ($i &lt; \"c\") {\n    echo $i++;\n}\n</code></pre>\n\n<p>Once <code>z</code> is reached <code>aa</code> is next, and so on.</p>\n\n<blockquote>\n  <p>Note that character variables can be incremented but not decremented and even so only plain ASCII characters (a-z and A-Z) are supported.</p>\n</blockquote>\n\n<hr>\n\n<p><strong>Stack Overflow Posts:</strong></p>\n\n<ul>\n<li><strong><a href=\"https://stackoverflow.com/questions/1968371/understanding-incrementing\">Understanding Incrementing</a></strong>  </li>\n</ul>\n    </div>", "total_vectors": [0.019765008240938187, 0.013875867240130901, -0.023586776107549667, 0.06749346107244492, -0.0010749027132987976, -0.03340159356594086, -0.08053822070360184, 0.040155231952667236, 0.03283673897385597, 0.05337349325418472, -0.019657880067825317, -0.049160122871398926, -0.06275302916765213, -0.016476411372423172, -0.014056705869734287, 0.08495289832353592, -0.01903752237558365, -0.019768107682466507, 0.007604476064443588, -0.044127367436885834, 0.07851092517375946, 0.019647741690278053, 0.053017158061265945, -0.022932229563593864, -0.0017980034463107586, -0.017153238877654076, -0.0024967666249722242, -0.04776349663734436, -0.015947476029396057, -0.05000423640012741, -0.03402898088097572, 0.05883132666349411, -0.013458414934575558, 0.05578407645225525, 0.020322518423199654, -0.005080873612314463, -0.05445288494229317, 0.03483887016773224, -0.0198654942214489, 0.00014659251610282809, 0.02400299534201622, 0.018092332407832146, -0.034495383501052856, -0.023471403867006302, 0.08332078903913498, -0.04377640038728714, -0.0022107402328401804, -0.0013059197226539254, 0.05614982172846794, -0.028769800439476967, 0.07295823097229004, 0.08254536241292953, -0.022634416818618774, -0.011227413080632687, -0.060095131397247314, -0.006102242041379213, -0.08105835318565369, 0.028565792366862297, -0.03519125655293465, -0.01187676377594471, -0.01725759357213974, -0.007724246941506863, 0.0027542035095393658, 0.006895413156598806, -0.004437066614627838, -0.08002187311649323, -0.022874342277646065, -0.03620964661240578, -0.023502547293901443, -0.030835941433906555, -0.03182854503393173, 0.017044898122549057, 0.03692660108208656, -0.048185668885707855, 0.05528738722205162, -0.07126643508672714, -0.03978663310408592, -0.026987021788954735, 0.029141481965780258, 0.052451398223638535, 0.06748251616954803, -0.028149832040071487, -0.02225515805184841, 0.06444866955280304, 0.024003302678465843, -0.03932954743504524, 0.04510638490319252, 0.05032021179795265, -0.07725422084331512, -0.06707675009965897, -0.002426623133942485, -0.04451563209295273, -0.0210239440202713, 0.008081754669547081, 0.0417039692401886, -0.029026856645941734, -0.08428115397691727, 0.06916240602731705, -0.03782767802476883, -0.054509036242961884, 0.02874455228447914, 0.02920791506767273, -0.0015640599885955453, 0.0037802234292030334, -0.014373702928423882, 0.025897687301039696, 0.08215533941984177, 0.037893664091825485, -0.055808160454034805, -0.010686574503779411, 0.04300116375088692, 0.04675687849521637, 0.04386402294039726, -0.035857729613780975, -0.026632560417056084, 0.06992834806442261, 0.029765993356704712, 0.022565778344869614, -0.053527913987636566, -0.017896080389618874, 0.0032141900155693293, -0.04382171854376793, -0.01805545762181282, -0.010360809974372387, -0.0427369698882103, -0.02116694301366806, -0.03676002100110054, -0.020564718171954155, 0.07402195036411285, 0.05232365429401398, -0.012492806650698185, 0.009951699525117874, 0.028011782094836235, -0.045751746743917465, 0.031944017857313156, 0.03286079689860344, 0.03224808722734451, -0.04237256944179535, -0.0834716334939003, -0.039643555879592896, 0.018492566421628, -0.01605764776468277, -0.0021489744540303946, 0.005665320437401533, 0.0037333888467401266, -0.0845228061079979, 0.02583538554608822, -0.025797929614782333, 0.006448760163038969, 0.0069543179124593735, 0.07132323831319809, -0.01711166836321354, 0.010928568430244923, -0.01939939521253109, -0.05861695855855942, -0.05837505683302879, -0.018347950652241707, 0.03344877064228058, -0.001743175322189927, 0.01607701927423477, 0.03656984865665436, 0.040580689907073975, 0.0022701153066009283, -0.03741719573736191, 0.06666241586208344, -0.0515277124941349, -0.01826278679072857, 0.032071273773908615, -0.04349321126937866, -0.0253175999969244, 0.046151623129844666, 0.03679627925157547, 0.06601493060588837, 0.04639444127678871, -0.0330168679356575, 0.042531587183475494, -0.02367168292403221, 0.02334178425371647, 0.02212362363934517, 0.050233371555805206, 0.03493129089474678, -0.01705724000930786, -0.07322700321674347, 0.05112045258283615, -0.03471319377422333, -0.06177779659628868, 0.02600441314280033, 0.07075466960668564, -0.00738544063642621, -0.04347262531518936, 0.08312010765075684, -0.06764604151248932, -0.06757303327322006, -0.07018347084522247, 0.01249128207564354, 0.006814784370362759, -0.008594884537160397, 0.08496920019388199, -0.04745005443692207, 0.08467929810285568, -0.07020440697669983, 0.0011078228708356619, -0.084578737616539, 0.0604105181992054, 0.0060928016901016235, -0.047396011650562286, -0.02844936214387417, 0.05624867603182793, -0.08322075754404068, -0.0012025823816657066, -0.07656247913837433, -0.002436259528622031, -0.0012973620323464274, 0.04599402844905853, 0.06632713973522186, -0.007489214651286602, -0.003226005006581545, -0.08448772132396698, 0.03272414952516556, 0.07418923079967499, 0.056018877774477005, -0.019477378576993942, 0.04395105689764023, 0.028279699385166168, -0.00748860789462924, 0.04693790525197983, -0.013395925983786583, 0.04594934731721878, 0.060001272708177567, 0.03890574723482132, 0.019694749265909195, 0.05810627341270447, -0.059741031378507614, 0.0263681560754776, 0.07195430994033813, -0.07515236735343933, 0.08513495326042175, -0.06835207343101501, -0.02608533576130867, 0.010366828180849552, 0.01543341763317585, 0.025802265852689743, 0.006244220770895481, -0.07417874783277512, -0.025579215958714485, 0.074697345495224, 0.044172901660203934, -0.0685570240020752, 0.08369212597608566, 0.07365188002586365, -0.07688546925783157, 0.03931867703795433, -0.011081415228545666, -0.005937238223850727, 0.08193191140890121, -0.0847395583987236, -0.022232482209801674, -0.049799416214227676, 0.009827983565628529, 0.029424572363495827, -0.053889624774456024, 0.07627972215414047, -0.04701991006731987, -0.006916601210832596, -0.015692023560404778, -0.0206416267901659, -0.004264036193490028, -0.0808815211057663, 0.002820814959704876, 0.015534705482423306, 0.019503429532051086, -0.04147956892848015, 0.044747933745384216, -0.0268473569303751, 0.029047155752778053, -0.030339431017637253, -0.003846570150926709, -0.0015106814680621028, 0.08108442276716232, -0.07099129259586334, -0.011319145560264587, -0.020805254578590393, 0.03083929233253002, 0.05865158513188362, 0.045404620468616486, -0.08119979500770569, -0.041851576417684555, 0.005047905724495649, -0.032468054443597794, 0.06022435054183006, -0.01801295578479767, -0.04238157719373703, 0.03745179623365402, -0.017055794596672058, -0.04526934772729874, -0.000982955563813448, -0.020981792360544205, -0.06618070602416992, 0.05886737257242203, 0.055010147392749786, 0.02269172854721546, -0.054330162703990936, -0.04400266706943512, -0.07864830642938614, 0.010419076308608055, -0.012390225194394588, -0.014077438972890377, 0.026812803000211716, 0.005137927830219269, 0.010219186544418335, -0.03116559609770775, 0.039716463536024094, -0.0735129565000534, 0.032747864723205566, 0.01542096771299839, 0.03523264825344086, -0.014840638265013695, -0.06677332520484924, -0.039301883429288864, -0.0003198328195139766, 0.06882515549659729, -0.014013226144015789, -0.0033583720214664936, 0.03495892509818077, 0.041125982999801636, 0.04677460342645645, -0.0623912513256073, 0.03913652524352074, 0.0018168711103498936, 0.036996327340602875, 0.018570682033896446, -0.033230461180210114, -0.012476155534386635, 0.00541064515709877, 0.01968870684504509, -0.003314014058560133, -0.01615758426487446, -0.05937577411532402, 0.03223218023777008, -0.0318768247961998, -0.0557733029127121, -0.016364792361855507, -0.020976310595870018, 0.0315941721200943, -0.08367620408535004, 0.036356858909130096, 0.049847912043333054, 0.0672961175441742, 0.04041643440723419, -0.005472300574183464, 0.05396360531449318, 0.021953603252768517, 0.061789851635694504, -0.0692579373717308, -0.03517602011561394, -0.07826348394155502, -0.08418072760105133, 0.03850831091403961, 0.01517592091113329, -0.05446512997150421, -0.016793156042695045, 0.07903752475976944, -0.07064638286828995, -0.02400965988636017, -0.08207661658525467, 0.01318812184035778, -0.07568711042404175, 0.0016821488970890641, 0.0435495562851429, -0.03355827182531357, -0.00550595298409462, 0.011953402310609818, 0.0064087845385074615, 0.07020334899425507, -0.01558002270758152, -0.08153820782899857, 0.003540507284924388, -0.0018640522612258792, 0.02780054323375225, -0.039825402200222015, -0.036055147647857666, -0.04232943430542946, 0.0044328682124614716, 0.07888752967119217, 0.016739338636398315, -0.026239223778247833, -0.00828341580927372, -0.028467897325754166, 0.01705576665699482, -0.054585956037044525, 0.049308743327856064, 0.08260637521743774, 0.08159589767456055, -0.06042875722050667, -0.007916676811873913, -0.029688391834497452, -0.05835561826825142, -0.042422086000442505, 0.03669247031211853, 0.04031994193792343, -0.01680874638259411, 0.05501824989914894, -0.05419886112213135, -0.0029007885605096817, 0.04832981526851654, -0.040889672935009, -0.07754036039113998, -0.0181244108825922, 0.008788150735199451, -0.012281255796551704, -0.07013346254825592, 0.046467483043670654, 0.016321130096912384, -0.036760129034519196, 0.0112374322488904, -0.019160538911819458, 0.034038692712783813, 0.06777551770210266, -0.04449731111526489, -0.017469745129346848, 0.007603393401950598, -0.019498242065310478, 0.03579755127429962, -0.04860503599047661, -0.012466063722968102, 0.0056360624730587006, 0.037038665264844894, 0.032372746616601944, -0.010922042652964592, 0.002805907977744937, -0.02561199851334095, -0.02633942849934101, 0.05719543248414993, -0.05505714565515518, -0.020958753302693367, -0.0055549112148582935, -0.005213667172938585, 0.05920252203941345, 0.041130658239126205, 0.040738075971603394, 0.00989745557308197, -0.07995957881212234, 0.0316200852394104, 0.04047086089849472, -0.006101074628531933, -0.030507024377584457, 0.04008621349930763, 0.03664252534508705, 0.052569109946489334, 0.0028813376557081938, -0.026098230853676796, -0.07448292523622513, 0.08443006873130798, 0.03151363879442215, 0.030686961486935616, -0.07742634415626526, 0.06233296915888786, -0.026150934398174286, -0.01780742220580578, 0.03906543552875519, -0.006185031961649656, 0.029566824436187744, -0.03836918622255325, -0.018522582948207855, -0.019628385081887245, -0.08514633029699326, -0.0013722846051678061, -0.07714415341615677, -0.062238890677690506, 0.0302974171936512, -0.0034794423263520002, -0.013912700116634369, 0.06679517775774002, 0.057425569742918015, 0.07762127369642258, -0.058745238929986954, 0.013340760953724384, -0.030284106731414795, -0.030043285340070724, -0.07971923053264618, -0.04163787141442299, -0.06529885530471802, 0.05213683098554611, -0.04053885117173195, 0.002413248410448432, 0.04628075659275055, -0.08476684242486954, 0.0054894182831048965, 0.029895301908254623, -0.057675693184137344, -0.04268844798207283, 0.025432199239730835, -0.0016249808249995112, -0.027351494878530502, -0.0025166813284158707, -0.0564415343105793, 0.009247975423932076, 0.046439386904239655, -0.04057960584759712, 0.04804469272494316, -0.025627851486206055, 0.07866894453763962, 0.014289423823356628, 0.05753708630800247, 0.0524405762553215, -0.024257462471723557, 0.05790538713335991, 0.047806818038225174, -0.023771923035383224, 0.06086967512965202, 0.03051524981856346, -0.07077588886022568]},
{"question": "How to validate an email address using a regular expression?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>Over the years I have slowly developed a <a href=\"http://en.wikipedia.org/wiki/Regular_expression\" rel=\"noreferrer\">regular expression</a> that validates MOST email addresses correctly, assuming they don't use an IP address as the server part.</p>\n\n<p>I use it in several PHP programs, and it works most of the time.  However, from time to time I get contacted by someone that is having trouble with a site that uses it, and I end up having to make some adjustment (most recently I realized that I wasn't allowing 4-character TLDs).</p>\n\n<p><em>What is the best regular expression you have or have seen for validating emails?</em></p>\n\n<p>I've seen several solutions that use functions that use several shorter expressions, but I'd rather have one long complex expression in a simple function instead of several short expression in a more complex function.</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>The <a href=\"http://ex-parrot.com/~pdw/Mail-RFC822-Address.html\" rel=\"noreferrer\">fully RFC 822 compliant regex</a> is inefficient and obscure because of its length.  Fortunately, RFC 822 was superseded twice and the current specification for email addresses is <a href=\"http://www.ietf.org/rfc/rfc5322.txt\" rel=\"noreferrer\">RFC 5322</a>.  RFC 5322 leads to a regex that can be understood if studied for a few minutes and is efficient enough for actual use.</p>\n\n<p>One RFC 5322 compliant regex can be found at the top of the page at <a href=\"http://emailregex.com/\" rel=\"noreferrer\">http://emailregex.com/</a> but uses the IP address pattern that is floating around the internet with a bug that allows <code>00</code> for any of the unsigned byte decimal values in a dot-delimited address, which is illegal.  The rest of it appears to be consistent with the RFC 5322 grammar and passes several tests using <code>grep -Po</code>, including cases domain names, IP addresses, bad ones, and account names with and without quotes.</p>\n\n<p>Correcting the <code>00</code> bug in the IP pattern, we obtain a working and fairly fast regex.  (Scrape the rendered version, not the markdown, for actual code.)</p>\n\n<blockquote>\n  <p>(?:[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])</p>\n</blockquote>\n\n<p>or:</p>\n\n<pre><code>(?:[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\n</code></pre>\n\n<p>Here is <a href=\"https://regexper.com/#(%3F%3A%5Ba-z0-9!%23%24%25%26'*%2B%2F%3D%3F%5E_%60%7B%7C%7D~-%5D%2B(%3F%3A%5C.%5Ba-z0-9!%23%24%25%26'*%2B%2F%3D%3F%5E_%60%7B%7C%7D~-%5D%2B)*%7C%22(%3F%3A%5B%5Cx01-%5Cx08%5Cx0b%5Cx0c%5Cx0e-%5Cx1f%5Cx21%5Cx23-%5Cx5b%5Cx5d-%5Cx7f%5D%7C%5C%5C%5B%5Cx01-%5Cx09%5Cx0b%5Cx0c%5Cx0e-%5Cx7f%5D)*%22)%40(%3F%3A(%3F%3A%5Ba-z0-9%5D(%3F%3A%5Ba-z0-9-%5D*%5Ba-z0-9%5D)%3F%5C.)%2B%5Ba-z0-9%5D(%3F%3A%5Ba-z0-9-%5D*%5Ba-z0-9%5D)%3F%7C%5C%5B(%3F%3A(%3F%3A(2(5%5B0-5%5D%7C%5B0-4%5D%5B0-9%5D)%7C1%5B0-9%5D%5B0-9%5D%7C%5B1-9%5D%3F%5B0-9%5D))%5C.)%7B3%7D(%3F%3A(2(5%5B0-5%5D%7C%5B0-4%5D%5B0-9%5D)%7C1%5B0-9%5D%5B0-9%5D%7C%5B1-9%5D%3F%5B0-9%5D)%7C%5Ba-z0-9-%5D*%5Ba-z0-9%5D%3A(%3F%3A%5B%5Cx01-%5Cx08%5Cx0b%5Cx0c%5Cx0e-%5Cx1f%5Cx21-%5Cx5a%5Cx53-%5Cx7f%5D%7C%5C%5C%5B%5Cx01-%5Cx09%5Cx0b%5Cx0c%5Cx0e-%5Cx7f%5D)%2B)%5C%5D)\" rel=\"noreferrer\">diagram</a> of <a href=\"https://en.wikipedia.org/wiki/Finite-state_machine\" rel=\"noreferrer\">finite state machine</a> for above regexp which is more clear than regexp itself\n<a href=\"https://i.stack.imgur.com/YI6KR.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/YI6KR.png\" alt=\"enter image description here\"></a></p>\n\n<p>The more sophisticated patterns in Perl and PCRE (regex library used e.g. in PHP) can <a href=\"https://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/1917982#1917982\">correctly parse RFC 5322 without a hitch</a>. Python and C# can do that too, but they use a different syntax from those first two. However, if you are forced to use one of the many less powerful pattern-matching languages, then it\u2019s best to use a real parser.</p>\n\n<p>It's also important to understand that validating it per the RFC tells you absolutely nothing about whether that address actually exists at the supplied domain, or whether the person entering the address is its true owner. People sign others up to mailing lists this way all the time. Fixing that requires a fancier kind of validation that involves sending that address a message that includes a confirmation token meant to be entered on the same web page as was the address. </p>\n\n<p>Confirmation tokens are the only way to know you got the address of the person entering it. This is why most mailing lists now use that mechanism to confirm sign-ups. After all, anybody can put down <code>president@whitehouse.gov</code>, and that will even parse as legal, but it isn't likely to be the person at the other end.</p>\n\n<p>For PHP, you should <em>not</em> use the pattern given in <a href=\"http://www.linuxjournal.com/article/9585\" rel=\"noreferrer\">Validate an E-Mail Address with PHP, the Right Way</a> from which I quote:</p>\n\n<blockquote>\n  <p>There is some danger that common usage and widespread sloppy coding will establish a de facto standard for e-mail addresses that is more restrictive than the recorded formal standard.</p>\n</blockquote>\n\n<p>That is no better than all the other non-RFC patterns. It isn\u2019t even smart enough to handle even <a href=\"http://www.ietf.org/rfc/rfc0822.txt\" rel=\"noreferrer\">RFC 822</a>, let alone RFC 5322. <a href=\"https://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/1917982#1917982\">This one</a>, however, is.</p>\n\n<p>If you want to get fancy and pedantic, <a href=\"http://cubicspot.blogspot.com/2012/06/correct-way-to-validate-e-mail-address.html\" rel=\"noreferrer\">implement a complete state engine</a>. A regular expression can only act as a rudimentary filter. The problem with regular expressions is that telling someone that their perfectly valid e-mail address is invalid (a false positive) because your regular expression can't handle it is just rude and impolite from the user's perspective. A state engine for the purpose can both validate and even correct e-mail addresses that would otherwise be considered invalid as it disassembles the e-mail address according to each RFC. This allows for a potentially more pleasing experience, like</p>\n\n<blockquote>\n  <p>The specified e-mail address 'myemail@address,com' is invalid. Did you mean 'myemail@address.com'?</p>\n</blockquote>\n\n<p>See also <a href=\"http://worsethanfailure.com/Articles/Validating_Email_Addresses.aspx\" rel=\"noreferrer\">Validating Email Addresses</a>, including the comments. Or <a href=\"http://fightingforalostcause.net/misc/2006/compare-email-regex.php\" rel=\"noreferrer\">Comparing E-mail Address Validating Regular Expressions</a>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/SrUwP.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/SrUwP.png\" alt=\"Regular expression visualization\"></a></p>\n\n<p><a href=\"https://www.debuggex.com/r/aH_x42NflV8G-GS7\" rel=\"noreferrer\">Debuggex Demo</a></p>\n    </div>", "total_vectors": [0.026045875623822212, -0.039263177663087845, -0.02640858292579651, 0.012536711059510708, -0.00945673231035471, 0.03912419080734253, 0.007392801344394684, -0.03266439959406853, 0.04242926090955734, 0.044595468789339066, -0.03424525260925293, -0.03430468961596489, 0.042337652295827866, 0.05306730046868324, 0.02320917323231697, 0.08486476540565491, -0.0016359523870050907, 0.00223938119597733, 0.05831824988126755, -0.004640508908778429, -0.022741546854376793, 0.0030154853593558073, 0.01025521382689476, 0.05759425461292267, -0.07595750689506531, -0.004676696378737688, -0.04363922402262688, -0.05561789870262146, 0.03986511752009392, 0.07431454211473465, 0.048728927969932556, -0.040561556816101074, -0.017679650336503983, -0.029375534504652023, -0.03118058666586876, 0.05075409635901451, -0.020248839631676674, 0.004203645046800375, -0.045789796859025955, -0.0660550445318222, 0.021627333015203476, -0.04287022724747658, 0.0169453676789999, 0.028334535658359528, 0.08405177295207977, 0.02165922336280346, -0.017861496657133102, -0.00868553388863802, -0.049064457416534424, -0.034937210381031036, 0.023268533870577812, 0.08249032497406006, 0.016645144671201706, -0.04672002047300339, -0.02335292473435402, 0.04873419180512428, -0.018096210435032845, 0.00962999276816845, 0.016284417361021042, -0.04432256519794464, -0.04645974561572075, 0.008662036620080471, -0.023814627900719643, -0.033585306257009506, -0.04009845107793808, 0.011010363698005676, 0.0349750779569149, -0.022727670148015022, 0.04408235102891922, 0.021755250170826912, -0.019603410735726357, 0.05187191069126129, 0.08148193359375, 0.06941847503185272, -0.005314606241881847, 0.0665244311094284, -0.036264337599277496, 0.012911699712276459, 0.008369077928364277, 0.01665186509490013, 0.03410277143120766, 0.0745580866932869, 0.003259030869230628, -0.06036672741174698, 0.02985425852239132, -0.03476792201399803, -0.005953124258667231, 0.020779859274625778, -0.0802200436592102, 0.0012759726960211992, 0.007081962190568447, 0.031055301427841187, 0.00563123868778348, -0.037623513489961624, 0.030236370861530304, -0.013790896162390709, 0.03476369008421898, 0.038690511137247086, -0.07594053447246552, -0.08183743059635162, -0.004894863348454237, 0.04026982933282852, -0.06047748029232025, 0.06109750270843506, -0.033786699175834656, -0.03242546692490578, 0.0736154094338417, 0.01417983416467905, 0.03411705791950226, -0.0584084689617157, 0.04177634418010712, -0.012419997714459896, 0.012183628976345062, -0.05288516357541084, -0.08059245347976685, 0.0004350851522758603, 0.03711378574371338, 0.055335577577352524, 0.06951819360256195, -0.02471047081053257, 0.020273353904485703, -0.049327343702316284, -0.06634455174207687, -0.06865452975034714, 0.05489622429013252, 0.06386952102184296, -0.019594714045524597, 0.010366322472691536, 0.04286698251962662, -0.028588606044650078, -0.0691341981291771, 0.021845445036888123, -0.0647813007235527, 0.056722935289144516, -0.03212650120258331, 0.006890251766890287, -0.05208851024508476, 0.011541850864887238, -0.04262269660830498, -0.04638155177235603, -0.012731697410345078, 0.019073737785220146, -0.032560233026742935, 0.017062723636627197, -0.012428168207406998, -0.07503747195005417, -0.039011869579553604, 0.05121171846985817, -0.04510282352566719, 0.021489381790161133, 0.01917838864028454, 0.024186741560697556, 0.04799995571374893, -0.047618020325899124, -0.06482414901256561, -0.05455069988965988, 0.014580602757632732, -0.03303343802690506, -0.04677753895521164, -0.04698052629828453, 0.04380374401807785, 0.056995779275894165, 0.008305659517645836, -0.03773117437958717, 0.016657879576086998, 0.06497346609830856, -0.001343152136541903, -0.019235583022236824, -0.05427589267492294, -0.027898887172341347, -0.013152647763490677, 0.006249686237424612, 0.03004315309226513, 0.044777773320674896, -0.026667773723602295, -0.007617193274199963, 0.009722679853439331, 0.03467470034956932, 0.038559190928936005, 0.009691030718386173, 0.0440986342728138, 0.05032331869006157, 0.05580298230051994, -0.020612463355064392, -0.01724623516201973, -0.020921476185321808, -0.03663303330540657, 0.07823242247104645, -0.011066907085478306, 0.049686744809150696, 0.07069141417741776, 0.003691940102726221, -0.032598137855529785, -0.08372888714075089, -0.07402703911066055, 0.015088223852217197, -0.017420785501599312, 0.08491210639476776, 0.029759883880615234, -0.06340907514095306, -0.08074868470430374, 0.010923800058662891, -0.018808599561452866, 0.06626953929662704, 0.05981011316180229, -0.048548199236392975, -0.05682455748319626, 0.0016149834264069796, -0.06624773144721985, 0.015628976747393608, -0.043153777718544006, 0.029055068269371986, 0.058386169373989105, 0.05695601552724838, 0.0596812441945076, -0.028410237282514572, 0.030460454523563385, 0.07798734307289124, 0.07481000572443008, 0.05599819868803024, 0.005184835288673639, -0.022788232192397118, 0.015651270747184753, 0.019135208800435066, -0.07948922365903854, 0.04591936990618706, -0.0444888137280941, -0.0006419601268135011, 0.017736312001943588, 0.03946477919816971, 0.04326767846941948, -0.06796614080667496, 0.006007106509059668, -0.06840743124485016, 0.07015776634216309, -0.026402372866868973, 0.07789570838212967, -0.02567228302359581, 0.020929787307977676, -0.054447073489427567, -0.044943250715732574, 0.017770890146493912, 0.0629279688000679, -0.028693974018096924, 0.006549709476530552, 0.08157902210950851, -0.03157741203904152, -0.0021607396192848682, 0.0795278325676918, 0.07022402435541153, -0.019720755517482758, 0.011151375249028206, -0.04589845985174179, 0.02774488553404808, -0.05838397517800331, -0.08462530374526978, 0.0018920783186331391, -0.07999935746192932, 0.038933269679546356, -0.02786235697567463, -0.010299289599061012, 0.0054862285032868385, -0.08166835457086563, -0.022204795852303505, 0.022090205922722816, 0.006079414859414101, 0.03898168355226517, -0.08324349671602249, -0.06616014987230301, 0.04352492094039917, -0.022226784378290176, -0.06702987104654312, -0.055705394595861435, -0.024038197472691536, -0.030766867101192474, -0.026419060304760933, -0.008613026700913906, 0.059207651764154434, 0.08376003056764603, 0.026528656482696533, -0.06314261257648468, -0.05607016384601593, -0.005517528858035803, 0.000933542032726109, 0.0006545299547724426, -0.07571816444396973, 0.051524557173252106, 0.0731450542807579, -0.026194380596280098, 0.044399745762348175, -0.037514638155698776, -0.014789359644055367, 0.02781512774527073, 0.0312412828207016, 0.08012844622135162, -0.07923482358455658, 0.007312113884836435, -0.0646958202123642, 0.0045400639064610004, 0.03367523103952408, -0.02417052537202835, 0.008332310244441032, -0.01591363362967968, -0.026589471846818924, 0.01207694597542286, 0.03363204747438431, 0.012997317127883434, -0.02633006125688553, -0.008310679346323013, 0.022235902026295662, 0.05933593586087227, 0.027498796582221985, 0.030507130548357964, 0.04570936784148216, 0.06520957499742508, -0.04584470018744469, 0.029725249856710434, -0.035511016845703125, -0.016116105020046234, -0.05037328600883484, 0.06319542974233627, 0.04695175588130951, 0.010028681717813015, -0.026795651763677597, -0.023423153907060623, 0.03138442710042, -0.03567115589976311, 0.01738794706761837, 0.035522110760211945, -0.010087640024721622, 0.05866511911153793, -0.06468158215284348, -0.0222935788333416, 0.06061441823840141, 0.0021559621673077345, 0.014240882359445095, 0.05004062131047249, 0.016896555200219154, -0.0006675324402749538, 0.04331580549478531, -0.03391146659851074, -0.02802134118974209, 0.027907421812415123, 0.01210459042340517, -0.08446207642555237, 0.039474934339523315, 0.07153989374637604, 0.06852821260690689, 0.05215499550104141, 0.016508106142282486, -0.0008305037626996636, -0.015335597097873688, -0.06084732711315155, 0.03095073625445366, 0.038642365485429764, -0.07157023251056671, -0.08297231048345566, -0.042836856096982956, 0.05043688416481018, -0.023415837436914444, -0.038377922028303146, 0.06154564395546913, -0.0847359374165535, 0.010493225418031216, -0.06898149847984314, 0.003298525931313634, -0.05710872262716293, 0.06820622831583023, 0.07225213944911957, -0.012733852490782738, -0.05375175178050995, -0.04134039208292961, -0.06522303819656372, 0.08247248083353043, 0.037305112928152084, -0.07428328692913055, -0.05922631174325943, -0.04868714138865471, 0.04131314530968666, -0.026086287572979927, -0.01564907655119896, 0.02286369353532791, -0.05834002047777176, -0.03415819630026817, -0.06560081243515015, -0.005095141474157572, 0.00940233375877142, -0.08038091659545898, 0.011486055329442024, -0.017375899478793144, -0.06545556336641312, 0.015045360662043095, 0.04058201238512993, 0.06790664047002792, 0.007579531520605087, 0.024510284885764122, -0.04015621542930603, -0.07846550643444061, 0.0019320802530273795, 0.03992284834384918, 0.004742390941828489, -0.07290763407945633, -0.04556543007493019, -0.041262634098529816, 0.0008155076066032052, -0.016499090939760208, -0.08392570167779922, 0.02206869050860405, 0.01379389874637127, 0.044553242623806, -0.0007946898113004863, 0.005666897166520357, 0.0031600333750247955, -0.035761699080467224, -0.05826733261346817, -0.07153075188398361, 0.020306851714849472, 0.0373217947781086, 0.04394182190299034, -0.05286595597863197, 0.026208510622382164, -0.007320363074541092, 0.03312140330672264, -0.047813162207603455, 0.060583192855119705, 0.04392552375793457, 0.035677116364240646, 0.08127259463071823, -0.030799752101302147, 0.011591117829084396, 0.04380783811211586, 0.0018671064171940088, -0.014358222484588623, -0.06347262859344482, -0.0561864897608757, -0.06483487784862518, -0.049328625202178955, -0.059259697794914246, 0.040419045835733414, 0.03697369620203972, -0.02425910346210003, -0.07145513594150543, 0.026500534266233444, -0.013296189717948437, 0.030375268310308456, -0.059960197657346725, 0.08462967723608017, 0.05674163997173309, -0.02906571701169014, 0.02344469353556633, 0.06966765224933624, 0.0270126610994339, 0.07570607960224152, 0.06478314846754074, 0.03653791919350624, -0.05969572439789772, -0.01769435405731201, 0.033743299543857574, -0.060305628925561905, -0.048741452395915985, -0.052235450595617294, -0.013683708384633064, 0.014033898711204529, 0.009481601417064667, 0.008545932359993458, -0.024883242323994637, -0.047051239758729935, -0.026106925681233406, 0.03809792920947075, 0.08475614339113235, 0.03357097506523132, -0.07346416264772415, -0.009303622879087925, -0.003389824880287051, -0.0034057735465466976, -0.06626417487859726, 0.002719635609537363, 0.010182407684624195, -7.711116631980985e-05, 0.023862121626734734, -0.011287622153759003, -0.05391504988074303, 0.008426571264863014, -0.02026425115764141, 0.05755772814154625, -0.04700702428817749, 0.08120773732662201, 0.017588041722774506, 0.005889413878321648, 0.051587142050266266, -0.04856577888131142, -0.011910757049918175, 0.032922837883234024, 0.04440940171480179, -0.019068678840994835, -0.05836566537618637, -0.06034214794635773, 0.06229742616415024, -0.01739005371928215, -0.005330156534910202, -0.011887194588780403, -0.05330274626612663, -0.02492048218846321, 0.040625471621751785, 0.05715859308838844, 0.004264004994183779, 0.054260317236185074, 0.02712974138557911, 0.05145268142223358, 0.07995014637708664, -0.05200889706611633, 0.02633991278707981]},
{"question": "How to add JTable in JPanel with null layout?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>I want to add <code>JTable</code> into <code>JPanel</code> whose layout is <code>null</code>.  <code>JPanel</code> contains other components. I have to add <code>JTable</code> at proper position.</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<h1>Nested/Combination Layout Example</h1>\n\n<p>The Java Tutorial has comprehensive information on using layout managers. See the <a href=\"http://download.oracle.com/javase/tutorial/uiswing/layout/index.html\">Laying Out Components Within a Container</a> lesson for further details.</p>\n\n<p>One aspect of layouts that is <em>not</em> covered well by the tutorial is that of nested layouts, putting one layout inside another to get complex effects.</p>\n\n<p>The following code puts a variety of components into a frame to demonstrate how to use nested layouts.  All the layouts that are explicitly set are shown as a titled-border for the panel on which they are used.</p>\n\n<p>Notable aspects of the code are:</p>\n\n<ul>\n<li>There is a combo-box to change PLAF (Pluggable Look and Feel) at run-time.</li>\n<li>The GUI is expandable to the user's need.</li>\n<li>The image in the bottom of the split-pane is centered in the scroll-pane.</li>\n<li>The label instances on the left are dynamically added using the button.</li>\n</ul>\n\n<h3>Nimbus PLAF</h3>\n\n<p><img src=\"https://i.stack.imgur.com/RljPH.png\" width=\"681\" height=\"580\" title=\"GUI screen shot with Nimbus PLAF\"></p>\n\n<h2>NestedLayoutExample.java</h2>\n\n<pre><code>import java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ActionEvent;\nimport javax.swing.*;\nimport javax.swing.table.DefaultTableModel;\nimport javax.swing.border.TitledBorder;\n\n/** A short example of a nested layout that can change PLAF at runtime.\nThe TitledBorder of each JPanel shows the layouts explicitly set.\n@author Andrew Thompson\n@version 2011-04-12 */\nclass NestedLayoutExample {\n\n    public static void main(String[] args) {\n\n        Runnable r = new Runnable() {\n\n            public void run() {\n                final JFrame frame = new JFrame(\"Nested Layout Example\");\n                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n                final JPanel gui = new JPanel(new BorderLayout(5,5));\n                gui.setBorder( new TitledBorder(\"BorderLayout(5,5)\") );\n\n                //JToolBar tb = new JToolBar();\n                JPanel plafComponents = new JPanel(\n                    new FlowLayout(FlowLayout.RIGHT, 3,3));\n                plafComponents.setBorder(\n                    new TitledBorder(\"FlowLayout(FlowLayout.RIGHT, 3,3)\") );\n\n                final UIManager.LookAndFeelInfo[] plafInfos =\n                    UIManager.getInstalledLookAndFeels();\n                String[] plafNames = new String[plafInfos.length];\n                for (int ii=0; ii&lt;plafInfos.length; ii++) {\n                    plafNames[ii] = plafInfos[ii].getName();\n                }\n                final JComboBox plafChooser = new JComboBox(plafNames);\n                plafComponents.add(plafChooser);\n\n                final JCheckBox pack = new JCheckBox(\"Pack on PLAF change\", true);\n                plafComponents.add(pack);\n\n                plafChooser.addActionListener( new ActionListener(){\n                    public void actionPerformed(ActionEvent ae) {\n                        int index = plafChooser.getSelectedIndex();\n                        try {\n                            UIManager.setLookAndFeel(\n                                plafInfos[index].getClassName() );\n                            SwingUtilities.updateComponentTreeUI(frame);\n                            if (pack.isSelected()) {\n                                frame.pack();\n                                frame.setMinimumSize(frame.getSize());\n                            }\n                        } catch(Exception e) {\n                            e.printStackTrace();\n                        }\n                    }\n                } );\n\n                gui.add(plafComponents, BorderLayout.NORTH);\n\n                JPanel dynamicLabels = new JPanel(new BorderLayout(4,4));\n                dynamicLabels.setBorder(\n                    new TitledBorder(\"BorderLayout(4,4)\") );\n                gui.add(dynamicLabels, BorderLayout.WEST);\n\n                final JPanel labels = new JPanel(new GridLayout(0,2,3,3));\n                labels.setBorder(\n                    new TitledBorder(\"GridLayout(0,2,3,3)\") );\n\n                JButton addNew = new JButton(\"Add Another Label\");\n                dynamicLabels.add( addNew, BorderLayout.NORTH );\n                addNew.addActionListener( new ActionListener(){\n\n                    private int labelCount = 0;\n\n                    public void actionPerformed(ActionEvent ae) {\n                        labels.add( new JLabel(\"Label \" + ++labelCount) );\n                        frame.validate();\n                    }\n                } );\n\n                dynamicLabels.add( new JScrollPane(labels), BorderLayout.CENTER );\n\n                String[] header = {\"Name\", \"Value\"};\n                String[] a = new String[0];\n                String[] names = System.getProperties().\n                    stringPropertyNames().toArray(a);\n                String[][] data = new String[names.length][2];\n                for (int ii=0; ii&lt;names.length; ii++) {\n                    data[ii][0] = names[ii];\n                    data[ii][1] = System.getProperty(names[ii]);\n                }\n                DefaultTableModel model = new DefaultTableModel(data, header);\n                JTable table = new JTable(model);\n                try {\n                    // 1.6+\n                    table.setAutoCreateRowSorter(true);\n                } catch(Exception continuewithNoSort) {\n                }\n                JScrollPane tableScroll = new JScrollPane(table);\n                Dimension tablePreferred = tableScroll.getPreferredSize();\n                tableScroll.setPreferredSize(\n                    new Dimension(tablePreferred.width, tablePreferred.height/3) );\n\n                JPanel imagePanel = new JPanel(new GridBagLayout());\n                imagePanel.setBorder(\n                    new TitledBorder(\"GridBagLayout()\") );\n\n                BufferedImage bi = new BufferedImage(\n                    200,200,BufferedImage.TYPE_INT_ARGB);\n                Graphics2D g = bi.createGraphics();\n                GradientPaint gp = new GradientPaint(\n                    20f,20f,Color.red, 180f,180f,Color.yellow);\n                g.setPaint(gp);\n                g.fillRect(0,0,200,200);\n                ImageIcon ii = new ImageIcon(bi);\n                JLabel imageLabel = new JLabel(ii);\n                imagePanel.add( imageLabel, null );\n\n                JSplitPane splitPane = new JSplitPane(\n                    JSplitPane.VERTICAL_SPLIT,\n                    tableScroll,\n                    new JScrollPane(imagePanel));\n                gui.add( splitPane, BorderLayout.CENTER );\n\n                frame.setContentPane(gui);\n\n                frame.pack();\n\n                frame.setLocationRelativeTo(null);\n                try {\n                    // 1.6+\n                    frame.setLocationByPlatform(true);\n                    frame.setMinimumSize(frame.getSize());\n                } catch(Throwable ignoreAndContinue) {\n                }\n\n                frame.setVisible(true);\n            }\n        };\n        SwingUtilities.invokeLater(r);\n    }\n}\n</code></pre>\n\n<h2>Other Screen Shots</h2>\n\n<h3>Windows PLAF</h3>\n\n<p><img src=\"https://i.stack.imgur.com/fHnCI.png\" width=\"681\" height=\"580\" title=\"GUI screen shot with Windows PLAF\"></p>\n\n<h3>Mac OS X Aqua PLAF</h3>\n\n<p><img src=\"https://i.stack.imgur.com/Jaqap.png\" width=\"681\" height=\"580\" title=\"GUI screen shot with Aqua PLAF\"></p>\n\n<h3>Ubuntu GTK+ PLAF</h3>\n\n<p><img src=\"https://i.stack.imgur.com/521zz.png\" width=\"681\" height=\"580\" title=\"GUI screen shot with GTK+ PLAF\"></p>\n    </div>", "total_vectors": [-0.019231395795941353, -0.04822898656129837, 0.053287554532289505, -0.0649675652384758, -0.04179945960640907, 0.07327079027891159, 0.023238245397806168, -0.020595548674464226, 0.01971597969532013, 0.06783832609653473, -0.04746805131435394, -0.04884978383779526, 0.02741049788892269, 0.0691845491528511, -0.00913146696984768, 0.07514943182468414, 0.013726165518164635, -0.06061067804694176, -0.0388687402009964, -0.013691593892872334, 0.03577524796128273, 0.034540776163339615, -0.0029742072802037, 0.03542139753699303, 0.033711791038513184, -0.057403817772865295, 0.038908544927835464, -0.052249714732170105, 0.05030166357755661, 0.017842009663581848, -0.05489353835582733, -0.0163995660841465, 0.07506796717643738, -0.06143956631422043, -0.06730366498231888, 0.03154369071125984, 0.0007932409062050283, 0.04960155114531517, 0.030272556468844414, -0.043862126767635345, 0.01102534495294094, -0.007480755914002657, 0.022198937833309174, 0.03312186896800995, 0.07513314485549927, 0.01247707474976778, -0.04630075767636299, -0.02271421067416668, 0.01799074001610279, -0.02071177400648594, 0.07145652920007706, 0.06950558722019196, 0.05530910566449165, -0.016833003610372543, 0.0721268504858017, 0.004571898840367794, -0.04770747199654579, -0.036894790828228, 0.023145340383052826, -0.02547713927924633, 0.06851084530353546, -0.07405542582273483, -0.04480866715312004, -0.04098385199904442, 0.04649004340171814, -0.045771319419145584, 0.0018296849448233843, -0.03739974647760391, 0.06962209939956665, -0.007290943525731564, -0.04789187014102936, 0.0407448336482048, 0.061331797391176224, -0.03778741508722305, -0.046228982508182526, 0.015463128685951233, 0.07017631083726883, 0.009549543261528015, 0.06144776940345764, 0.016327183693647385, -0.018298137933015823, -0.006819897796958685, -0.045385006815195084, -0.055363867431879044, 0.06993110477924347, -0.035984836518764496, 0.04461754858493805, -0.01821468025445938, 0.002402729820460081, -0.02640966698527336, -0.01037781685590744, 0.01873278245329857, -0.004573815502226353, 0.026891978457570076, -0.01754796877503395, 0.03359466791152954, -0.003897911636158824, 0.04229753091931343, 0.024353761225938797, -0.07514148950576782, -0.024332070723176003, 0.05427490174770355, -0.05508800223469734, -0.05631842464208603, 0.03503335267305374, 0.030170699581503868, -0.05754523724317551, 0.0030220255721360445, -0.036989275366067886, -0.002469956409186125, 0.05491764098405838, -0.0342552587389946, -0.010687870904803276, -0.04721975699067116, 0.0006825726595707238, -0.04862445220351219, -0.04738583043217659, 0.03603295981884003, 0.031193748116493225, -0.06445124000310898, 0.03469312563538551, 0.038280513137578964, 0.02798536606132984, 0.03603468835353851, 0.04813007265329361, 0.01965053752064705, -0.05250651389360428, 0.04094152897596359, 0.06053706631064415, -0.050233758985996246, 0.059463679790496826, -0.014679702930152416, -0.05455337464809418, 0.031860604882240295, -0.014923639595508575, 0.02894752472639084, -0.05265621095895767, -0.07240158319473267, 0.020689301192760468, 0.06412789970636368, -0.027824673801660538, -0.009378456510603428, 0.06361473351716995, -0.07088880985975266, -0.0033267976250499487, -0.07420634478330612, 0.05833446979522705, 0.052748315036296844, 0.07152527570724487, 0.07342419028282166, 0.036896031349897385, -0.026949195191264153, 0.009626050479710102, 0.040499087423086166, 0.0023415875621140003, 0.046105802059173584, 0.029827682301402092, -0.07042616605758667, -0.03086506575345993, 0.03857028856873512, -0.06816812604665756, -0.06641628593206406, 0.039077308028936386, -0.04460637643933296, -0.03855301812291145, -0.06117419898509979, -0.0067742085084319115, -0.06971801817417145, -0.00598761485889554, -0.008587958291172981, -0.01903649792075157, -0.03899820148944855, 0.007125570438802242, -0.023879585787653923, -0.04223087430000305, -0.01773442141711712, -0.036854058504104614, 0.00493942154571414, 0.03467470034956932, -0.019588422030210495, 0.018408814445137978, 0.04008045047521591, -0.032830238342285156, -0.03985613211989403, 0.024253642186522484, 0.050475068390369415, 0.015664905309677124, 0.07096201926469803, 0.04680886119604111, 0.05735126510262489, 0.01825195737183094, -0.059266313910484314, 0.024971548467874527, 0.062467798590660095, -0.060825709253549576, 0.016642725095152855, 0.020421165972948074, 0.07514938712120056, -0.0020337433088570833, -0.03909558057785034, -0.023263558745384216, 0.023750578984618187, 0.05393827706575394, 0.06667213141918182, 0.002693039597943425, -0.005821683444082737, -0.05423462763428688, -0.04797561094164848, -0.07042129337787628, -0.07210437953472137, 0.005813430994749069, 0.04300030320882797, 0.03730703890323639, -0.053447939455509186, 0.0014314672444015741, 0.04486880823969841, -0.021657368168234825, 0.06550907343626022, 0.008186249993741512, -0.023834623396396637, -0.07424518465995789, 0.009120285511016846, -0.004646884743124247, -0.05426965281367302, 0.06575774401426315, -0.009367290884256363, 0.019127855077385902, 0.010700062848627567, -0.06582190096378326, -0.04609953612089157, -0.0023819245398044586, -0.04417124390602112, -0.03916254639625549, -0.07312431931495667, 0.01202371809631586, 0.03373699635267258, 0.06089406460523605, 0.06963448226451874, 0.04609265923500061, 0.006146788597106934, -0.02761787734925747, -0.07452590763568878, 0.011857232078909874, 0.03826439008116722, 0.0356953926384449, 0.06413717567920685, 0.011122557334601879, 0.06745841354131699, 0.07049352675676346, 0.07440925389528275, -0.006639914587140083, -0.05503188446164131, 0.059748731553554535, -0.06405582278966904, -0.004329064395278692, -0.01734223961830139, -0.02551446482539177, -0.07109715789556503, -0.029921596869826317, 0.03747057914733887, -0.00540783628821373, 0.01696428284049034, -0.07395117729902267, -0.06542167067527771, 0.026506880298256874, 0.028321053832769394, -0.0030734320171177387, -0.07192613929510117, -0.045537836849689484, 0.050729911774396896, -0.05909007042646408, -0.03761027380824089, -0.03900656849145889, 0.06764405220746994, 0.01211436279118061, -0.006547100376337767, -0.0623946413397789, -0.07273319363594055, 0.0751354768872261, 0.05340961739420891, -0.026513582095503807, -0.020886437967419624, 0.05134158208966255, 0.02172306552529335, -0.061232659965753555, -0.07507365942001343, 0.06378491222858429, -0.03700613975524902, -0.029887080192565918, -0.04867717996239662, 0.04015160724520683, 0.05664042755961418, 0.05682113394141197, 0.018447013571858406, 0.0729612335562706, 0.038953617215156555, 0.0377630740404129, -0.04159923642873764, -0.05883842706680298, -0.06983240693807602, 0.023094195872545242, -0.0039079138077795506, -0.023022450506687164, 0.0747004896402359, 0.052176229655742645, -0.03771786764264107, -0.04926368221640587, -0.029887709766626358, -0.06135832145810127, -0.05099976435303688, -0.02697003446519375, 0.009145215153694153, 0.014588815160095692, 0.028894741088151932, -0.03220835700631142, -0.0016674681100994349, -0.01858084462583065, 0.013236923143267632, -0.018372410908341408, -0.01977723464369774, -0.06607627868652344, 0.005327773746103048, 0.008918209001421928, -0.057458121329545975, 0.0029086328577250242, 0.01368994452059269, 0.030949106439948082, 0.045967452228069305, 0.02862921729683876, -0.016410188749432564, 0.027084628120064735, -0.04494565352797508, 0.020227469503879547, 0.06662888824939728, -0.03138608857989311, 0.0686642974615097, 0.0670485645532608, -0.0614459328353405, 0.07383836805820465, 0.032981712371110916, 0.007136672269552946, -0.033331986516714096, 0.038281265646219254, -0.017659759148955345, -0.0751485824584961, 0.024274108931422234, -0.017162097617983818, 0.014910555444657803, -0.005634171422570944, -0.00695131067186594, -0.03462579473853111, -0.022766340523958206, -0.016215816140174866, -0.06913931667804718, 0.043544571846723557, -0.05817180871963501, -0.07509762793779373, 0.05103229358792305, 0.004590797703713179, -0.015782974660396576, -0.05256613343954086, 0.004004982765763998, -0.07514701783657074, 0.024600423872470856, 0.03048980049788952, -0.026718754321336746, -0.03490724414587021, -0.01787109673023224, 0.06303078681230545, 0.06181842461228371, 0.02598322369158268, 0.05170349031686783, -0.034935519099235535, 0.05981070175766945, 0.007866163738071918, -0.0596647709608078, -0.0018385752337053418, 0.02065291255712509, 0.02436223067343235, -0.04148034378886223, -0.0004953491152264178, 0.025964124128222466, 0.05515257269144058, -0.06645091623067856, -0.03744009509682655, -0.04644929990172386, 0.07500603049993515, 0.06833082437515259, -0.023198751732707024, 0.0180344395339489, -0.04757893830537796, -0.02347262017428875, -0.06851479411125183, -0.015042828395962715, -0.00010342145105823874, 0.0019492334686219692, -0.05581171065568924, 0.06590275466442108, 0.021814418956637383, 0.053789522498846054, 0.0021737401839345694, 0.025052014738321304, 0.02395360916852951, -0.024276504293084145, 0.03145841881632805, -0.0541960708796978, -0.07429066300392151, 0.026482734829187393, -0.037776511162519455, 0.03864814341068268, -0.04584465175867081, -0.06279174983501434, -0.016288261860609055, 0.007812038064002991, -0.0032843847293406725, 0.03987814486026764, 0.040058910846710205, 0.06360363215208054, -0.016587059944868088, -0.039601828902959824, -0.0711306557059288, -0.06886747479438782, 0.01325914729386568, -0.0625675767660141, 0.02010880969464779, 0.05382941663265228, -0.009079976938664913, 0.07181114703416824, -0.07299701869487762, -0.031372811645269394, 0.008146446198225021, -0.03209494799375534, 0.01908906176686287, -0.04341062158346176, -0.04178654029965401, -0.03838466852903366, 0.047604694962501526, -0.0630379393696785, -0.026955939829349518, 0.008128228597342968, -0.001843046979047358, -0.05373510345816612, 0.04466426745057106, 0.03862067684531212, 0.04635629057884216, 0.07128725945949554, -0.035579606890678406, -0.05855279415845871, 0.03492479771375656, -0.038892343640327454, -0.006310592405498028, 0.06929042935371399, 0.07514671236276627, 0.07036272436380386, -0.05323916673660278, -0.07336001843214035, -0.0027571774553507566, 0.03768092393875122, 0.03863787651062012, 0.002314862795174122, -0.04733944311738014, 0.001965013099834323, 0.06281854212284088, 0.05427121743559837, 0.06832937151193619, -0.006295847240835428, 0.06795214861631393, 0.07461453229188919, 0.043228764086961746, -0.01651514694094658, -0.017186922952532768, -0.03940631076693535, -0.0002893046766985208, -0.0474136583507061, -0.052140939980745316, -0.02902260795235634, -0.06127484515309334, -0.048400409519672394, -0.02444041334092617, -0.07501070201396942, 0.022675275802612305, -0.019114112481474876, 0.06518486887216568, 0.05901770293712616, 0.055948369204998016, 0.00641849497333169, 0.07159504294395447, -0.012489136308431625, -0.0008755651069805026, -0.062116701155900955, -0.038521669805049896, 0.03576870635151863, 0.004359798971563578, 0.03601926937699318, 0.015716711059212685, -0.048972196877002716, 0.024697255343198776, -0.007272245828062296, -0.04889693483710289, 0.061963342130184174, 0.008420524187386036, 0.07032415270805359, 0.009488232433795929, -0.009689812548458576, 0.028741177171468735, 0.07335782051086426, -0.05257497727870941, 0.055283598601818085, 0.03891798108816147, 0.07471229881048203, -0.041116863489151, -0.013382497243583202]},
{"question": "How can I get useful error messages in PHP?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>Quite often I will try and run a PHP script and just get a blank screen back. No error message; just an empty screen. The cause might have been a simple syntax error (wrong bracket, missing semicolon), or a failed function call, or something else entirely.</p>\n\n<p>It is very difficult to figure out what went wrong. I end up commenting out code, entering \"echo\" statements everywhere, etc. trying to narrow down the problem. But there surely must be a better way, right?</p>\n\n<p>Is there a way to get PHP to produce a useful error message, like Java does?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>For syntax errors, you need to enable error display in the php.ini. By default these are turned off because you don't want a \"customer\" seeing the error messages. <a href=\"http://php.net/manual/en/errorfunc.configuration.php#ini.error-reporting\" rel=\"noreferrer\">Check this page</a> in the PHP documentation for information on the 2 directives: <code>error_reporting</code> and <code>display_errors</code>. <code>display_errors</code> is probably the one you want to change. If you can't modify the php.ini, you can also add the following lines to an .htaccess file:</p>\n\n<pre><code>php_flag  display_errors        on\nphp_value error_reporting       2039\n</code></pre>\n\n<p>You may want to consider using the value of E_ALL (as mentioned by Gumbo) for your version of PHP for <code>error_reporting</code> to get all of the errors. <a href=\"http://docs.php.net/manual/en/errorfunc.constants.php\" rel=\"noreferrer\">more info</a></p>\n\n<p>3 other items: (1) You can check the error log file as it will have all of the errors (unless logging has been disabled). (2) Adding the following 2 lines will help you debug errors that are not syntax errors:</p>\n\n<pre><code>error_reporting(-1);\nini_set('display_errors', 'On');\n</code></pre>\n\n<p>(3) Another option is to use an editor that checks for errors when you type, such as <a href=\"http://www.nusphere.com/products/phped.htm\" rel=\"noreferrer\">PhpEd</a>. PhpEd also comes with a debugger which can provide more detailed information. (The PhpEd debugger is very similar to xdebug and integrates directly into the editor so you use 1 program to do everything.)</p>\n\n<p>Cartman's <a href=\"http://www.ibm.com/developerworks/library/os-debug/\" rel=\"noreferrer\">link</a> is also very good: <a href=\"http://www.ibm.com/developerworks/library/os-debug/\" rel=\"noreferrer\">http://www.ibm.com/developerworks/library/os-debug/</a></p>\n    </div>", "total_vectors": [0.010282167233526707, -0.015449387952685356, -0.01329269539564848, -0.010683578439056873, 0.0184162687510252, -0.011637456715106964, -0.06560348719358444, 0.01736604981124401, -0.04833301901817322, 0.05914441868662834, 0.0012563836062327027, -0.010063945315778255, -0.022524507716298103, 0.04742617905139923, 0.009823710657656193, 0.09126878529787064, 0.027990495786070824, 0.03161580115556717, -0.01979762129485607, -0.011915171518921852, 0.05239412188529968, 0.01907852664589882, 0.04405484348535538, -0.024902429431676865, -0.04484884440898895, -0.028069699183106422, 0.00013788042997475713, -0.061566051095724106, -0.0049720630049705505, 0.001593601773492992, -0.04066720977425575, 0.06432978063821793, -0.04243069887161255, 0.07603324949741364, -0.07880252599716187, -0.02746630646288395, -0.028736647218465805, -0.050624921917915344, -0.04106411710381508, -0.009352296590805054, -0.03660456836223602, -0.03948754444718361, -0.0009453417151235044, 0.019225280731916428, 0.0909406989812851, -0.03142327442765236, -0.03450828045606613, 0.03817138075828552, -0.03642119839787483, -0.052545756101608276, 0.05003337189555168, 0.09017302095890045, 0.007824252359569073, -0.046055059880018234, -0.07572513818740845, -0.005475052632391453, -0.021914513781666756, 0.004021172411739826, 0.031886693090200424, -0.014753964729607105, 0.023281771689653397, -0.03771581873297691, -0.027711477130651474, -0.05332775413990021, -0.034377776086330414, -0.04663233086466789, -0.04697415977716446, 0.015429253689944744, -0.04319749400019646, 0.026647847145795822, -0.06290093064308167, 0.018375230953097343, 0.07384123653173447, -0.010112757794559002, 0.022761832922697067, -0.0017473016632720828, 0.037530142813920975, -0.0092169139534235, 0.07156246900558472, 0.08767455071210861, 0.08115963637828827, 0.006768068298697472, -0.009202735498547554, 0.015746504068374634, 0.07370562106370926, -0.006359340623021126, 0.011172170750796795, 0.03913785144686699, -0.05072110518813133, -0.0060515375807881355, 0.031153058633208275, 0.012818137183785439, -0.056094951927661896, 0.022000743076205254, 0.05583084747195244, 0.05357608199119568, 0.012074187397956848, 0.07486981153488159, -0.0491379089653492, -0.09061037003993988, 0.06474941223859787, -0.010352258570492268, -0.07491730153560638, 0.011121243238449097, -0.03864431008696556, -0.054516542702913284, 0.08921591937541962, 0.02794242650270462, -0.08510199934244156, 0.03778304532170296, -0.007490331307053566, -0.05904104560613632, 0.03047027997672558, -0.01846248097717762, -0.007037794683128595, 0.03537558764219284, 0.012023719027638435, 0.0260451827198267, -0.024922629818320274, -0.06212041154503822, -0.004357547964900732, -0.03308526426553726, -0.014003523625433445, 0.004423849750310183, 0.04039265587925911, 0.047077834606170654, 0.017900189384818077, -0.0001376845466438681, 0.07943901419639587, 0.005547469947487116, -0.050042349845170975, -0.010219588875770569, -0.05528460070490837, 0.0192470233887434, -0.006247514393180609, -0.03635316342115402, -0.03524128347635269, -0.02372862584888935, 0.007016110233962536, -0.003973959945142269, 0.02542313002049923, -0.040447212755680084, -0.0075037432834506035, 0.00011999042908428237, 0.06546767055988312, -0.0893346518278122, -0.027137484401464462, 0.0072648655623197556, 0.01071265060454607, -0.022691410034894943, -0.009267403744161129, -0.02155405282974243, 0.04995906352996826, -0.0043133096769452095, -0.008001876063644886, -0.042667802423238754, 0.000655524549074471, -0.007257555611431599, -0.06086934357881546, 0.034362003207206726, 0.039131250232458115, -0.038264766335487366, -0.002984885824844241, -0.06646379083395004, 0.07684964686632156, -0.07500485330820084, -0.05738084763288498, -0.028849175199866295, -0.010659318417310715, 0.021257393062114716, -0.0744054764509201, -0.08526469767093658, -0.06892167776823044, -0.038237739354372025, 0.017073998227715492, -0.003295956179499626, 0.027993466705083847, -0.030317086726427078, 0.0009567848755978048, 0.03240375593304634, -0.043426644057035446, 0.047616682946681976, -0.03845890238881111, -0.027090465649962425, -0.023294247686862946, 0.0035674492828547955, 0.009870798327028751, 0.017617467790842056, -0.026697374880313873, 0.05607274919748306, 0.08057282119989395, -0.020940138027071953, -0.006607345771044493, -0.06950680911540985, -0.009246616624295712, -0.011883976869285107, -0.01184220053255558, 0.0912819430232048, -0.0266924649477005, -0.0160076804459095, -0.07548029720783234, 0.04134271293878555, -0.09105028957128525, 0.0862133577466011, 0.014877577312290668, 0.018791383132338524, -0.05621544271707535, 0.03590252250432968, -0.08798974752426147, -0.025053534656763077, -0.02694741077721119, 0.03646410256624222, 0.03636850416660309, 0.029061807319521904, 0.048682261258363724, 0.04447965696454048, -0.05229683220386505, 0.04863624647259712, 0.01028874795883894, -0.0491989329457283, -0.006164430174976587, 0.028512682765722275, 0.031092749908566475, 0.011578623205423355, 0.0021154501009732485, 0.020257337018847466, -0.04876430705189705, -0.005923697724938393, 0.023063259199261665, -0.03682335466146469, 0.03893135115504265, -0.038983941078186035, 0.049729421734809875, -0.03648832440376282, -0.01898360624909401, -0.08466409146785736, 0.060583870857954025, 0.0066201165318489075, -0.0042784069664776325, -0.01492716372013092, -0.054208170622587204, 0.00948980450630188, 0.056089017540216446, -0.07797376811504364, -0.04512263834476471, 0.09082020074129105, -0.00022208508744370192, 0.04875065013766289, 0.09047356992959976, 0.08180884271860123, -0.08759822696447372, -0.020843250676989555, 0.007680763024836779, 0.02252059243619442, -0.06841490417718887, -0.07172682881355286, -0.011921308934688568, -0.0760534256696701, 0.0245826356112957, 0.01719655469059944, -0.006734177935868502, -0.0023878624197095633, -0.08875088393688202, 0.014659743756055832, 0.04646676033735275, 0.06892672181129456, -0.016255173832178116, -0.08862917870283127, 0.005096570588648319, 0.047198645770549774, -0.06548591703176498, -0.054309871047735214, 0.06649153679609299, -0.039941463619470596, -0.028218340128660202, -0.021926717832684517, -0.019237134605646133, 0.014862950891256332, 0.08958816528320312, 0.028488831594586372, -0.03624705225229263, 0.01149070169776678, 0.016727421432733536, -0.005407819524407387, -0.009364820085465908, -0.08711124956607819, 0.02377537451684475, 0.03535614535212517, 0.019322408363223076, 0.08119656890630722, -0.04310565069317818, 0.06125609576702118, 0.07045277953147888, -0.0050281621515750885, 0.0877755731344223, -0.048035819083452225, -0.03907447308301926, -0.038040678948163986, 0.002869734074920416, 0.05878051370382309, 0.018846290186047554, -0.07104436308145523, -0.05450117215514183, -0.0847630500793457, -0.041215069591999054, -0.0600854717195034, 0.016159232705831528, 0.0024653621949255466, 0.055859677493572235, 0.042898524552583694, 0.010059301741421223, 0.03421049937605858, -0.03581532463431358, 0.0032677091658115387, 0.03154422342777252, -0.048775605857372284, 0.03681685030460358, -0.032637037336826324, 0.0325009822845459, 0.0006082518957555294, 0.08189241588115692, -0.034723516553640366, -0.016379427164793015, 0.033267706632614136, 0.06428223103284836, 0.06312090903520584, -0.0007554249023087323, 0.02216474711894989, 0.02890162169933319, -0.02236194722354412, 0.05049841105937958, 0.0006082438048906624, -0.029378090053796768, 0.04990311339497566, 0.07063581049442291, 0.0029864071402698755, 0.02874305099248886, 0.03053264133632183, 0.044365257024765015, -0.0065235598012804985, -0.018823746591806412, -0.01637532189488411, 0.023926816880702972, 0.03900042176246643, -0.09122876822948456, 0.009905100800096989, 0.011752297170460224, 0.030908096581697464, 0.028272595256567, -0.030284259468317032, 0.03747761249542236, 0.008854013867676258, 0.05866830796003342, -0.03651520982384682, -0.014257503673434258, -0.08428604900836945, -0.09018615633249283, 0.0028712546918541193, 0.011858973652124405, 0.00810485240072012, -0.0722750574350357, -0.02182409167289734, -0.08626007288694382, -0.048279453068971634, -0.08916439116001129, -0.02598111517727375, -0.0850464403629303, 0.0180320106446743, 0.08094409108161926, -0.033974539488554, 0.02151341736316681, 0.009886246174573898, -0.006063877604901791, 0.07138766348361969, -0.025233440101146698, -0.08294857293367386, 0.0008893882622942328, -0.003268289379775524, -0.004929370246827602, -0.0733877494931221, -0.06615423411130905, 0.04184970259666443, -0.014134206809103489, 0.07591905444860458, -0.006220101844519377, -0.05815112963318825, 0.04904830455780029, -0.010296191088855267, 0.021741649135947227, -0.0481974333524704, -0.014843998476862907, 0.08726322650909424, 0.0859406590461731, 0.030131608247756958, 0.05319983512163162, 0.023943517357110977, -0.0666484385728836, 0.03900119289755821, -0.01823456771671772, 0.07513058185577393, 0.003432971192523837, 0.028912821784615517, -0.012620802037417889, -0.061613138765096664, 0.04331715404987335, 0.02234378270804882, -0.08703194558620453, -0.03584839776158333, -0.03571620211005211, 0.062449611723423004, -0.06429879367351532, -0.0018479319987818599, 0.02222093939781189, 0.02444140799343586, -0.025655394420027733, 0.03382299467921257, 0.0056084031239151955, 0.04763571545481682, 0.025583753362298012, -0.013712086714804173, -0.004393078852444887, -0.022791901603341103, 0.020281102508306503, -0.025651540607213974, 0.05335415527224541, 0.054197341203689575, 0.06315819919109344, 0.06324084103107452, 0.0056366827338933945, -0.026065727695822716, 0.012091104872524738, 0.01321951113641262, 0.035761404782533646, -0.042683858424425125, -0.05798044428229332, -0.04447285458445549, 0.02281338721513748, 0.01367289386689663, -0.020724529400467873, 0.048132870346307755, 0.04762989282608032, 0.029270771890878677, 0.05557507649064064, -0.028134655207395554, -0.0015263647073879838, -0.06020057946443558, 0.06425466388463974, 0.06391976773738861, -0.0006653497694060206, 0.005968721583485603, -0.022085335105657578, -0.08639880269765854, 0.09069687873125076, 0.02660973183810711, 0.010151602327823639, -0.06231275945901871, 0.04507771134376526, 0.02681397832930088, -0.028768248856067657, 0.027205927297472954, 0.000575340585783124, 0.006225137505680323, 0.03704026713967323, -0.018091365694999695, -0.010924709029495716, 0.017928848043084145, -0.02077108435332775, -0.08662232011556625, 0.02598833292722702, 0.07482585310935974, 0.017129452899098396, -0.03449424356222153, 0.029944298788905144, 0.03737707808613777, -0.005206303671002388, -0.037947554141283035, 0.019261637702584267, -0.01873951032757759, 0.06563431769609451, 0.0369250662624836, 0.05660511180758476, 0.00018753758922684938, 0.019239649176597595, -0.05703336372971535, 0.03184601292014122, 0.020340679213404655, 0.0877719596028328, 0.04220433905720711, 0.055882763117551804, 0.028414828702807426, -0.044071976095438004, -0.019921962171792984, 0.014258588664233685, 0.04150388017296791, 0.06977911293506622, -0.007910942658782005, 0.028344519436359406, 0.012082028202712536, -0.05135251209139824, 0.021099278703331947, -0.05541970208287239, -0.01832953654229641, -0.028568187728524208, 0.06962794065475464, -0.003795325756072998, 0.02615988813340664, 0.05512635037302971, -0.008727540262043476, 0.054740600287914276, 0.06720243394374847, -0.02034200169146061, -0.07591153681278229]},
{"question": "How do I remove the space between inline/inline-block elements?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>Given this HTML and CSS:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>span {\r\n    display:inline-block;\r\n    width:100px;\r\n    background-color:palevioletred;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p&gt;\r\n    &lt;span&gt; Foo &lt;/span&gt;\r\n    &lt;span&gt; Bar &lt;/span&gt;\r\n&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n\n\n<p>As a result, there will be a 4\u00a0pixel wide space between the SPAN elements.</p>\n\n<p><strong>Demo:</strong> <a href=\"http://jsfiddle.net/dGHFV/\" rel=\"noreferrer\">http://jsfiddle.net/dGHFV/</a></p>\n\n<p>I understand why this happens, and I also know that I could get rid of that space by removing the white-space between the SPAN elements in the HTML source code, like so:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;p&gt;\n    &lt;span&gt; Foo &lt;/span&gt;&lt;span&gt; Bar &lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n\n<p>However, I was hoping for a CSS solution that doesn't require the HTML source code to be tampered with.</p>\n\n<p>I know how to solve this with JavaScript - by removing the text nodes from the container element (the paragraph), like so:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>// jQuery\n$('p').contents().filter(function() { return this.nodeType === 3; }).remove();\n</code></pre>\n\n<p><strong>Demo:</strong> <a href=\"http://jsfiddle.net/dGHFV/1/\" rel=\"noreferrer\">http://jsfiddle.net/dGHFV/1/</a></p>\n\n<p>But can this issue be solved with CSS alone?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>Since this answer has become rather popular, I'm rewriting it significantly.</p>\n\n<p>Let's not forget the actual question that was asked:</p>\n\n<blockquote>\n  <p>How to remove the space between <strong>inline-block elements</strong>? I was hoping\n  for a CSS solution that doesn't require the HTML source code to be\n  tampered with. <strong>Can this issue be solved with CSS alone?</strong></p>\n</blockquote>\n\n<p>It <em>is</em> possible to solve this problem with CSS alone, but there are no <em>completely</em> robust CSS fixes.</p>\n\n<p>The solution I had in my initial answer was to add <code>font-size: 0</code> to the parent element, and then declare a sensible <code>font-size</code> on the children.</p>\n\n<p><a href=\"http://jsfiddle.net/thirtydot/dGHFV/1361/\" rel=\"noreferrer\">http://jsfiddle.net/thirtydot/dGHFV/1361/</a></p>\n\n<p>This works in recent versions of all modern browsers. It works in IE8. It does not work in Safari 5, but it <em>does</em> work in Safari 6. Safari 5 is nearly a dead browser (<a href=\"http://gs.statcounter.com/#desktop-browser_version_partially_combined-ww-monthly-201408-201508\" rel=\"noreferrer\">0.33%, August 2015</a>).</p>\n\n<p>Most of the possible issues with relative font sizes are not complicated to fix.</p>\n\n<p>However, while this is a reasonable solution if you <em>specifically need</em> a CSS only fix, it's not what I recommend if you're free to change your HTML (as most of us are).</p>\n\n<hr>\n\n<p>This is what I, as a reasonably experienced web developer, actually do to solve this problem:</p>\n\n<pre><code>&lt;p&gt;\n    &lt;span&gt;Foo&lt;/span&gt;&lt;span&gt;Bar&lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n\n<p>Yes, that's right. I remove the whitespace in the HTML between the inline-block elements.</p>\n\n<p>It's easy. It's simple. It works everywhere. It's the pragmatic solution.</p>\n\n<p>You do sometimes have to carefully consider where whitespace will come from. <em>Will appending another element with JavaScript add whitespace?</em> No, not if you do it properly.</p>\n\n<p>Let's go on a magical journey of different ways to remove the whitespace, with some new HTML:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;\n    &lt;li&gt;Item 2&lt;/li&gt;\n    &lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<ul>\n<li><p>You can do this, as I usually do:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;&lt;li&gt;Item 2&lt;/li&gt;&lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/thirtydot/dGHFV/1362/\" rel=\"noreferrer\">http://jsfiddle.net/thirtydot/dGHFV/1362/</a></p></li>\n<li><p>Or, this:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li&gt;Item 1&lt;/li\n    &gt;&lt;li&gt;Item 2&lt;/li\n    &gt;&lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre></li>\n<li><p>Or, use comments:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;&lt;!--\n    --&gt;&lt;li&gt;Item 2&lt;/li&gt;&lt;!--\n    --&gt;&lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre></li>\n<li><p>Or, if you are using using PHP or similar:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;&lt;?\n    ?&gt;&lt;li&gt;Item 2&lt;/li&gt;&lt;?\n    ?&gt;&lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre></li>\n<li><p>Or, <a href=\"http://validator.w3.org/check?uri=http%3A%2F%2Fjsbin.com%2FOMoXUHO%2F1%2F&amp;charset=%28detect+automatically%29&amp;doctype=Inline&amp;group=0\" rel=\"noreferrer\">you can</a> even skip <a href=\"http://developers.whatwg.org/syntax.html#optional-tags\" rel=\"noreferrer\">certain</a> closing tags entirely (all browsers are fine with this):</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li&gt;Item 1\n    &lt;li&gt;Item 2\n    &lt;li&gt;Item 3\n&lt;/ul&gt;\n</code></pre></li>\n</ul>\n\n<p>Now that I've gone and bored you to death with \"one thousand different ways to remove whitespace, by thirtydot\", hopefully you've forgotten all about <code>font-size: 0</code>.</p>\n\n<hr>\n\n<p>Alternatively, you <a href=\"http://caniuse.com/flexbox\" rel=\"noreferrer\">can now use flexbox</a> to achieve many of the layouts that you may previously have used inline-block for: <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\" rel=\"noreferrer\">https://css-tricks.com/snippets/css/a-guide-to-flexbox/</a></p>\n    </div>", "total_vectors": [-0.04000651091337204, -0.02507558837532997, 0.0742550939321518, 0.027911456301808357, 0.0028577554039657116, -0.06611458212137222, 0.07913695275783539, -0.011995482258498669, -0.04296409338712692, 0.09494397789239883, -0.016529489308595657, 0.04931503161787987, 0.015828285366296768, -0.030726071447134018, 0.025128956884145737, 0.10130911320447922, 0.017901549115777016, -0.01043829694390297, 0.06026610732078552, 0.025915568694472313, 0.05736352875828743, -0.013343638740479946, 0.020163562148809433, 0.035584885627031326, -0.012126569636166096, -0.0005719285691156983, -0.01521732471883297, -0.030634984374046326, -0.008419669233262539, 0.02182604931294918, -0.008380281738936901, -0.0014758693287149072, 0.057655446231365204, 0.004777844529598951, 0.014432895928621292, -0.03307320177555084, -0.006927915848791599, 0.0908365547657013, 0.005127286538481712, -0.0029346977826207876, 0.019980544224381447, -0.0403093621134758, 0.010943709872663021, 0.004267629235982895, 0.07951648533344269, -0.01752559468150139, 0.03368940204381943, -0.07379481941461563, -0.006253724917769432, -0.051110897213220596, 0.038236554712057114, 0.10158641636371613, 0.047738656401634216, -0.07498268783092499, 0.020335478708148003, 0.013816051185131073, -0.020594552159309387, 0.0483817383646965, 0.03078213892877102, 0.01776094175875187, -0.061878662556409836, -0.05898403376340866, 0.0353524349629879, -0.04756650701165199, 0.017050616443157196, -0.0786791667342186, -0.05090991035103798, -0.06827065348625183, 0.006423102226108313, -0.050660390406847, -0.008766110055148602, 0.05376506969332695, 0.05543368682265282, 0.011824012733995914, -0.0061499890871346, 0.019374480471014977, 0.003492030780762434, 0.061383575201034546, 0.03828302398324013, 0.0707286149263382, 0.02777969464659691, -0.02180132083594799, 0.010187770240008831, -0.024236593395471573, -0.020351223647594452, -0.06324510276317596, 0.03242824971675873, 0.005566513165831566, -0.06017136201262474, -0.04444965720176697, -0.02541036531329155, -0.01797279343008995, 0.04040387645363808, 0.006126071326434612, -0.0076500470750033855, 0.019619258120656013, -0.03135506063699722, 0.005941423121839762, 0.0310968067497015, -0.09712747484445572, -0.01587815210223198, 0.03320719674229622, -0.038702018558979034, 0.06439507752656937, 0.021840423345565796, -0.00563485873863101, -0.011827390640974045, -0.06414614617824554, -0.014479979872703552, 0.044912077486515045, 0.012936919927597046, -0.08013720065355301, -0.03905169665813446, 0.03519655019044876, -0.011611318215727806, 0.02159952186048031, 0.006255448795855045, -0.003934734966605902, -0.024459445849061012, -0.07991781830787659, -0.014431054703891277, 0.011858347803354263, -0.062133096158504486, -0.015394164249300957, -0.01490129716694355, 0.05688336864113808, -0.01606072671711445, 0.01790117286145687, 0.07159709185361862, -0.02608746849000454, 0.042351268231868744, 0.08047594875097275, -0.03614981845021248, 0.01712883450090885, 0.023763975128531456, -0.07679953426122665, -0.08230231702327728, -0.013334525749087334, -0.02191910892724991, 0.07578703761100769, -0.03565525636076927, -0.006363069172948599, 0.01230897381901741, 0.013933230191469193, 0.014553756453096867, -0.04943825304508209, 0.02541799657046795, 0.015414463356137276, 0.06704143434762955, 0.016933906823396683, -0.03431544080376625, -0.07362435013055801, 0.0481785424053669, 0.020159104838967323, 0.030071699991822243, 0.015582702122628689, -0.03630903735756874, 0.05511874705553055, 0.01093276496976614, 0.008296147920191288, -0.0018348218873143196, -0.04194965586066246, -0.009513672441244125, -0.006328024435788393, -0.0033585894852876663, -0.004819005727767944, -0.038557473570108414, -0.0003974245919380337, 0.035944778472185135, -0.009951671585440636, -0.05294739082455635, -0.09965895861387253, 0.03309456631541252, 0.010603377595543861, 0.03949354588985443, -0.014847931452095509, 0.01586207188665867, 0.016924230381846428, 0.05007650703191757, 0.011319882236421108, 0.08117939531803131, 0.024856694042682648, -0.05488039180636406, -0.04311887174844742, -0.04728350788354874, -0.038185086101293564, 0.053092047572135925, 0.08874111622571945, -0.05448325350880623, 0.07984968274831772, 0.04797837883234024, -0.04946940392255783, -0.02773105911910534, 0.007908483035862446, -0.04188833385705948, -0.0208223108202219, -0.03859040513634682, 0.09882307797670364, 0.00807544868439436, -0.07736241817474365, -0.007043136283755302, 0.01680169627070427, -0.0354686863720417, 0.09228592365980148, -0.08186089247465134, -0.024646855890750885, -0.08250147104263306, -0.04725094139575958, -0.008545443415641785, -0.07092154771089554, 0.0029914621263742447, -0.012131708674132824, -0.03603467717766762, 0.052594952285289764, 0.04539673402905464, -0.0057404921390116215, 0.001563583966344595, 0.017996976152062416, 0.016196979209780693, 0.002117578173056245, 0.035468682646751404, -0.04928192123770714, 0.012819861993193626, -0.0634726732969284, 0.025856904685497284, 0.06978923827409744, -0.06621783971786499, 0.07629631459712982, 0.04343876615166664, -0.017065029591321945, -0.043602608144283295, 0.05570397526025772, -0.027012936770915985, -0.03468932956457138, 0.03345979005098343, -0.019161242991685867, 0.060547009110450745, -0.011019361205399036, -0.013610504567623138, 0.07805764675140381, 0.0004354789562057704, 0.002820258727297187, -0.05028114467859268, -0.0014338489854708314, 0.08033719658851624, 0.09848378598690033, -0.05947121977806091, 0.04757506400346756, 0.10158293694257736, 0.08952146023511887, -0.0670451819896698, 0.07191862910985947, -0.0052183750085532665, -0.03914381563663483, -0.04701155796647072, -0.03326108679175377, 0.04183632880449295, -0.06748654693365097, -0.010744442231953144, 0.04699273407459259, -0.07696396857500076, -0.030354341492056847, -0.0997278094291687, 0.02144538424909115, 0.044976506382226944, 0.06344921886920929, -0.04608878493309021, -0.09922705590724945, 0.025694606825709343, 0.005407058168202639, -0.046762507408857346, -0.020981565117836, -0.07514975965023041, 0.0506444051861763, -0.05397044122219086, 0.029047267511487007, -0.01901872083544731, 0.01332138292491436, 0.03605565428733826, 0.03467365354299545, 0.05125315114855766, -0.041295427829027176, -0.039402417838573456, 0.012189711444079876, -0.004807068035006523, -0.012404176406562328, -0.06340391933917999, -0.05604655295610428, -0.01822495087981224, 0.0026111972983926535, -0.0432678759098053, 0.0094289006665349, -0.04657716304063797, 0.02871057391166687, 0.0968068465590477, 0.020886549726128578, -0.011108060367405415, -0.07546855509281158, 0.00399792892858386, 0.03576546534895897, 0.024733195081353188, -0.026904601603746414, -0.06214049831032753, -0.034298766404390335, 0.06567064672708511, -0.001957394415512681, -0.014705528505146503, -0.03360793739557266, -0.0862848237156868, 0.02443584054708481, -0.02197619341313839, -0.008466548286378384, -0.018137088045477867, -0.015195643529295921, 0.060032255947589874, 0.06922687590122223, -0.0014105632435530424, -0.018311433494091034, 0.026996122673153877, 0.009158245287835598, 0.09052827209234238, 0.05042603984475136, -0.03757758438587189, -0.02328922599554062, -0.0022459044121205807, 0.0246353168040514, -0.01381875853985548, 0.010119476355612278, -0.04145093634724617, -0.06977559626102448, -0.014900675974786282, 0.0016261001583188772, -0.06102532520890236, 0.03021834045648575, -0.028359992429614067, 0.011238127015531063, 0.001609592349268496, -0.04089510440826416, 0.05389169603586197, -0.007325312122702599, -0.011738879606127739, -0.014616045169532299, 0.005064495373517275, -0.019732004031538963, -0.09563099592924118, -0.040636926889419556, 0.03877170756459236, -0.012224244885146618, -0.035834264010190964, -0.01437646709382534, -0.013563796877861023, -0.004536795895546675, 0.038456834852695465, 0.02726665884256363, -0.00940744485706091, 0.043716661632061005, -0.09885980933904648, -0.06994614750146866, 0.050353728234767914, 0.06613802164793015, -0.07140040397644043, 0.03508845344185829, -0.08493857085704803, -0.020080814138054848, -0.02653323858976364, 0.04264121130108833, -0.08691268414258957, 0.03143109381198883, 0.07382403314113617, 0.021598204970359802, -0.01911415345966816, 0.027427034452557564, -0.030195392668247223, 0.04888436570763588, 0.003678233828395605, -0.09727226942777634, 0.009272288531064987, -0.01750919595360756, 0.047769613564014435, 0.016948476433753967, 0.03855277970433235, 0.0007222411804832518, 0.03626763075590134, -0.01883682981133461, 0.06896815448999405, 0.016946131363511086, 0.0934944897890091, 0.010859504342079163, 0.062314409762620926, 0.02890811115503311, 0.03273617476224899, 0.02061278373003006, -0.003360975068062544, -0.0038570205215364695, -0.015459734946489334, -0.038475293666124344, -0.02471265010535717, 0.04635929688811302, -0.010233438573777676, 0.05777544528245926, 0.005299260374158621, 0.02309802547097206, -0.03492184355854988, 0.024403613060712814, -0.0029988340102136135, -0.03687611222267151, -0.07167156040668488, -0.02994154393672943, -0.026540236547589302, 0.03618650138378143, -0.08311407268047333, -0.010286872275173664, -0.02930537797510624, -0.05321898311376572, -0.028363576158881187, 0.007557831704616547, 0.03402527794241905, 0.06776264309883118, -0.0056396774016320705, 0.08199577778577805, 0.024960801005363464, 0.04426046460866928, -0.01394429337233305, 0.034934088587760925, -0.019651291891932487, 0.0019611380994319916, 0.024768859148025513, 0.07254021614789963, -0.07143320143222809, 0.026758495718240738, -0.012495716102421284, -0.02409037947654724, 0.056821681559085846, -0.017487812787294388, -0.06231459602713585, 0.014481207355856895, 0.057366497814655304, -0.025470422580838203, -0.017810266464948654, 0.055997274816036224, 0.023981237784028053, -0.03614787012338638, -0.027983706444501877, 0.0284004807472229, -0.03894286975264549, 0.0800975039601326, 0.04441165179014206, 0.019737599417567253, -0.00784138310700655, 0.06315725296735764, 0.03977292776107788, -0.019568830728530884, 0.065701425075531, 0.007361534517258406, 0.014956299215555191, -0.07594253867864609, 0.03241296112537384, -0.014655177481472492, -0.059250980615615845, 0.05749024823307991, -0.045642636716365814, -0.001762482221238315, -0.060363173484802246, -0.07487849146127701, 0.005358440801501274, -0.07426180690526962, 0.010806375183165073, -0.0011658513685688376, -0.017786787822842598, 0.06273259222507477, 0.027905471622943878, -0.0870472639799118, -0.004738033749163151, -0.005744582507759333, -0.009992416948080063, 0.01033177599310875, -0.030469097197055817, -0.022759877145290375, 0.005769839510321617, -0.08765809237957001, -0.04547995328903198, -0.07765327394008636, 0.06483668833971024, 0.010931816883385181, -0.03300027921795845, -0.02335995063185692, 0.09473191201686859, 0.02520999312400818, -0.02171250805258751, 0.010974382050335407, 0.01783831976354122, 0.02268090471625328, 0.01127228606492281, 0.0448998287320137, -0.055747177451848984, -0.010220217518508434, 0.09639764577150345, 0.06604199856519699, -0.06242949143052101, 0.011002500541508198, 0.0005952212959527969, 0.06835270673036575, -0.022382695227861404, 0.0758843868970871, 0.061049479991197586, 0.027858631685376167, -0.03273090347647667, -0.030939610674977303, -0.0015398046234622598, 0.031071744859218597, 0.025162778794765472, 0.029292307794094086]},
{"question": "Why should I not #include <bits/stdc++.h>?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>I posted a question with my code whose only <code>#include</code> directive was the following:</p>\n\n<pre><code>#include &lt;bits/stdc++.h&gt;\n</code></pre>\n\n<p>My teacher told me to do this, but in the comments section I was informed that I shouldn't.</p>\n\n<p>Why?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>Including <code>&lt;bits/stdc++.h&gt;</code> appears to be an increasingly common thing to see on Stack Overflow, perhaps something newly added to a national curriculum in the current academic year.</p>\n\n<p>I imagine the advantages are vaguely given thus:</p>\n\n<ul>\n<li>You only need write one <code>#include</code> line</li>\n<li>You do not need to look up which standard header everything is in</li>\n</ul>\n\n<p>Unfortunately, this is a lazy hack, naming a GCC internal header directly instead of individual standard headers like <code>&lt;string&gt;</code>, <code>&lt;iostream&gt;</code> and <code>&lt;vector&gt;</code>. It ruins portability and fosters terrible habits.</p>\n\n<p>The disadvantages include:</p>\n\n<ul>\n<li>It will probably only work on that compiler</li>\n<li>You have no idea what it'll do when you use it, because its contents are not set by a standard</li>\n<li>Even just upgrading your compiler to its own next version may break your program</li>\n<li>Every single standard header must be parsed and compiled along with your source code, which is slow and results in a bulky executable under certain compilation settings</li>\n</ul>\n\n<p><strong>Don't do it!</strong></p>\n\n<hr>\n\n<p>More information:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/25337300/560648\">#include &lt;bits/stdc++.h&gt; with visual studio does not compile</a></li>\n<li><a href=\"https://stackoverflow.com/a/25311052/560648\">How does #include &lt;bits/stdc++.h&gt; work in C++?</a></li>\n</ul>\n\n<p>Example of why Quora is bad:</p>\n\n<ul>\n<li><a href=\"https://www.quora.com/Is-it-good-practice-to-use-include-bits-stdc++-h-in-programming-contests-instead-of-listing-a-lot-of-includes\" rel=\"noreferrer\">Is it good practice to use #include &lt;bits/stdc++.h&gt; in programming contests instead of listing a lot of includes?</a></li>\n</ul>\n    </div>", "total_vectors": [-0.01687205396592617, -0.05550943687558174, 0.01626954786479473, -0.06656845659017563, 0.05143982917070389, 0.012629430741071701, -0.031569793820381165, 0.01819809153676033, -0.05147983878850937, -0.037873659282922745, 0.02437545359134674, -0.036451686173677444, -0.06500979512929916, -0.0929407998919487, -0.0028686996083706617, 0.022954478859901428, -0.012947109527885914, 0.030095843598246574, -0.07164780795574188, -0.016404008492827415, -0.041200120002031326, 0.04375157877802849, 0.04113834351301193, 0.024841804057359695, -0.029486851766705513, 0.025069067254662514, -0.046219997107982635, -0.013422739692032337, 0.07815966010093689, -0.04839831218123436, 0.003295109374448657, -0.02192704938352108, 0.010252486914396286, -0.01790943741798401, 0.027093345299363136, -0.06881009042263031, 0.050410348922014236, 0.005198421888053417, -0.055892929434776306, -0.03300894796848297, 0.013239498250186443, 0.07569213211536407, 0.045806873589754105, 0.0494820736348629, 0.030471771955490112, -0.032859284430742264, -0.09312788397073746, -0.0688009038567543, -0.0008603837923146784, 0.009795431979000568, -0.010259363800287247, 0.1244698315858841, -0.05508793890476227, -0.03513666242361069, 0.0364738330245018, -0.04388485476374626, -0.07466497272253036, 0.011033957824110985, 0.09310999512672424, -0.048361070454120636, -0.04407951980829239, -0.031635019928216934, 0.036203429102897644, -0.10564778745174408, 0.003660480258986354, 0.009620847180485725, -0.10928329080343246, -0.03467479348182678, 0.005955986212939024, -0.0073347208090126514, -0.018978765234351158, -0.04962243512272835, 0.06821723282337189, -0.020294321700930595, 0.026508834213018417, 0.008213359862565994, 0.02117021009325981, -0.054120518267154694, -0.041760481894016266, 0.08152125775814056, 0.0077310288324952126, 0.0251939557492733, 0.07748647034168243, 0.03046870231628418, 0.0015937763964757323, -0.023277167230844498, 0.07129472494125366, 0.004833104554563761, -0.056632090359926224, 0.035467132925987244, 0.0021989706438034773, 0.008920234628021717, -0.009216821752488613, 0.05999711900949478, -0.024196729063987732, 0.05903351679444313, 0.0234850961714983, 0.097232885658741, -0.006239712703973055, -0.025704145431518555, 0.04037811979651451, 0.022717904299497604, 0.10849946737289429, 0.026112079620361328, -0.008486004546284676, 0.034529171884059906, -0.045579709112644196, -0.036550819873809814, -0.04039464518427849, 0.03345794603228569, 0.023841841146349907, -0.03163064271211624, -0.06648824363946915, 0.058089468628168106, -0.007059154566377401, 0.046036724001169205, 0.02826775051653385, -0.057139065116643906, 0.0032787977252155542, 0.005391641519963741, -0.0017619050340726972, 0.01668974570930004, -0.04993816837668419, -0.009415017440915108, -0.004621321801096201, -0.00896186288446188, -0.015761319547891617, 0.04241932928562164, -0.0708988606929779, -0.028579961508512497, -0.01043909415602684, -0.034142665565013885, -0.07543767243623734, -0.01069305557757616, -0.07349415868520737, 0.025814881548285484, 0.02636667713522911, 0.032909415662288666, 0.049871623516082764, 0.024520348757505417, -0.08051697909832001, -0.01512738037854433, 0.028754951432347298, 0.025463087484240532, -0.05059656500816345, -0.04008227586746216, 0.0008786636753939092, -0.014678130857646465, 0.01490828674286604, 0.008638815954327583, -0.01611645147204399, -0.02133297733962536, -0.0846124216914177, 0.0013895750744268298, 0.039122045040130615, -0.07043614238500595, 0.00406548660248518, 0.11199471354484558, -0.0065344697795808315, 0.02850595861673355, -0.02216888964176178, -0.012629820965230465, -0.055656857788562775, 0.020050037652254105, -0.0044586933217942715, -0.0027208358515053988, -0.01734151877462864, -0.026576347649097443, -0.0017305031651630998, -0.012636630795896053, -0.05138173699378967, -0.0633094385266304, -0.014595410786569118, 0.05168970674276352, -0.029608624055981636, -0.022390663623809814, 0.06181195750832558, -0.027461865916848183, 0.03538828343153, -0.036898523569107056, -0.016781046986579895, 0.0010389478411525488, -0.0816001370549202, 0.0477730855345726, 0.009822535328567028, 0.011969559825956821, -0.011460603214800358, 0.06599928438663483, 0.017250755801796913, 0.06460683047771454, 0.030436653643846512, 0.004159330856055021, -0.04592940956354141, -0.021417677402496338, -0.005567161366343498, -0.07920274883508682, 0.00921284593641758, -0.014203814789652824, -0.010049783624708652, -0.032255202531814575, -0.030372880399227142, -0.0055851927027106285, 0.037123583257198334, 0.1212228536605835, -0.015293306671082973, -0.013587919995188713, -0.03502999618649483, 0.030387241393327713, -0.0007303387974388897, 0.054877910763025284, -0.015987781807780266, 0.0587642528116703, 0.052557945251464844, 0.08393773436546326, -0.005823926068842411, 0.06424848735332489, -0.027075782418251038, -0.12487099319696426, -0.025205053389072418, -0.03156357258558273, -0.02941514365375042, -0.03316200524568558, -0.018417786806821823, 0.01767200231552124, 0.01969669759273529, 0.004766048397868872, -0.08579469472169876, 0.06272374838590622, 0.046710651367902756, 0.030067291110754013, 0.02860182709991932, 0.06354116648435593, 0.0511106476187706, 0.10334489494562149, 0.01136024110019207, -0.03797049820423126, 0.04453802481293678, 0.015456221997737885, -0.03029998205602169, -0.047754477709531784, -0.08123411983251572, 0.008841541595757008, -0.037953779101371765, 0.039467476308345795, 0.05926092341542244, 0.11031326651573181, 0.05591092258691788, 0.017826545983552933, 0.1230216920375824, -0.021836236119270325, -0.036889612674713135, 0.05029536038637161, 0.003005771664902568, 0.03262024000287056, 0.05740825831890106, 0.0009683719254098833, 0.021689333021640778, -0.046014394611120224, 0.033605508506298065, 0.024987749755382538, 0.004226732533425093, -0.0174710676074028, -0.12300899624824524, 0.03578391298651695, -0.00854644924402237, 0.005944077856838703, -0.020222296938300133, -0.07471763342618942, 0.05035271495580673, 0.02919747680425644, 0.012523142620921135, 0.03166346997022629, 0.012561353854835033, 0.01615344174206257, 0.004736565984785557, 0.016723748296499252, 0.04169268533587456, -0.005356533918529749, -0.07905463874340057, 0.045391228049993515, -0.048831161111593246, -0.016125818714499474, 0.031997792422771454, 0.03935074061155319, -0.02536923624575138, 0.030585572123527527, -0.05143235623836517, 0.059505000710487366, -0.004583168309181929, 0.039909493178129196, 0.013634216971695423, 0.10672139376401901, -0.0316564179956913, -0.04673023521900177, 0.0755733773112297, -0.014515538699924946, -0.009134127758443356, 0.021460523828864098, -0.014044457115232944, 0.026461420580744743, 0.005575951188802719, 0.0177101269364357, -0.11835041642189026, 0.0578293651342392, -0.01399258803576231, -0.00966700166463852, -0.00041729785152710974, -0.033112846314907074, -0.07615838199853897, -0.013165981508791447, -0.0206604041159153, 0.0013254759833216667, -0.05443665757775307, 0.03769443929195404, 0.025696244090795517, 0.012420966289937496, -0.02905002050101757, -0.0495837926864624, -0.030596328899264336, -0.003187977708876133, -0.03426267206668854, 0.0030353048350661993, 0.025866879150271416, -0.03721650689840317, 0.001687216921709478, 0.021443035453557968, 0.027473941445350647, 0.040749743580818176, 0.014799289405345917, 0.038249410688877106, -0.016085384413599968, -0.037218209356069565, 0.0365290641784668, 0.1029435321688652, -0.005646705161780119, 0.041169364005327225, 0.012710019946098328, -0.004994504153728485, 0.03119872696697712, -0.03869558498263359, -0.02221798337996006, -0.00431403610855341, 0.015139514580368996, 0.048609353601932526, -0.028661223128437996, 0.00513785146176815, -0.012486047111451626, -0.017571914941072464, -0.0010486594401299953, 0.0016660066321492195, 0.05261361598968506, -0.007305481471121311, -0.0062599689699709415, -0.0035837856121361256, 0.0034340275451540947, 0.024242017418146133, -0.10995826870203018, 0.01154871191829443, 0.05494702234864235, 0.04467690736055374, -0.049041397869586945, -0.0017615932738408446, 0.04063838720321655, -0.005471496377140284, -0.02539479359984398, -0.0234454944729805, -0.08805159479379654, 0.08185714483261108, 0.09175853431224823, 0.014554537832736969, 0.003262863727286458, -0.01122746616601944, 0.08555006980895996, 0.04700425639748573, -0.03605147823691368, -0.10498257726430893, 0.04270429164171219, -0.060460012406110764, 0.026838915422558784, -0.010859237983822823, 0.014445148408412933, -0.013480537571012974, -0.052323438227176666, 0.023031843826174736, 0.08793821930885315, 0.05251455307006836, -0.00755537673830986, 0.052624501287937164, 0.03199632465839386, 0.03343108668923378, 0.020538467913866043, 0.00610596826300025, -0.06622516363859177, -0.07280662655830383, 0.025059876963496208, -0.026287632063031197, -0.024048037827014923, 0.030752286314964294, -0.013117232359945774, 0.09279610216617584, 0.041449617594480515, -0.026373116299510002, 0.03629070147871971, 0.05099454149603844, 0.003318981733173132, -0.014442970044910908, 0.023755116388201714, -0.03505139425396919, -0.09694614261388779, -0.010456564836204052, -0.0931374728679657, 0.037837252020835876, -0.03715315833687782, -0.014801482670009136, 0.058259204030036926, -0.022078564390540123, 0.02604994736611843, 0.03066038154065609, 0.008246372453868389, -0.056035127490758896, -0.06864184141159058, -0.005252536851912737, 0.015340989455580711, -0.02619721181690693, -0.014595999382436275, -0.008518784306943417, 0.04992226883769035, 0.09759093075990677, 0.020813072100281715, -0.0032168012112379074, 0.048245664685964584, -0.00926609430462122, -0.042341627180576324, -0.03601851686835289, -0.06156018376350403, 0.03725774213671684, 0.0641174465417862, 0.031684696674346924, -0.00787024013698101, -0.025448385626077652, 0.004885238129645586, 0.0515558123588562, 0.07264066487550735, 0.0675133466720581, -0.008348798379302025, -0.042782317847013474, -0.021233247593045235, -0.0008192443056032062, 0.014841566793620586, -0.045391377061605453, 0.04663766548037529, -0.004766401834785938, 0.00888421107083559, 0.02591046504676342, 0.03304153308272362, -0.04495237395167351, -0.01290920004248619, -0.09677871316671371, 0.01455626729875803, -0.010643424466252327, -0.07091803103685379, 0.05483502149581909, -0.012072796933352947, -0.05069306492805481, 0.049359358847141266, -0.06594976782798767, 0.020657407119870186, -0.06140316277742386, -0.005850214511156082, -0.012568136677145958, -0.06377662718296051, 0.012520954012870789, -0.005669154692441225, -0.05030718445777893, -0.04251512512564659, -0.01656876690685749, 0.008135100826621056, 0.024150371551513672, 0.020550765097141266, 0.043286826461553574, 0.01633537746965885, -0.06736364960670471, -0.09950590133666992, 0.00959982629865408, -0.04774367809295654, -0.023901062086224556, -0.10251101106405258, 0.015644332394003868, -0.027818968519568443, -0.03534342721104622, 0.033422283828258514, 0.020541928708553314, 0.05485478788614273, 0.012997959740459919, 0.03674055635929108, 0.01330220140516758, -0.05003596469759941, 0.014405637979507446, -0.0039810785092413425, -0.011199899949133396, 0.009917791932821274, -0.011184249073266983, -0.04232831671833992, 0.09698070585727692, -0.009694202803075314, -0.004506424069404602, -0.06983038038015366, 0.039350301027297974, 0.03586164489388466, 0.03497522696852684, 0.013111882843077183, -0.05262201651930809]},
{"question": "What is object slicing?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>Someone mentioned it in the IRC as the slicing problem.</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>\"Slicing\" is where you assign an object of a derived class to an instance of a base class, thereby losing part of the information - some of it is \"sliced\" away.</p>\n\n<p>For example, </p>\n\n<pre><code>class A {\n   int foo;\n};\n\nclass B : public A {\n   int bar;\n};\n</code></pre>\n\n<p>So an object of type <code>B</code> has two data members, <code>foo</code> and <code>bar</code>.</p>\n\n<p>Then if you were to write this:</p>\n\n<pre><code>B b;\n\nA a = b;\n</code></pre>\n\n<p>Then the information in <code>b</code> about member <code>bar</code> is lost in <code>a</code>.</p>\n    </div>", "total_vectors": [0.01553043071180582, -0.00700418371707201, -0.02391381561756134, 0.04682594910264015, 0.03637344017624855, 0.07384293526411057, -9.98647665255703e-05, 0.031816888600587845, 0.03520319238305092, 0.07597054541110992, 0.06124832481145859, 0.019049152731895447, -0.013927110470831394, 0.08941514045000076, -0.02798326313495636, 0.08584874868392944, -0.0527556948363781, -0.05764412879943848, 0.014503784477710724, -0.04351319372653961, 0.06621690839529037, 0.03451601415872574, 0.003669828176498413, -0.011592227965593338, 0.03628102317452431, -0.04660998657345772, 0.03910322114825249, -0.026369482278823853, 0.012941130436956882, 0.0006865844479762018, -0.06287722289562225, 0.0779552161693573, -0.01621805503964424, -0.03863263502717018, 0.018727727234363556, 0.04706218093633652, -0.042140085250139236, 0.0681677907705307, -0.03126741945743561, -0.0685819536447525, 0.013824155554175377, 0.023082299157977104, -0.04298251494765282, 0.018979733809828758, -0.055172406136989594, 0.02084200643002987, -0.019928116351366043, -0.03910527378320694, 0.029974760487675667, -0.055017028003931046, 0.03242963179945946, 0.09782197326421738, -0.02372540719807148, -0.014954241923987865, 0.04730309545993805, -0.007422768976539373, 0.0397835336625576, 0.017336854711174965, 0.010009258054196835, -0.07091039419174194, -0.05688856169581413, 0.029905207455158234, 0.02899930626153946, -0.03907221555709839, 0.001347750541754067, -0.06132988631725311, -0.029477227479219437, -0.009816005825996399, -0.009598948061466217, 0.018966659903526306, -0.03500725328922272, 0.02446286380290985, 0.07120868563652039, -0.04976493492722511, -0.06657487899065018, -0.023099472746253014, -0.008958601392805576, -0.03373677283525467, -0.03842967003583908, 0.069724440574646, -0.07625479996204376, -0.0265946127474308, -0.016405543312430382, -0.002460209187120199, 0.08877052366733551, -0.0022530423011630774, -0.00128075887914747, -0.0036950635258108377, -0.07389529794454575, -0.058381661772727966, 0.0024559996090829372, 0.05777721107006073, -0.017144059762358665, 0.08957785367965698, -0.008909465745091438, -0.03642475605010986, -0.02808435820043087, 0.05970805510878563, -0.0376460887491703, -0.06718906760215759, 0.019435809925198555, 0.007224711123853922, -0.005626941565424204, -0.053923554718494415, -0.027857907116413116, -0.0015352701302617788, -0.036764584481716156, -0.011787612922489643, -0.01660739816725254, 0.042072854936122894, -0.018842149525880814, -0.08142272382974625, -0.045437898486852646, -0.009138941764831543, 0.048686426132917404, 0.06537684053182602, 0.022296752780675888, -0.033161718398332596, 0.019047783687710762, -0.008588329888880253, 0.0005607339553534985, 0.027736380696296692, -0.016400832682847977, -0.02346368134021759, -0.06372460722923279, 0.042496081441640854, -0.03481103107333183, 0.019917283207178116, 0.08389268815517426, 0.07594744116067886, 0.0016307953046634793, 0.08184164017438889, 0.01816178858280182, -0.0823572501540184, 0.02238747663795948, 0.008704512380063534, 0.0019330292707309127, -0.07687997072935104, -0.05484133958816528, -0.02001631073653698, 0.03279577195644379, -0.053573235869407654, 0.016322573646903038, -0.04459121450781822, -0.03239158168435097, -0.09496069699525833, 0.09586983919143677, 0.05100487917661667, -0.012287103570997715, -0.045980896800756454, -0.06127628684043884, -0.024732965975999832, 0.003743348177522421, 0.05681278929114342, -0.03553391993045807, -0.0268102940171957, 0.044003747403621674, 0.05725329369306564, 0.07450326532125473, 0.060694437474012375, 0.03621817007660866, 0.029485953971743584, -0.012462194077670574, -0.028524475172162056, -0.006114782765507698, -0.0016518209595233202, -0.012309547513723373, -0.0607341006398201, 0.006514808628708124, -0.04622408375144005, -0.03069313056766987, -0.033008743077516556, 0.027419205754995346, 0.008082657121121883, -0.04766860976815224, -0.041091933846473694, 0.017506781965494156, 0.06669806689023972, 0.0749082863330841, 0.018980544060468674, 0.07112787663936615, 0.0179255623370409, -0.03403790295124054, -0.034131210297346115, -0.02672208473086357, -0.016280055046081543, -0.017022421583533287, 0.08596890419721603, -0.014272916130721569, -0.0040670945309102535, 0.07773665338754654, 0.05107764154672623, 0.04028832167387009, -0.019715895876288414, -0.013620952144265175, 0.020341407507658005, -0.047609806060791016, 0.08551553636789322, 0.01182614266872406, 0.07447876781225204, -0.048696428537368774, 0.012877905741333961, -0.016530457884073257, -0.015741238370537758, 0.04015800729393959, 0.03333698958158493, 0.03249207139015198, 0.018293093889951706, -0.020269298925995827, -0.007816660217940807, -0.03847656399011612, 0.03423613682389259, 0.0030023478902876377, 0.05635607987642288, 0.029908088967204094, 0.020448915660381317, -0.0364290289580822, -0.09269175678491592, -0.03511515259742737, 0.08672604709863663, 0.03228148818016052, 0.003876602742820978, -0.041672930121421814, 0.02897757478058338, -0.02061883732676506, 0.012261077761650085, -0.03076569363474846, 0.04001208767294884, -0.0012407733593136072, -0.04167426377534866, 0.011296043172478676, 0.09210114926099777, -0.03300071880221367, -0.07998189330101013, 0.09197243303060532, -0.05149927735328674, 0.06215696781873703, -0.05887521058320999, -0.04770870879292488, 0.07738416641950607, -0.03845984488725662, -0.00274110259488225, 0.03912636265158653, -0.015449733473360538, 0.06316246092319489, 0.09419075399637222, 0.040618136525154114, 0.06033610552549362, 0.0978424996137619, 0.04973725602030754, -0.0505475290119648, 0.03979228436946869, -0.002125201281160116, -0.03461804613471031, 0.050819288939237595, 0.07301725447177887, -0.035143885761499405, -0.05351739376783371, 0.08261633664369583, 0.06353186070919037, -0.04884398728609085, 0.05710586532950401, 0.006964532192796469, 0.0556894950568676, -0.014911102131009102, 0.03357243537902832, 0.002572159981355071, -0.042002998292446136, 0.03704099729657173, 0.04433760046958923, 0.008340069092810154, -0.049548543989658356, -0.048677120357751846, 0.06439493596553802, 0.03125029057264328, 0.05084347352385521, 0.002734188223257661, -0.014819835312664509, 0.07396537065505981, 0.011300154961645603, 0.05950351431965828, -0.03795243799686432, -0.0536644347012043, -0.008354077115654945, -0.012912482023239136, -0.05525042489171028, -0.03992559015750885, 0.014393933117389679, -0.04388173669576645, -0.052056778222322464, 0.00891267042607069, -0.028818804770708084, 0.03574538975954056, -0.052925195544958115, -0.028633007779717445, 0.06479492783546448, -0.0682574063539505, -0.02494504116475582, -0.02932843007147312, 0.03229435160756111, 0.03807676583528519, 0.005606039427220821, -0.02931555174291134, -0.0240896325558424, -0.04829910025000572, -0.026325732469558716, 0.04228002205491066, -0.0472094751894474, -0.004962285980582237, 0.03130815178155899, 0.020699523389339447, 0.015186275355517864, 0.03131274878978729, -0.046472884714603424, -0.060831598937511444, 0.055137999355793, 0.023321570828557014, 0.024254733696579933, -0.05193711444735527, 0.06964945048093796, 0.05725110322237015, 0.01731216348707676, -0.031061261892318726, -0.0028163967654109, -0.026434866711497307, 0.021273495629429817, 0.008633015677332878, -0.037948206067085266, -0.00099116750061512, 0.012434108182787895, 0.05425393581390381, -0.002173531102016568, -0.005799496546387672, -0.023500852286815643, -0.07230453938245773, -0.0749589130282402, 0.0167782474309206, -0.03987117484211922, 0.03444480523467064, -0.027129417285323143, 0.013386798091232777, -0.03587949648499489, 0.0016854503192007542, 0.020898928865790367, -0.09338878840208054, -0.025288477540016174, 0.036886174231767654, -0.028837841004133224, -0.02937508560717106, 0.047002773731946945, -0.0025646311696618795, 0.03531210869550705, -0.06626233458518982, -0.06097443029284477, -0.04709756746888161, -0.03844315931200981, -0.09382453560829163, -0.0008712101844139397, -0.027703292667865753, 0.014999452978372574, 0.020682265982031822, 0.021808139979839325, -0.08706967532634735, 0.04161593317985535, 0.003376404056325555, -0.034966666251420975, -0.07004380226135254, -0.05696302279829979, 0.021616417914628983, 0.03371545672416687, -0.00960683822631836, -0.05592526122927666, 0.05969727784395218, 0.030159426853060722, -0.05513625219464302, -0.06766322255134583, 0.056030336767435074, -0.017589349299669266, 0.037206366658210754, 0.029241126030683517, 0.024583376944065094, 0.020432794466614723, 0.041073642671108246, 0.03440580889582634, 0.05046156048774719, -0.04788445681333542, 0.04115534946322441, 0.06122385337948799, 0.0350944884121418, 0.03205748274922371, 0.02542301081120968, -0.019910037517547607, -0.050902362912893295, -0.003130186116322875, -0.04534103348851204, -0.032476574182510376, -0.06812797486782074, -0.013140405528247356, -0.022777602076530457, 0.05849885568022728, -0.060654107481241226, 0.02899838052690029, 0.002194395987316966, -0.017483895644545555, 0.04233753681182861, -0.007701417431235313, -0.07726693898439407, -0.05760056525468826, 0.0035396006423979998, 0.014241831377148628, -0.09316445142030716, -0.0015525196213275194, -0.060256227850914, 0.05059933662414551, -0.015239466913044453, 0.016828110441565514, -0.010797485709190369, 0.049641504883766174, 0.08270597457885742, 0.045527976006269455, 0.031968653202056885, -0.05395115166902542, -0.007464856840670109, 0.0204978846013546, -0.028581755235791206, -0.025030355900526047, -0.030058421194553375, 0.0529736764729023, 0.007414132822304964, 0.022164538502693176, -0.015272263437509537, 0.06990721821784973, 0.05774448812007904, -0.002766382647678256, -0.02904164418578148, 0.041903361678123474, 0.05748940259218216, 0.02401795983314514, 0.04198978468775749, 0.03141098469495773, 0.04182824492454529, -0.0722053274512291, -0.0435832180082798, -0.025499900802969933, -0.013372465968132019, 0.07195773720741272, 0.06671379506587982, -0.012091338634490967, -0.017221130430698395, -0.04043164849281311, 0.012368469499051571, 0.0027260533533990383, 0.08427408337593079, 0.040372926741838455, 0.05094990134239197, -0.07527605444192886, 0.030438680201768875, 0.033585239201784134, -0.049214527010917664, 0.03406405821442604, -0.013814530335366726, 0.04660521447658539, 0.013071486726403236, -0.004080409184098244, -0.027494702488183975, -0.09442593902349472, -0.03400091826915741, -0.08750799298286438, -0.005646223202347755, 0.050491973757743835, 0.05704005807638168, 0.06653345376253128, -0.03938363865017891, -0.07751312106847763, 0.04132462292909622, -0.0575091689825058, 0.06276979297399521, 0.05032287538051605, -0.04156413674354553, -0.09625256061553955, -0.060132965445518494, -0.04348837584257126, 0.06067280098795891, -0.014292536303400993, -0.02290981262922287, 0.01805763691663742, -0.08624640852212906, -0.009316300973296165, -0.056952860206365585, -0.01575567200779915, -0.016899261623620987, 0.03936842456459999, 0.028162183240056038, -0.03280545771121979, 0.014128097333014011, -0.016274889931082726, 0.06191975995898247, -0.038469843566417694, -0.004257171414792538, -0.017545092850923538, -0.01736881025135517, 0.0033288346603512764, 0.03321334347128868, 0.030540604144334793, 0.050357576459646225, -0.020466331392526627, -0.02197062410414219, -0.012137235142290592, -0.06362064927816391, -0.0073803868144750595, 0.039882492274045944, -0.058269429951906204]},
{"question": "Why are these constructs using pre and post-increment undefined behavior?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\n   int i = 0;\n   i = i++ + ++i;\n   printf(\"%d\\n\", i); // 3\n\n   i = 1;\n   i = (i++);\n   printf(\"%d\\n\", i); // 2 Should be 1, no ?\n\n   volatile int u = 0;\n   u = u++ + ++u;\n   printf(\"%d\\n\", u); // 1\n\n   u = 1;\n   u = (u++);\n   printf(\"%d\\n\", u); // 2 Should also be one, no ?\n\n   register int v = 0;\n   v = v++ + ++v;\n   printf(\"%d\\n\", v); // 3 (Should be the same as u ?)\n\n   int w = 0;\n   printf(\"%d %d\\n\", ++w, w); // shouldn't this print 1 1\n\n   int x[2] = { 5, 8 }, y = 0;\n   x[y] = y ++;\n   printf(\"%d %d\\n\", x[0], x[1]); // shouldn't this print 0 8? or 5 0?\n}\n</code></pre>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>C has the concept of undefined behavior, i.e. some language constructs are syntactically valid but you can't predict the behavior when the code is run.</p>\n\n<p>As far as I know, the standard doesn't explicitly say <em>why</em> the concept of undefined behavior exists. In my mind, it's simply because the language designers wanted there to be some leeway in the semantics, instead of i.e. requiring that all implementations handle integer overflow in the exact same way, which would very likely impose serious performance costs, they just left the behavior undefined so that if you write code that causes integer overflow, anything can happen.</p>\n\n<p>So, with that in mind, why are these \"issues\"? The language clearly says that certain things lead to <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"noreferrer\">undefined behavior</a>. There is no problem, there is no \"should\" involved. If the undefined behavior changes when one of the involved variables is declared <code>volatile</code>, that doesn't prove or change anything. It is <em>undefined</em>; you cannot reason about the behavior.</p>\n\n<p>Your most interesting-looking example, the one with</p>\n\n<pre><code>u = (u++);\n</code></pre>\n\n<p>is a text-book example of undefined behavior (see Wikipedia's entry on <a href=\"http://en.wikipedia.org/wiki/Sequence_point\" rel=\"noreferrer\">sequence points</a>).</p>\n    </div>", "total_vectors": [0.052077971398830414, -0.029928555712103844, 0.01956065557897091, -0.026418160647153854, 0.002886722097173333, -0.026219375431537628, 0.03522852808237076, 0.02408180572092533, -0.08510772138834, 0.06834505498409271, -0.008586660958826542, 0.000791264814324677, 0.026076871901750565, -0.08366129547357559, 0.04007358476519585, 0.09192550927400589, 0.006815459579229355, 0.018069589510560036, 0.011888206005096436, -0.001197803532704711, 0.051130399107933044, 0.03639235347509384, 0.009937511757016182, 0.021930500864982605, 0.004944754298776388, -0.03397303447127342, 0.05913543328642845, -0.010742663405835629, 0.04703366011381149, -0.026594964787364006, -0.04403785616159439, 0.05402419716119766, -0.05891581252217293, -0.01684773527085781, -0.024889815598726273, 0.04072416573762894, 0.022989775985479355, -0.024277983233332634, 0.0166154894977808, 0.00942894909530878, -0.01287724170833826, 0.04636279493570328, -0.007017657160758972, -0.05399099364876747, 0.06553495675325394, 0.0741434097290039, -0.03277011960744858, 0.0005001204553991556, -0.04503270611166954, -0.03451498970389366, 0.02692544274032116, 0.09284516423940659, 0.004305578768253326, -0.008409470319747925, 0.035595834255218506, -0.03164413943886757, -0.030959028750658035, -0.02682909555733204, 0.05448932573199272, -0.0003769241156987846, -0.008873220533132553, 0.041768595576286316, -0.002621696563437581, -0.013630648143589497, -0.0039968607015907764, -0.09025523066520691, -0.05181320011615753, -0.0023281206376850605, 0.02670704387128353, 0.06399255990982056, 0.026385318487882614, -0.049336981028318405, -0.020235052332282066, 0.03634346276521683, -0.020676031708717346, 0.04529687389731407, -0.06804344803094864, 0.02633065916597843, -0.03495904058218002, 0.07839725911617279, -0.05941455066204071, 0.0044800895266234875, 0.014800751581788063, -0.021403668448328972, 0.08466099202632904, 0.0014026365242898464, 0.07679912447929382, -0.007898354902863503, -0.08589009940624237, 0.061421073973178864, -0.02070518769323826, 0.004202359821647406, 0.0542064867913723, 0.003925792872905731, -0.03954308107495308, -0.007393788546323776, 0.04557224363088608, 0.04801487922668457, -0.005556663032621145, -0.07139400392770767, -0.006911208387464285, 0.06476272642612457, 0.005921715870499611, 0.002701172372326255, 0.020658014342188835, 0.0186005886644125, -0.08232782781124115, -0.025570716708898544, -0.05274442955851555, 0.01716786064207554, 0.039160825312137604, -0.03693452104926109, 0.00778227997943759, -0.07285898923873901, 0.023215707391500473, -0.010875594802200794, -0.013696492649614811, 0.007117471657693386, 0.04364198073744774, 0.0378258153796196, -0.0682561844587326, 0.04882662370800972, 0.024355554953217506, 0.02055732160806656, 0.018953748047351837, -0.01774236373603344, -0.06762150675058365, -0.017106855288147926, 0.035219479352235794, -0.01355865690857172, 0.034032128751277924, 0.007166652474552393, -0.0030059590935707092, -0.06809087097644806, -0.053032003343105316, -0.004923603497445583, -0.014857916161417961, 0.005051573738455772, -0.07405886054039001, 0.003612288972362876, 0.027058105915784836, 0.026423687115311623, -0.035608891397714615, 0.04408800229430199, -0.0673985555768013, -0.09163961559534073, -0.016147037968039513, 0.047164443880319595, -0.03972255066037178, -0.021175740286707878, 0.02579190395772457, -0.0563574880361557, -0.04740440100431442, 0.05499152094125748, -0.020357904955744743, -0.0002472982741892338, -0.03688139095902443, -0.014610362239181995, 0.016613764688372612, 0.03422833979129791, 0.05344618856906891, 0.06127036735415459, -0.018669916316866875, 0.058112289756536484, 0.05164305493235588, 0.06374568492174149, -0.02861648052930832, -0.05988692492246628, 0.0014794545713812113, -0.05120397359132767, 0.0104192104190588, -0.055579524487257004, 0.04944150522351265, 0.013186122290790081, -0.017812682315707207, 0.024378135800361633, -0.024872340261936188, 0.06742469221353531, 0.059569794684648514, 0.017826257273554802, 0.060189176350831985, -0.019493872299790382, -0.07542166858911514, 0.06383080035448074, -0.029463807120919228, 0.0522114597260952, 0.03148402273654938, 0.07005519419908524, -0.009755817241966724, -0.004377306438982487, 0.09004179388284683, 0.05594317987561226, 0.03659500926733017, -0.01884915493428707, 0.018355151638388634, 0.007845581509172916, 0.014142750762403011, 0.08929212391376495, 0.035234484821558, 0.07489380240440369, -0.05994801968336105, -0.007438238710165024, -0.0645897164940834, -0.06112924590706825, -0.008988581597805023, 0.0035171005874872208, -0.020935025066137314, 0.0850154459476471, -0.08458143472671509, 0.05023234710097313, -0.06090177223086357, 0.0025857454165816307, -0.05840250849723816, 0.007510434370487928, 0.05393623560667038, -0.050321467220783234, -0.02784726582467556, -0.09298889338970184, -0.05517405644059181, 0.01515040174126625, -0.059644922614097595, -0.05582336708903313, -0.03683552145957947, -0.02699439600110054, -0.033511675894260406, -0.0013565807603299618, -0.037390973418951035, -0.006919011473655701, 0.012255987152457237, 0.02462119050323963, 0.03153244033455849, 0.05702861770987511, 0.03330523148179054, -0.035284578800201416, 0.07105090469121933, -0.055767446756362915, 0.06926421821117401, -0.0728328749537468, 0.036186572164297104, -0.07945612818002701, -0.04333321377635002, -0.028860364109277725, -0.041422609239816666, 0.04796541854739189, -0.0368913896381855, 0.06832272559404373, -0.01304834708571434, -0.03710588812828064, 0.08982854336500168, 0.0625835433602333, -0.08485355973243713, 0.05160228908061981, -0.005696407984942198, 0.04331279546022415, 0.09011439979076385, -0.034041520208120346, -0.051837410777807236, -0.03764676675200462, 0.020912369713187218, 0.02877357229590416, -0.051533401012420654, -0.04365487024188042, -0.09056840091943741, -0.08068320155143738, 0.0049710702151060104, -0.0051396614871919155, -0.04091072827577591, -0.0061811120249331, 0.05902567505836487, -0.013436808250844479, -0.015608466230332851, 0.04953693225979805, 0.009479641914367676, 0.0083039915189147, 0.01619897224009037, 0.019312962889671326, -0.010791082866489887, 0.04190807044506073, 0.01743854023516178, 0.012179005891084671, 0.010212775319814682, -0.06368298828601837, 0.044849690049886703, -0.03456372022628784, 0.003031156724318862, -0.023830406367778778, -0.0036490056663751602, 0.06388895958662033, 0.015733661130070686, -0.019941020756959915, -0.020342811942100525, -0.008949424140155315, 0.004276685416698456, -0.008596327155828476, -0.08023609220981598, 0.01368768885731697, 0.012275994755327702, -0.06430764496326447, 0.02423473447561264, -0.03710323944687843, 0.030318202450871468, 0.00872195977717638, -0.07893297076225281, 0.054711807519197464, -0.08687455207109451, 0.008325044065713882, -0.06156091392040253, -0.03232827037572861, -0.012140700593590736, -0.06557422131299973, -0.03205658867955208, 0.06491785496473312, 0.021739933639764786, 0.017858033999800682, -0.060632143169641495, 0.07763584703207016, 0.006165290717035532, 0.03541938588023186, 0.08631503582000732, -0.05231590196490288, -0.057174887508153915, -0.018171120434999466, 0.058374643325805664, 0.03603930026292801, 0.053096674382686615, -0.07497707009315491, 0.0643698051571846, 0.00748816505074501, 0.027039574459195137, -0.02290184237062931, -0.013474969193339348, -0.06067981198430061, 0.008019975386559963, 0.06532681733369827, -0.040380656719207764, -0.07569283246994019, -0.0032349491957575083, -0.007518583443015814, 0.02396720089018345, 0.01562689058482647, -0.028806595131754875, -0.016658315435051918, -0.03553913161158562, 0.033495478332042694, -0.09193897992372513, 0.04149860143661499, 0.037600547075271606, -0.04654230177402496, 0.012815264984965324, -0.010900410823523998, -0.011307775042951107, -0.022213537245988846, -0.013324767351150513, 0.002392648719251156, -0.013553298078477383, 0.06136862561106682, -0.09056365489959717, -0.0714121013879776, -0.001349248574115336, -0.041102614253759384, -0.060740381479263306, -0.02655527926981449, -0.05932619050145149, -0.012045243754982948, 0.02589307725429535, 0.02672235667705536, -0.05224400386214256, 0.01222185604274273, 0.07916174083948135, -0.04106101021170616, 0.02135627716779709, 0.05162516608834267, 0.07650133222341537, 0.036288656294345856, -0.008407828398048878, -0.08466073870658875, 0.011837548576295376, 0.01222157385200262, 0.01673111878335476, -0.003682477166876197, 0.044020794332027435, 0.05781831219792366, -0.034313734620809555, 0.011029986664652824, 0.04106445237994194, -0.0031957172323018312, 0.07593918591737747, 0.003311574226245284, -0.028636878356337547, 0.04515514522790909, 0.08719285577535629, 0.04221322014927864, -0.06605010479688644, -0.06984497606754303, 0.03159116581082344, -0.06433087587356567, 0.0015668176347389817, -0.01436445489525795, -0.050385694950819016, 0.07577617466449738, 0.04927018657326698, -0.02359849587082863, 0.0557665191590786, -0.06625861674547195, 0.04222147539258003, 0.00463249022141099, -0.05257834494113922, 0.0061836824752390385, -0.07775845378637314, 0.0439952127635479, -0.06988655775785446, -0.04033626616001129, 0.013620732352137566, 0.02722679264843464, -0.0103056775406003, 0.045896708965301514, -0.05096504092216492, 0.0005817307392135262, 0.007646669168025255, 0.031171118840575218, -0.004713546950370073, 0.007149499375373125, -0.00034706812584772706, -0.010614598169922829, 0.06360279023647308, -0.056645289063453674, 0.0015169087564572692, 0.018307490274310112, 0.06616680324077606, 0.048863835632801056, -0.0048764897510409355, -0.03172951564192772, -0.029586587101221085, 0.016739394515752792, 0.03741993010044098, 0.035820960998535156, 0.02943935990333557, 0.08227425068616867, 0.022005686536431313, 0.037734512239694595, 0.0396285206079483, 0.05586102604866028, 0.047235745936632156, 0.010257035493850708, -0.016861403360962868, 0.05496954545378685, 0.022531917318701744, 0.01712898723781109, -0.05167268589138985, 0.04775375500321388, 0.0063764858059585094, 0.05734996125102043, 0.07980573922395706, -0.0004758888971991837, -0.019597170874476433, -0.08697366714477539, 0.06384100019931793, -0.08844273537397385, -0.06418298929929733, -0.053339745849370956, -0.022606512531638145, 0.01678897812962532, -0.0004579430096782744, 0.04391888156533241, 0.025002021342515945, -0.0786171704530716, 0.011293288320302963, -0.04329372197389603, -0.0194703321903944, -0.015183583833277225, -0.04244779422879219, 0.0053563774563372135, 0.05678563937544823, -0.02134634554386139, -0.035117655992507935, 0.007678580936044455, -0.05480540543794632, -0.035136885941028595, -0.07748465985059738, -0.009273899719119072, 0.04390951618552208, -0.03334560990333557, -0.010567187331616879, -0.06527604162693024, 0.0010968695860356092, 0.07979999482631683, -0.08952034264802933, 0.0096548181027174, -0.01289224624633789, 0.02480253390967846, -0.04913574829697609, 0.0004236218228470534, 0.0392749197781086, 0.030061718076467514, 0.0052404566667973995, 0.02414475381374359, 0.036102570593357086, 0.041787851601839066, 0.07494837790727615, -0.01781933382153511, 0.04284607619047165, 0.028530539944767952, -0.05195382982492447, 0.08380023390054703, 0.0863589197397232, 0.01181730069220066, 0.020782986655831337, -0.04942968860268593, 0.02458525449037552, 0.054388366639614105, 0.030811570584774017, 0.005389619618654251]},
{"question": "PHP code is not being executed, instead code shows on the page", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>I'm trying to execute some PHP code on a project (using Dreamweaver) but the code isn't being run.</p>\n\n<p>When I check the source code, the PHP code appears as HTML tags (I can see it in the source code). Apache is running properly (I'm working with XAMPP), the PHP pages are being opened properly but the PHP code isn't being executed.</p>\n\n<p>Does someone have a suggestion about what is happening?</p>\n\n<p><strong>Note:</strong> The file is already named as <code>filename.php</code></p>\n\n<p><strong>Edit:</strong>\nThe Code..:</p>\n\n<pre><code>&lt;?\ninclude_once(\"/code/configs.php\");\n?&gt;\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/FVVLX.png\" alt=\"The print\"></p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>Sounds like there is something wrong with your configuration, here are a few things you can check:</p>\n\n<ol>\n<li><p>Make sure that PHP is installed and running correctly. This may sound silly, but you never know. An easy way to check is to run <code>php -v</code> from a command line and see if returns version information or any errors.</p></li>\n<li><p>Make sure that the PHP module is listed <strong>and uncommented</strong> inside of your Apache's httpd.conf This should be something like <code>LoadModule php5_module \"c:/php/php5apache2_2.dll\"</code> in the file. Search for <code>LoadModule php</code>, and make sure that there is no comment (<code>;</code>) in front of it.</p></li>\n<li><p>Make sure that Apache's httpd.conf file has the PHP MIME type in it. This should be something like <code>AddType application/x-httpd-php .php</code>. This tells Apache to run <code>.php</code> files as PHP. Search for AddType, and then make sure there is an entry for PHP, <strong>and that it is uncommented</strong>.</p></li>\n<li><p>Make sure your file has the <code>.php</code> extension on it, or whichever extension specified in the MIME definition in point #3, otherwise it will not be executed as PHP.</p></li>\n<li><p>Make sure you are not using <a href=\"http://php.net/manual/en/language.basic-syntax.phptags.php\" rel=\"noreferrer\">short tags</a> in the PHP file (<code>&lt;?</code>), these are  <em>not enabled on all servers</em> by default and their use is discouraged. Use <code>&lt;?php</code> instead (or <a href=\"http://php.net/manual/en/ini.core.php#ini.short-open-tag\" rel=\"noreferrer\">enable short tags in your php.ini</a> with <code>short_open_tag=On</code> if you have code that relies on them). </p></li>\n<li><p>Make sure you are accessing your file over your webserver using an URL like <code>http://localhost/file.php</code> not via local file access <code>file://localhost/www/file.php</code></p></li>\n</ol>\n\n<p>And lastly check the <a href=\"http://php.net/install\" rel=\"noreferrer\">PHP manual for further setup tips</a>.</p>\n    </div>", "total_vectors": [-0.06009786203503609, 0.04043872654438019, 0.03104814514517784, 0.024406474083662033, 0.018109533935785294, -0.051566947251558304, -0.06832719594240189, -0.008923630230128765, -0.03184150904417038, -0.026635056361556053, 0.007951794192194939, -0.05317675322294235, 0.03973061963915825, 0.06304498016834259, 0.054658543318510056, 0.0925869569182396, 0.020923521369695663, -0.008024695329368114, -0.04145415872335434, 0.030226970091462135, 0.058487165719270706, 0.024123847484588623, 0.03600649535655975, -0.04166071489453316, 0.06340036541223526, 0.024901455268263817, 0.0016448360402137041, 0.0477292463183403, 0.023213762789964676, -0.033998433500528336, 0.05542640760540962, 0.06766510754823685, 0.05087564140558243, 0.08469627052545547, 0.0393647737801075, 0.014988658018410206, -0.057122841477394104, -0.04292329400777817, -0.0012074725236743689, 0.03932776302099228, 0.004715740215033293, -0.04477182775735855, 0.04792939871549606, 0.05581982433795929, 0.09253475069999695, -0.009929753839969635, -0.04747289419174194, -0.0009339334210380912, -0.015549717471003532, -0.0774943009018898, 0.07526328414678574, -0.026866968721151352, 0.05396602302789688, 0.05137687921524048, -0.04062695428729057, 0.012927374802529812, -0.056922364979982376, 0.006777001079171896, 0.05291590467095375, 0.03500189632177353, -0.002113867085427046, 0.0155149782076478, -0.005419343244284391, -0.05676446110010147, -0.04727085307240486, -0.07997540384531021, -0.05958586558699608, 0.0002783140225801617, -0.021949121728539467, -0.02414378710091114, -0.06306654959917068, 0.012551923282444477, 0.015032653696835041, -0.05833866074681282, 0.045248035341501236, -0.010387974791228771, 0.0012401784770190716, 0.008296370506286621, -0.008436898700892925, 0.029956014826893806, 0.08328758180141449, 0.00645001046359539, 0.04315650835633278, 0.012137106619775295, 0.08724195510149002, 0.053822681307792664, -0.007837902754545212, 0.04750969633460045, -0.05710664018988609, -0.011386589147150517, -0.0496571846306324, -0.057732291519641876, -0.00775430491194129, 0.04496479406952858, 0.08225251734256744, 0.015340827405452728, 0.050682730972766876, 0.014192438684403896, -0.016056763008236885, -0.09110339730978012, 0.043817535042762756, -0.03456079959869385, -0.034312114119529724, -0.030369941145181656, 0.0635761097073555, 0.03559848293662071, 0.09217288345098495, -0.03155122697353363, -0.0723571628332138, -0.02500499226152897, -0.0710359588265419, 0.0033265140373259783, -0.029539143666625023, 0.043659504503011703, 0.01974194124341011, 0.016591431573033333, -0.02613929472863674, 0.05513027682900429, -0.015425967052578926, 0.04076205566525459, -0.05075925216078758, 0.04072686284780502, 0.031113822013139725, 0.001917896093800664, 0.011029385961592197, -0.032393064349889755, 0.017640316858887672, -0.010264832526445389, 0.07203011959791183, 0.04337083175778389, 0.047092169523239136, -0.026378009468317032, -0.04281294718384743, 0.05780358612537384, 0.025326324626803398, -0.007415901869535446, -0.03707904741168022, 0.047343574464321136, -0.024266764521598816, -0.007161871530115604, 0.0472506582736969, -0.004428827669471502, 0.009590222500264645, 0.03053455799818039, 0.03626364469528198, -0.09257056564092636, -0.06399893015623093, -0.04636314883828163, 0.04363809525966644, -0.0030486006289720535, 0.030052106827497482, -0.04545636102557182, 0.08175112307071686, -0.05550867319107056, 0.01001745741814375, 0.05284592881798744, 0.011177103035151958, -0.07236436754465103, 0.06088902801275253, 0.03436967357993126, -0.0075212582014501095, 0.0009893398964777589, -0.028174778446555138, -0.059641335159540176, 0.08636093884706497, -0.03422069549560547, -0.05737476050853729, -0.02005842514336109, 0.031131882220506668, 0.038568608462810516, -0.06169813871383667, -0.09036607295274734, 0.008373147808015347, 0.015721049159765244, -0.043527305126190186, -0.003281260374933481, -0.016458088532090187, 0.035079218447208405, -0.003508044173941016, -0.06062675639986992, -0.015837889164686203, -0.05049311742186546, -0.06527849286794662, -0.039729196578264236, 0.0353938564658165, -0.010260854847729206, -0.016160758212208748, 0.08801932632923126, 0.05559413507580757, 0.013487661257386208, 0.08160354942083359, -0.007608170621097088, -0.03020157851278782, -0.07087992876768112, -0.0005598985590040684, -0.014262933284044266, -0.01524147018790245, 0.09258677065372467, -0.018508464097976685, 0.06882843375205994, -0.03978985920548439, -0.030095119029283524, -0.09232653677463531, 0.036885816603899, 0.04409480839967728, -0.020231662318110466, -0.05740462243556976, 0.0003711649915203452, -0.09042336046695709, 0.019870372489094734, -0.03878706693649292, 0.032371748238801956, -0.036658402532339096, -0.06353457272052765, 0.008787145838141441, -0.010293607600033283, 0.02448267675936222, -0.040975771844387054, 0.0388624481856823, -0.029019899666309357, 0.005000363104045391, 0.043522391468286514, -0.0062295617535710335, -0.04791944473981857, 0.030212515965104103, 0.0308305025100708, 0.00645358394831419, 0.0023573236539959908, 0.0433504693210125, -0.005551083013415337, -0.0378241166472435, -0.04210744425654411, 0.08254589885473251, -0.06252767890691757, -0.015863759443163872, -0.08591442555189133, 0.08184843510389328, -0.039252154529094696, 0.01050456240773201, 0.022168684750795364, 0.040849290788173676, 0.006536720786243677, -0.01757204346358776, -0.0826847180724144, 0.02014979161322117, 0.07894229888916016, 0.02909654937684536, -0.03528851270675659, 0.04108727350831032, 0.08815853297710419, -0.09089849144220352, 0.006535291206091642, -0.008611698634922504, -0.011159185320138931, 0.04123226925730705, -0.07643531262874603, -0.042822930961847305, -0.06127625331282616, 0.048764266073703766, 0.03677588328719139, -0.003287056228145957, -0.06712257862091064, -0.05056622251868248, 0.030140453949570656, -0.0011268513044342399, 0.020575160160660744, -0.034703295677900314, 0.07277330756187439, 0.0528784804046154, -0.016362521797418594, -0.06514596939086914, 0.01955413445830345, 0.048169128596782684, -0.041834041476249695, -0.01974695362150669, 0.026336438953876495, 0.009545935317873955, 0.014092895202338696, 0.09219315648078918, -0.043935079127550125, -0.0417424738407135, 0.026441697031259537, -0.027368297800421715, 0.009024027734994888, 0.0011358564952388406, -0.09117107838392258, -0.042268913239240646, -0.012600577436387539, 0.04279617592692375, 0.0891668051481247, -0.017383133992552757, 0.0672379732131958, 0.0750507116317749, 0.02588336542248726, -0.0573553666472435, -0.07654696702957153, -0.06376593559980392, 0.0006842242437414825, 0.02220967411994934, 0.06490933895111084, 0.0019943767692893744, -0.04856344312429428, -0.05624236911535263, -0.07145064324140549, 0.03244280070066452, 0.004932792391628027, 0.015929460525512695, 0.026134153828024864, 0.011921863071620464, -0.024551136419177055, 0.03740503638982773, 0.02317339926958084, -0.033792268484830856, 0.0315084382891655, -0.020018069073557854, 0.042497795075178146, 0.08325415849685669, -0.05861760303378105, 0.00333346682600677, -0.033925652503967285, 0.08057970553636551, 0.025123100727796555, -0.02927888184785843, -0.006596873980015516, 0.07488015294075012, -0.03184840455651283, -5.992044316371903e-05, -0.0009414021042175591, 0.01607256755232811, 0.05889468640089035, -0.031739916652441025, -0.002126340987160802, -0.04072456806898117, 0.05818955600261688, 0.0741792842745781, -0.017415832728147507, 0.018792862072587013, 0.00703723868355155, 0.07498688995838165, -0.00665753148496151, -0.03580603376030922, -0.015913894400000572, 0.024184875190258026, 0.04299795255064964, -0.09255579859018326, 0.05133962258696556, -0.07174023240804672, -0.008638648316264153, 0.0038288827054202557, 0.05847559869289398, -0.019515380263328552, 0.01420286763459444, 0.041478127241134644, -0.06827044486999512, 0.01400712225586176, -0.07336238026618958, -0.09202165901660919, 0.016908669844269753, -0.04177027940750122, 0.025806602090597153, 0.004235225263983011, 0.01055390015244484, -0.09102620929479599, 0.013344625011086464, -0.09227300435304642, 0.012737699784338474, 0.014137289486825466, 0.002849085023626685, 0.08895263820886612, -0.08517404645681381, -0.017816632986068726, -0.0038806076627224684, 0.028145093470811844, 0.0810948833823204, 0.007606638129800558, -0.024813883006572723, 0.04579365625977516, 0.001596473972313106, 0.03133610635995865, -0.05328875407576561, 0.026481330394744873, -0.019276069477200508, -0.03163430467247963, 0.07631229609251022, 0.08061863481998444, -0.02327643521130085, 0.06324131041765213, 0.05117078125476837, -0.01113960426300764, -0.0645269900560379, 0.03840656951069832, 0.08929743617773056, 0.09089206904172897, 0.03945162892341614, 0.025166215375065804, 0.007421812042593956, -0.043477918952703476, -0.0015048853820189834, -0.034634627401828766, 0.05353093519806862, -0.01219949685037136, -0.04066143184900284, 0.057664401829242706, -0.052995093166828156, 0.0813441053032875, -0.018175696954131126, -0.08688290417194366, -0.03133126348257065, -0.04179893434047699, -0.03186454623937607, -0.025992276147007942, -0.008622871711850166, -0.00292567047290504, 0.05916675552725792, -0.005814747419208288, 0.027630571275949478, -0.020967800170183182, 0.040761061012744904, -0.001051317434757948, -0.017408035695552826, -0.0003875895054079592, 0.032130759209394455, -0.007785104680806398, -0.054842837154865265, 0.005239640828222036, 0.06292596459388733, 0.054135121405124664, 0.08279743045568466, 0.0013325588079169393, -0.009871223010122776, -0.046098776161670685, -0.00013413885608315468, -0.014896186999976635, -0.04057559370994568, -0.05781099200248718, -0.020054452121257782, -0.0011278805322945118, -0.03948758915066719, -0.04469206929206848, -0.01384398527443409, -0.012398452498018742, 0.015319711528718472, 0.039669767022132874, 0.06811210513114929, -0.002983307931572199, -0.06243441626429558, 0.010049019008874893, 0.03290683031082153, 0.04704977571964264, -0.013216671533882618, -0.04241860657930374, -0.07777556777000427, 0.09257817268371582, -0.0022815659176558256, 0.004728160332888365, -0.040498003363609314, -0.02164308913052082, 0.03286069259047508, -0.0015085542108863592, 0.006196611560881138, 0.017292160540819168, -0.013965768739581108, 0.04136449471116066, 0.05053884536027908, -0.008531545288860798, 0.021406568586826324, -0.01123997662216425, -0.09016488492488861, -0.039825439453125, 0.05740978941321373, -0.018478993326425552, 0.07042863219976425, 0.02157539688050747, 0.010672392323613167, 0.013720119372010231, 0.030688229948282242, -0.046423111110925674, -0.05418789014220238, -0.04609741270542145, 0.019975122064352036, 0.017898613587021828, -0.01708395592868328, 0.02882065437734127, -0.017143771052360535, 0.0054697757586836815, 0.00733221834525466, 0.03133638575673103, -0.06155865639448166, -0.030628550797700882, 0.0016584001714363694, -0.015269474126398563, 0.04917030408978462, -0.005187785718590021, -0.019632654264569283, 0.02925991825759411, -0.014014124870300293, -0.026299817487597466, 0.012363121844828129, -0.02568754367530346, 0.05482824891805649, -0.029528174549341202, 0.012610514648258686, -0.018685869872570038, -0.0008648027433082461, -0.04029475525021553, -0.0022837177384644747, 0.024124592542648315, -0.032547760754823685, -0.013497513718903065, 0.017674848437309265, 0.04888373985886574, -0.07229931652545929]},
{"question": "Passing data between view controllers", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>I'm new to iOS and Objective-C and the whole <a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\" rel=\"nofollow noreferrer\">MVC</a> paradigm and I'm stuck with the following:</p>\n<p>I have a view that acts as a data entry form and I want to give the user the option to select multiple products. The products are listed on another view with a <code>UITableViewController</code> and I have enabled multiple selections.</p>\n<p>How do I transfer the data from one view to another? I will be holding the selections on the <code>UITableView</code> in an array, but how do I then pass that back to the previous data entry form view so it can be saved along with the other data to Core Data on submission of the form?</p>\n<p>I have surfed around and seen some people declare an array in the app delegate. I read something about <a href=\"https://en.wikipedia.org/wiki/Singleton_pattern\" rel=\"nofollow noreferrer\">singletons</a>, but I don't understand what these are and I read something about creating a data model.</p>\n<p>What would be the correct way of performing this and how would I go about it?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>This question seems to be very popular here on Stack\u00a0Overflow so I thought I would try and give a better answer to help out people starting in the world of iOS like me.</p>\n<p>I hope this answer is clear enough for people to understand and that I have not missed anything.</p>\n<p><strong>Passing Data Forward</strong></p>\n<p>Passing data forward to a view controller from another view controller. You would use this method if you wanted to pass an object/value from one view controller to another view controller that you may be pushing on to a navigation stack.</p>\n<p>For this example, we will have <code>ViewControllerA</code> and <code>ViewControllerB</code></p>\n<p>To pass a <code>BOOL</code> value from <code>ViewControllerA</code> to <code>ViewControllerB</code> we would do the following.</p>\n<ol>\n<li><p>in <code>ViewControllerB.h</code> create a property for the <code>BOOL</code></p>\n<pre><code> @property (nonatomic, assign) BOOL isSomethingEnabled;\n</code></pre>\n</li>\n<li><p>in <code>ViewControllerA</code> you need to tell it about <code>ViewControllerB</code> so use an</p>\n<pre><code> #import \"ViewControllerB.h\"\n</code></pre>\n</li>\n</ol>\n<p>Then where you want to load the view, for example, <code>didSelectRowAtIndex</code> or some <code>IBAction</code>, you need to set the property in <code>ViewControllerB</code> before you push it onto the navigation stack.</p>\n<pre><code>    ViewControllerB *viewControllerB = [[ViewControllerB alloc] initWithNib:@\"ViewControllerB\" bundle:nil];\n    viewControllerB.isSomethingEnabled = YES;\n    [self pushViewController:viewControllerB animated:YES];\n</code></pre>\n<p>This will set <code>isSomethingEnabled</code> in <code>ViewControllerB</code> to <code>BOOL</code> value <code>YES</code>.</p>\n<p><strong>Passing Data Forward using Segues</strong></p>\n<p>If you are using Storyboards you are most likely using segues and will need this procedure to pass data forward. This is similar to the above but instead of passing the data before you push the view controller, you use a method called</p>\n<pre><code>-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender\n</code></pre>\n<p>So to pass a <code>BOOL</code> from <code>ViewControllerA</code> to <code>ViewControllerB</code> we would do the following:</p>\n<ol>\n<li><p>in <code>ViewControllerB.h</code> create a property for the <code>BOOL</code></p>\n<pre><code> @property (nonatomic, assign) BOOL isSomethingEnabled;\n</code></pre>\n</li>\n<li><p>in <code>ViewControllerA</code> you need to tell it about <code>ViewControllerB</code>, so use an</p>\n<pre><code> #import \"ViewControllerB.h\"\n</code></pre>\n</li>\n<li><p>Create the segue from <code>ViewControllerA</code> to <code>ViewControllerB</code> on the storyboard and give it an identifier. In this example we'll call it <code>\"showDetailSegue\"</code></p>\n</li>\n<li><p>Next, we need to add the method to <code>ViewControllerA</code> that is called when any segue is performed. Because of this we need to detect which segue was called and then do something. In our example, we will check for <code>\"showDetailSegue\"</code> and if that's performed, we will pass our <code>BOOL</code> value to <code>ViewControllerB</code></p>\n<pre><code> -(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender{\n     if([segue.identifier isEqualToString:@\"showDetailSegue\"]){\n         ViewControllerB *controller = (ViewControllerB *)segue.destinationViewController;\n         controller.isSomethingEnabled = YES;\n     }\n }\n</code></pre>\n</li>\n</ol>\n<p>If you have your views embedded in a navigation controller, you need to change the method above slightly to the following</p>\n<pre><code>    -(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender{\n        if([segue.identifier isEqualToString:@\"showDetailSegue\"]){\n            UINavigationController *navController = (UINavigationController *)segue.destinationViewController;\n            ViewControllerB *controller = (ViewControllerB *)navController.topViewController;\n            controller.isSomethingEnabled = YES;\n        }\n    }\n</code></pre>\n<p>This will set <code>isSomethingEnabled</code> in <code>ViewControllerB</code> to <code>BOOL</code> value <code>YES</code>.</p>\n<p><strong>Passing Data Back</strong></p>\n<p>To pass data back from <code>ViewControllerB</code> to <code>ViewControllerA</code> you need to use <em>Protocols and Delegates</em> or <em>Blocks</em>, the latter can be used as a loosely coupled mechanism for callbacks.</p>\n<p>To do this we will make <code>ViewControllerA</code> a delegate of <code>ViewControllerB</code>. This allows <code>ViewControllerB</code> to send a message back to <code>ViewControllerA</code> enabling us to send data back.</p>\n<p>For <code>ViewControllerA</code> to be a delegate of <code>ViewControllerB</code> it must conform to <code>ViewControllerB</code>'s protocol which we have to specify. This tells <code>ViewControllerA</code> which methods it must implement.</p>\n<ol>\n<li><p>In <code>ViewControllerB.h</code>, below the <code>#import</code>, but above <code>@interface</code> you specify the protocol.</p>\n<pre><code> @class ViewControllerB;\n\n @protocol ViewControllerBDelegate &lt;NSObject&gt;\n - (void)addItemViewController:(ViewControllerB *)controller didFinishEnteringItem:(NSString *)item;\n @end\n</code></pre>\n</li>\n<li><p>Next still in the <code>ViewControllerB.h</code>, you need to set up a <code>delegate</code> property and synthesize in <code>ViewControllerB.m</code></p>\n<pre><code> @property (nonatomic, weak) id &lt;ViewControllerBDelegate&gt; delegate;\n</code></pre>\n</li>\n<li><p>In <code>ViewControllerB</code> we call a message on the <code>delegate</code> when we pop the view controller.</p>\n<pre><code> NSString *itemToPassBack = @\"Pass this value back to ViewControllerA\";\n [self.delegate addItemViewController:self didFinishEnteringItem:itemToPassBack];\n</code></pre>\n</li>\n<li><p>That's it for <code>ViewControllerB</code>. Now in <code>ViewControllerA.h</code>, tell <code>ViewControllerA</code> to import <code>ViewControllerB</code> and conform to its protocol.</p>\n<pre><code> #import \"ViewControllerB.h\"\n\n @interface ViewControllerA : UIViewController &lt;ViewControllerBDelegate&gt;\n</code></pre>\n</li>\n<li><p>In <code>ViewControllerA.m</code> implement the following method from our protocol</p>\n<pre><code> - (void)addItemViewController:(ViewControllerB *)controller didFinishEnteringItem:(NSString *)item\n {\n     NSLog(@\"This was returned from ViewControllerB %@\", item);\n }\n</code></pre>\n</li>\n<li><p>Before pushing <code>viewControllerB</code> to navigation stack we need to tell  <code>ViewControllerB</code> that <code>ViewControllerA</code> is its delegate, otherwise we will get an error.</p>\n<pre><code> ViewControllerB *viewControllerB = [[ViewControllerB alloc] initWithNib:@\"ViewControllerB\" bundle:nil];\n viewControllerB.delegate = self\n [[self navigationController] pushViewController:viewControllerB animated:YES];\n</code></pre>\n</li>\n</ol>\n<hr>\n<h3>References</h3>\n<ol>\n<li><a href=\"http://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/ManagingDataFlowBetweenViewControllers/ManagingDataFlowBetweenViewControllers.html#//apple_ref/doc/uid/TP40007457-CH8-SW9\" rel=\"nofollow noreferrer\">Using Delegation to Communicate With Other View Controllers</a> in the <em>View Controller Programming Guide</em></li>\n<li><a href=\"https://developer.apple.com/library/mac/#documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html\" rel=\"nofollow noreferrer\">Delegate Pattern</a></li>\n</ol>\n<p><strong>NSNotification center</strong></p>\n<p>It's another way to pass data.</p>\n<pre><code>// Add an observer in controller(s) where you want to receive data\n[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleDeepLinking:) name:@\"handleDeepLinking\" object:nil];\n\n-(void) handleDeepLinking:(NSNotification *) notification {\n    id someObject = notification.object // Some custom object that was passed with notification fire.\n}\n\n// Post notification\nid someObject;\n[NSNotificationCenter.defaultCenter postNotificationName:@\"handleDeepLinking\" object:someObject];\n</code></pre>\n<p><strong>Passing Data back from one class to another</strong> (A class can be any controller, Network/session manager, UIView subclass or any other class)</p>\n<p><em>Blocks are anonymous functions.</em></p>\n<p>This example passes data from <strong>Controller B</strong> to <strong>Controller A</strong></p>\n<p><strong>Define a block</strong></p>\n<pre><code>@property void(^selectedVoucherBlock)(NSString *); // in ContollerA.h\n</code></pre>\n<p><strong>Add block handler (listener)</strong></p>\n<p>Where you need a value (for example, you need your API response in ControllerA or you need ContorllerB data on A)</p>\n<pre><code>// In ContollerA.m\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    __unsafe_unretained typeof(self) weakSelf = self;\n    self.selectedVoucherBlock = ^(NSString *voucher) {\n        weakSelf-&gt;someLabel.text = voucher;\n    };\n}\n</code></pre>\n<p><strong>Go to Controller B</strong></p>\n<pre><code>UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@\"Main\" bundle:nil];\nControllerB *vc = [storyboard instantiateViewControllerWithIdentifier:@\"ControllerB\"];\nvc.sourceVC = self;\n    [self.navigationController pushViewController:vc animated:NO];\n</code></pre>\n<p><strong>Fire block</strong></p>\n<pre><code>-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:\n(NSIndexPath *)indexPath {\n    NSString *voucher = vouchersArray[indexPath.row];\n    if (sourceVC.selectVoucherBlock) {\n        sourceVC.selectVoucherBlock(voucher);\n    }\n    [self.navigationController popToViewController:sourceVC animated:YES];\n}\n</code></pre>\n<p><a href=\"https://stackoverflow.com/a/49900404/3030400\">Another Working Example for Blocks</a></p>\n    </div>", "total_vectors": [0.0720498189330101, 0.003103596158325672, -0.06722212582826614, 0.023374047130346298, -0.011227305978536606, 0.034227404743433, -0.03683476150035858, -0.016118159517645836, -0.018583813682198524, 0.0698249563574791, 0.01661401055753231, -0.038977254182100296, -0.04013752564787865, 0.049134012311697006, -0.07537827640771866, 0.08437979966402054, -0.014983306638896465, -0.06474965810775757, 0.04603220149874687, 0.02803169935941696, 0.010398373939096928, -0.0190906822681427, 0.03478344529867172, -0.04305998980998993, -0.033098094165325165, 0.052658822387456894, -0.06547217816114426, 0.07543110102415085, -0.0751352608203888, 0.005848652217537165, -0.06404842436313629, -0.037548571825027466, 0.07962729781866074, 0.012803338468074799, 0.057971853762865067, -0.034606318920850754, -0.03857063502073288, 2.505493102944456e-05, -0.010381994768977165, 0.051700983196496964, 0.050981320440769196, 0.07324624806642532, -0.044440627098083496, -0.0030583878979086876, 0.08352421969175339, 0.05072906240820885, -0.04657306522130966, -0.043603815138339996, 0.011068743653595448, -0.0451095812022686, -0.010588999837636948, 0.07132434844970703, 0.059950754046440125, -0.031032007187604904, -0.04800262674689293, -0.08064302057027817, -0.040929295122623444, -0.07951527088880539, -0.02337624505162239, 0.03836797550320625, 0.005195505917072296, 0.04504593834280968, -0.018432196229696274, 0.011688443832099438, 0.0019272408680990338, -0.028681814670562744, 0.036674149334430695, 0.05003933236002922, -0.0465678870677948, 0.05963403731584549, -0.08280791342258453, -0.007079326082020998, -0.014678869396448135, -0.059292856603860855, 0.06602845340967178, 0.047256987541913986, -0.05679268762469292, -0.0031798328272998333, 0.012123910710215569, -0.007369970437139273, -0.009364408440887928, -0.003166507463902235, -0.05742320045828819, 0.0127105126157403, 0.07333065569400787, 0.05891825258731842, 0.006115421187132597, 0.0408688560128212, 0.052232734858989716, -0.06964893639087677, 0.05754082277417183, -0.060422249138355255, -0.0275989081710577, -0.04895041882991791, -0.00862498115748167, 0.03716008737683296, 0.016570163890719414, 0.0034617725759744644, -0.02969244122505188, -0.047365229576826096, 0.00974683091044426, 0.07220333814620972, 0.04966885596513748, 0.0019409718224778771, -0.05813971906900406, 0.0494450218975544, 0.010353208519518375, 0.05274806171655655, 0.019566679373383522, -0.009926391765475273, -0.03142804279923439, -0.022403238341212273, 0.03323802724480629, 0.04363654926419258, -0.008030915632843971, -0.017926907166838646, 0.05639928951859474, 0.031985048204660416, -0.06137727573513985, -0.006167227867990732, 0.05250569432973862, -0.03150635212659836, 0.03032037243247032, 0.022708693519234657, -0.015326645225286484, 0.05271650478243828, 0.0016363431932404637, -0.06277373433113098, 0.03439481928944588, -0.0022336910478770733, 0.029989400878548622, 0.0032132475171238184, -0.04183520749211311, -0.029175404459238052, 0.06232078745961189, -0.04326414689421654, 0.0039755734615027905, -0.04088659584522247, 0.037698034197092056, -0.08316006511449814, 0.054119568318128586, -0.04163762181997299, 0.0164388045668602, -0.06377765536308289, -0.04315628856420517, -0.036183301359415054, 0.0775417760014534, 0.03911999985575676, 0.07277601212263107, -0.016680920496582985, 0.04315553605556488, 0.061699219048023224, 0.04538930952548981, 0.043210044503211975, -0.048180583864450455, 0.028259607031941414, 0.06595062464475632, -0.07671316713094711, 0.02992234379053116, -0.0509428009390831, -0.0684148371219635, -0.03522781655192375, -0.00684343883767724, 0.0690990462899208, 0.021538985893130302, -0.06745308637619019, 0.036595668643713, -0.03174830228090286, 0.06055562198162079, 0.07572980225086212, -0.04126688092947006, 0.0483907088637352, 0.03877049311995506, 0.004236588720232248, -0.060903970152139664, -0.04146871715784073, 0.030031481757760048, 0.015486606396734715, -0.06599769741296768, -0.019594620913267136, -0.016931645572185516, 0.0005126057658344507, 0.032132916152477264, 0.007340913638472557, 0.045399948954582214, -0.01716429926455021, 0.038574062287807465, 0.06427828967571259, 0.008755135349929333, -0.04569975659251213, 0.04315568134188652, 0.017898887395858765, -0.03382154554128647, -0.02818586491048336, 0.07334721088409424, 0.028397211804986, -0.03945902734994888, 0.08430970460176468, -0.018947236239910126, -0.011407826095819473, 0.07422015070915222, 9.448938362766057e-05, 0.06374748051166534, 0.07550527155399323, -0.055633384734392166, -0.004879779182374477, -0.04844279587268829, -0.0666641891002655, 0.0199178047478199, -0.017820488661527634, -0.0205225870013237, -0.01321039441972971, 0.009663237258791924, 0.05991005152463913, 0.0007606230792589486, -0.008532383479177952, -0.027842294424772263, 0.028313618153333664, 0.05466090142726898, -0.018635790795087814, -0.057250525802373886, 0.02874274179339409, 0.014467342756688595, 0.0003373025683686137, 0.04245057329535484, -0.027080122381448746, 0.05055238679051399, -0.013415619730949402, -0.04630398005247116, 0.051762424409389496, 0.026238813996315002, 0.02873496152460575, -0.013932916335761547, -0.04608024284243584, 0.017249461263418198, 0.016880277544260025, 0.06264539062976837, 0.057201262563467026, 0.05375044792890549, 0.06406480818986893, 0.0171189121901989, 0.04182293266057968, -0.0698755532503128, 0.061356257647275925, -0.014968774281442165, 0.07158558070659637, -0.033212292939424515, 0.027371522039175034, 0.035435330122709274, 0.060456283390522, -0.04271731153130531, 0.043458789587020874, -0.07797354459762573, 0.054606180638074875, -0.03384460136294365, 0.02303714118897915, 0.061426982283592224, -0.08066689223051071, -0.016581984236836433, -0.021924391388893127, -0.05924656242132187, 0.022918133065104485, -0.0008763913065195084, 0.015133637934923172, 0.07480203360319138, 0.06878373771905899, 0.0288364477455616, -0.07490935176610947, -0.054442521184682846, -0.026664139702916145, -0.03589679300785065, -0.060907792299985886, 0.028656234964728355, 0.04600043594837189, -0.0038356862496584654, 0.02405407652258873, 0.033959269523620605, -0.05875496566295624, 0.06695101410150528, -0.02226302959024906, -0.050760433077812195, -0.01495087705552578, -0.06853772699832916, 0.03246632590889931, 0.011903233826160431, -0.044723786413669586, -0.02610744535923004, 0.04853381589055061, -0.02071232907474041, -0.04181767627596855, -0.029022179543972015, 0.03652968630194664, 0.011809300631284714, 0.005770702380686998, 0.03539362549781799, 0.03590407222509384, 0.036700986325740814, -0.07331938296556473, 0.004026934504508972, -0.012430661357939243, 0.015391908586025238, -0.07109209895133972, 0.023267235606908798, -0.0077853878028690815, 0.07544784247875214, -0.05844326317310333, 0.044292472302913666, 0.0009853707160800695, -0.07804352045059204, -0.00818257313221693, 0.012123696506023407, -0.004606569651514292, -0.016879532486200333, 0.04054653272032738, 0.07009288668632507, 0.06854356825351715, -0.02879120223224163, 0.0023573131766170263, 0.03568641468882561, 0.05350252613425255, -0.048416152596473694, -0.01973431371152401, 0.0016485945088788867, -0.0333186499774456, -0.025588499382138252, 0.06124843284487724, 0.061613183468580246, 0.0737643763422966, 0.06180405616760254, -0.05227161571383476, -0.01078691054135561, 0.07389699667692184, 0.013708841055631638, 0.07267845422029495, 0.02399449422955513, -0.058316536247730255, -0.02810850366950035, 0.005026054102927446, 0.06116614490747452, -0.05309373512864113, 0.037038903683423996, -0.007510327734053135, 0.011163949966430664, -0.011123035103082657, -0.0834716260433197, -0.0032269766088575125, 0.05577026680111885, 0.0019484353251755238, -0.07288360595703125, -0.006033242680132389, 0.058428578078746796, 0.049733322113752365, -0.029172364622354507, -0.03485797345638275, 0.026832353323698044, -0.021257445216178894, -0.08263573795557022, 0.0020122339483350515, -0.06050511449575424, -0.001134085701778531, -0.004468225408345461, -0.037632543593645096, -0.08409351110458374, 0.05581996962428093, -0.04691952094435692, -0.0057585230097174644, 0.025746377184987068, -0.05912671983242035, 0.0004841642512474209, -0.0586119219660759, -0.07286950945854187, 0.05404606834053993, -0.04958023875951767, 0.011663086712360382, -0.03320963308215141, -0.021124541759490967, -0.04494756832718849, -0.017141226679086685, 0.021771389991044998, 0.07675262540578842, 0.007162362802773714, -0.07918190211057663, 0.003002149285748601, -0.02039230428636074, -0.024921057745814323, -0.03566889837384224, 0.07405682653188705, 0.03798229619860649, 0.04722834751009941, 0.02264428324997425, -0.04394889622926712, -0.05790746957063675, -0.022024862468242645, -0.05879925191402435, 0.016873527318239212, 0.07627762109041214, -0.04024619236588478, -0.05507836118340492, 0.06034523621201515, 0.008140936493873596, -0.024160508066415787, 0.03590889647603035, -0.03265656158328056, 0.02097608707845211, 0.03925786912441254, -0.05631319433450699, -0.0797014981508255, 0.05979156494140625, 0.024286556988954544, -0.023744840174913406, 0.021305207163095474, -0.02124243788421154, -0.04254421964287758, -0.06589220464229584, 0.02783319354057312, -0.005257608834654093, -0.016458887606859207, 0.015045549720525742, -0.0771532729268074, 0.04803549870848656, -0.05748789384961128, 0.01788126863539219, 0.04518192633986473, 0.05766411870718002, -0.04082327336072922, -0.03646116331219673, 0.03433647379279137, 0.07255791127681732, 0.04444471746683121, -0.04395275190472603, 0.028836119920015335, -0.029742371290922165, -0.04172120243310928, 0.00021412144997157156, -0.07468848675489426, -0.0563785694539547, 0.010806437581777573, -0.06700392067432404, 0.020812951028347015, -0.0005625952617265284, -0.046314653009176254, 0.04809284210205078, -0.04019664227962494, -0.04762831702828407, -0.05288311839103699, -0.08210713416337967, -0.02927018702030182, -0.018602687865495682, 0.04608084633946419, -0.06318464875221252, 0.06262747943401337, -0.019705340266227722, 0.08316371589899063, 0.02435208484530449, 0.009343006648123264, 0.006441353354603052, 0.06658060103654861, -0.02108830213546753, 0.01452699489891529, 0.0035658490378409624, 0.023918669670820236, 0.03300665318965912, -0.03836379572749138, 0.05668313428759575, 0.06408113986253738, -0.022054029628634453, 0.057232726365327835, -0.02815825678408146, 0.021724868565797806, 0.03417527303099632, 0.02908623218536377, 0.04865146800875664, -0.06570534408092499, 0.028293075039982796, -0.05431022867560387, -0.059285782277584076, -0.030038956552743912, -0.043004781007766724, -0.06490018963813782, -0.02436087094247341, -0.053082425147295, -0.013805879279971123, 0.019887015223503113, 0.035668157041072845, 0.07433102279901505, 0.01473094429820776, 0.01498045027256012, -0.02986236847937107, 0.00500519247725606, -0.07242418080568314, 0.04494643211364746, -0.06773176789283752, -0.02796136401593685, -0.04265645891427994, 0.041641078889369965, 0.033314138650894165, 0.01975162699818611, 0.018571102991700172, -0.03368024155497551, -0.05777896195650101, 0.008459391072392464, 0.030968131497502327, -0.03875379264354706, -0.02158644236624241, -0.02432595007121563, -0.0092003820464015, 0.01912485808134079, -0.012823292054235935, -0.014155029319226742, 0.08188582956790924, -0.03560297191143036, 0.007155196741223335]},
{"question": "Can I mix MySQL APIs in PHP?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>I have searched the net and so far what I have seen is that you can use <code>mysql_</code> and <code>mysqli_</code> together meaning:</p>\n\n<pre><code>&lt;?php\n$con=mysqli_connect(\"localhost\", \"root\" ,\"\" ,\"mysql\");\n\nif( mysqli_connect_errno( $con ) ) {\n    echo \"failed to connect\";\n}else{\n    echo \"connected\";\n}\nmysql_close($con);\necho \"Done\";\n?&gt;\n</code></pre>\n\n<p>or </p>\n\n<pre><code>&lt;?php\n$con=mysql_connect(\"localhost\", \"root\" ,\"\" ,\"mysql\");\nif( mysqli_connect_errno( $con ) ) {\n    echo \"failed to connect\";\n}else{\n    echo \"connected\";\n}\nmysqli_close($con);\necho \"Done\";\n?&gt;\n</code></pre>\n\n<p>Are valid but when I use this code what I get is:</p>\n\n<pre><code>Connected\nWarning: mysql_close() expects parameter 1 to be resource, object given in D:\\************.php on line 9\nDone\n</code></pre>\n\n<p>For the first and the same except with <code>mysqli_close()</code>. For the second one.</p>\n\n<p>What is the problem? Can't I use <code>mysql_</code> and <code>mysqli</code> together? Or is it normal? Is the way I can check if the connections are valid at all? (the <code>if(mysq...)</code>)</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>No, you can't use <code>mysql</code> and <code>mysqli</code> together.  They are separate APIs and the resources they create are incompatible with one another.</p>\n\n<p>There is a <code>mysqli_close</code>, though.</p>\n    </div>", "total_vectors": [-0.04163028299808502, 0.012163386680185795, 0.04513617604970932, 0.017168588936328888, 0.04365773871541023, -0.041283369064331055, 0.021264299750328064, -0.02576589025557041, -0.0038063982501626015, 0.055715080350637436, -0.01382618397474289, 0.045064736157655716, 0.00655754841864109, 0.06594137847423553, -0.05220862478017807, 0.07901687920093536, -1.8514117982704192e-05, -0.050721824169158936, -0.012496551498770714, -0.07019323855638504, 0.010107599198818207, 0.03635700047016144, 0.024823009967803955, 0.024830365553498268, -0.05804349109530449, -0.033299680799245834, -0.012266727164387703, 0.020184636116027832, 0.018508560955524445, -0.006674185860902071, -0.030644243583083153, 0.07357819378376007, -0.048550307750701904, 0.06750176846981049, 0.00873517245054245, 0.0654754638671875, -0.060760028660297394, -0.01965768076479435, -0.0390019565820694, -0.00658724270761013, -0.036378148943185806, 0.035973772406578064, -0.039410512894392014, 0.034755829721689224, 0.0790150836110115, -0.042140424251556396, -0.06550178676843643, 0.04836198687553406, 0.005847447086125612, -0.06649289280176163, 0.05700472742319107, 0.07846001535654068, 0.05447505787014961, -0.009433140978217125, -0.07777370512485504, 0.02180902101099491, 0.0032482154201716185, 0.013327944092452526, -0.02694861963391304, 0.062173426151275635, -0.038234643638134, -0.0575946681201458, -0.018285103142261505, -0.06883478909730911, 0.006472643464803696, -0.05472128465771675, 0.004662803839892149, -0.0029663224704563618, -0.04128323122859001, 0.03060292825102806, -0.07667863368988037, 0.013124260120093822, 0.010847236961126328, -0.03646736219525337, -0.0155840665102005, -0.024269716814160347, 0.07672160118818283, -0.021039608865976334, 0.045410726219415665, 0.07193675637245178, 0.07889118790626526, -0.015749040991067886, -0.020617712289094925, -0.020115964114665985, 0.07717619091272354, 0.058476824313402176, 0.043866485357284546, 0.035458724945783615, -0.006766898091882467, -0.041040293872356415, -0.005370361730456352, -0.022832563146948814, 0.021210553124547005, 0.06185124069452286, 0.04592306539416313, 0.04381738230586052, -0.001828739419579506, 0.0464186891913414, -0.06327655911445618, -0.07898575812578201, 0.01676228642463684, -0.0284800473600626, -0.046928126364946365, -0.06384201347827911, 0.008859234862029552, 0.015032677911221981, 0.07897502183914185, -0.030324475839734077, -0.07067286968231201, 0.027867158874869347, 0.03384654223918915, -0.0028470619581639767, 0.03729021176695824, -0.028018765151500702, 0.021389024332165718, 0.018225066363811493, 0.03526720777153969, 0.02167578786611557, 0.016095129773020744, -0.07501255720853806, 0.02487933821976185, 0.024745512753725052, 0.0073508271016180515, -0.03632939234375954, -0.03680270165205002, 2.2606909624300897e-06, -0.022456645965576172, 0.012466700747609138, 0.07599853724241257, 0.04706050455570221, 0.05016699060797691, 0.04829605296254158, -0.04373454675078392, -0.02481834962964058, 0.014787191525101662, 0.060737840831279755, -0.0032542075496166945, 0.017887292429804802, -0.007521407213062048, -0.07880275696516037, -0.00016890160623006523, -0.03460470959544182, 0.03537492826581001, -0.0469343326985836, 0.022884268313646317, -0.07877910882234573, -0.07282266765832901, -0.017435090616345406, -0.001766703906469047, 0.01812908612191677, -0.024291960522532463, 0.010928497649729252, -0.06075495108962059, -0.003897238289937377, -0.018161319196224213, -0.016777347773313522, 0.014500856399536133, -0.07653166353702545, -0.027311982586979866, 0.04260912910103798, -0.07560621947050095, -0.002656468888744712, 0.0202842615544796, 0.009010804817080498, 0.05295391008257866, -0.0786551982164383, -0.04640715941786766, 0.0052423938177526, 0.010496057569980621, -0.012911014258861542, -0.02015342190861702, 0.03411262482404709, 0.017878761515021324, 0.0025570278521627188, 0.010177969932556152, 0.0373259112238884, 0.015657341107726097, -0.052888937294483185, -0.0021514904219657183, 0.03494814783334732, -0.06511111557483673, 0.06027013808488846, -0.05237994343042374, 0.026036866009235382, -0.004988068249076605, 0.021495534107089043, -0.04105615243315697, 0.054023921489715576, -2.5751862267497927e-05, 0.043485287576913834, 0.04564192518591881, 0.0019214320927858353, -0.04743756353855133, -0.06864480674266815, -0.06270887702703476, -0.01101703941822052, -0.030157066881656647, 0.07901687920093536, -0.05712442845106125, -0.061154332011938095, -0.0577547661960125, 0.023771632462739944, -0.07900018244981766, 0.07792708277702332, -0.009798016399145126, 0.0011521736159920692, 0.027933819219470024, 0.01307981088757515, -0.0778980553150177, -0.0009030949440784752, -0.06052054092288017, -0.011306888423860073, 7.21018950571306e-05, -0.005694338586181402, 0.029552126303315163, 0.005738739389926195, -0.07497557252645493, 0.07576252520084381, -0.00757379736751318, 0.03112880513072014, -0.07032938301563263, -0.03634542226791382, -0.01180835347622633, -0.015723783522844315, 0.027763359248638153, -0.015295235440135002, -0.01262031588703394, -0.02987493947148323, -0.03498254716396332, -0.04122837260365486, 0.04944770410656929, -0.06895407289266586, -0.034452397376298904, -0.06322942674160004, -0.04209207370877266, -0.07764013111591339, 0.0731486827135086, 0.07866297662258148, 0.020137418061494827, -0.03608080372214317, 0.02528945915400982, -0.0064088101498782635, -0.0524069145321846, -0.06936369091272354, -0.028873253613710403, 0.07787635922431946, -0.06386756151914597, -0.06341160088777542, -0.07551804929971695, 0.07431305199861526, -0.06944728642702103, -0.017335226759314537, -0.039413705468177795, -0.04400678724050522, -0.06676583737134933, -0.03236790746450424, -0.02142474800348282, -0.0741734430193901, -0.04822259768843651, 0.04676844924688339, -0.01981927827000618, 0.04480668902397156, -0.0681980773806572, -0.021148651838302612, 0.04525739699602127, 0.013097049668431282, 0.008777408860623837, -0.07128461450338364, -0.05179880931973457, 0.03838956356048584, -0.07581211626529694, -0.04797620326280594, 0.06943617016077042, 0.0011861518723890185, -0.06415361166000366, -0.012368285097181797, -0.005036412738263607, 0.05907195061445236, 0.07898445427417755, 0.018641551956534386, 0.06652963906526566, 0.04784435033798218, 0.05832831934094429, -0.04903815686702728, 0.05496954917907715, -0.078492172062397, 0.026889914646744728, -0.020615555346012115, 0.0022292546927928925, 0.07540703564882278, -0.0007576685165986419, 0.008983497507870197, 0.07693319767713547, -0.006351384799927473, 0.06593913584947586, -0.014907002449035645, 0.041900936514139175, -0.0403105653822422, -0.022397594526410103, 0.05822368711233139, -0.013699855655431747, 0.012127600610256195, 0.07413777709007263, -0.07698585093021393, -0.02770388126373291, -0.004703217186033726, -0.04188641905784607, 0.027072101831436157, 0.011573336087167263, 0.052564509212970734, -0.06810939311981201, 0.06382512301206589, 0.03259914740920067, -0.027742646634578705, 0.03452073037624359, -0.06507265567779541, -0.049019839614629745, 0.038131993263959885, 0.03957156464457512, 0.02099718526005745, 0.058763254433870316, -0.020057909190654755, 0.03999483212828636, 0.01377969142049551, 0.011590996757149696, 0.0027020659763365984, 0.0017779192421585321, 0.016526315361261368, 0.03288283944129944, 0.024601316079497337, 0.04242876172065735, 0.028120292350649834, -0.0023975225631147623, 0.07023186981678009, 0.06711597740650177, -0.018569838255643845, -0.016543934121727943, -0.012054521590471268, 0.056054335087537766, -0.0009419098496437073, -0.0006676461780443788, -0.023885907605290413, 0.04096349701285362, -0.03190610185265541, -0.07901675999164581, 0.006415264680981636, 0.00907162670046091, -0.02969571016728878, -0.07536230981349945, -0.0324631966650486, 0.032786235213279724, -0.03125135600566864, 0.07376868277788162, -0.0774463638663292, 0.0007397376466542482, -0.07894609123468399, -0.07899493724107742, 0.000882645312231034, -0.05560660362243652, -0.02830193191766739, -0.06801445782184601, 0.03390456363558769, -0.07891665399074554, -0.03823690861463547, -0.07849693298339844, 0.05895592272281647, -0.0640062615275383, -0.03929942101240158, -0.010424894280731678, -0.05234093964099884, -0.000978586613200605, 0.056285321712493896, -0.023923343047499657, 0.05085080862045288, 0.015031426213681698, -0.07612182199954987, 0.005333647131919861, 0.024223433807492256, -0.007439454551786184, -0.03849565610289574, 0.02403903193771839, -0.01625511795282364, 0.008955130353569984, 0.07334030419588089, -0.05424197390675545, -0.053526103496551514, 0.06903405487537384, 0.0266959797590971, 0.06155436858534813, -0.07042878866195679, -0.0758523941040039, 0.07698008418083191, 0.07692521065473557, 0.002813139697536826, -0.02375582605600357, -0.03295009955763817, -0.0705820694565773, 0.06456425040960312, -0.004185022320598364, 0.05343012511730194, 0.028305647894740105, 0.005879775620996952, -0.001598518923856318, -0.02919677458703518, 0.04426134005188942, 0.06289984285831451, -0.07887604087591171, 0.055574625730514526, -0.041263289749622345, -0.05672309175133705, -0.0529952235519886, -0.013345003128051758, -0.03414769098162651, 0.0020230829250067472, -0.06582394987344742, -0.017097609117627144, 0.04878658428788185, 0.011079788208007812, -0.07093510776758194, -0.019805723801255226, -0.02462168037891388, -0.03376094251871109, -0.007277920842170715, -0.04255383834242821, 0.03390471264719963, 0.06961401551961899, 0.04400041699409485, 0.0533783920109272, -0.06430257111787796, 0.022142168134450912, 0.02075166255235672, -0.07732098549604416, -0.04465757682919502, -0.011338292621076107, -0.0275237038731575, 0.006268803030252457, -0.03928224742412567, -0.014463997446000576, -0.02716388925909996, -0.02114776149392128, 0.013866408728063107, 0.03319576382637024, 0.002202256117016077, -0.003959345165640116, -0.006680822931230068, -0.07282350957393646, 0.0003979912435170263, -0.06507128477096558, 0.003417115192860365, 0.030246689915657043, -0.022634169086813927, -0.06922401487827301, 0.07901667803525925, 0.053702887147665024, 0.0060687982477247715, -0.07250075042247772, -0.016522347927093506, 0.056758981198072433, 0.058883387595415115, 0.015168054960668087, -0.01762145571410656, 0.051072895526885986, 0.06431969255208969, 0.04622344672679901, 0.019781986251473427, 0.02321862429380417, -0.06650517135858536, -0.07842593640089035, 0.028935834765434265, -0.0035100486129522324, -0.01263989694416523, -0.027111221104860306, 0.0457947663962841, 0.05800042301416397, -0.059012774378061295, -0.06683874875307083, 0.015261123888194561, -0.013034048490226269, -0.012347147800028324, -0.004900517873466015, -0.015439371578395367, 0.0450139194726944, -0.004147900268435478, -0.02703736163675785, 0.025740161538124084, 0.0606343038380146, -0.01759612001478672, -0.012882028706371784, 0.022349180653691292, -0.011943209916353226, -0.02966431714594364, 0.012922919355332851, 0.0501457154750824, -0.026004422456026077, 0.05244666710495949, -0.011937698349356651, -0.006610664539039135, -0.020890019834041595, -0.06996352970600128, -0.020489687100052834, 0.005161698907613754, -0.039451390504837036, -0.028147947043180466, 0.019228104501962662, -0.02209462784230709, 0.00403889873996377, 0.06634413450956345, -0.026844147592782974, 0.015420395880937576, 0.06513740867376328, -0.056909460574388504, -0.07825775444507599]},
{"question": "What is a debugger and how can it help me diagnose problems?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>This is intended to be a general-purpose question to assist new programmers who have a problem with a program, but do not know how to use a debugger to diagnose the cause of the problem.</p>\n<p>This question covers three classes of more specific question:</p>\n<ul>\n<li>When I run my program, it does not produce the output I expect for the input I gave it.</li>\n<li>When I run my program, it crashes and gives me a stack trace. I have <a href=\"https://stackoverflow.com/questions/3988788/what-is-a-stack-trace-and-how-can-i-use-it-to-debug-my-application-errors\">examined the stack trace</a>, but I still do not know the cause of the problem because the stack trace does not provide me with enough information.</li>\n<li>When I run my program, it crashes because of a segmentation fault (SEGV).</li>\n</ul>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>A debugger is a program that can examine the state of your program while your program is running. The <a href=\"https://stackoverflow.com/questions/216819/how-does-a-debugger-work\">technical means it uses for doing this</a> are not important for understanding the basics of how to use a debugger. You can use a debugger to halt the execution of your program when it reaches a particular place in your code, then examine the values of the variables in the program. You can use a debugger to run your program very slowly, one line of code at a time (called <em>single stepping</em>), while you examine the values of its variables.</p>\n\n<h2>Using a debugger is an expected basic skill</h2>\n\n<p>A debugger is a very powerful tool for helping diagnose problems with programs.  And debuggers are available for all practical programming languages. Therefore being able to use a debugger is considered a <strong>basic skill</strong> of any professional or enthusiast programmer. And using a debugger <em>yourself</em>  is considered <strong>basic work</strong> you should do <em>yourself</em> before asking others for help. As this site is for professional and enthusiast programmers, and not a helpdesk or mentoring site, if you have a question about a problem with a specific program, but have not used a debugger, your question is very likely to be closed and downvoted. If you persist with questions like that, you will eventually be blocked from posting more. </p>\n\n<h2>How a debugger can help you</h2>\n\n<p>By using a debugger you can discover whether a variable has the wrong value, and where in your program its value changed to the wrong value.</p>\n\n<p>Using single stepping you can also discover whether the control flow is as you expect. For example, whether an <code>if</code> branch executed when you expect it ought to be.</p>\n\n<h2>General notes on using a debugger</h2>\n\n<p>The specifics of using a debugger depend on the debugger and, to a lesser degree, the programming language you are using.</p>\n\n<ul>\n<li><p>You can <em>attach</em> a debugger to a process already running your program. You might do if your program is stuck.</p></li>\n<li><p>In practice it is often easier to run your program under the control of a debugger from the very start.</p></li>\n<li><p>You indicate <em>where</em> your program should stop executing by indicating the source-code file and line number of the line at which execution should stop, or by indicating the name of the method/function at which the program should stop (if you want to stop as soon as execution enters the method). The technical means that the debugger uses to cause your program to stop is called a <em>breakpoint</em> and this process is called <em>setting a breakpoint</em>.</p></li>\n<li><p>Most <a href=\"https://stackoverflow.com/a/426586/545127\">modern debuggers are part of an IDE</a> and provide you with a convenient GUI for examining the source code and variables of your program, with a point-and-click interface for setting breakpoints, running your program and single stepping it.</p></li>\n<li><p>Using a debugger can be very difficult unless your program executable or bytecode files include debugging <em>symbol information</em> and cross-references to your source-code. You might have to <a href=\"https://stackoverflow.com/questions/89603/how-does-the-debugging-option-g-change-the-binary-executable\">compile (or recompile) your program slightly differently</a> to ensure that information is present. If the compiler performs extensive optimizations, those cross-references can become confusing. You might therefore have to <a href=\"https://stackoverflow.com/a/7857696/545127\">recompile your program with optimizations turned off</a>.</p></li>\n</ul>\n    </div>", "total_vectors": [0.03382154554128647, -0.006704072933644056, 0.015990545973181725, 0.021579429507255554, -0.0003646830446086824, 0.042391855269670486, -0.049667421728372574, -0.03204462304711342, 0.028480852022767067, 0.08709917217493057, 0.034963659942150116, -0.01566312089562416, -0.0019531813450157642, 0.021972836926579475, -0.012707113288342953, 0.09358367323875427, -0.06596723198890686, -0.013626703992486, 0.06907791644334793, -0.0594891719520092, 0.04451930895447731, 0.062165360897779465, 0.016979781910777092, -0.033325184136629105, 0.011259804479777813, 0.029938096180558205, -0.04721958562731743, -0.06328175961971283, 0.0193517804145813, 0.021721184253692627, -0.03256697207689285, 0.09529875218868256, -0.02521132491528988, -0.015181801281869411, -0.06422136723995209, 0.07878177613019943, 0.0045901876874268055, 0.017123151570558548, -0.005123987328261137, -0.006712895352393389, -0.015168366953730583, -0.03359426185488701, 0.00033284127130173147, -0.0031563083175569773, 0.07426586747169495, 0.011713373474776745, -0.032318439334630966, -0.04503350332379341, -0.06142015755176544, -0.018456237390637398, -0.016541285440325737, 0.09630091488361359, -0.03731660917401314, -0.06380005925893784, 0.004141984507441521, -0.013470819219946861, 0.03607215732336044, 0.016965975984930992, 0.022505585104227066, -0.0018187606474384665, -0.0446648970246315, 0.008129273541271687, 0.04974638670682907, -0.06652262061834335, -0.043104469776153564, -0.09394244104623795, -0.012407070025801659, -0.04940236732363701, -0.05518514662981033, -0.020584069192409515, 0.04169319570064545, 0.05634177103638649, 0.054463375359773636, 0.007918033748865128, -0.05268869921565056, -0.006795790977776051, 0.0006264902767725289, 0.05525853484869003, 0.038359787315130234, 0.048415038734674454, -0.05508272722363472, 0.053098924458026886, -0.023730440065264702, -0.02816297672688961, 0.0797036737203598, 0.02101343311369419, 0.02067190781235695, -0.024318015202879906, 0.03176875039935112, -0.07019941508769989, 0.05643495172262192, -0.005420064087957144, -0.052197158336639404, 0.015824681147933006, 0.0247822143137455, 0.04387457296252251, 0.08228909969329834, 0.08692815154790878, -0.028131304308772087, -0.022420959547162056, 0.040881771594285965, 0.009678604081273079, -0.07003352046012878, -0.028975777328014374, -0.01299918070435524, 0.048745691776275635, -0.02589227817952633, -0.0565035417675972, -0.03048904985189438, 0.0740959569811821, 0.028633927926421165, -0.05740462243556976, -0.028225164860486984, -0.027779778465628624, 0.055255427956581116, -0.05764072388410568, 0.019898055121302605, 0.025043560191988945, 0.047358978539705276, 0.006163854151964188, -0.05438744276762009, 0.026383457705378532, 0.03049374185502529, 0.034038007259368896, -0.0008022031979635358, 0.011027916334569454, -0.0036927598994225264, 0.004650140181183815, 0.0593486987054348, 0.028473330661654472, -0.023157786577939987, 0.07657765597105026, 0.018706727772951126, -0.07502316683530807, 0.04829780012369156, -0.07555334270000458, -0.09304584562778473, -0.00449771573767066, -0.002167519647628069, -0.04276665672659874, -0.04283786565065384, -0.056126050651073456, -0.027793878689408302, 0.03835834190249443, 0.06642637401819229, -0.03390665352344513, 0.018572183325886726, 0.01284282747656107, -0.019202081486582756, -0.0012524309568107128, 0.036118436604738235, -0.05946230888366699, 0.022304095327854156, -0.03498927876353264, -0.006756634917110205, -0.055077750235795975, 0.03685702010989189, 0.0835602879524231, 0.00837160274386406, 0.0438508503139019, -0.0006435461109504104, -0.026340356096625328, 0.07450494170188904, -0.0616275891661644, 0.05306559056043625, 0.00059818773297593, -0.025326833128929138, -0.06803365796804428, -0.05332932621240616, 0.009379694238305092, 0.005932264029979706, -0.09559836983680725, 0.0059883068315684795, -0.014117729850113392, -0.029152804985642433, 0.00901914294809103, 0.01983354426920414, 0.047816671431064606, 0.0015905580949038267, 0.046007800847291946, -0.016082189977169037, 0.02562078833580017, -0.08550660312175751, -0.023816050961613655, 0.06286083161830902, -0.012013358995318413, -0.026370251551270485, -0.016344206407666206, -0.02461829222738743, 0.04457078501582146, 0.08193237334489822, -0.014447557739913464, 0.06658036261796951, -0.029820123687386513, 0.01120704598724842, -0.0074205584824085236, -0.002597525017336011, 0.07196299731731415, -0.04801954701542854, 0.09369564056396484, -0.021247325465083122, -0.0151633620262146, -0.01595451682806015, 0.06942298263311386, 0.025732610374689102, 0.02643374167382717, 0.053922388702631, 0.02778480015695095, -0.055681269615888596, 0.05183779075741768, -0.041246119886636734, 0.006128004286438227, -0.01405889168381691, 0.05088016390800476, 0.01767829805612564, -0.02582632005214691, -0.01961551047861576, -0.09455875307321548, -0.028670670464634895, 0.0041490704752504826, -0.046384356915950775, 0.023354992270469666, -0.010851512663066387, 0.04441171512007713, 0.01007056050002575, -0.00988080445677042, -0.05482623353600502, 0.015474165789783001, 0.005478288047015667, 0.02521963231265545, 0.03258175030350685, 0.08064718544483185, 0.01217305101454258, -0.07598867267370224, 0.044955506920814514, 0.004029341973364353, 0.07714720070362091, 0.013739196583628654, -0.0038592314813286066, -0.06308362632989883, -0.06327562034130096, -0.004212509375065565, 0.03181667998433113, -0.01749296858906746, -0.024188430979847908, 0.09497778862714767, -0.03128313273191452, -0.0372496023774147, 0.0962085872888565, 0.02263512834906578, -0.08449415862560272, 0.0010984597029164433, -0.009031306952238083, -0.022475313395261765, 0.06831849366426468, 0.008737861178815365, 0.03948293998837471, -0.05296081677079201, 0.028922267258167267, -0.03584757819771767, 0.05958845466375351, 0.017834767699241638, -0.005927220918238163, -0.04262454807758331, 0.027001384645700455, 0.025044482201337814, -0.006778089329600334, -0.08720892667770386, 0.04663137346506119, -0.009765061549842358, 0.008604135364294052, -0.06816397607326508, 0.0013329160865396261, -0.06892876327037811, -0.006710169371217489, -0.009154234081506729, -0.09000206738710403, -0.018810782581567764, 0.06438904255628586, -0.02948152832686901, -0.08495767414569855, -0.0033248672261834145, 0.01495432574301958, -0.045591749250888824, -0.039370469748973846, -0.043451130390167236, 0.08565852791070938, 0.076797716319561, 0.016748720780014992, 0.020354319363832474, -0.007275919895619154, 0.08560587465763092, -0.001176335965283215, 0.020481685176491737, 0.06704909354448318, -0.0325598381459713, -0.05584550276398659, 0.0019554535392671824, 0.0013363512698560953, 0.0388212613761425, -0.06371534615755081, 0.021408017724752426, -0.019315199926495552, 0.04859495162963867, -0.05496889725327492, -0.05462807044386864, 0.0684371292591095, -0.0039943610318005085, -0.013752310536801815, 0.006316314451396465, 0.04850488901138306, 0.015982579439878464, 0.00894234236329794, 0.015699492767453194, 0.008362880907952785, 0.05459554120898247, 0.05640194192528725, 0.04224028438329697, 0.01606951840221882, -0.012147143483161926, 0.006420054938644171, -0.037168487906455994, 0.016468938440084457, -0.011096457950770855, 0.0582597479224205, 0.03422652184963226, 0.010585877113044262, 0.0132826566696167, 0.025826001539826393, -0.01629018597304821, 0.032289329916238785, -0.0745806023478508, -0.025276711210608482, -0.0026759481988847256, -0.03323204070329666, -0.04844532161951065, -0.0012760593090206385, -0.03969641774892807, 0.04156199470162392, -0.04336199909448624, -0.03524147719144821, -0.022983519360423088, 0.000344790838425979, 0.0025180478114634752, -0.07972052693367004, 0.03616752848029137, 0.08091790974140167, -0.053941141813993454, -0.04296203330159187, 0.037683986127376556, -0.022280042991042137, 0.07587417960166931, 0.035237155854701996, 0.018584584817290306, -0.04658222571015358, -0.044044479727745056, -0.0918646976351738, 0.0340665802359581, -0.029956992715597153, -0.005971889942884445, -0.08323702961206436, -0.032551251351833344, -0.008464820683002472, -0.02233290858566761, 0.015494311228394508, -0.0034752218052744865, -0.08651404082775116, 0.062797412276268, 0.0959702879190445, -0.057377029210329056, 0.019838601350784302, 0.0235401950776577, 0.012167705222964287, 0.004182947799563408, -0.0075682587921619415, -0.08388690650463104, -0.011018220335245132, 0.03214448317885399, 0.028286604210734367, -0.06470799446105957, -0.016741426661610603, -0.04554944857954979, 0.08094211667776108, -0.06670401990413666, 0.00020486212451942265, -0.06134263053536415, 0.09296680986881256, -0.014074395410716534, 0.02682575210928917, -0.0195168424397707, 0.07222103327512741, -0.03286246210336685, -0.0013426465447992086, 0.00533155957236886, 0.018495069816708565, -0.06586358696222305, -0.06692458689212799, -0.013874615542590618, 0.05465422570705414, 0.06095561385154724, 0.01585378125309944, -0.042252689599990845, 0.0018922851886600256, -0.025913726538419724, 0.057461757212877274, 0.031677521765232086, -0.03073621354997158, -0.06905370205640793, 0.019356744363904, 0.00285757752135396, -0.08647459745407104, -0.011354859918355942, 0.05791852995753288, 0.04036618396639824, -0.03063184767961502, -0.028477132320404053, 0.00675989780575037, 0.017734484747052193, 0.08105802536010742, -0.01987205073237419, 0.024723239243030548, -0.047048039734363556, 0.0032419615890830755, -0.0055187842808663845, 0.06822329759597778, -0.010235147550702095, 0.053040388971567154, 0.03776014223694801, -0.040109094232320786, -0.013586726039648056, -0.0074587175622582436, 0.02062142640352249, 0.04020990431308746, 0.02112758532166481, -0.022201113402843475, 0.05078667402267456, 0.07338999956846237, 0.0009521906613372266, 0.01731143891811371, 0.06882600486278534, 0.05038011819124222, -0.02550133503973484, 0.03406126797199249, 0.010293331928551197, -0.02593103237450123, 0.07453172653913498, 0.017420483753085136, 0.07002245634794235, 0.025659551844000816, -0.009601719677448273, 0.032888494431972504, 0.03802618011832237, 0.06523638218641281, 0.022673506289720535, 0.05844566971063614, -0.07857996970415115, 0.0033641972113400698, -0.04495412856340408, -0.05371953919529915, 0.03604961186647415, 0.0012043080059811473, 0.038632832467556, 0.006976311095058918, -0.09487493336200714, 0.0037548928521573544, -0.03559405356645584, 0.08476955443620682, -0.05350704491138458, 0.05364414304494858, 0.05267052724957466, 0.02482927031815052, -0.04081256315112114, 0.0028923822101205587, 0.07648500800132751, -0.03816632181406021, -0.04007495194673538, 0.07462465763092041, 0.06227567046880722, 0.04867677018046379, 0.043252140283584595, 0.02417357824742794, 0.0514526404440403, -0.03860669955611229, -0.0699998214840889, -0.047233227640390396, 0.04408431053161621, -0.0201367549598217, -0.0479922853410244, 0.03046181984245777, -0.0014603125164285302, 0.027202313765883446, 0.02285483293235302, 0.0652557834982872, -0.006336306221783161, 0.09153123944997787, 0.03612827882170677, 0.04062221944332123, -0.01753786951303482, 0.015597292222082615, 0.046747658401727676, -0.027948828414082527, 0.028136398643255234, -0.01892574317753315, 0.09232773631811142, 0.039658866822719574, -0.09186073392629623, 0.008226809091866016, -0.04111441597342491, -0.04652821272611618, -0.029281094670295715, -0.023959871381521225, 0.006757545750588179]},
{"question": "What does \u201cFatal error: Unexpectedly found nil while unwrapping an Optional value\u201d mean?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>My Swift program is crashing with <code>EXC_BAD_INSTRUCTION</code> and one of the following similar errors. What does this error mean, and how do I fix it?</p>\n\n<blockquote>\n  <p>Fatal error: Unexpectedly found nil while unwrapping an Optional value  </p>\n</blockquote>\n\n<p><em>or</em></p>\n\n<blockquote>\n  <p>Fatal error: Unexpectedly found nil while implicitly unwrapping an Optional value  </p>\n</blockquote>\n\n<hr>\n\n<p><sup>This post is intended to collect answers to \"unexpectedly found nil\" issues, so that they are not scattered and hard to find. Feel free to add your own answer or <a href=\"https://stackoverflow.com/posts/32170457/edit\">edit</a> the existing wiki answer.</sup></p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p><sup>This answer is <a href=\"https://meta.stackexchange.com/questions/11740/what-are-community-wiki-posts\">community wiki</a>. If you feel it could be made better, feel free to <a href=\"https://stackoverflow.com/posts/32170457/edit\">edit it</a>!</sup></p>\n<h2>Background: What\u2019s an Optional?</h2>\n<p>In Swift, <a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330\" rel=\"noreferrer\"><code>Optional&lt;Wrapped&gt;</code></a> is an <a href=\"https://en.wikipedia.org/wiki/Option_type\" rel=\"noreferrer\">option type</a>: it can contain any value from the original (\"Wrapped\") type, or no value at all (the special value <code>nil</code>). An optional value must be <strong>unwrapped</strong> before it can be used.</p>\n<p>Optional is a <a href=\"https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html\" rel=\"noreferrer\">generic type</a>, which means that <code>Optional&lt;Int&gt;</code> and <code>Optional&lt;String&gt;</code> are distinct types \u2014 the type inside <code>&lt;&gt;</code> is called the Wrapped type. Under the hood, an Optional is an <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html\" rel=\"noreferrer\">enum</a> with two cases: <code>.some(Wrapped)</code> and <code>.none</code>, where <code>.none</code> is equivalent to <code>nil</code>.</p>\n<p>Optionals can be declared using the named type <code>Optional&lt;T&gt;</code>, or (most commonly) as a shorthand with a <code>?</code> suffix.</p>\n<pre><code>var anInt: Int = 42\nvar anOptionalInt: Int? = 42\nvar anotherOptionalInt: Int?  // `nil` is the default when no value is provided\nvar aVerboseOptionalInt: Optional&lt;Int&gt;  // equivalent to `Int?`\n\nanOptionalInt = nil // now this variable contains nil instead of an integer\n</code></pre>\n<p>Optionals are a simple yet powerful tool to express your assumptions while writing code. The compiler can use this information to prevent you from making mistakes. From <a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html\" rel=\"noreferrer\">The Swift Programming Language</a>:</p>\n<blockquote>\n<p>Swift is a <em>type-safe</em> language, which means the language helps you to be clear about the types of values your code can work with. If part of your code requires a <code>String</code>, type safety prevents you from passing it an <code>Int</code> by mistake. <strong>Likewise, type safety prevents you from accidentally passing an optional <code>String</code> to a piece of code that requires a non-optional <code>String</code>.</strong> Type safety helps you catch and fix errors as early as possible in the development process.</p>\n</blockquote>\n<p>Some other programming languages also have generic <a href=\"https://en.wikipedia.org/wiki/Option_type\" rel=\"noreferrer\">option types</a>: for example, <a href=\"https://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Maybe.html\" rel=\"noreferrer\">Maybe</a> in Haskell, <a href=\"https://doc.rust-lang.org/std/option/\" rel=\"noreferrer\">option</a> in Rust, and <a href=\"https://en.cppreference.com/w/cpp/utility/optional\" rel=\"noreferrer\">optional</a> in C++17.</p>\n<p>In programming languages <em>without</em> option types, a particular <a href=\"https://en.wikipedia.org/wiki/Sentinel_value\" rel=\"noreferrer\">\"sentinel\" value</a> is often used to indicate the absence of a valid value. In Objective-C, for example, <code>nil</code> (the <a href=\"https://en.wikipedia.org/wiki/Null_pointer\" rel=\"noreferrer\">null pointer</a>) represents the lack of an object. For primitive types such as <code>int</code>, a null pointer can't be used, so you would need either a separate variable (such as <code>value: Int</code> and <code>isValid: Bool</code>) or a designated sentinel value (such as <code>-1</code> or <code>INT_MIN</code>). These approaches are error-prone because it's easy to forget to check <code>isValid</code> or to check for the sentinel value. Also, if a particular value is chosen as the sentinel, that means it can no longer be treated as a <em>valid</em> value.</p>\n<p>Option types such as Swift's <code>Optional</code> solve these problems by introducing a special, separate <code>nil</code> value (so you don't have to designate a sentinel value), and by leveraging the strong type system so the compiler can help you remember to check for nil when necessary.</p>\n<hr>\n<h2>Why did I get \u201c<em>fatal error: unexpectedly found nil while unwrapping an Optional value</em>\u201d?</h2>\n<p>In order to access an optional\u2019s value (if it has one at all), you need to <strong>unwrap</strong> it. An optional value can be unwrapped safely or forcibly. If you force-unwrap an optional, and it <em>didn't</em> have a value, your program will crash with the above message.</p>\n<p>Xcode will show you the crash by highlighting a line of code. The problem occurs on this line.</p>\n<p><a href=\"https://i.stack.imgur.com/dQelz.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/dQelz.png\" alt=\"crashed line\"></a></p>\n<p>This crash can occur with two different kinds of force-unwrap:</p>\n<h3>1. Explicit Force Unwrapping</h3>\n<p>This is done with the <code>!</code> operator on an optional. For example:</p>\n<pre><code>let anOptionalString: String?\nprint(anOptionalString!) // &lt;- CRASH\n</code></pre>\n<blockquote>\n<p>Fatal error: Unexpectedly found nil while unwrapping an Optional value</p>\n</blockquote>\n<p>As <code>anOptionalString</code> is <code>nil</code> here, you will get a crash on the line where you force unwrap it.</p>\n<h3>2. Implicitly Unwrapped Optionals</h3>\n<p>These are defined with  a <code>!</code>, rather than a <code>?</code> after the type.</p>\n<pre><code>var optionalDouble: Double!   // this value is implicitly unwrapped wherever it's used\n</code></pre>\n<p>These optionals are assumed to contain a value. Therefore whenever you access an implicitly unwrapped optional, it will automatically be force unwrapped for you. If it doesn\u2019t contain a value, it will crash.</p>\n<pre><code>print(optionalDouble) // &lt;- CRASH\n</code></pre>\n<blockquote>\n<p>Fatal error: Unexpectedly found nil while <strong>implicitly</strong> unwrapping an Optional value</p>\n</blockquote>\n<p>In order to work out which variable caused the crash, you can hold <kbd>\u2325</kbd> while clicking to show the definition, where you might find the optional type.</p>\n<img src=\"https://i.stack.imgur.com/zZmlK.gif\" width=\"300\">\n<p>IBOutlets, in particular, are usually implicitly unwrapped optionals. This is because your xib or storyboard will link up the outlets at runtime, <em>after</em> initialization. You should therefore ensure that you\u2019re not accessing outlets before they're loaded in. You also should check that the connections are correct in your storyboard/xib file, otherwise the values will be <code>nil</code> at runtime, and therefore crash when they are implicitly unwrapped. When fixing connections, try deleting the lines of code that define your outlets, then reconnect them.</p>\n<hr>\n<h2>When should I ever force unwrap an Optional?</h2>\n<h3>Explicit Force Unwrapping</h3>\n<p>As a general rule, you should never explicitly force unwrap an optional with the <code>!</code> operator. There may be cases where using <code>!</code> is acceptable \u2013 but you should only ever be using it if you are 100% sure that the optional contains a value.</p>\n<p>While there <em>may</em> be an occasion where you can use force unwrapping, as you know for a <em>fact</em> that an optional contains a value \u2013 there is not a <em>single</em> place where you cannot safely unwrap that optional instead.</p>\n<p><b></b></p>\n<h3>Implicitly Unwrapped Optionals</h3>\n<p>These variables are designed so that you can defer their assignment until later in your code. It is <em>your</em> responsibility to ensure they have a value before you access them. However, because they involve force unwrapping, they are still inherently unsafe \u2013 as they <em>assume</em> your value is non-nil, even though assigning nil is valid.</p>\n<p>You should only be using implicitly unwrapped optionals as a <em>last resort</em>. If you can use a <a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html#//apple_ref/doc/uid/TP40014097-CH14-ID255\" rel=\"noreferrer\">lazy variable</a>, or provide a <a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html#//apple_ref/doc/uid/TP40014097-CH18-ID206\" rel=\"noreferrer\">default value</a> for a variable \u2013 you should do so instead of using an implicitly unwrapped optional.</p>\n<p>However, there are a <a href=\"https://stackoverflow.com/a/24583157/2976878\">few scenarios where implicitly unwrapped optionals are beneficial</a>, and you are still able to use various ways of safely unwrapping them as listed below \u2013 but you should <em>always</em> use them with due caution.</p>\n<hr>\n<h2>How can I safely deal with Optionals?</h2>\n<p>The simplest way to check whether an optional contains a value, is to compare it to <code>nil</code>.</p>\n<pre><code>if anOptionalInt != nil {\n    print(\"Contains a value!\")\n} else {\n    print(\"Doesn\u2019t contain a value.\")\n}\n</code></pre>\n<p>However, 99.9% of the time when working with optionals, you\u2019ll actually want to access the value it contains, if it contains one at all. To do this, you can use <em>Optional Binding</em>.</p>\n<h3>Optional Binding</h3>\n<p>Optional Binding allows you to check if an optional contains a value \u2013 and allows you to assign the unwrapped value to a new variable or constant. It uses the syntax <code>if let x = anOptional {...}</code> or <code>if var x = anOptional {...}</code>, depending if you need to modify the value of the new variable after binding it.</p>\n<p>For example:</p>\n<pre><code>if let number = anOptionalInt {\n    print(\"Contains a value! It is \\(number)!\")\n} else {\n    print(\"Doesn\u2019t contain a number\")\n}\n</code></pre>\n<p>What this does is first check that the optional contains a value. If it <em>does</em>, then the \u2018unwrapped\u2019 value is assigned to  a new variable (<code>number</code>) \u2013 which you can then freely use as if it were non-optional. If the optional <em>doesn\u2019t</em> contain a value, then the else clause will be invoked, as you would expect.</p>\n<p>What\u2019s neat about optional binding, is you can unwrap multiple optionals at the same time. You can just separate the statements with a comma. The statement will succeed if all the optionals were unwrapped.</p>\n<pre><code>var anOptionalInt : Int?\nvar anOptionalString : String?\n\nif let number = anOptionalInt, let text = anOptionalString {\n    print(\"anOptionalInt contains a value: \\(number). And so does anOptionalString, it\u2019s: \\(text)\")\n} else {\n    print(\"One or more of the optionals don\u2019t contain a value\")\n}\n</code></pre>\n<p>Another neat trick is that you can also use commas to check for a certain condition on the value, after unwrapping it.</p>\n<pre><code>if let number = anOptionalInt, number &gt; 0 {\n    print(\"anOptionalInt contains a value: \\(number), and it\u2019s greater than zero!\")\n}\n</code></pre>\n<p>The only catch with using optional binding within an if statement, is that you can only access the unwrapped value from within the scope of the statement. If you need access to the value from outside of the scope of the statement, you can use a <em>guard statement</em>.</p>\n<p>A <a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/if-statement\" rel=\"noreferrer\">guard statement</a> allows you to define a condition for success \u2013 and the current scope will only continue executing if that condition is met. They are defined with the syntax <code>guard condition else {...}</code>.</p>\n<p>So, to use them with an optional binding, you can do this:</p>\n<pre><code>guard let number = anOptionalInt else {\n    return\n}\n</code></pre>\n<p><sup>(Note that within the guard body, you <strong>must</strong> use one of the <a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html#//apple_ref/doc/uid/TP40014097-CH9-ID135\" rel=\"noreferrer\">control transfer statements</a> in order to exit the scope of the currently executing code).</sup></p>\n<p>If <code>anOptionalInt</code> contains a value, it will be unwrapped and assigned to the new <code>number</code> constant. The code <em>after</em> the guard will then continue executing. If it doesn\u2019t contain a value \u2013 the guard will execute the code within the brackets, which will lead to transfer of control, so that the code immediately after will not be executed.</p>\n<p>The real neat thing about guard statements is the unwrapped value is now available to use in code that follows the statement (as we know that future code can <em>only</em> execute if the optional has a value). This is a great for eliminating <a href=\"https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming)\" rel=\"noreferrer\">\u2018pyramids of doom\u2019</a> created by nesting multiple if statements.</p>\n<p>For example:</p>\n<pre><code>guard let number = anOptionalInt else {\n    return\n}\n\nprint(\"anOptionalInt contains a value, and it\u2019s: \\(number)!\")\n</code></pre>\n<p>Guards also support the same neat tricks that the if statement supported, such as unwrapping multiple optionals at the same time and using the <code>where</code> clause.</p>\n<p>Whether you use an if or guard statement completely depends on whether any future code <em>requires</em> the optional to contain a value.</p>\n<h3>Nil Coalescing Operator</h3>\n<p>The <a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/BasicOperators.html#//apple_ref/doc/uid/TP40014097-CH6-ID72\" rel=\"noreferrer\">Nil Coalescing Operator</a> is a nifty shorthand version of the <a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/BasicOperators.html#//apple_ref/doc/uid/TP40014097-CH6-ID71\" rel=\"noreferrer\">ternary conditional operator</a>, primarily designed to convert optionals to non-optionals. It has the syntax <code>a ?? b</code>, where <code>a</code> is an optional type and <code>b</code> is the same type as <code>a</code> (although usually non-optional).</p>\n<p>It essentially lets you say \u201cIf <code>a</code> contains a value, unwrap it. If it doesn\u2019t then return <code>b</code> instead\u201d. For example, you could use it like this:</p>\n<pre><code>let number = anOptionalInt ?? 0\n</code></pre>\n<p>This will define a <code>number</code> constant of <code>Int</code> type, that will either contain the value of <code>anOptionalInt</code>, if it contains a value, or <code>0</code> otherwise.</p>\n<p>It\u2019s just shorthand for:</p>\n<pre><code>let number = anOptionalInt != nil ? anOptionalInt! : 0\n</code></pre>\n<h3>Optional Chaining</h3>\n<p>You can use <a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html#//apple_ref/doc/uid/TP40014097-CH21-ID245\" rel=\"noreferrer\">Optional Chaining</a> in order to call a method or access a property on an optional. This is simply done by suffixing the variable name with a <code>?</code> when using it.</p>\n<p>For example, say we have a variable <code>foo</code>, of type an optional <code>Foo</code> instance.</p>\n<pre><code>var foo : Foo?\n</code></pre>\n<p>If we wanted to call a method on <code>foo</code> that doesn\u2019t return anything, we can simply do:</p>\n<pre><code>foo?.doSomethingInteresting()\n</code></pre>\n<p>If <code>foo</code> contains a value, this method will be called on it. If it doesn\u2019t, nothing bad will happen \u2013 the code will simply continue executing.</p>\n<p><sup>(This is similar behaviour to sending messages to <code>nil</code> in Objective-C)</sup></p>\n<p>This can therefore also be used to set properties as well as call methods. For example:</p>\n<pre><code>foo?.bar = Bar()\n</code></pre>\n<p>Again, nothing bad will happen here if <code>foo</code> is <code>nil</code>. Your code will simply continue executing.</p>\n<p>Another neat trick that optional chaining lets you do is check whether setting a property or calling a method was successful. You can do this by comparing the return value to <code>nil</code>.</p>\n<p><sup>(This is because an optional value will return <code>Void?</code> rather than <code>Void</code> on a method that doesn\u2019t return anything)</sup></p>\n<p>For example:</p>\n<pre><code>if (foo?.bar = Bar()) != nil {\n    print(\"bar was set successfully\")\n} else {\n    print(\"bar wasn\u2019t set successfully\")\n}\n</code></pre>\n<p>However, things become a little bit more tricky when trying to access properties or call methods that return a value. Because <code>foo</code> is optional, anything returned from it will also be optional. To deal with this, you can either unwrap the optionals that get returned using one of the above methods \u2013 or unwrap <code>foo</code> itself before accessing methods or calling methods that return values.</p>\n<p>Also, as the name suggests, you can \u2018chain\u2019 these statements together. This means that if <code>foo</code> has an optional property <code>baz</code>, which has a property <code>qux</code> \u2013 you could write the following:</p>\n<pre><code>let optionalQux = foo?.baz?.qux\n</code></pre>\n<p>Again, because <code>foo</code> and <code>baz</code> are optional, the value returned from <code>qux</code> will always be an optional regardless of whether <code>qux</code> itself is optional.</p>\n<h3><code>map</code> and <code>flatMap</code></h3>\n<p>An often underused feature with optionals is the ability to use the <code>map</code> and <code>flatMap</code> functions. These allow you to apply non-optional transforms to optional variables. If an optional has a value, you can apply a given transformation to it. If it doesn\u2019t have a value, it will remain <code>nil</code>.</p>\n<p>For example, let\u2019s say you have an optional string:</p>\n<pre><code>let anOptionalString:String?\n</code></pre>\n<p>By applying the <code>map</code> function to it \u2013 we can use the <code>stringByAppendingString</code> function in order to concatenate it to another string.</p>\n<p>Because <code>stringByAppendingString</code> takes a non-optional string argument, we cannot input our optional string directly. However, by using <code>map</code>, we can use allow <code>stringByAppendingString</code> to be used if <code>anOptionalString</code> has a value.</p>\n<p>For example:</p>\n<pre><code>var anOptionalString:String? = \"bar\"\n\nanOptionalString = anOptionalString.map {unwrappedString in\n    return \"foo\".stringByAppendingString(unwrappedString)\n}\n\nprint(anOptionalString) // Optional(\"foobar\")\n</code></pre>\n<p>However, if <code>anOptionalString</code> doesn\u2019t have a value, <code>map</code> will return <code>nil</code>. For example:</p>\n<pre><code>var anOptionalString:String?\n\nanOptionalString = anOptionalString.map {unwrappedString in\n    return \"foo\".stringByAppendingString(unwrappedString)\n}\n\nprint(anOptionalString) // nil\n</code></pre>\n<p><code>flatMap</code> works similarly to <code>map</code>, except it allows you to return <em>another</em> optional from within the closure body. This means you can input an optional into a process that requires a non-optional input, but can output an optional itself.</p>\n<h2><code>try!</code></h2>\n<p>Swift's error handling system can be safely used with <a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html#//apple_ref/doc/uid/TP40014097-CH42-ID508\" rel=\"noreferrer\">Do-Try-Catch</a>:</p>\n<pre><code>do {\n    let result = try someThrowingFunc() \n} catch {\n    print(error)\n}\n</code></pre>\n<p>If <code>someThrowingFunc()</code> throws an error, the error will be safely caught in the <code>catch</code> block.</p>\n<p>The <code>error</code> constant you see in the <code>catch</code> block has not been declared by us - it's automatically generated by <code>catch</code>.</p>\n<p>You can also declare <code>error</code> yourself, it has the advantage of being able to cast it to a useful format, for example:</p>\n<pre><code>do {\n    let result = try someThrowingFunc()    \n} catch let error as NSError {\n    print(error.debugDescription)\n}\n</code></pre>\n<p>Using <code>try</code> this way is the proper way to try, catch and handle errors coming from throwing functions.</p>\n<p>There's also <code>try?</code> which absorbs the error:</p>\n<pre><code>if let result = try? someThrowingFunc() {\n    // cool\n} else {\n    // handle the failure, but there's no error information available\n}\n</code></pre>\n<p>But Swift's error handling system also provides a way to \"force try\" with <code>try!</code>:</p>\n<pre><code>let result = try! someThrowingFunc()\n</code></pre>\n<p>The concepts explained in this post also apply here: if an error is thrown, the application will crash.</p>\n<p><em>You should only ever use <code>try!</code> if you can prove that its result will never fail in your context - and this is very rare.</em></p>\n<p>Most of the time you will use the complete Do-Try-Catch system - and the optional one, <code>try?</code>, in the rare cases where handling the error is not important.</p>\n<hr>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330\" rel=\"noreferrer\">Apple documentation on Swift Optionals</a></li>\n<li><a href=\"https://stackoverflow.com/a/24583157/2976878\">When to use and when not to use implicitly unwrapped optionals</a></li>\n<li><a href=\"http://www.raywenderlich.com/10209/my-app-crashed-now-what-part-1\" rel=\"noreferrer\">Learn how to debug an iOS app crash</a></li>\n</ul>\n    </div>", "total_vectors": [-0.008009044453501701, -0.06900287419557571, -0.012315655127167702, 0.03947016969323158, 0.023489532992243767, -0.03068333864212036, -0.06201132386922836, 0.017814239487051964, 0.053649310022592545, -0.0015274822944775224, 0.03894764930009842, 0.0036502296570688486, -0.0487251952290535, 0.05630143731832504, -0.05851268768310547, 0.08899596333503723, -0.025516632944345474, 0.010213424451649189, 0.06998974829912186, 0.027089785784482956, 0.08336146175861359, 0.04336189478635788, 0.009769282303750515, -0.018062112852931023, -0.007232006639242172, 0.02124140039086342, 0.06129656732082367, -0.02055271901190281, -0.04837898164987564, 0.012093390338122845, 0.014362888410687447, 0.03787802532315254, 0.013528790324926376, -0.05266673490405083, -0.08560916781425476, -0.06017132103443146, -0.0462963841855526, -0.015247100032866001, 0.01789858750998974, 0.02988438494503498, 0.033753253519535065, -0.06613945960998535, -0.03620225191116333, 0.027482328936457634, 0.0869910717010498, -0.040412403643131256, 0.014943325892090797, 0.045370880514383316, -0.004782375413924456, -0.04198109358549118, 0.008686958812177181, 0.07401633262634277, -0.010866365395486355, -0.05246945843100548, -0.054407209157943726, -0.04511213302612305, -0.07567460089921951, -0.028417829424142838, 0.06282521784305573, -0.052258074283599854, -0.06159251928329468, -0.015890207141637802, -0.015426920726895332, -0.06500764191150665, -0.020077770575881004, -0.07955073565244675, -0.05840253457427025, -0.0013427793746814132, -0.062304139137268066, 0.02645277976989746, -0.0533626526594162, 0.03140456601977348, 0.028602520003914833, -0.009956061840057373, -0.0063027855940163136, -0.008205879479646683, 0.029486779123544693, 0.010625060647726059, -0.013344806618988514, 0.05009134113788605, 0.03545510396361351, 0.015869617462158203, -0.029244188219308853, 0.0370342954993248, 0.07113854587078094, 0.025817062705755234, 0.010939056053757668, 0.04500732943415642, -0.04954364895820618, -0.035819392651319504, 0.03929365053772926, -0.01927722617983818, -0.040534231811761856, 0.06119300052523613, 0.04840940609574318, -0.018620535731315613, -0.06649549305438995, -0.013969526626169682, -0.042074814438819885, -0.07515561580657959, 0.024600179865956306, 0.045746251940727234, -0.06341098248958588, -0.0428505502641201, -0.03202107921242714, 0.030302757397294044, -0.036459844559431076, 0.026028195396065712, -0.004696821793913841, 0.036074135452508926, -0.07846762984991074, -0.042111918330192566, -0.0408739373087883, 0.05956096574664116, 0.0424688346683979, 0.05190363898873329, 0.04394153505563736, -0.004612898454070091, -0.015531442128121853, -0.06931620836257935, -0.012850063852965832, 0.011961247771978378, 0.005699917208403349, -0.021382268518209457, 0.0699516087770462, 0.012916680425405502, 0.0023872838355600834, -0.009911846369504929, 0.04698197543621063, -0.040805596858263016, -0.04565224051475525, -0.04721864312887192, -0.002080415142700076, -0.08285661041736603, 0.03540787473320961, 0.010966680012643337, 0.009653270244598389, -0.043269261717796326, -0.07874060422182083, 0.018728649243712425, 0.03437242656946182, 0.024675017222762108, -0.0035646355245262384, -0.06734413653612137, -0.000215793916140683, -0.0835445299744606, 0.02913495898246765, -0.0077481395564973354, 0.026987623423337936, -0.07518552988767624, -0.024700719863176346, 0.021680256351828575, 0.07989513128995895, -0.002492606407031417, 0.020345479249954224, -0.04343612119555473, 0.0058140829205513, 0.04684232175350189, -0.07346741110086441, -0.031468238681554794, -0.004730427172034979, -0.01341165043413639, -0.06922696530818939, -0.06428772211074829, 0.014157325029373169, -0.016048936173319817, -0.056413762271404266, 0.007381714414805174, -0.02920263446867466, -0.03599689528346062, -0.024744413793087006, -0.08888915926218033, 0.02165832184255123, 0.02900596521794796, 0.0701477900147438, -0.01342693530023098, 0.0009821206331253052, 0.06403994560241699, 0.029966307803988457, -0.031208623200654984, 0.019803328439593315, 0.01023594755679369, -0.08407800644636154, -0.007056478876620531, -0.04268387332558632, -0.056734077632427216, 0.029549773782491684, 0.08107519894838333, -0.008850864134728909, 0.005607352592051029, 0.0722493827342987, 0.03649688884615898, -0.009280337020754814, -0.05772770568728447, -0.0039936271496117115, 0.026000825688242912, 0.06344781816005707, 0.08903156220912933, 0.048671528697013855, 0.0880499929189682, -0.06820043176412582, 0.022604750469326973, 0.06493189185857773, 0.07890567928552628, 0.031122947111725807, 0.02649706043303013, -0.07400059700012207, 0.017772359773516655, -0.08686685562133789, 0.009181588888168335, 0.04477973282337189, 0.05218861252069473, 0.03421308100223541, 0.0064363121055066586, 0.03772909939289093, 0.042929161339998245, 0.04306459799408913, -0.08687231689691544, 0.015434278175234795, -0.03921961411833763, -0.07255405932664871, 0.04967153072357178, -0.00944455061107874, -0.0015728322323411703, 0.004379130434244871, 0.010174239985644817, -0.046159833669662476, -0.02655559778213501, -0.06333059817552567, -0.00870625302195549, 0.059759531170129776, 0.08231693506240845, 0.08756718784570694, -0.07435808330774307, 0.044869232922792435, -0.040706533938646317, 0.08744250237941742, 0.021430741995573044, 0.018000677227973938, -0.043767787516117096, 0.026082849130034447, 0.058595750480890274, 0.04506155848503113, -0.030502505600452423, -0.00911680981516838, 0.0764591172337532, 0.05633840337395668, -0.028449464589357376, 0.08828753978013992, 0.033238135278224945, -0.06260396540164948, 0.01023752149194479, -0.07962726801633835, -0.03784389793872833, 0.08226004987955093, -0.07889775931835175, -0.05403609946370125, -0.044509515166282654, 0.019619416445493698, 0.015536799095571041, -0.040263544768095016, 0.07388977706432343, -0.07445785403251648, 0.005154797807335854, 0.00296437437646091, 0.01301935687661171, -0.020594071596860886, -0.05593809857964516, -0.009967929683625698, 0.023081209510564804, -0.04010169208049774, -0.03909999504685402, 0.07025301456451416, 0.06355510652065277, 0.01993146911263466, 0.015767371281981468, -0.01109685841947794, -0.002710773376747966, 0.08021564781665802, -0.006432437337934971, -0.05613381788134575, 0.0543462373316288, 0.05354062467813492, 0.039304956793785095, -0.03446529805660248, -0.08221461623907089, 0.005900074262171984, -0.03805210068821907, -0.004177531693130732, -0.03134414181113243, -0.03567147254943848, 0.03985317051410675, -0.05395292863249779, 0.0036825845018029213, 0.017612170428037643, -0.06530623137950897, -0.0006649362621828914, -0.0057235597632825375, -0.0033385485876351595, -0.01603042148053646, 0.014157536439597607, -0.02295483648777008, -0.08331434428691864, 0.03568248823285103, -0.005608880892395973, -0.027379050850868225, 0.01703115738928318, -0.002302057109773159, 0.020769326016306877, 0.037769854068756104, 0.05861619487404823, 0.022520028054714203, 0.054080281406641006, 0.04148942977190018, 0.018543250858783722, 0.02786952443420887, 0.017278164625167847, -0.049394357949495316, -0.06613856554031372, 0.06150878593325615, 0.05099586397409439, -0.02589714154601097, 0.02993500791490078, 0.029164038598537445, 0.06418668478727341, 0.08405502140522003, -0.006785139907151461, 0.036458320915699005, 0.012983844615519047, -0.017259083688259125, 0.014594468288123608, 0.056678734719753265, 0.030814597383141518, 0.019410116598010063, 0.0654316172003746, -0.07076284289360046, 0.01926020346581936, -0.0620504692196846, 0.05056928098201752, -0.016399521380662918, -0.02901880256831646, -0.032619673758745193, -0.004697962198406458, -2.0953552848368417e-06, -0.08847036212682724, -0.0076331947930157185, -0.08112891018390656, 0.04234936460852623, 0.02268068864941597, 0.004088799934834242, 0.06177529692649841, 0.015251558274030685, -0.030108962208032608, 0.007654176093637943, -0.06174937263131142, 0.03062012791633606, -0.08784019947052002, 0.040804777294397354, 0.03576529398560524, 0.02003333903849125, -0.012238092720508575, 0.0036513826344162226, -0.08854101598262787, 0.04567064344882965, 0.02643468603491783, -0.054116636514663696, -0.06727714836597443, 0.0285849180072546, 0.08565163612365723, -0.0039890524931252, -0.020050793886184692, 0.020007485523819923, 0.005130865145474672, 0.05788885056972504, -0.011895817704498768, -0.06624871492385864, 0.07007386535406113, 0.04569770023226738, -0.000503979274071753, 0.012842330150306225, -0.03659963607788086, 0.016849052160978317, 0.008670931681990623, 0.05817818269133568, 0.06741403788328171, -0.003455739701166749, 0.06780227273702621, -0.0020453447941690683, -0.03571493923664093, -0.032518431544303894, 0.0015426964964717627, 0.02141697145998478, -0.0047391741536557674, -0.016058526933193207, -0.03723740205168724, 0.037274714559316635, -0.02816394716501236, -0.012414894066751003, -0.06046914681792259, 0.023475492373108864, -0.016513673588633537, 0.045302797108888626, 0.04092135652899742, -0.01741623319685459, 0.046108268201351166, -0.004350283648818731, -0.05464334413409233, 0.004254760220646858, -0.04039600118994713, 0.07331889122724533, -0.07561896741390228, 0.04341582953929901, -0.03928718343377113, -0.052141159772872925, 0.05332760885357857, 0.050324324518442154, 0.019362449645996094, 0.029770178720355034, 0.0029470359440892935, -0.061069730669260025, 0.009205888025462627, 0.05955447256565094, 0.0648554116487503, 0.05893287807703018, 0.055451396852731705, 0.01595071330666542, 0.009512100368738174, 0.042196620255708694, 0.06617210805416107, 0.025681573897600174, 0.05510463938117027, 0.0023474269546568394, 0.0455881804227829, -0.012556995265185833, -0.0412139892578125, 0.02430565096437931, 0.040749743580818176, 0.037826232612133026, 0.020632902160286903, 0.04211636632680893, 0.025774728506803513, -0.04221559688448906, 0.03228588029742241, 0.02627764642238617, -0.009327501058578491, 0.010174928233027458, -0.0028863970655947924, -0.015622949227690697, 0.035673487931489944, 0.0588340163230896, -0.07194079458713531, -0.06687718629837036, 0.08830717951059341, 0.06283149123191833, 0.046305347234010696, -0.07479988783597946, 0.008193591609597206, 0.008410889655351639, -0.058885686099529266, 0.07671783864498138, 0.05237720161676407, -0.002579641295596957, 0.010028223507106304, 0.00819625984877348, 0.018533112481236458, -0.08818963915109634, 0.01519195269793272, -0.08317043632268906, 0.005990773905068636, 0.021679863333702087, 0.024091606959700584, 0.04256077855825424, -0.027324622496962547, 0.009382695890963078, 0.03743859753012657, -0.012262413278222084, -0.05046233907341957, 0.0027565129566937685, -0.008735506795346737, -0.05340881645679474, 0.055994123220443726, -0.07573036849498749, -0.006747046485543251, 0.011286241933703423, 0.0319075733423233, -0.02331865020096302, -0.07120566070079803, 0.041920457035303116, 0.046363409608602524, -0.06057179346680641, -0.013921543024480343, -0.05268397182226181, 0.03447900712490082, 0.023800263181328773, 0.030756758525967598, -0.037266332656145096, -0.0011071462649852037, 0.033023543655872345, -0.01617298275232315, -0.0335194393992424, -0.07249835878610611, 0.04322773963212967, 0.022104980424046516, 0.046635664999485016, 0.027113953605294228, -0.015120217576622963, 0.008218343369662762, 0.06370005756616592, -0.038080889731645584, 0.06019260361790657, 0.022088386118412018, -0.0330515131354332]},
{"question": "What does a \u201cCannot find symbol\u201d or \u201cCannot resolve symbol\u201d error mean?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>Please explain the following about \"Cannot find symbol\", \"Cannot resolve symbol\" or \"Symbol not found\" errors:</p>\n<ul>\n<li>What do they mean?</li>\n<li>What things can cause them?</li>\n<li>How does the programmer go about fixing them?</li>\n</ul>\n<p><em>This question is designed to seed a comprehensive Q&amp;A about these common compilation errors in Java.</em></p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<h1>0. Is there any difference between the two errors?</h1>\n<p>Not really. \"Cannot find symbol\", \"Cannot resolve symbol\" and \"Symbol not found\" all mean the same thing.  Different Java compilers use different phraseology.</p>\n<h1>1. What does a \"Cannot find symbol\" error mean?</h1>\n<p>Firstly, it is a <em>compilation error</em><sup>1</sup>.  It means that <em>either</em> there is a problem in your Java source code, <em>or</em> there is a problem in the way that you are compiling it.</p>\n<p>Your Java source code consists of the following things:</p>\n<ul>\n<li>Keywords: like <code>true</code>, <code>false</code>, <code>class</code>, <code>while</code>, and so on.</li>\n<li>Literals: like <code>42</code> and <code>'X'</code> and <code>\"Hi mum!\"</code>.</li>\n<li>Operators and other non-alphanumeric tokens: like <code>+</code>, <code>=</code>, <code>{</code>, and so on.</li>\n<li>Identifiers: like <code>Reader</code>, <code>i</code>, <code>toString</code>, <code>processEquibalancedElephants</code>, and so on.</li>\n<li>Comments and whitespace.</li>\n</ul>\n<p>A \"Cannot find symbol\" error is about the identifiers.  When your code is compiled, the compiler needs to work out what each and every identifier in your code means.</p>\n<p>A \"Cannot find symbol\" error means that the compiler cannot do this.  Your code appears to be referring to something that the compiler doesn't understand.</p>\n<h1>2. What can cause a \"Cannot find symbol\" error?</h1>\n<p>As a first order, there is only one cause.  The compiler looked in all of the places where the identifier <em>should</em> be defined, and it couldn't find the definition.  This could be caused by a number of things.  The common ones are as follows:</p>\n<ul>\n<li><p>For identifiers in general:</p>\n<ul>\n<li>Perhaps you spelled the name incorrectly; i.e. <code>StringBiulder</code> instead of <code>StringBuilder</code>.  Java cannot and will not attempt to compensate for bad spelling or typing errors.</li>\n<li>Perhaps you got the case wrong; i.e. <code>stringBuilder</code> instead of <code>StringBuilder</code>.  All Java identifiers are case sensitive.</li>\n<li>Perhaps you used underscores inappropriately; i.e. <code>mystring</code> and <code>my_string</code> are different.  (If you stick to the Java style rules, you will be largely protected from this mistake ...)</li>\n<li>Perhaps you are trying to use something that was declared \"somewhere else\"; i.e. in a different context to where you have implicitly told the compiler to look.  (A different class?  A different scope?  A different package?  A different code-base?)</li>\n</ul>\n</li>\n<li><p>For identifiers that should refer to variables:</p>\n<ul>\n<li>Perhaps you forgot to declare the variable.</li>\n<li>Perhaps the variable declaration is out of scope at the point you tried to use it.  (See example below)</li>\n</ul>\n</li>\n<li><p>For identifiers that should be method or field names:</p>\n<ul>\n<li><p>Perhaps you are trying to refer to an inherited method or field that wasn't declared in the parent / ancestor classes or interfaces.</p>\n</li>\n<li><p>Perhaps you are trying to refer to a method or field that does not exist (i.e. has not been declared) in the type you are using; e.g. <code>\"someString\".push()</code><sup>2</sup>.</p>\n</li>\n<li><p>Perhaps you are trying to use a method as a field, or vice versa; e.g. <code>\"someString\".length</code> or <code>someArray.length()</code>.</p>\n</li>\n<li><p>Perhaps you are mistakenly operating on an array rather than array element; e.g.</p>\n<pre><code>    String strings[] = ...\n    if (strings.charAt(3)) { ... }\n    // maybe that should be 'strings[0].charAt(3)'\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>For identifiers that should be class names:</p>\n<ul>\n<li><p>Perhaps you forgot to import the class.</p>\n</li>\n<li><p>Perhaps you used \"star\" imports, but the class isn't defined in any of the packages that you imported.</p>\n</li>\n<li><p>Perhaps you forgot a <code>new</code> as in:</p>\n<pre><code>    String s = String();  // should be 'new String()'\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>For cases where type or instance doesn't appear to have the member you were expecting it to have:</p>\n<ul>\n<li>Perhaps you have declared a nested class or a generic parameter that <em>shadows</em> the type you were meaning to use.</li>\n<li>Perhaps you are shadowing a static or instance variable.</li>\n<li>Perhaps you imported the wrong type; e.g. due to IDE completion or auto-correction.</li>\n<li>Perhaps you are using (compiling against) the wrong version of an API.</li>\n<li>Perhaps you forgot to cast your object to an appropriate subclass.</li>\n</ul>\n</li>\n</ul>\n<p>The problem is often a combination of the above.  For example, maybe you \"star\" imported <code>java.io.*</code> and then tried to use the <code>Files</code> class ... which is in <code>java.nio</code> not <code>java.io</code>.  Or maybe you meant to write <code>File</code> ... which <em>is</em> a class in <code>java.io</code>.</p>\n<hr>\n<p>Here is an example of how incorrect variable scoping can lead to a \"Cannot find symbol\" error:</p>\n<pre><code>List&lt;String&gt; strings = ...\n\nfor (int i = 0; i &lt; strings.size(); i++) {\n    if (strings.get(i).equalsIgnoreCase(\"fnord\")) {\n        break;\n    }\n}\nif (i &lt; strings.size()) {\n    ...\n}\n</code></pre>\n<p>This will give a \"Cannot find symbol\" error for <code>i</code> in the <code>if</code> statement.  Though we previously declared <code>i</code>, that declaration is only <em>in scope</em> for the <code>for</code> statement and its body.  The reference to <code>i</code> in the <code>if</code> statement <em>cannot see</em> that declaration of <code>i</code>.  It is <em>out of scope</em>.</p>\n<p>(An appropriate correction here might be to move the <code>if</code> statement inside the loop, or to declare <code>i</code> before the start of the loop.)</p>\n<hr>\n<p>Here is an example that causes puzzlement where a typo leads to a seemingly inexplicable \"Cannot find symbol\" error:</p>\n<pre><code>for (int i = 0; i &lt; 100; i++); {\n    System.out.println(\"i is \" + i);\n}\n</code></pre>\n<p>This will give you a compilation error in the <code>println</code> call saying that <code>i</code> cannot be found.  But (I hear you say) I did declare it!</p>\n<p>The problem is the sneaky semicolon ( <code>;</code> ) before the <code>{</code>.  The Java language syntax defines a semicolon in that context to be an <em>empty statement</em>.  The empty statement then becomes the body of the <code>for</code> loop.  So that code actually means this:</p>\n<pre><code>for (int i = 0; i &lt; 100; i++); \n\n// The previous and following are separate statements!!\n\n{\n    System.out.println(\"i is \" + i);\n}\n</code></pre>\n<p>The <code>{ ... }</code> block is NOT the body of the <code>for</code> loop, and therefore the previous declaration of <code>i</code> in the <code>for</code> statement is <em>out of scope</em> in the block.</p>\n<hr>\n<p>Here is another example of \"Cannot find symbol\" error that is caused by a typo.</p>\n<pre><code>int tmp = ...\nint res = tmp(a + b);\n</code></pre>\n<p>Despite the previous declaration, the <code>tmp</code> in the <code>tmp(...)</code> expression is erroneous.  The compiler will look for a method called <code>tmp</code>, and won't find one.  The previously declared <code>tmp</code> is in the namespace for variables, not the namespace for methods.</p>\n<p>In the example I came across, the programmer had actually left out an operator.  What he meant to write was this:</p>\n<pre><code>int res = tmp * (a + b);\n</code></pre>\n<hr>\n<p>There is another reason why the compiler might not find a symbol if you are compiling from the command line.  You might simply have forgotten to compile or recompile some other class.  For example, if you have classes <code>Foo</code> and <code>Bar</code> where <code>Foo</code> uses <code>Bar</code>.  If you have never compiled <code>Bar</code> and you run <code>javac Foo.java</code>, you are liable to find that the compiler can't find the symbol <code>Bar</code>.  The simple answer is to compile <code>Foo</code> and <code>Bar</code> together; e.g. <code>javac Foo.java Bar.java</code> or <code>javac *.java</code>.  Or better still use a Java build tool; e.g. Ant, Maven, Gradle and so on.</p>\n<p>There are some other more obscure causes too ... which I will deal with below.</p>\n<h1>3. How do I fix these errors ?</h1>\n<p>Generally speaking, you start out by figuring out what <em>caused</em> the compilation error.</p>\n<ul>\n<li>Look at the line in the file indicated by the compilation error message.</li>\n<li>Identify which symbol that the error message is talking about.</li>\n<li>Figure out <em>why</em> the compiler is saying that it cannot find the symbol; see above!</li>\n</ul>\n<p>Then you <em>think</em> about what your code is supposed to be saying.  Then finally you work out what correction you need to make to your source code to do what you want.</p>\n<p>Note that not every \"correction\" is correct. Consider this:</p>\n<pre><code>for (int i = 1; i &lt; 10; i++) {\n    for (j = 1; j &lt; 10; j++) {\n        ...\n    }\n}\n</code></pre>\n<p>Suppose that the compiler says \"Cannot find symbol\" for <code>j</code>.  There are many ways I could \"fix\" that:</p>\n<ul>\n<li>I could change the inner <code>for</code> to <code>for (int j = 1; j &lt; 10; j++)</code> - probably correct.</li>\n<li>I could add a declaration for <code>j</code> <em>before</em> the inner <code>for</code> loop, or the outer <code>for</code> loop - possibly correct.</li>\n<li>I could change <code>j</code> to <code>i</code> in the inner <code>for</code> loop - probably wrong!</li>\n<li>and so on.</li>\n</ul>\n<p>The point is that you <em>need</em> to understand what your code is trying to do in order to find the right fix.</p>\n<h1>4.  Obscure causes</h1>\n<p>Here are a couple of cases where the \"Cannot find symbol\" is seemingly inexplicable ... until you look closer.</p>\n<ol>\n<li><p><strong>Incorrect dependencies</strong>: If you are using an IDE or a build tool that manages the build path and project dependencies, you may have made a mistake with the dependencies; e.g. left out a dependency, or selected the wrong version.  If you are using a build tool (Ant, Maven, Gradle, etc), check the project's build file.  If you are using an IDE, check the project's build path configuration.</p>\n</li>\n<li><p><strong>You are not recompiling</strong>:  It sometimes happens that new Java programmers don't understand how the Java tool chain works, or haven't implemented a repeatable \"build process\"; e.g. using an IDE, Ant, Maven, Gradle and so on.  In such a situation, the programmer can end up chasing his tail looking for an illusory error that is <em>actually</em> caused by not recompiling the code properly, and the like ...</p>\n</li>\n<li><p><strong>An earlier build problem</strong>:  It is possible that an earlier build failed in a way that gave a JAR file with missing classes.  Such a failure would typically be noticed if you were using a build tool.  However if you are getting JAR files from someone else, you are dependent on <em>them</em> building properly, and noticing errors.  If you suspect this, use <code>tar -tvf</code> to list the contents of the suspect JAR file.</p>\n</li>\n<li><p><strong>IDE issues</strong>: People have reported cases where their IDE gets confused and the compiler in the IDE cannot find a class that exists ... or the reverse situation.</p>\n<ul>\n<li><p>This could happen if the IDE has been configured with the wrong JDK version.</p>\n</li>\n<li><p>This could happen if the IDE's caches get out of sync with the file system.  There are IDE specific ways to fix that.</p>\n</li>\n<li><p>This could be an IDE bug.  For instance @Joel Costigliola describes a scenario where Eclipse does not handle a Maven \"test\" tree correctly: <a href=\"https://stackoverflow.com/a/37207223/139985\"><strong>see this answer</strong></a>.</p>\n</li>\n</ul>\n</li>\n<li><p><strong>Android issues</strong>: When you are programming for Android, and you have \"Cannot find symbol\" errors related to <code>R</code>, be aware that the <code>R</code> symbols are defined by the <code>context.xml</code> file.  Check that your <code>context.xml</code> file is correct and in the correct place, and that the corresponding <code>R</code> class file has been generated / compiled.  Note that the Java symbols are case sensitive, so the corresponding XML ids are be case sensitive too.</p>\n<p>Other symbol errors on Android are likely to be due to previously mention reasons; e.g. missing or incorrect dependencies, incorrect package names, method or fields that don't exist in a particular API version, spelling / typing errors, and so on.</p>\n</li>\n<li><p><strong>Redefining system classes</strong>: I've seen cases where the compiler complains that <code>substring</code> is an unknown symbol in something like the following</p>\n<pre><code>String s = ...\nString s1 = s.substring(1);\n</code></pre>\n<p>It turned out that the programmer had created their own version of <code>String</code> and that his version of the class didn't define a <code>substring</code> methods.</p>\n<p>Lesson: Don't define your own classes with the same names as common library classes!</p>\n</li>\n<li><p><strong>Homoglyphs:</strong>  If you use UTF-8 encoding for your source files, it is possible to have identifiers that <em>look</em> the same, but are in fact different because they contain homoglyphs.   See <a href=\"http://en.wikipedia.org/wiki/Homoglyph\" rel=\"noreferrer\">this page</a> for more information.</p>\n<p>You can avoid this by restricting yourself to ASCII or Latin-1 as the source file encoding, and using Java <code>\\uxxxx</code> escapes for other characters.</p>\n</li>\n</ol>\n<hr>\n<p><sup>1 - If, perchance, you <em>do</em> see this in a runtime exception or error message, then either you have configured your IDE to run code with compilation errors, or your application is generating and compiling code .. at runtime.</sup></p>\n<p><sup>2 - The three basic principles of Civil Engineering: water doesn't flow uphill, a plank is stronger on its side, and <em>you can't push on a string</em>.</sup></p>\n    </div>", "total_vectors": [0.054191622883081436, -0.046194396913051605, 0.002584035973995924, 0.0766441747546196, -0.03295813128352165, -0.01837816648185253, -0.07895165681838989, 0.015674445778131485, 0.01242376770824194, 0.0116576561704278, -0.01909099891781807, -0.03924175724387169, -0.058196574449539185, 0.049361977726221085, 0.047288112342357635, 0.08204364776611328, 0.01757463999092579, 0.052019987255334854, 0.0025383695028722286, -0.018874872475862503, 0.07324991375207901, 0.017673291265964508, 0.04507032036781311, 0.03049398958683014, -0.019039496779441833, 0.06273580342531204, 0.043689560145139694, -0.005455533042550087, -0.028610466048121452, -0.060919389128685, -0.021262187510728836, -0.04002487286925316, 0.06323780864477158, -0.0004143710248172283, -0.08104226738214493, 0.028162391856312752, -0.020781591534614563, -0.02610578015446663, -0.03574615344405174, 0.037339597940444946, -0.002492093713954091, 0.019628409296274185, -0.001565343583934009, 0.07434608042240143, 0.08197004348039627, -0.054632578045129776, -0.013446946628391743, 0.02467736229300499, 0.02501034364104271, -0.038300275802612305, 0.010921023786067963, 0.0792977437376976, -0.016794001683592796, -0.05118681862950325, 0.06555894017219543, 0.0023261886090040207, -0.07752396911382675, 0.01158091053366661, 0.051967084407806396, -0.07628405094146729, 0.009974071756005287, -0.045784998685121536, -0.0034209175501018763, -0.07002585381269455, -0.031342849135398865, -0.08227140456438065, -0.0687020868062973, 0.053104303777217865, 0.05071091279387474, 0.04388927295804024, -0.06002539396286011, 0.03894365578889847, 0.020605040714144707, -0.05944414436817169, 0.01395069807767868, -0.04311959072947502, -0.05856277793645859, -0.010321780107915401, 0.02224115841090679, 0.03505347669124603, -0.02377747744321823, 0.02405129000544548, -0.007056491915136576, 0.053053535521030426, 0.04827257990837097, -0.024426624178886414, -0.0055496590211987495, 0.04302819445729256, -0.03989895060658455, -0.07443943619728088, 0.06630024313926697, -0.04735000431537628, -0.06544017046689987, 0.04864969477057457, 0.012283309362828732, 0.030479006469249725, -0.08178094774484634, 0.06340441107749939, 0.005830264184623957, -0.04697800427675247, 0.060832131654024124, -0.02071937546133995, -0.08138903975486755, -0.06097431108355522, -0.029586434364318848, 0.04006853699684143, -0.06864001601934433, 0.01985980197787285, 0.042590007185935974, -0.015350882895290852, 0.007393491454422474, -0.005520458333194256, 0.042905859649181366, 0.029867863282561302, 0.005329557228833437, 0.05774598941206932, -0.03953626751899719, -0.020617175847291946, -0.03861746937036514, -0.02598007395863533, -0.0003278785734437406, -0.04134732484817505, -0.05024970322847366, -0.05421839654445648, 0.052123866975307465, -0.0183710977435112, -0.016778312623500824, -0.016632981598377228, 0.05678601562976837, 0.048737622797489166, 0.011956111527979374, 0.07089182734489441, 0.014753990806639194, -0.06499633938074112, 0.03608490526676178, 0.021599531173706055, -0.07646386325359344, -0.07013934850692749, -0.06001069396734238, 0.004068018402904272, 0.06594914942979813, -0.03371717035770416, 0.0458679273724556, 0.03496609628200531, 0.04427677392959595, -0.06713339686393738, 0.06403592973947525, 0.021060895174741745, 0.04243682324886322, -0.000701313023455441, -0.03187268599867821, 0.05031481012701988, 0.08156149834394455, -0.04651902616024017, 0.04326022043824196, -0.021181534975767136, -0.06630529463291168, 0.06767816096544266, -0.03290743753314018, -0.025260835886001587, -0.013436675071716309, 0.0734468549489975, 0.0069756703451275826, -0.07217060774564743, -0.008218871429562569, 0.023091625422239304, -0.04391787573695183, 0.041927602142095566, -0.027001935988664627, 0.001846182974986732, 0.014618161134421825, -0.0819815918803215, 0.01068410649895668, 0.022839348763227463, 0.005905956961214542, 0.060593053698539734, -0.014282168820500374, 0.027963491156697273, -0.024706291034817696, -0.015947187319397926, -0.014680389314889908, 0.019526388496160507, -0.08113820850849152, 0.04176029935479164, -0.058635909110307693, 0.03615839406847954, -0.06221705302596092, 0.04942282661795616, 0.007490238640457392, 0.02571086958050728, 0.07810146361589432, -0.028163444250822067, -0.006800486706197262, -0.06623124331235886, 0.016806935891509056, -0.007652854546904564, -0.034726228564977646, 0.08097247779369354, -0.06652393192052841, 0.08228536695241928, -0.06387798488140106, -0.04558541998267174, 0.06715496629476547, 0.07365105301141739, -0.004373000003397465, -0.052353642880916595, -0.015321331098675728, 0.049598727375268936, -0.08049631863832474, -0.02855946682393551, -0.04510923847556114, 0.05059288442134857, -0.008452135138213634, 0.06602602452039719, 0.060502178966999054, 0.011474475264549255, 0.010435391217470169, -0.07656382024288177, 0.018695008009672165, 0.04900061711668968, 0.04215472564101219, -0.012492536567151546, 0.06402184814214706, 0.03295702487230301, -0.022529302164912224, -0.0039137788116931915, 0.029105063527822495, 0.00830650981515646, -0.0018870433559641242, -0.026303576305508614, 0.027959680184721947, 0.06835206598043442, 0.07454425096511841, -0.05898362025618553, 0.07548166066408157, -0.015172041021287441, 0.08207115530967712, -0.03574424237012863, -0.0332145132124424, -0.018393002450466156, 0.03491628170013428, -0.00018269207794219255, -0.01231132447719574, 0.006973528768867254, -0.06630013138055801, 0.08064548671245575, 0.05895131453871727, -0.038499534130096436, 0.08225977420806885, 0.07372365891933441, -0.0312582366168499, 0.05825629457831383, -0.012324437499046326, -0.05034884437918663, 0.08077877759933472, -0.08049702644348145, -0.003077259287238121, -0.07098247855901718, 0.059699274599552155, -0.005909796804189682, -0.015731142833828926, 0.07950965315103531, -0.04605434834957123, -0.04554152488708496, 0.045422982424497604, -0.014918405562639236, -0.03693760558962822, -0.06074931100010872, -0.04718702659010887, 0.010055728256702423, -0.055569056421518326, -0.04793037846684456, 0.04304702952504158, 0.010735207237303257, 0.008044869638979435, -0.004330041818320751, 0.002459581010043621, 0.009024779312312603, 0.07410911470651627, -0.059967782348394394, 0.0215860977768898, -0.004102679435163736, 0.028375942260026932, 0.02761046588420868, 0.0033883724827319384, -0.0696101263165474, 0.01058276928961277, -0.00038231571670621634, 0.04223697632551193, -0.05756858363747597, -0.019109664484858513, 0.06904277205467224, -0.07378264516592026, 0.05340446159243584, 0.025645293295383453, -0.05922093987464905, 0.046237800270318985, -0.07463280856609344, 0.0130518963560462, -0.013482315465807915, 0.03427557274699211, -0.006477611139416695, -0.08012031763792038, 0.06740906834602356, 0.04220142960548401, -0.010672795586287975, 0.061927441507577896, -0.02790500782430172, -0.001206061104312539, 0.031584642827510834, 0.01536450907588005, -0.03591017425060272, -0.06516901403665543, 0.05488157644867897, 0.06786923110485077, -0.010074804536998272, 0.06179055571556091, -0.051411908119916916, -0.03669293597340584, -0.03212236985564232, -0.020381445065140724, -0.04798562824726105, 0.007538614794611931, 0.029468350112438202, 0.021551204845309258, 0.03198261186480522, -0.07140267640352249, 0.029772097244858742, -0.035737451165914536, -0.01511317864060402, 0.051900848746299744, -0.001775856944732368, -0.013440428301692009, 0.034586887806653976, -0.002215923508629203, -0.020857829600572586, 0.00027432103524915874, -0.04762156307697296, 0.022041527554392815, -0.005136869847774506, -0.014228738844394684, -0.02402470074594021, 0.024526331573724747, -0.013687566854059696, -0.08139336109161377, -0.0485294871032238, -0.06930101662874222, 0.06989950686693192, 0.029579581692814827, -0.022711528465151787, 0.019651183858513832, 0.008211695589125156, -0.0029666759073734283, -0.02162746712565422, -0.023181360214948654, 0.06135120615363121, -0.08179385215044022, 0.012720814906060696, 0.009336763992905617, 0.004294245503842831, -0.07940160483121872, 0.07263892889022827, -0.07956182956695557, 0.05179138481616974, -0.04553898051381111, -0.05284496024250984, -0.00980470236390829, -0.057111505419015884, 0.08233577013015747, 0.021229304373264313, 0.034343328326940536, 0.0037592200096696615, 0.008066004142165184, -0.030774366110563278, -0.02489069662988186, -0.07137563079595566, 0.056346215307712555, 0.007761424873024225, 0.008664427325129509, -0.006868535652756691, -0.0654066726565361, -0.022206850349903107, 0.03618157282471657, -0.051122233271598816, 0.07348375767469406, -0.04007548466324806, 0.07064841687679291, -0.038777731359004974, 0.030845167115330696, -0.03259888291358948, 0.03300360217690468, -0.042039595544338226, -0.03464587405323982, -0.012135879136621952, 0.005706638563424349, -0.029881400987505913, -0.0541679784655571, -0.05549194663763046, 0.02064003050327301, 0.04147770255804062, -0.028556589037179947, 0.012067236006259918, -0.0176279004663229, 0.028640037402510643, 0.02331211231648922, 0.01176348514854908, -0.05316847935318947, 0.011932787485420704, 0.008341518230736256, 0.03555583208799362, -0.07359076291322708, -0.006633430253714323, 0.04048386961221695, -0.06284927576780319, -0.032521478831768036, -0.06775932759046555, -0.025068998336791992, 0.06355687975883484, 0.0073591615073382854, -0.010931644588708878, -0.004163055680692196, -0.022754494100809097, 0.04788811132311821, -0.06543339043855667, 0.04795447364449501, 0.015431431122124195, 0.021595735102891922, 0.07815956324338913, -0.061120979487895966, 0.02664526179432869, 0.04774535074830055, -0.0316191241145134, 0.027771346271038055, 0.03776330500841141, -0.04461924731731415, 0.032015345990657806, 0.0481901541352272, -0.01215855311602354, 0.013662832789123058, 0.03760597109794617, 0.017831774428486824, 0.04820679500699043, 0.0003077389264944941, 0.03456100448966026, -0.006902799010276794, -0.013068022206425667, 0.014605311676859856, 0.05803295969963074, 0.05283517763018608, 0.001560840057209134, -0.009981798939406872, 0.05982750654220581, 0.06935608386993408, 0.03827592730522156, 0.031804271042346954, -0.07797509431838989, 0.0355471707880497, 0.024209793657064438, 0.04228142648935318, 0.004284969065338373, 0.0317646749317646, 0.0068852403201162815, -0.00528670335188508, -0.038462769240140915, 0.02652212604880333, -0.0813826322555542, -0.0149904265999794, -0.004743667785078287, 0.013598303310573101, 0.032357100397348404, 0.03754083812236786, 0.022814922034740448, 0.06378937512636185, 0.017345692962408066, 0.08040125668048859, -0.07479149103164673, 0.0474558100104332, 0.04995044320821762, -0.06545373797416687, -0.0785655602812767, -0.021017488092184067, -0.04831438511610031, 0.02505871094763279, 0.010575145483016968, 0.02370685711503029, -0.01429479755461216, -0.004471572581678629, -0.013728835619986057, 0.024293139576911926, -0.034628406167030334, 0.054437488317489624, 0.007131187245249748, -0.022012803703546524, -0.07052163034677505, 0.06944222003221512, -0.05165648087859154, 0.04369831457734108, 0.01650122180581093, -0.011692250147461891, 0.01512240432202816, 0.0015181079506874084, 0.07823146879673004, -0.007086304482072592, 0.0660487711429596, 0.04779357090592384, 0.027540069073438644, 0.02500176429748535, 0.0623151957988739, -0.02095344103872776, -0.04798119515180588, 0.017743639647960663, -0.0005048761377111077]},
{"question": "How to reshape data from long to wide format", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>I'm having trouble rearranging the following data frame:</p>\n\n<pre><code>set.seed(45)\ndat1 &lt;- data.frame(\n    name = rep(c(\"firstName\", \"secondName\"), each=4),\n    numbers = rep(1:4, 2),\n    value = rnorm(8)\n    )\n\ndat1\n       name  numbers      value\n1  firstName       1  0.3407997\n2  firstName       2 -0.7033403\n3  firstName       3 -0.3795377\n4  firstName       4 -0.7460474\n5 secondName       1 -0.8981073\n6 secondName       2 -0.3347941\n7 secondName       3 -0.5013782\n8 secondName       4 -0.1745357\n</code></pre>\n\n<p>I want to reshape it so that each unique \"name\" variable is a rowname, with the \"values\" as observations along that row and the \"numbers\" as colnames. Sort of like this:</p>\n\n<pre><code>     name          1          2          3         4\n1  firstName  0.3407997 -0.7033403 -0.3795377 -0.7460474\n5 secondName -0.8981073 -0.3347941 -0.5013782 -0.1745357\n</code></pre>\n\n<p>I've looked at <code>melt</code> and <code>cast</code> and a few other things, but none seem to do the job.</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>Using <code>reshape</code> function:</p>\n\n<pre><code>reshape(dat1, idvar = \"name\", timevar = \"numbers\", direction = \"wide\")\n</code></pre>\n    </div>", "total_vectors": [-0.06058147922158241, -0.08609317243099213, 0.027745451778173447, 0.057928770780563354, 0.04025349020957947, -0.05827450379729271, -5.989003329887055e-05, -0.04433324187994003, -0.01400548405945301, 0.0890800803899765, -0.005660603288561106, 0.0022267585154622793, -0.05899374186992645, 7.176589133450761e-05, -0.009688511490821838, 0.09784907102584839, 0.01978713646531105, -0.02084389701485634, 0.03783387690782547, -0.005441551096737385, -0.003295424161478877, -0.010671291500329971, 0.06566314399242401, 0.01458350196480751, 0.022741355001926422, -0.025613510981202126, -0.028130292892456055, -0.009911341592669487, -0.020514927804470062, 0.025426194071769714, 0.015983568504452705, 0.002073568757623434, 0.06809855252504349, 0.037204887717962265, -0.03378766402602196, 0.00101194204762578, -0.07399023324251175, 0.06266079843044281, -0.04945892095565796, -0.03617575764656067, -0.017786018550395966, -0.008117618039250374, -0.013515990227460861, 0.015413559973239899, 0.08538541942834854, 0.015887299552559853, -0.02022578939795494, -0.055076081305742264, 0.023089198395609856, -0.006530131213366985, 0.01670440472662449, 0.0881078913807869, 0.018849564716219902, -0.006321825087070465, 0.053698498755693436, -0.027428125962615013, 0.0189424529671669, 0.014272053726017475, 0.0319252610206604, -0.06876607239246368, -0.05425713211297989, -0.028763553127646446, -0.007458996959030628, -0.011350078508257866, -0.015502090565860271, 0.010144276544451714, 0.01633765920996666, -0.01829913631081581, -0.053367748856544495, 0.021733487024903297, 0.03517714515328407, -0.025460127741098404, 0.07425633817911148, 0.07743466645479202, -0.00508547481149435, 0.024241099134087563, 0.04436850920319557, 0.07283685356378555, 0.08935106545686722, 0.023272475227713585, -0.020525818690657616, -0.00478924298658967, 0.015092354267835617, -0.06630457192659378, -0.02153583988547325, -0.023097652941942215, -0.04060300067067146, -0.008716701529920101, -0.04766017571091652, -0.05054914578795433, 0.030928391963243484, -0.014461602084338665, -0.006188774015754461, -0.00035418596235103905, 0.033956024795770645, 0.004862295929342508, -0.00788795854896307, 0.056421659886837006, 0.017714330926537514, -0.09220737963914871, -0.02454429678618908, 0.03905809670686722, -0.06944120675325394, 0.017289353534579277, -0.061560966074466705, 0.02918229065835476, -0.0710916742682457, 0.03806288167834282, 0.011570341885089874, 0.04919247701764107, -0.02909630909562111, -0.05948258936405182, 0.007447739597409964, -0.023328406736254692, -0.0031815581023693085, 0.042368531227111816, -0.04813983291387558, -0.03005865216255188, 0.0333624966442585, -0.016335899010300636, -0.007849443703889847, -0.0290303286164999, -0.05002548173069954, 0.01426700223237276, -0.052694085985422134, 0.04069557040929794, 0.04216361790895462, -0.01346584688872099, 0.05483377352356911, 0.019400523975491524, 0.031453073024749756, 0.05083494633436203, -0.05347122997045517, 0.012878446839749813, 0.008752163499593735, -0.056619614362716675, -0.08994361758232117, 0.01713969185948372, 0.03767590969800949, -0.05401080474257469, -0.046230096369981766, -0.011639037169516087, 0.051056068390607834, 0.0014046913711354136, 0.002454230561852455, -0.02332967147231102, -0.015289700590074062, 0.039386238902807236, 0.058794423937797546, -0.0043864864856004715, 0.04578380286693573, -0.034454502165317535, -0.03835102915763855, 0.02915348671376705, 0.029692960903048515, -0.016614096239209175, -0.06726153939962387, -0.04704255983233452, -0.014946505427360535, -0.022322850301861763, -0.0902816653251648, -0.046519748866558075, -0.006355186924338341, 0.00492832949385047, -0.01065280381590128, -0.0936371237039566, -0.033494263887405396, 0.02848234213888645, 0.05132196471095085, 0.045534130185842514, 0.01081437710672617, -0.01791401207447052, -0.0007957667112350464, 0.015884866937994957, 0.0007385291974060237, -0.028402676805853844, -0.009354647248983383, 0.058417607098817825, -0.02751772664487362, -0.04079490527510643, 0.03275942802429199, 0.03302512317895889, -0.03391488268971443, -0.04348301514983177, 0.03228174149990082, 0.03092413768172264, -0.039328575134277344, 0.05601384490728378, -0.07252631336450577, 0.06485003978013992, 0.03902948647737503, 0.03459320589900017, -0.050999630242586136, 0.06991458684206009, -0.016568129882216454, 0.008708393201231956, 0.024394847452640533, 0.09816575795412064, 0.04403415694832802, -0.07145716995000839, -0.016483519226312637, 0.022599581629037857, -0.042859699577093124, 0.08496280014514923, -0.05687348544597626, 0.007429939229041338, -0.022291110828518867, -0.0697731077671051, -0.04042137414216995, -0.058063432574272156, -0.045757364481687546, 0.015233570709824562, -0.041494883596897125, 0.0577976256608963, 0.004373982083052397, 0.07232923805713654, -0.02657540887594223, 0.08213354647159576, 0.05570853874087334, -0.03617049753665924, 0.06707175076007843, -0.009590941481292248, 0.017139233648777008, 0.04502047598361969, 0.014080206863582134, -0.026816351339221, 0.06878254562616348, 0.04693174734711647, -0.02232208661735058, -0.04647653177380562, -0.023296521976590157, -0.06908021122217178, -0.06066003814339638, 0.015316029079258442, 0.08412478119134903, -0.018584605306386948, 0.04039411619305611, 0.09176436066627502, 0.017853830009698868, 0.05512028560042381, -0.03252490982413292, -0.04168635606765747, -0.0009985303040593863, -0.021127238869667053, 0.06235787644982338, 0.09212896227836609, -0.05020349100232124, 0.057770829647779465, 0.09582040458917618, 0.08488471806049347, 0.01659252680838108, 0.00029253982938826084, 0.03215703368186951, -0.04263308644294739, -0.06532938033342361, 0.0061136698350310326, 0.032226648181676865, -0.08895266801118851, 0.046417493373155594, -0.0043350569903850555, -0.06431592255830765, 0.040799278765916824, -0.09458906203508377, 0.03319048509001732, -0.005010767839848995, 0.0025565363466739655, 0.05121126398444176, -0.09476976841688156, -0.03837239742279053, -0.006042419467121363, -0.04582275077700615, -0.020551180467009544, 0.021027836948633194, 0.028875837102532387, -0.0023007572162896395, 0.021774999797344208, -0.07034923136234283, -0.02266460843384266, 0.06737172603607178, 0.06288392096757889, 0.025934452190995216, -0.03485964983701706, 0.013727616518735886, -0.0024167166557163, 0.022699454799294472, -0.04232608899474144, -0.009684132412075996, -0.03217373788356781, 0.02527586743235588, -0.050714727491140366, 0.07229933887720108, 0.031008727848529816, -0.052594203501939774, 0.03287876024842262, 0.09325343370437622, -0.018004052340984344, 0.03932733088731766, -0.011640255339443684, -0.03778347000479698, 0.04078492522239685, 0.0009563275962136686, 0.0012630193959921598, -0.039089374244213104, -0.06791433691978455, -0.0011321519268676639, 0.037103936076164246, 0.02003554068505764, -0.021843140944838524, -0.04292580485343933, 0.06253479421138763, -0.055774468928575516, 0.039698805660009384, -0.022105388343334198, 0.011612599715590477, -0.04522954672574997, 0.0006071450188755989, -0.05751138925552368, 0.011658062227070332, 0.025275494903326035, 0.008717142045497894, -0.013731755316257477, -0.0019145933911204338, -0.06337852776050568, -0.05941513925790787, -0.04424317926168442, 0.027889782562851906, -0.05074754357337952, -0.008920715190470219, -0.08147444576025009, -0.0013609824236482382, 0.06948740035295486, 0.016136975958943367, 0.05041419714689255, 0.045117270201444626, 0.004677118733525276, 0.05671769753098488, 0.0031444262713193893, -0.07517131417989731, 0.03984088823199272, 0.008037349209189415, 0.012501956894993782, 0.007500037085264921, 0.03518867865204811, -0.005584212020039558, -0.09640201926231384, 0.03504379466176033, 0.05349418520927429, -0.07465489953756332, -0.08618725091218948, 0.03881174325942993, -0.03260429576039314, 0.0027992839459329844, -8.6870466475375e-05, -0.043956443667411804, 0.05374078452587128, -0.03157702460885048, -0.09501565247774124, -0.06781436502933502, -0.05863422527909279, -0.004073173739016056, -0.058053724467754364, -0.054726820439100266, -0.09156285226345062, 0.05290619656443596, 0.04006657376885414, 0.02740265615284443, -0.05628656968474388, -0.04004792869091034, 0.07108421623706818, 0.04170386493206024, 0.006633922457695007, -0.012710231356322765, -0.036064986139535904, 0.05785150080919266, 0.053818896412849426, -0.08320504426956177, -0.034811217337846756, -0.07448854297399521, -0.03850845992565155, -0.03624306991696358, 0.010563473217189312, 0.056850481778383255, 0.02838432975113392, -0.023039663210511208, -0.03882722184062004, 0.03525906428694725, 0.08231694996356964, 0.06269299238920212, 0.06935752183198929, -0.05253681167960167, -0.026618583127856255, -0.03977024927735329, -0.06694706529378891, 0.024153757840394974, 0.003959042485803366, 0.061787817627191544, 0.006045689806342125, 0.06193383038043976, -0.045554470270872116, 0.029665693640708923, 0.02751997672021389, -0.04103737697005272, -0.02266327105462551, -0.011317907832562923, 0.037869758903980255, 0.03420450538396835, -0.06863143295049667, 0.006688614375889301, 0.01225137710571289, 0.01879245601594448, 0.004316926468163729, -0.02625427581369877, -0.05301183462142944, -0.01467873714864254, 0.06217633932828903, -0.08204413950443268, -0.019270939752459526, -0.003851751796901226, 0.016314810141921043, 0.04384550452232361, 0.06342438608407974, 0.012283004820346832, 0.005787956994026899, 0.048285361379384995, -0.049931060522794724, 0.06480806320905685, 0.0018281005322933197, 0.0758591890335083, -0.04533623903989792, 0.03632688522338867, 0.01190183311700821, 0.013936896808445454, -0.022429918870329857, 0.07161904126405716, -0.08952204138040543, 0.02318304404616356, 0.034407276660203934, 0.029169848188757896, 0.07049153000116348, -0.013304722495377064, 0.02174702100455761, -0.05347331985831261, -0.02162560448050499, -0.07344523072242737, -0.04626882076263428, 0.07016114890575409, 0.06908290833234787, 0.0150208231061697, -0.04918047413229942, 0.04140165075659752, 0.05981722101569176, 0.017769411206245422, 0.06621537357568741, -0.011233293451368809, -0.0010999439982697368, -0.02241630293428898, -0.004451717250049114, -0.011726819910109043, 0.05339770391583443, -0.05883902311325073, 0.04587957635521889, 0.015743136405944824, -0.011672498658299446, -0.044909436255693436, -0.005195326171815395, -0.03215847164392471, -0.044751692563295364, 0.007290644105523825, 0.028711820021271706, 0.018411923199892044, 0.0673619732260704, 0.022027090191841125, 0.0661904513835907, -0.03317764028906822, -0.05204514041543007, -0.040425971150398254, -0.011505910195410252, -0.06925730407238007, 0.03193003311753273, -0.08953649550676346, -0.020390337333083153, -0.031666532158851624, 0.02557571791112423, 0.019323652610182762, 0.01872584968805313, 0.06746181100606918, 0.09705325216054916, -0.006234616506844759, 0.010555658489465714, -0.012001694180071354, 0.02401423081755638, 0.03171001747250557, -0.049336113035678864, 0.05477309226989746, -0.020950084552168846, 0.0382600799202919, 0.028101354837417603, -0.006711957976222038, -0.07926555722951889, -0.030175844207406044, 0.012814697809517384, 0.07672974467277527, 0.0024380863178521395, 0.06453560292720795, 0.014523002319037914, 0.024651173502206802, -0.055908121168613434, 0.014675363898277283, 0.01798304170370102, 0.06502717733383179, -0.01202832255512476, -0.02801807038486004]},
{"question": "How do I extract data from JSON with PHP?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<blockquote>\n  <p>This is intended to be a general reference question and answer covering many of the never-ending <em>\"How do I access data in my JSON?\"</em> questions. It is here to handle the broad basics of decoding JSON in PHP and accessing the results.</p>\n</blockquote>\n\n<p>I have the JSON:</p>\n\n<pre><code>{\n    \"type\": \"donut\",\n    \"name\": \"Cake\",\n    \"toppings\": [\n        { \"id\": \"5002\", \"type\": \"Glazed\" },\n        { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\n        { \"id\": \"5004\", \"type\": \"Maple\" }\n    ]\n}\n</code></pre>\n\n<p>How do I decode this in PHP and access the resulting data?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<h3><em>Intro</em></h3>\n\n<p>First off you have a string. JSON is not an array, an object, or a data structure. <a href=\"http://json.org/\" rel=\"noreferrer\">JSON</a> is a text-based serialization format - so a fancy string, but still just a string. Decode it in PHP by using <a href=\"http://php.net/json_decode\" rel=\"noreferrer\"><code>json_decode()</code></a>.</p>\n\n<pre><code> $data = json_decode($json);\n</code></pre>\n\n<p>Therein you might find:</p>\n\n<ul>\n<li>scalars: <a href=\"http://php.net/string\" rel=\"noreferrer\">strings</a>, <a href=\"http://php.net/int\" rel=\"noreferrer\">ints</a>, <a href=\"http://php.net/float\" rel=\"noreferrer\">floats</a>, and <a href=\"http://php.net/bool\" rel=\"noreferrer\">bools</a></li>\n<li><a href=\"http://php.net/null\" rel=\"noreferrer\">nulls</a> (a special type of its own)</li>\n<li>compound types: <a href=\"http://php.net/object\" rel=\"noreferrer\">objects</a> and <a href=\"http://php.net/array\" rel=\"noreferrer\">arrays</a>.</li>\n</ul>\n\n<p>These are the things that can be encoded in JSON. Or more accurately, these are PHP's versions of the things that can be encoded in JSON.</p>\n\n<p>There's nothing special about them. They are not \"JSON objects\" or \"JSON arrays.\" You've decoded the JSON - you now have <a href=\"http://php.net/types\" rel=\"noreferrer\">basic everyday PHP types</a>.</p>\n\n<p>Objects will be instances of <a href=\"http://php.net/manual/en/reserved.classes.php\" rel=\"noreferrer\">stdClass</a>, a built-in class which is just a <a href=\"https://stackoverflow.com/questions/931407/what-is-stdclass-in-php\">generic thing</a> that's not important here.</p>\n\n<hr>\n\n<h3><em>Accessing object properties</em></h3>\n\n<p>You access the <a href=\"http://php.net/manual/en/language.oop5.properties.php\" rel=\"noreferrer\">properties</a> of one of these objects the same way you would for the public non-static properties of any other object, e.g. <code>$object-&gt;property</code>.</p>\n\n<pre><code>$json = '\n{\n    \"type\": \"donut\",\n    \"name\": \"Cake\"\n}';\n\n$yummy = json_decode($json);\n\necho $yummy-&gt;type; //donut\n</code></pre>\n\n<hr>\n\n<h3><em>Accessing array elements</em></h3>\n\n<p>You access the elements of one of these arrays the same way you would for any other array, e.g. <a href=\"http://php.net/manual/en/language.types.array.php#language.types.array.syntax.accessing\" rel=\"noreferrer\"><code>$array[0]</code></a>.</p>\n\n<pre><code>$json = '\n[\n    \"Glazed\",\n    \"Chocolate with Sprinkles\",\n    \"Maple\"\n]';\n\n$toppings = json_decode($json);\n\necho $toppings[1]; //Chocolate with Sprinkles\n</code></pre>\n\n<p>Iterate over it with <a href=\"http://php.net/manual/en/control-structures.foreach.php\" rel=\"noreferrer\"><code>foreach</code></a>.</p>\n\n<pre><code>foreach ($toppings as $topping) {\n    echo $topping, \"\\n\";\n}\n</code></pre>\n\n<blockquote>\n  <p>Glazed <br>\n  Chocolate with Sprinkles <br>\n  Maple</p>\n</blockquote>\n\n<p>Or mess about with any of the <a href=\"http://php.net/manual/en/ref.array.php\" rel=\"noreferrer\">bazillion built-in array functions</a>.</p>\n\n<hr>\n\n<h3><em>Accessing nested items</em></h3>\n\n<p>The properties of objects and the elements of arrays might be more objects and/or arrays - you can simply continue to access their properties and members as usual, e.g. <code>$object-&gt;array[0]-&gt;etc</code>.</p>\n\n<pre><code>$json = '\n{\n    \"type\": \"donut\",\n    \"name\": \"Cake\",\n    \"toppings\": [\n        { \"id\": \"5002\", \"type\": \"Glazed\" },\n        { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\n        { \"id\": \"5004\", \"type\": \"Maple\" }\n    ]\n}';\n\n$yummy = json_decode($json);\n\necho $yummy-&gt;toppings[2]-&gt;id; //5004\n</code></pre>\n\n<hr>\n\n<h3><em>Passing <code>true</code> as the second argument to <a href=\"http://php.net/json_decode\" rel=\"noreferrer\">json_decode()</a></em></h3>\n\n<p>When you do this, instead of objects you'll get associative arrays - arrays with strings for keys. Again you access the elements thereof as usual, e.g. <code>$array['key']</code>.</p>\n\n<pre><code>$json = '\n{\n    \"type\": \"donut\",\n    \"name\": \"Cake\",\n    \"toppings\": [\n        { \"id\": \"5002\", \"type\": \"Glazed\" },\n        { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\n        { \"id\": \"5004\", \"type\": \"Maple\" }\n    ]\n}';\n\n$yummy = json_decode($json, true);\n\necho $yummy['toppings'][2]['type']; //Maple\n</code></pre>\n\n<hr>\n\n<h3><em>Accessing associative array items</em></h3>\n\n<p>When decoding a JSON <em>object</em> to an associative PHP array, you can iterate both keys and values using the <a href=\"https://www.php.net/manual/control-structures.foreach.php\" rel=\"noreferrer\"><code>foreach (array_expression as $key =&gt; $value)</code></a> syntax, eg</p>\n\n<pre class=\"lang-php prettyprint-override\"><code>$json = '\n{\n    \"foo\": \"foo value\",\n    \"bar\": \"bar value\",\n    \"baz\": \"baz value\"\n}';\n\n$assoc = json_decode($json, true);\nforeach ($assoc as $key =&gt; $value) {\n    echo \"The value of key '$key' is '$value'\", PHP_EOL;\n}\n</code></pre>\n\n<p>Prints</p>\n\n<blockquote>\n  <p>The value of key 'foo' is 'foo value'<br>\n  The value of key 'bar' is 'bar value'<br>\n  The value of key 'baz' is 'baz value'</p>\n</blockquote>\n\n<hr>\n\n<h3><em>Don't know how the data is structured</em></h3>\n\n<p>Read the documentation for whatever it is you're getting the JSON from.</p>\n\n<p>Look at the JSON - where you see curly brackets <code>{}</code> expect an object, where you see square brackets <code>[]</code> expect an array.</p>\n\n<p>Hit the decoded data with a <a href=\"http://php.net/print_r\" rel=\"noreferrer\"><code>print_r()</code></a>:</p>\n\n<pre><code>$json = '\n{\n    \"type\": \"donut\",\n    \"name\": \"Cake\",\n    \"toppings\": [\n        { \"id\": \"5002\", \"type\": \"Glazed\" },\n        { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\n        { \"id\": \"5004\", \"type\": \"Maple\" }\n    ]\n}';\n\n$yummy = json_decode($json);\n\nprint_r($yummy);\n</code></pre>\n\n<p>and check the output:</p>\n\n<pre><code>stdClass Object\n(\n    [type] =&gt; donut\n    [name] =&gt; Cake\n    [toppings] =&gt; Array\n        (\n            [0] =&gt; stdClass Object\n                (\n                    [id] =&gt; 5002\n                    [type] =&gt; Glazed\n                )\n\n            [1] =&gt; stdClass Object\n                (\n                    [id] =&gt; 5006\n                    [type] =&gt; Chocolate with Sprinkles\n                )\n\n            [2] =&gt; stdClass Object\n                (\n                    [id] =&gt; 5004\n                    [type] =&gt; Maple\n                )\n\n        )\n\n)\n</code></pre>\n\n<p>It'll tell you where you have objects, where you have arrays, along with the names and values of their members.</p>\n\n<p>If you can only get so far into it before you get lost - go that far and hit <em>that</em> with <code>print_r()</code>:</p>\n\n<pre><code>print_r($yummy-&gt;toppings[0]);\n</code></pre>\n\n\n\n<pre><code>stdClass Object\n(\n    [id] =&gt; 5002\n    [type] =&gt; Glazed\n)\n</code></pre>\n\n<p>Take a look at it in <a href=\"http://array.include-once.org/\" rel=\"noreferrer\">this handy interactive JSON explorer</a>.</p>\n\n<p>Break the problem down into pieces that are easier to wrap your head around.</p>\n\n<hr>\n\n<h3><em><code>json_decode()</code> returns <code>null</code></em></h3>\n\n<p>This happens because either:</p>\n\n<ol>\n<li>The JSON consists entirely of just that, <code>null</code>.</li>\n<li>The JSON is invalid - check the result of <a href=\"http://php.net/manual/en/function.json-last-error-msg.php\" rel=\"noreferrer\"><code>json_last_error_msg</code></a> or put it through something like <a href=\"http://jsonlint.com/\" rel=\"noreferrer\">JSONLint</a>.</li>\n<li>It contains elements nested more than 512 levels deep. This default max depth can be overridden by passing an integer as the third argument to <a href=\"http://php.net/json_decode\" rel=\"noreferrer\"><code>json_decode()</code></a>.</li>\n</ol>\n\n<p>If you need to change the max depth you're probably solving the wrong problem. Find out why you're getting such deeply nested data (e.g. the service you're querying that's generating the JSON has a bug) and get that to not happen.</p>\n\n<hr>\n\n<h3><em>Object property name contains a special character</em></h3>\n\n<p>Sometimes you'll have an object property name that contains something like a hyphen <code>-</code> or at sign <code>@</code> which can't be used in a literal identifier. Instead you can use a string literal within curly braces to address it.</p>\n\n<pre><code>$json = '{\"@attributes\":{\"answer\":42}}';\n$thing = json_decode($json);\n\necho $thing-&gt;{'@attributes'}-&gt;answer; //42\n</code></pre>\n\n<p>If you have an integer as property see: <a href=\"https://stackoverflow.com/questions/10333016/how-to-access-object-properties-with-names-like-integers\">How to access object properties with names like integers?</a> as reference.</p>\n\n<hr>\n\n<h3><em>Someone put JSON in your JSON</em></h3>\n\n<p>It's ridiculous but it happens - there's JSON encoded as a string within your JSON. Decode, access the string as usual, decode <em>that</em>, and eventually get to what you need.</p>\n\n<pre><code>$json = '\n{\n    \"type\": \"donut\",\n    \"name\": \"Cake\",\n    \"toppings\": \"[{ \\\"type\\\": \\\"Glazed\\\" }, { \\\"type\\\": \\\"Maple\\\" }]\"\n}';\n\n$yummy = json_decode($json);\n$toppings = json_decode($yummy-&gt;toppings);\n\necho $toppings[0]-&gt;type; //Glazed\n</code></pre>\n\n<hr>\n\n<h3><em>Data doesn't fit in memory</em></h3>\n\n<p>If your JSON is too large for <code>json_decode()</code> to handle at once things start to get tricky. See:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/4049428/3942918\">Processing large JSON files in PHP</a></li>\n<li><a href=\"https://stackoverflow.com/q/26393235/3942918\">How to properly iterate through a big json file</a></li>\n</ul>\n\n<hr>\n\n<h3><em>How to sort it</em></h3>\n\n<p>See: <a href=\"https://stackoverflow.com/q/17364127/3942918\">Reference: all basic ways to sort arrays and data in PHP</a>.</p>\n    </div>", "total_vectors": [-0.02749694138765335, -0.06669287383556366, 0.02389335073530674, 0.041408970952034, 0.07410910725593567, -0.04035906493663788, -0.01950030028820038, -0.022635044530034065, -0.008807915262877941, 0.05930490791797638, 0.036773841828107834, 0.012826938182115555, -0.041892144829034805, 0.060866255313158035, -0.07238329946994781, 0.07967754453420639, 0.05342956259846687, -0.06148508936166763, 0.03945450857281685, -0.0065832980908453465, 0.053724076598882675, 0.024974869564175606, 0.061298616230487823, 0.01824008673429489, -0.019627749919891357, -0.05517115071415901, -0.04452843219041824, -0.02258835732936859, -0.012352191843092442, 0.019548114389181137, 0.029567239806056023, 0.06091398000717163, -0.031480953097343445, 0.06405742466449738, 0.00141042226459831, -0.019669225439429283, -0.06709454953670502, -0.028373265638947487, -0.03997756168246269, -0.05703400820493698, -0.02996654249727726, 0.028436604887247086, -0.06520310789346695, 0.04946036636829376, 0.07962232828140259, -0.02491169236600399, -0.02949046529829502, -0.040164269506931305, 0.016830382868647575, -0.05896426737308502, 0.05152253061532974, 0.0784723311662674, -0.015384167432785034, -0.0308143999427557, -0.0765751376748085, 0.02822694182395935, -0.02873791567981243, 0.0366094596683979, 0.04989505559206009, 0.01976749114692211, -0.006584350019693375, -0.008642561733722687, 0.006032104603946209, -0.05157970264554024, -0.014086682349443436, -0.05445868521928787, -0.041398268193006516, -0.02303127571940422, -0.013974051922559738, 0.010224658995866776, -0.07835648953914642, 0.04040931537747383, 0.005614480469375849, -0.0027918436098843813, 0.024500397965312004, 0.03460170328617096, -0.008142218925058842, 0.035887524485588074, 0.05513196066021919, 0.06759585440158844, 0.06914608180522919, 0.01735454984009266, -0.004402344115078449, -0.050633326172828674, 0.06818879395723343, 0.06730693578720093, -0.02420106530189514, 0.006809647660702467, -0.07273445278406143, -0.021833421662449837, 0.04539411887526512, 0.044846151024103165, -0.020028220489621162, 0.06566417962312698, 0.0550064742565155, 0.03115031123161316, 0.05785558000206947, 0.026390962302684784, -0.07364480197429657, -0.07866724580526352, -0.023583410307765007, 0.0359797403216362, -0.06395724415779114, 0.0029133246280252934, -0.027905603870749474, 0.04620329290628433, 0.07934429496526718, 0.05903748422861099, -0.05968355014920235, 0.038843631744384766, -0.0591970831155777, -0.05523746460676193, 0.019851556047797203, -0.008199842646718025, -0.06899836659431458, -0.006679182406514883, -0.0024377235677093267, 0.00902498234063387, -0.03601214662194252, -0.041904326528310776, 0.022204359993338585, 0.013689471408724785, -0.007384073920547962, 0.016842909157276154, -0.05298718065023422, 0.04800528660416603, 0.02564285136759281, 0.011912653222680092, 0.07409563660621643, 0.024331549182534218, 0.015485776588320732, -0.010973370634019375, -0.0598992183804512, 0.014744369313120842, 0.03251238912343979, -0.03349156677722931, -0.04307769984006882, 0.03221621736884117, -0.023276444524526596, -0.07956861704587936, 0.016062581911683083, -0.04250890761613846, 0.023180322721600533, 0.01621394418179989, -0.00962024461477995, -0.079227976500988, -0.036575742065906525, 0.026645831763744354, -0.03888822719454765, -0.009161495603621006, 0.01065962202847004, -0.021604323759675026, 0.04101696237921715, 0.04905584454536438, 0.004942484200000763, -0.038144733756780624, -0.0027896706014871597, -0.05625126510858536, 0.049162670969963074, 0.014179375022649765, -0.004270391538739204, -0.02535416930913925, -0.03326241672039032, -0.027816100046038628, 0.06478459388017654, -0.07929862290620804, -0.0484551377594471, -0.011060452088713646, -0.026154356077313423, 0.03487907722592354, -0.03990354761481285, 0.000576304504647851, -0.032111652195453644, 0.0036210697144269943, -0.023254554718732834, -0.009938960894942284, 0.02893443964421749, 0.048255424946546555, -0.06567879766225815, -0.02423996664583683, 0.053729649633169174, 0.06070561334490776, -0.025681836530566216, -0.04880928993225098, 0.041796810925006866, 0.02687680721282959, -0.05567890778183937, 0.07424502074718475, -0.03903564438223839, 0.0670868456363678, 0.060836005955934525, -0.007670791354030371, 0.015529219061136246, -0.01983536407351494, -0.041379064321517944, 0.030753204599022865, 0.025733713060617447, 0.07967757433652878, -0.02223013900220394, -0.0695159062743187, -0.037141699343919754, 0.019237389788031578, -0.07937096804380417, 0.07857310771942139, -0.006375540047883987, -0.03158828616142273, -0.027816424146294594, -0.05776626989245415, -0.07796305418014526, -0.04471156373620033, -0.04130036383867264, -0.03049151413142681, -0.01790483109652996, 0.042845483869314194, 0.030946679413318634, 0.0396462008357048, -0.026159290224313736, 0.06787895411252975, 0.05053715407848358, 0.012482848949730396, 0.009938973933458328, -0.030207861214876175, 0.024341212585568428, 0.033975016325712204, -0.032354071736335754, 0.030770882964134216, -0.03683057427406311, 0.018063237890601158, 0.0274179857224226, -0.06903348863124847, 0.04340890422463417, -0.049354199320077896, -0.04266314208507538, -0.06537262350320816, 0.033895161002874374, -0.07657846063375473, 0.07813816517591476, 0.0754183903336525, 0.03063816949725151, 0.03770402446389198, -0.03985698148608208, 0.059997785836458206, 0.05381571501493454, -0.07510003447532654, 0.008289117366075516, 0.07880140095949173, 0.04122503474354744, -0.04286322370171547, 0.0784972682595253, 0.07901782542467117, -0.06735995411872864, 0.044938839972019196, -0.0387372151017189, -0.006725948769599199, -0.060673654079437256, -0.061909615993499756, 0.026667283847928047, -0.07405845075845718, 0.04989635571837425, 0.03601481765508652, -0.05455131456255913, 0.011910216882824898, -0.06927108019590378, 0.059854477643966675, 0.024074163287878036, -0.020460210740566254, 0.041024673730134964, -0.07612193375825882, -0.07839959114789963, 0.012139823287725449, -0.059035319834947586, -0.039805490523576736, 0.04291960597038269, -0.04804811626672745, -0.0026397169567644596, 0.027051253244280815, -0.04834044352173805, 0.01293995138257742, 0.0795079842209816, 0.021183418110013008, -0.05472575128078461, 0.008461885154247284, 0.015613900497555733, -0.03132783621549606, 0.05517773702740669, -0.07708779722452164, 0.03088783472776413, -0.019246593117713928, -0.026446111500263214, 0.07928085327148438, 0.053265515714883804, -0.021800842136144638, 0.056462667882442474, -0.04330974072217941, 0.07429812103509903, -0.05754018574953079, 0.013668064028024673, -0.03876673802733421, -0.020572375506162643, 0.03892829269170761, -0.03158201649785042, -0.04627267271280289, 0.007773725315928459, -0.0771244466304779, 0.01887785829603672, -0.03581511601805687, 0.003941582515835762, -0.01304714661091566, -0.012124420143663883, -0.04472413659095764, 0.009105980396270752, 0.018282998353242874, -0.02307283505797386, -0.043825577944517136, 0.022232651710510254, 0.05276031047105789, -0.04819028452038765, 0.04275354743003845, -0.007332135923206806, -0.0014241855824366212, 0.07043806463479996, 0.02499263547360897, 0.019852953031659126, -0.04434778913855553, 0.03427428379654884, 0.04013368487358093, 0.01554135512560606, -0.03258943185210228, 0.03834037855267525, -0.05633712559938431, 0.05816683545708656, 0.04823939502239227, -0.02639015205204487, 0.050483349710702896, 0.050326645374298096, -0.0454644076526165, -0.030671440064907074, -0.051153890788555145, 0.028866037726402283, -0.05306047573685646, -0.046930331736803055, -0.0028387203346937895, 0.06218000501394272, 0.04402456805109978, -0.07967642694711685, -0.03214923292398453, 0.06730013340711594, 0.009360465221107006, -0.07511006295681, -0.011261609382927418, -0.028957219794392586, 0.021757790818810463, 0.0567513145506382, -0.04371839016675949, -0.03104131855070591, -0.0746501237154007, -0.0795523002743721, 0.032689448446035385, -0.06699521839618683, -0.03562251850962639, -0.03795313835144043, -0.0004742993914987892, -0.07952427864074707, 0.01399652287364006, -0.07803847640752792, 0.027981968596577644, -0.06852343678474426, 0.008611392229795456, 0.06730294972658157, 0.03411854803562164, -0.04160017520189285, -0.014056933112442493, -0.0576278418302536, 0.07205579429864883, -0.03763389214873314, -0.07705549895763397, -0.0355447493493557, -0.025624731555581093, 0.045283496379852295, 0.038220085203647614, 0.004229247570037842, 0.013677563518285751, 0.034863173961639404, 0.07227358967065811, 0.02269420027732849, -0.018629463389515877, 0.06807596981525421, 0.05465652793645859, 0.0672881007194519, -0.06428283452987671, -0.05049106478691101, 0.07700642198324203, 0.07846155017614365, -0.02784515731036663, 0.031339310109615326, -0.002379734069108963, -0.06761959195137024, 0.01669451966881752, -0.016275467351078987, 0.023303978145122528, 0.03995431959629059, 0.0017621044535189867, 0.03345388174057007, -0.046171337366104126, 0.05527150258421898, 0.05855482816696167, -0.0791284441947937, -0.005261909682303667, 0.005671314895153046, 0.012399284169077873, -0.07121600955724716, -0.048176251351833344, -0.002915995893999934, -4.353548138169572e-05, -0.014252796769142151, -0.06621506810188293, -0.019897926598787308, -0.018762286752462387, 0.022433867678046227, -0.012790623120963573, 0.002033739350736141, -0.05828016623854637, 0.006865732371807098, -0.03258557990193367, 0.02047605812549591, 0.06136259064078331, 0.039792321622371674, 0.07743880152702332, 0.00965910591185093, 0.051997069269418716, 0.017204172909259796, -0.025634683668613434, 0.009355993010103703, -0.05245695263147354, -0.06918101012706757, 0.0069640083238482475, 0.02987169474363327, -0.007695042993873358, 0.060569874942302704, 0.031243419274687767, -0.04088131710886955, -0.04029659926891327, 0.002187703037634492, -0.018303873017430305, -0.007045311853289604, -0.06961511820554733, 0.07391839474439621, -0.02991659566760063, -0.004462705459445715, -0.008562453091144562, 0.04138549044728279, -0.05671081319451332, 0.07964301109313965, -0.05216393247246742, 0.03249838575720787, -0.06133802607655525, 0.026455048471689224, 0.008433941751718521, 0.0033562295138835907, -0.038251183927059174, 0.07377289980649948, 0.04243554174900055, 0.06598471850156784, 0.0301368311047554, -0.04210297763347626, -0.03530849143862724, -0.05770641192793846, -0.07362818717956543, -0.016237083822488785, 0.011377064511179924, -0.008850292302668095, -0.02386178821325302, 0.04323583096265793, 0.014634155668318272, -0.03114483505487442, -0.0410742349922657, 0.02047637104988098, -0.04546920210123062, -0.008697629906237125, -0.023441150784492493, -0.03703663870692253, -0.05710400268435478, -0.03671836853027344, 0.0002545204770285636, 9.71652552834712e-05, 0.0714937373995781, 0.07670286297798157, -0.0046995156444609165, 0.03403569385409355, 0.053900737315416336, 0.018530348315835, -0.0052216495387256145, -0.04038005694746971, 0.03236094117164612, 0.020452385768294334, -0.010132908821105957, -0.055090587586164474, -0.030046675354242325, -0.07198738306760788, 0.00298628443852067, -0.0362679585814476, -0.03979743272066116, -0.016088522970676422, 0.05495940521359444, -0.027233822271227837, 0.006784857716411352, -0.016955792903900146, 0.010312771424651146, 0.003033190034329891, 0.07106277346611023, -0.05056308954954147, -0.06951955705881119]},
{"question": "How do I write a correct micro-benchmark in Java?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>How do you write (and run) a correct micro-benchmark in Java?</p>\n\n<p>I'm looking for some code samples and comments illustrating various things to think about.</p>\n\n<p>Example: Should the benchmark measure time/iteration or iterations/time, and why?</p>\n\n<p>Related: <a href=\"https://stackoverflow.com/questions/410437/is-stopwatch-benchmarking-acceptable\">Is stopwatch benchmarking acceptable?</a></p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>Tips about writing micro benchmarks <a href=\"https://wiki.openjdk.java.net/display/HotSpot/Main\" rel=\"noreferrer\">from the creators of Java HotSpot</a>:</p>\n\n<p><strong>Rule 0:</strong> Read a reputable paper on JVMs and micro-benchmarking. A good one is <a href=\"http://www.ibm.com/developerworks/java/library/j-jtp02225\" rel=\"noreferrer\">Brian Goetz, 2005</a>. Do not expect too much from micro-benchmarks; they measure only a limited range of JVM performance characteristics.</p>\n\n<p><strong>Rule 1:</strong> Always include a warmup phase which runs your test kernel all the way through, enough to trigger all initializations and compilations before timing phase(s). (Fewer iterations is OK on the warmup phase. The rule of thumb is several tens of thousands of inner loop iterations.)</p>\n\n<p><strong>Rule 2:</strong> Always run with <code>-XX:+PrintCompilation</code>, <code>-verbose:gc</code>, etc., so you can verify that the compiler and other parts of the JVM are not doing unexpected work during your timing phase.</p>\n\n<p><strong>Rule 2.1:</strong> Print messages at the beginning and end of timing and warmup phases, so you can verify that there is no output from Rule 2 during the timing phase.</p>\n\n<p><strong>Rule 3:</strong> Be aware of the difference between <code>-client</code> and <code>-server</code>, and OSR and regular compilations. The <code>-XX:+PrintCompilation</code> flag reports OSR compilations with an at-sign to denote the non-initial entry point, for example: <code>Trouble$1::run @ 2 (41 bytes)</code>. Prefer server to client, and regular to OSR, if you are after best performance.</p>\n\n<p><strong>Rule 4:</strong> Be aware of initialization effects. Do not print for the first time during your timing phase, since printing loads and initializes classes. Do not load new classes outside of the warmup phase (or final reporting phase), unless you are testing class loading specifically (and in that case load only the test classes). Rule 2 is your first line of defense against such effects.</p>\n\n<p><strong>Rule 5:</strong> Be aware of deoptimization and recompilation effects. Do not take any code path for the first time in the timing phase, because the compiler may junk and recompile the code, based on an earlier optimistic assumption that the path was not going to be used at all. Rule 2 is your first line of defense against such effects.</p>\n\n<p><strong>Rule 6:</strong> Use appropriate tools to read the compiler's mind, and expect to be surprised by the code it produces. Inspect the code yourself before forming theories about what makes something faster or slower.</p>\n\n<p><strong>Rule 7:</strong> Reduce noise in your measurements. Run your benchmark on a quiet machine, and run it several times, discarding outliers. Use <code>-Xbatch</code> to serialize the compiler with the application, and consider setting <code>-XX:CICompilerCount=1</code> to prevent the compiler from running in parallel with itself. Try your best to reduce GC overhead, set <code>Xmx</code>(large enough) equals <code>Xms</code> and use <a href=\"http://openjdk.java.net/jeps/318\" rel=\"noreferrer\"><code>UseEpsilonGC</code></a> if it is available.</p>\n\n<p><strong>Rule 8:</strong> Use a library for your benchmark as it is probably more efficient and was already debugged for this sole purpose. Such as <a href=\"http://openjdk.java.net/projects/code-tools/jmh/\" rel=\"noreferrer\">JMH</a>, <a href=\"https://github.com/google/caliper\" rel=\"noreferrer\">Caliper</a> or <a href=\"http://cseweb.ucsd.edu/users/wgg/JavaProf/javaprof.html\" rel=\"noreferrer\">Bill and Paul's Excellent UCSD Benchmarks for Java</a>.  </p>\n    </div>", "total_vectors": [-0.014884785749018192, -0.04250992834568024, 0.006700691767036915, 0.01856112852692604, 0.008834939450025558, 0.052592016756534576, -0.00748754758387804, 0.0004642160492949188, -0.00666720699518919, 0.06714697182178497, -0.04395182430744171, -0.014911436475813389, -0.03287878260016441, -0.0052234274335205555, -0.018068518489599228, 0.11077874898910522, 0.035925742238759995, -0.019299600273370743, 0.049505267292261124, -0.09807730466127396, 0.023488325998187065, 0.03867502883076668, -0.012155533768236637, 0.06477135419845581, 0.01574278250336647, 0.046655092388391495, -0.004455134738236666, -0.015654776245355606, 0.020088136196136475, 0.01462903805077076, -0.04102961719036102, -0.003632979467511177, 0.003060858463868499, -0.014623529277741909, -0.0257753636687994, 0.016048777848482132, 0.008223894983530045, -0.017076974734663963, -0.07314043492078781, -0.05767581984400749, -0.006080025341361761, -0.021823126822710037, 0.04501909762620926, 0.04469654709100723, 0.10366086661815643, -0.028601735830307007, -0.05454672873020172, 0.052833523601293564, -0.05799983814358711, -0.011555730365216732, 0.02473383955657482, 0.11125590652227402, 0.00349186803214252, -0.06467469036579132, -0.023404939100146294, -0.022843454033136368, -0.020177431404590607, 0.009021437726914883, 0.03047654964029789, 0.020052405074238777, -0.0077971965074539185, -0.1046188622713089, -0.03821978345513344, -0.08915159851312637, -0.017682205885648727, -0.06555004417896271, -0.05501008406281471, 0.046885885298252106, 0.09797439724206924, -0.01073413621634245, -0.07211234420537949, -0.03350548818707466, 0.01803966797888279, -0.04296566918492317, -0.017449023202061653, -0.05782005935907364, -0.04325448349118233, 0.043517906218767166, -0.002159164985641837, 0.09938815981149673, 0.010577590204775333, -0.00841743964701891, -0.009268579073250294, -3.871905573760159e-05, 0.09221407771110535, 0.059767547994852066, -0.012715901248157024, 0.04539131373167038, -0.015685442835092545, -0.011022865772247314, 0.035374097526073456, 0.01569235324859619, -0.04487662389874458, 0.02711801789700985, -0.0027348811272531748, 0.08230344206094742, -0.06072317808866501, 0.07115129381418228, 0.025372549891471863, -0.10989802330732346, 0.010322246700525284, -0.01066096592694521, 0.021534742787480354, 0.012098575010895729, -0.017537279054522514, -0.0031772153452038765, -0.027363620698451996, -0.037529028952121735, -0.029914066195487976, 0.005015905015170574, 0.048032715916633606, -0.006811334751546383, -0.0426773726940155, -0.04778839275240898, 0.033003684133291245, -0.03566224128007889, 0.018268929794430733, 0.02779359556734562, 0.026099225506186485, -0.06650926172733307, 0.030803926289081573, -0.015955718234181404, -0.023106874898076057, 0.013410663232207298, 0.0393342562019825, -0.005408555269241333, 0.004007347859442234, 0.02493070438504219, 0.08343514055013657, -0.007178691681474447, 0.05280227214097977, -0.03769474849104881, -0.06526956707239151, -0.007750251330435276, 0.050576332956552505, -0.059713516384363174, -0.0821862444281578, 0.010945577174425125, -0.021887056529521942, -0.03559650480747223, -0.011607701890170574, -0.01838923990726471, 0.05756942555308342, -0.010331583209335804, 0.004071793984621763, -0.10779021680355072, -0.020579561591148376, 0.03858441859483719, 0.004305531736463308, 0.10569413751363754, 0.0167740136384964, -0.009557629935443401, -0.024491949006915092, -0.007717626169323921, -0.028049468994140625, -0.03137350454926491, -0.004163623321801424, 0.051820166409015656, -0.008922236040234566, 0.019508225843310356, -0.041877321898937225, 0.02801567316055298, 0.03978870064020157, -0.03265994042158127, 0.03939700126647949, 0.03945160284638405, 0.00908566266298294, 0.0017784368246793747, 0.001018987037241459, 0.024782484397292137, 0.03829023241996765, 0.03719383478164673, -0.01926342211663723, 0.01593303494155407, -0.032887052744627, -0.021291831508278847, 0.03738073259592056, 0.000974375638179481, 0.018804041668772697, 0.06361764669418335, 0.020870650187134743, -0.036009401082992554, 0.039807505905628204, 0.006817424204200506, 0.0535624735057354, -0.008595461957156658, 0.0202135369181633, 0.053059156984090805, -0.08984044939279556, 0.09043287485837936, 0.09664711356163025, -0.0366528145968914, 0.04108276218175888, -0.014277052134275436, -0.018901366740465164, -0.027812737971544266, -0.03976986184716225, 0.11096197366714478, 0.033745862543582916, -0.059147909283638, -0.08819421380758286, -0.021683109924197197, 0.03134436905384064, 0.10485957562923431, 0.013902976177632809, -0.021352963522076607, -0.05488813295960426, 0.061909038573503494, -0.09929649531841278, -0.012229148298501968, -0.0639546662569046, 0.010844885371625423, 0.0542907789349556, 0.0417589470744133, 0.07423312962055206, 0.04005385935306549, -0.03663422167301178, 0.023002594709396362, -0.015053106471896172, -0.003501460887491703, -0.08222884684801102, 0.018621845170855522, -0.02198667638003826, -0.0013929973356425762, 0.003472020383924246, -0.0327327586710453, -0.013013990595936775, 0.05734984949231148, 0.02152753621339798, -0.020586920902132988, -0.026699548587203026, 0.01486506313085556, 0.0016066968673840165, 0.029583362862467766, 0.028748633340001106, -0.012901685200631618, 0.09756818413734436, -0.01994558610022068, -0.023521097376942635, -0.011868195608258247, -0.0577135868370533, -0.007157327141612768, 0.01930159516632557, 0.013919761404395103, -0.0241094958037138, 0.10804768651723862, -0.01933124102652073, -0.02005847543478012, 0.10820064693689346, 0.09379635751247406, -0.09052985906600952, 0.037113696336746216, -0.02854885905981064, 0.0540572889149189, -0.08433982729911804, -0.06516449898481369, 0.022316621616482735, -0.09076138585805893, 0.010603583417832851, -0.017217552289366722, 0.024218322709202766, 0.013737812638282776, -0.10502893477678299, -0.03533199056982994, -0.0027238044422119856, 0.05197225138545036, 0.012492658570408821, -0.1057644635438919, 0.0236924160271883, 0.03843745216727257, -0.06726758927106857, -0.04463687539100647, -0.039176471531391144, -0.021056218072772026, -0.06744447350502014, -0.034621965140104294, -0.01978112757205963, 0.0002149200445273891, 0.09581709653139114, 0.009228764101862907, 0.031709615141153336, 0.011194868013262749, 0.047346390783786774, -0.02395302802324295, 0.010911204852163792, -0.09460394829511642, 0.006207883823662996, 0.017750464379787445, 0.007099472917616367, 0.015533575788140297, -0.019003061577677727, -0.02983352728188038, 0.07263097167015076, -0.006096705794334412, 0.08516944944858551, 0.053328368812799454, 0.03767140954732895, 0.04593354091048241, -0.03219306841492653, 0.005925903096795082, 0.01717211864888668, 0.052719879895448685, 0.0016652746126055717, 0.10434717684984207, -0.0694819912314415, -6.682305684080347e-05, 0.01209496334195137, -0.0625021904706955, 0.03493650630116463, 0.05198768153786659, 0.029403813183307648, 0.027554629370570183, -0.02031690441071987, -0.024686379358172417, -0.020729558542370796, -0.06013523042201996, 0.025807183235883713, 0.017332617193460464, 0.002737145870923996, 0.010288937017321587, -0.009737484157085419, -0.0022875196300446987, 0.020820636302232742, 0.0015456973342224956, 0.023612048476934433, -0.01136250514537096, -0.04263567924499512, 0.04600854963064194, -0.061637431383132935, 0.045711059123277664, 0.02864626981317997, -0.060542479157447815, -0.0037955520674586296, 0.017371604219079018, -0.017148112878203392, 0.009718652814626694, -0.016427235677838326, 0.0009037714917212725, 0.065334752202034, 0.01916845701634884, 0.010722431354224682, -0.03488948941230774, -0.04996320977807045, 0.03690967336297035, -0.11154835671186447, 0.010676453821361065, 0.06563450396060944, -0.02475334145128727, -0.01843542605638504, -0.045444056391716, -0.023975787684321404, -0.013625985942780972, 0.0023990999907255173, -0.018603691831231117, 0.026043463498353958, -0.03674781322479248, -0.10729306191205978, 0.03424612805247307, -0.022172901779413223, -0.061752162873744965, -0.08806242793798447, 0.013907784596085548, -0.0843796581029892, -0.0017536801751703024, -0.0067683071829378605, 0.028887322172522545, -0.08622338622808456, -0.08163806796073914, 0.05817541107535362, -0.013754254207015038, 0.04522702470421791, -0.017971079796552658, 0.014472732320427895, 0.01391284167766571, -0.028951676562428474, -0.10722040385007858, -0.01650301180779934, 0.04423266276717186, 0.024800749495625496, -0.05759802088141441, 0.014528751373291016, -0.0613153837621212, -0.03199625387787819, -0.06634923815727234, -0.036364562809467316, -0.011849610134959221, 0.06860166043043137, 0.025683436542749405, -0.029336903244256973, -0.031395573168992996, -0.014571083709597588, -0.09216108918190002, -0.0037046880461275578, 0.011868266388773918, -0.00031882181065157056, -0.013312192633748055, -0.00564788980409503, 0.018288305029273033, -0.04807518795132637, 0.07588738203048706, 0.02507212944328785, 0.0029544986318796873, 0.0066304937936365604, 0.05914073437452316, 0.0027798935770988464, 0.01773391105234623, -0.08797456324100494, -0.003942249808460474, -0.046239834278821945, -0.006226573139429092, -0.04495616629719734, 0.0064506325870752335, -0.0032453450839966536, 0.03449510410428047, -0.016232825815677643, 0.013071099296212196, -0.019092336297035217, 0.06497425585985184, -0.047479111701250076, -0.04238802194595337, -0.056166186928749084, -0.07182330638170242, 0.032390296459198, -0.06405027955770493, -0.019870208576321602, 0.012658009305596352, 0.03616779297590256, 0.055148087441921234, -0.10957478731870651, 0.047727953642606735, -0.01656048558652401, -0.035185493528842926, 0.0021993715781718493, -0.0004318215069361031, -0.00900043360888958, 0.002795037580654025, 0.05689370259642601, 0.04849408194422722, 0.008797670714557171, 0.035279493778944016, -0.014458910562098026, -0.01203017309308052, 0.04978425055742264, -0.0019419832387939095, -0.0011381724616512656, 0.04832160100340843, 0.009699566289782524, -0.04474898427724838, 0.054400283843278885, -0.025957157835364342, -0.05855431780219078, 0.041500579565763474, 0.10964825004339218, -0.0236082561314106, -0.021457631140947342, -0.0998050719499588, -0.007414471823722124, -0.011888481676578522, 0.021183963865041733, -0.02113860473036766, -0.05974569544196129, -0.035129036754369736, 0.02014174871146679, -0.04795098677277565, 0.026155242696404457, 0.0016327389748767018, -0.0067460802383720875, 0.09729308634996414, -0.010586731135845184, 0.0639965757727623, 0.018767450004816055, -0.04114268347620964, 0.0015493695391342044, 0.002394780982285738, -0.011508368887007236, -0.053336251527071, 0.004430518951267004, -0.018286801874637604, 0.019263431429862976, 0.018039245158433914, 0.02440148964524269, -0.049092426896095276, 0.06359896808862686, -0.056628767400979996, -0.026181364431977272, 0.0871320590376854, 0.08987157046794891, 0.026541071012616158, -0.00873663928359747, -0.015946300700306892, -0.04633679986000061, -0.015175065957009792, 4.3571646529017016e-05, -0.01766263321042061, -0.004471306223422289, -0.02173595130443573, -0.031263645738363266, 0.02524048276245594, 0.0001837966265156865, -0.02401331067085266, 0.01305084303021431, 0.011400560848414898, -0.0007871094276197255, 0.07439230382442474, 0.04119877517223358, 0.030081819742918015, 0.0505402609705925, -0.014730772003531456, 0.023117031902074814, 0.0016453134594485164, -0.01496720127761364, -0.0169024970382452]},
{"question": "Pandas Merging 101", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<ul>\n<li>How to perform a (<code>INNER</code>| (<code>LEFT</code>|<code>RIGHT</code>|<code>FULL</code>) <code>OUTER</code>) <code>JOIN</code> with pandas?</li>\n<li>How do I add NaNs for missing rows after merge?</li>\n<li>How do I get rid of NaNs after merging?</li>\n<li>Can I merge on the index?</li>\n<li>How do I merge multiple DataFrames?</li>\n<li>Cross join with pandas?</li>\n<li><code>merge</code>? <code>join</code>? <code>concat</code>? <code>update</code>? Who? What? Why?!</li>\n</ul>\n<p>... and more. I've seen these recurring questions asking about various facets of the pandas merge functionality. Most of the information regarding merge and its various use cases today is fragmented across dozens of badly worded, unsearchable posts. The aim here is to collate some of the more important points for posterity.</p>\n<p>This QnA is meant to be the next installment in a series of helpful  user-guides on common pandas idioms (see <a href=\"https://stackoverflow.com/questions/47152691/how-to-pivot-a-dataframe\">this post on pivoting</a>, and <a href=\"https://stackoverflow.com/questions/49620538/what-are-the-levels-keys-and-names-arguments-for-in-pandas-concat-functio\">this post on concatenation</a>, which I will be touching on, later).</p>\n<p>Please note that this post is <em>not</em> meant to be a replacement for the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html\" rel=\"noreferrer\">documentation</a>, so please read that as well! Some of the examples are taken from there.</p>\n<hr>\n<hr>\n<h3>Table of Contents</h3>\n<p><sub>For ease of access.</sub></p>\n<ul>\n<li><p><a href=\"https://stackoverflow.com/a/53645883/4909087\">Merging basics - basic types of joins</a> (read this first)</p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/a/65167356/4909087\">Index-based joins</a></p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/a/65167327/4909087\">Generalizing to multiple DataFrames</a></p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/a/53699013/4909087\">Cross join</a></p>\n</li>\n</ul>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>This post aims to give readers a primer on SQL-flavored merging with pandas, how to use it, and when not to use it.</p>\n<p>In particular, here's what this post will go through:</p>\n<ul>\n<li><p>The basics - types of joins (LEFT, RIGHT, OUTER, INNER)</p>\n<ul>\n<li>merging with different column names</li>\n<li>merging with multiple columns</li>\n<li>avoiding duplicate merge key column in output</li>\n</ul>\n</li>\n</ul>\n<p>What this post (and other posts by me on this thread) will not go through:</p>\n<ul>\n<li>Performance-related discussions and timings (for now). Mostly notable mentions of better alternatives, wherever appropriate.</li>\n<li>Handling suffixes, removing extra columns, renaming outputs, and other specific use cases. There are other (read: better) posts that deal with that, so figure it out!</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong><br>\nMost examples default to INNER JOIN operations while demonstrating various features, unless otherwise specified.</p>\n<p>Furthermore, all the DataFrames here can be copied and replicated so\nyou can play with them. Also, see <a href=\"https://stackoverflow.com/questions/31610889/how-to-copy-paste-dataframe-from-stackoverflow-into-python\">this\npost</a>\non how to read DataFrames from your clipboard.</p>\n<p>Lastly, all visual representation of JOIN operations have been hand-drawn using Google Drawings. Inspiration from <a href=\"https://stackoverflow.com/a/55858991/4909087\">here</a>.</p>\n</blockquote>\n<hr>\n<hr>\n<h1>Enough Talk, just show me how to use <code>merge</code>!</h1>\n<h3>Setup &amp; Basics</h3>\n<pre><code>np.random.seed(0)\nleft = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'value': np.random.randn(4)})    \nright = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'value': np.random.randn(4)})\n  \nleft\n\n  key     value\n0   A  1.764052\n1   B  0.400157\n2   C  0.978738\n3   D  2.240893\n\nright\n\n  key     value\n0   B  1.867558\n1   D -0.977278\n2   E  0.950088\n3   F -0.151357\n</code></pre>\n<p>For the sake of simplicity, the key column has the same name (for now).</p>\n<p>An <strong>INNER JOIN</strong> is represented by</p>\n<img src=\"https://i.stack.imgur.com/YvuOa.png\" width=\"500\">\n<blockquote>\n<p><strong>Note</strong><br>\nThis, along with the forthcoming figures all follow this convention:</p>\n<ul>\n<li><strong>blue</strong> indicates rows that are present in the merge result</li>\n<li><strong>red</strong> indicates rows that are excluded from the result (i.e., removed)</li>\n<li><strong>green</strong> indicates missing values that are replaced with <code>NaN</code>s in the result</li>\n</ul>\n</blockquote>\n<p>To perform an INNER JOIN, call <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html\" rel=\"noreferrer\"><code>merge</code></a> on the left DataFrame, specifying the right DataFrame and the join key (at the very least) as arguments.</p>\n<pre><code>left.merge(right, on='key')\n# Or, if you want to be explicit\n# left.merge(right, on='key', how='inner')\n\n  key   value_x   value_y\n0   B  0.400157  1.867558\n1   D  2.240893 -0.977278\n</code></pre>\n<p>This returns only rows from <code>left</code> and <code>right</code> which share a common key (in this example, \"B\" and \"D).</p>\n<p>A <strong>LEFT OUTER JOIN</strong>, or LEFT JOIN  is represented by</p>\n<img src=\"https://i.stack.imgur.com/BECid.png\" width=\"500\">\n<p>This can be performed by specifying <code>how='left'</code>.</p>\n<pre><code>left.merge(right, on='key', how='left')\n\n  key   value_x   value_y\n0   A  1.764052       NaN\n1   B  0.400157  1.867558\n2   C  0.978738       NaN\n3   D  2.240893 -0.977278\n</code></pre>\n<p>Carefully note the placement of NaNs here. If you specify <code>how='left'</code>, then only keys from <code>left</code> are used, and missing data from <code>right</code> is replaced by NaN.</p>\n<p>And similarly, for a <strong>RIGHT OUTER JOIN</strong>, or RIGHT JOIN which is...</p>\n<img src=\"https://i.stack.imgur.com/8w1US.png\" width=\"500\">\n<p>...specify <code>how='right'</code>:</p>\n<pre><code>left.merge(right, on='key', how='right')\n\n  key   value_x   value_y\n0   B  0.400157  1.867558\n1   D  2.240893 -0.977278\n2   E       NaN  0.950088\n3   F       NaN -0.151357\n</code></pre>\n<p>Here, keys from <code>right</code> are used, and missing data from <code>left</code> is replaced by NaN.</p>\n<p>Finally, for the <strong>FULL OUTER JOIN</strong>, given by</p>\n<img src=\"https://i.stack.imgur.com/euLoe.png\" width=\"500\">\n<p>specify <code>how='outer'</code>.</p>\n<pre><code>left.merge(right, on='key', how='outer')\n\n  key   value_x   value_y\n0   A  1.764052       NaN\n1   B  0.400157  1.867558\n2   C  0.978738       NaN\n3   D  2.240893 -0.977278\n4   E       NaN  0.950088\n5   F       NaN -0.151357\n</code></pre>\n<p>This uses the keys from both frames, and NaNs are inserted for missing rows in both.</p>\n<p>The documentation summarizes these various merges nicely:</p>\n<p><a href=\"https://i.stack.imgur.com/5qDIy.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/5qDIy.png\" alt=\"enter image description here\"></a></p>\n<hr>\n<h3><strong>Other JOINs - LEFT-Excluding, RIGHT-Excluding, and FULL-Excluding/ANTI JOINs</strong></h3>\n<p>If you need <strong>LEFT-Excluding JOINs</strong> and <strong>RIGHT-Excluding JOINs</strong> in two steps.</p>\n<p>For LEFT-Excluding JOIN, represented as</p>\n<img src=\"https://i.stack.imgur.com/bXWIV.png\" width=\"500\">\n<p>Start by performing a LEFT OUTER JOIN and then filtering (excluding!) rows coming from <code>left</code> only,</p>\n<pre><code>(left.merge(right, on='key', how='left', indicator=True)\n     .query('_merge == \"left_only\"')\n     .drop('_merge', 1))\n\n  key   value_x  value_y\n0   A  1.764052      NaN\n2   C  0.978738      NaN\n</code></pre>\n<p>Where,</p>\n<pre><code>left.merge(right, on='key', how='left', <b>indicator=True</b>)\n\n  key   value_x   value_y     _merge\n0   A  1.764052       NaN  left_only\n1   B  0.400157  1.867558       both\n2   C  0.978738       NaN  left_only\n3   D  2.240893 -0.977278       both</code></pre>\n<p>And similarly, for a RIGHT-Excluding JOIN,</p>\n<img src=\"https://i.stack.imgur.com/Z0br2.png\" width=\"500\">\n<pre><code>(left.merge(right, on='key', how='right', <b>indicator=True</b>)\n     .query('_merge == \"right_only\"')\n     .drop('_merge', 1))\n\n  key  value_x   value_y\n2   E      NaN  0.950088\n3   F      NaN -0.151357</code></pre>\n<p>Lastly, if you are required to do a merge that only retains keys from the left or right, but not both (IOW, performing an <strong>ANTI-JOIN</strong>),</p>\n<img src=\"https://i.stack.imgur.com/PWMYd.png\" width=\"500\">\n<p>You can do this in similar fashion\u2014</p>\n<pre><code>(left.merge(right, on='key', how='outer', indicator=True)\n     .query('_merge != \"both\"')\n     .drop('_merge', 1))\n\n  key   value_x   value_y\n0   A  1.764052       NaN\n2   C  0.978738       NaN\n4   E       NaN  0.950088\n5   F       NaN -0.151357\n</code></pre>\n<hr>\n<h3><strong>Different names for key columns</strong></h3>\n<p>If the key columns are named differently\u2014for example, <code>left</code> has <code>keyLeft</code>, and <code>right</code> has <code>keyRight</code> instead of <code>key</code>\u2014then you will have to specify <code>left_on</code> and <code>right_on</code> as arguments instead of <code>on</code>:</p>\n<pre><code>left2 = left.rename({'key':'keyLeft'}, axis=1)\nright2 = right.rename({'key':'keyRight'}, axis=1)\n\nleft2\n \n  keyLeft     value\n0       A  1.764052\n1       B  0.400157\n2       C  0.978738\n3       D  2.240893\n\nright2\n\n  keyRight     value\n0        B  1.867558\n1        D -0.977278\n2        E  0.950088\n3        F -0.151357\n</code></pre>\n\n<pre><code>left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')\n\n  keyLeft   value_x keyRight   value_y\n0       B  0.400157        B  1.867558\n1       D  2.240893        D -0.977278\n</code></pre>\n<hr>\n<h3><strong>Avoiding duplicate key column in output</strong></h3>\n<p>When merging on <code>keyLeft</code> from <code>left</code> and <code>keyRight</code> from <code>right</code>, if you only want either of the <code>keyLeft</code> or <code>keyRight</code> (but not both) in the output, you can start by setting the index as a preliminary step.</p>\n<pre><code>left3 = left2.set_index('keyLeft')\nleft3.merge(right2, left_index=True, right_on='keyRight')\n    \n    value_x keyRight   value_y\n0  0.400157        B  1.867558\n1  2.240893        D -0.977278\n</code></pre>\n<p>Contrast this with the output of the command just before (that is, the output of <code>left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')</code>), you'll notice <code>keyLeft</code> is missing. You can figure out what column to keep based on which frame's index is set as the key. This may matter when, say, performing some OUTER JOIN operation.</p>\n<hr>\n<h3><strong>Merging only a single column from one of the <code>DataFrames</code></strong></h3>\n<p>For example, consider</p>\n<pre><code>right3 = right.assign(newcol=np.arange(len(right)))\nright3\n  key     value  newcol\n0   B  1.867558       0\n1   D -0.977278       1\n2   E  0.950088       2\n3   F -0.151357       3\n</code></pre>\n<p>If you are required to merge only \"new_val\" (without any of the other columns), you can usually just subset columns before merging:</p>\n<pre><code>left.merge(right3[['key', 'newcol']], on='key')\n\n  key     value  newcol\n0   B  0.400157       0\n1   D  2.240893       1\n</code></pre>\n<p>If you're doing a LEFT OUTER JOIN, a more performant solution would involve <code>map</code>:</p>\n<pre><code># left['newcol'] = left['key'].map(right3.set_index('key')['newcol']))\nleft.assign(newcol=left['key'].map(right3.set_index('key')['newcol']))\n\n  key     value  newcol\n0   A  1.764052     NaN\n1   B  0.400157     0.0\n2   C  0.978738     NaN\n3   D  2.240893     1.0\n</code></pre>\n<p>As mentioned, this is similar to, but faster than</p>\n<pre><code>left.merge(right3[['key', 'newcol']], on='key', how='left')\n\n  key     value  newcol\n0   A  1.764052     NaN\n1   B  0.400157     0.0\n2   C  0.978738     NaN\n3   D  2.240893     1.0\n</code></pre>\n<hr>\n<h3><strong>Merging on multiple columns</strong></h3>\n<p>To join on more than one column, specify a list for <code>on</code> (or <code>left_on</code> and <code>right_on</code>, as appropriate).</p>\n<pre><code>left.merge(right, on=['key1', 'key2'] ...)\n</code></pre>\n<p>Or, in the event the names are different,</p>\n<pre><code>left.merge(right, left_on=['lkey1', 'lkey2'], right_on=['rkey1', 'rkey2'])\n</code></pre>\n<hr>\n<h3><strong>Other useful <code>merge*</code> operations and functions</strong></h3>\n<ul>\n<li><p>Merging a DataFrame with Series on index: See <a href=\"https://stackoverflow.com/a/40762674/4909087\">this answer</a>.</p>\n</li>\n<li><p>Besides <code>merge</code>, <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.update.html\" rel=\"noreferrer\"><code>DataFrame.update</code></a> and <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.combine_first.html\" rel=\"noreferrer\"><code>DataFrame.combine_first</code></a> are also used in certain cases to update one DataFrame with another.</p>\n</li>\n<li><p><a href=\"http://pandas.pydata.org/pandas-docs/version/0.19.0/generated/pandas.merge_ordered.html\" rel=\"noreferrer\"><code>pd.merge_ordered</code></a> is a useful function for ordered JOINs.</p>\n</li>\n<li><p><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.merge_asof.html\" rel=\"noreferrer\"><code>pd.merge_asof</code></a> (read: merge_asOf) is useful for <em>approximate</em> joins.</p>\n</li>\n</ul>\n<p><strong>This section only covers the very basics, and is designed to only whet your appetite. For more examples and cases, see the <a href=\"https://pandas.pydata.org/pandas-docs/stable/merging.html\" rel=\"noreferrer\">documentation on <code>merge</code>, <code>join</code>, and <code>concat</code></a> as well as the links to the function specs.</strong></p>\n<hr>\n<hr>\n<h1>Continue Reading</h1>\n<p>Jump to other topics in Pandas Merging 101 to continue learning:</p>\n<ul>\n<li><p><a href=\"https://stackoverflow.com/a/53645883/4909087\">Merging basics - basic types of joins</a> <sup>*</sup></p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/a/65167356/4909087\">Index-based joins</a></p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/a/65167327/4909087\">Generalizing to multiple DataFrames</a></p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/a/53699013/4909087\">Cross join</a></p>\n</li>\n</ul>\n<p><sub>* you are here </sub></p>\n    </div>", "total_vectors": [0.016152411699295044, -0.07234656810760498, -0.004209527280181646, 0.00962628424167633, 0.06819070875644684, -0.033548448234796524, -0.04892582818865776, -0.024421848356723785, -0.05923934280872345, 0.048859160393476486, 0.0705656185746193, 0.07099105417728424, -0.04904909059405327, -0.06716613471508026, 0.03348878026008606, 0.07145452499389648, 0.06953936815261841, -0.06820365786552429, 0.06986819952726364, -0.03917403891682625, -0.01420063991099596, -0.02848498709499836, -0.03818704932928085, 0.022954829037189484, 0.04930505156517029, 0.02616116590797901, 0.031403448432683945, -0.02601342648267746, -0.05391272157430649, 0.029981639236211777, 0.06798916310071945, 0.03704457730054855, -0.021554524078965187, -0.06947105377912521, 0.020212171599268913, -0.06170949339866638, -0.04268479347229004, 0.01200692355632782, 0.009608033113181591, -0.04743616655468941, 0.010195502080023289, -0.02910628169775009, -0.0006026607588864863, -0.005054130684584379, -0.07379036396741867, 0.031958140432834625, -0.008605936542153358, 0.011357246898114681, 0.049975063651800156, -0.001283905003219843, 0.07007355988025665, -0.061504263430833817, 0.008685709908604622, -0.01959790289402008, 0.06119701266288757, 0.05928539112210274, 0.057357415556907654, -0.012794439680874348, -0.0003425577888265252, -0.020989712327718735, -0.053187355399131775, -0.018589619547128677, -0.053793054074048996, -0.006680177990347147, -0.023292992264032364, 0.044678639620542526, 0.05997489392757416, 0.03971533104777336, -0.07496225833892822, 0.065948985517025, -0.059222180396318436, -0.034936223179101944, 0.008533746935427189, 0.06971289962530136, 0.02942878007888794, -0.0166864562779665, 0.060212310403585434, -0.020783405750989914, 0.00626075966283679, 0.013922187499701977, 0.0057669151574373245, 0.030106330290436745, -0.019458698108792305, -0.026673095300793648, -0.04343501478433609, -0.04827669635415077, -0.02593359909951687, -0.034241583198308945, -0.07159597426652908, 0.028281182050704956, -0.04718691110610962, 0.06849785894155502, 0.02900923788547516, 0.07254102826118469, -0.017084289342164993, -0.05534989386796951, -0.06528467684984207, 0.034252505749464035, 0.02742801047861576, -0.06115945428609848, 0.06908956170082092, 0.022635826840996742, -0.058446004986763, 0.022332586348056793, -0.05178305506706238, -0.0681750550866127, 0.05587662011384964, -0.011034175753593445, -0.022070644423365593, -0.04569847509264946, -0.030756693333387375, -0.06852774322032928, -0.004162862431257963, -0.049528032541275024, 0.04746752977371216, 0.011980465613305569, 0.04271606728434563, -0.0072049847804009914, -0.029280226677656174, -0.07113544642925262, 0.012991239316761494, -0.011902820318937302, -0.05339870974421501, 0.04887808859348297, -0.046697888523340225, 0.06095636636018753, 0.06034384295344353, 0.0384545736014843, 0.047473806887865067, -0.008532409556210041, 0.04153933376073837, 0.04065077379345894, -0.003975656349211931, 0.00805791188031435, -0.021063702180981636, 0.026427684351801872, -0.029151376336812973, -0.05654234439134598, 0.03275146335363388, -0.003642936469987035, 0.013995385728776455, -0.049264177680015564, 0.07492183893918991, -0.0227521900087595, 0.01191905327141285, -0.06139324605464935, 0.026312153786420822, -0.016931498423218727, -0.05245988070964813, -0.06900633126497269, -0.06517385691404343, 0.03589330241084099, -0.00728561170399189, 0.014259587042033672, -0.029465414583683014, 0.02957497164607048, -0.01646478660404682, -0.06807880848646164, 0.06417341530323029, 0.0537857823073864, 0.0024678348563611507, -0.014315553940832615, 0.03570476919412613, 0.07297557592391968, -0.06707046926021576, 0.0008318583713844419, -0.01788814179599285, 0.040088582783937454, 0.007633810862898827, -0.0340132862329483, -0.0024804554414004087, 0.007211404852569103, 0.028807057067751884, 0.017658326774835587, -0.0333377830684185, 0.01097904797643423, -0.001976946834474802, 0.0711844339966774, 0.03228573873639107, 0.015468845143914223, 0.07046765834093094, 0.007989102974534035, 0.022737722843885422, 0.05388084053993225, -0.03565589338541031, 0.05309147760272026, -0.03289514034986496, 0.01760329119861126, -0.01898937113583088, 0.04726007208228111, 0.0028165809344500303, -0.01062262523919344, -0.006794103886932135, 0.04560546204447746, 0.0351729579269886, -0.005681789014488459, 0.06364186108112335, 0.07200586050748825, 0.059333425015211105, -0.009094787761569023, -0.04521512985229492, 0.050991982221603394, -0.07033472508192062, 0.011605833657085896, 0.009165914729237556, -0.043167538940906525, -0.06960021704435349, 0.07051421701908112, -0.06495752930641174, 0.05035613104701042, -0.026694532483816147, 0.07570860534906387, 0.0088156433776021, -0.019556663930416107, -0.06016063690185547, 0.03551816567778587, -0.04654476046562195, 0.042681220918893814, 0.0016706821043044329, -0.03211751952767372, 0.07470782101154327, -0.04534563794732094, 0.059174079447984695, 0.05061908811330795, 0.03329481557011604, -0.03666503354907036, -0.005442480556666851, -0.040706831961870193, 0.0031136206816881895, 0.04530961439013481, -0.06421535462141037, -0.036127496510744095, 0.04507965222001076, 0.0738922730088234, 0.06769502907991409, -0.014469185844063759, -0.020255930721759796, 0.06157044321298599, -0.018123462796211243, 0.05840665474534035, 0.06177776679396629, -0.07096287608146667, -0.06310681998729706, -0.010739919729530811, 0.05342462286353111, 0.054150454699993134, 0.0031660229433327913, 0.06897350400686264, 0.03368372097611427, 0.03287492319941521, -0.010489828884601593, -0.04756729677319527, -0.027612678706645966, -0.01647713966667652, -0.014917432330548763, 0.05485696345567703, -0.07306011021137238, -0.07004440575838089, -0.018276188522577286, 0.03496357798576355, -0.07017376273870468, 0.032097067683935165, -0.009000356309115887, 0.07123090326786041, -0.025037163868546486, 0.06943673640489578, -0.014761117286980152, -0.029301727190613747, -0.03932769224047661, 0.012122719548642635, -0.06610757112503052, 0.06400682777166367, 0.025902703404426575, -0.030485495924949646, -0.004882548935711384, 0.057411182671785355, -0.052840087562799454, 0.05563531443476677, 0.06126008182764053, 0.02130861021578312, 0.0646478682756424, 0.0017630599904805422, -0.01905837282538414, -0.040112584829330444, -0.002552240854129195, -0.012678480707108974, 0.0014201796147972345, 0.06021175533533096, -0.013903091661632061, -0.0005159693537279963, 0.025979161262512207, 0.0061693270690739155, 0.05717214196920395, 0.013099605217576027, 0.01698489859700203, 0.05133218690752983, -0.011672730557620525, -0.02401619590818882, -0.07416585087776184, 0.047320809215307236, 0.01276080310344696, -0.060284245759248734, -0.001460030092857778, -0.06051046773791313, -0.043156396597623825, -0.017262587323784828, 0.0008552763611078262, 0.05865364521741867, 0.00017692432447802275, 0.06962674111127853, -0.059305403381586075, -0.045208606868982315, 0.05354484170675278, 0.025201601907610893, -0.03328687697649002, -0.03118271194398403, 0.02049490250647068, -0.02042502537369728, 0.06373755633831024, 0.0738396868109703, -0.0181853286921978, -0.0316578671336174, 0.03086841106414795, -0.0013808587100356817, 0.024551529437303543, 0.028532974421977997, 0.05620867386460304, 0.04108697175979614, -0.0302495788782835, 0.0612744465470314, 0.04544202983379364, 0.06377075612545013, 0.057506013661623, 0.05917850136756897, -0.03615788742899895, 0.002856844337657094, -0.07427442818880081, -0.07109922915697098, -0.007240130100399256, 0.06778864562511444, -0.0144304558634758, -0.05532918870449066, 0.06505118310451508, -0.05388551205396652, -0.07399658113718033, 0.05524856224656105, -0.053279343992471695, -0.0708155706524849, -0.020611390471458435, -0.04280133917927742, 0.027004985138773918, 0.062363941222429276, -0.021431181579828262, 0.047272343188524246, 0.023326976224780083, -0.035914983600378036, -0.07293920964002609, 0.03408738970756531, -0.03412036970257759, -0.06286199390888214, -0.016618989408016205, 0.028154050931334496, -0.04793509095907211, -0.04076298698782921, 0.05589599162340164, 0.022125499323010445, 0.020571159198880196, -0.04720740020275116, 0.02675643563270569, 0.05253427103161812, -0.03527935966849327, -0.05959681421518326, 0.07070031762123108, 0.052932921797037125, 0.06606335937976837, -0.06351754814386368, 0.0047632865607738495, -0.010365745984017849, -0.047828588634729385, -0.020309744402766228, 0.06515879929065704, 0.0012530065141618252, -0.013720765709877014, 0.07314620912075043, 0.027960706502199173, 0.023454386740922928, -0.04860379919409752, 0.05711664259433746, 0.03253594785928726, -0.05740167945623398, -0.018678782507777214, -0.032882023602724075, -0.020025016739964485, 0.019912058487534523, -0.06774678826332092, 0.04825195297598839, 0.031613513827323914, 0.05873460695147514, -0.04835595563054085, 0.017763571813702583, 0.05312764644622803, -0.03376207873225212, -0.042762815952301025, 0.06840356439352036, -0.003726181574165821, -0.0059067802503705025, -0.04261254519224167, -0.05034374073147774, -0.024193884804844856, -0.0055998582392930984, 0.06154147908091545, 0.023504959419369698, 0.01596759632229805, 0.05536820366978645, 0.03326422721147537, -0.0693722665309906, 0.06963757425546646, 0.04282074049115181, 0.0068411026149988174, 0.06548848003149033, 0.027337919920682907, 0.003666676115244627, -0.03019622340798378, 0.05489320307970047, -0.06381937116384506, 0.04322142153978348, -0.016653073951601982, 0.0357273630797863, -0.06974871456623077, 0.03133581206202507, 0.062240276485681534, -0.017790935933589935, -0.061388395726680756, -0.012044057250022888, -0.014220565557479858, 0.0048654451966285706, 0.005062326788902283, -0.06062611937522888, -0.07000534981489182, -0.07408059388399124, 0.05669325217604637, -0.031334180384874344, 0.020449038594961166, -0.029620304703712463, 0.03487951308488846, 0.017454179003834724, -0.016322694718837738, -0.011300547979772091, -0.049169402569532394, 0.03535101190209389, -0.021420512348413467, 0.06198941171169281, 0.06806084513664246, 0.07345689833164215, 0.06356416642665863, -0.06825500726699829, -0.06273570656776428, 0.03997015953063965, 0.04067274555563927, -0.01144244521856308, 0.07281044870615005, 0.06600140035152435, 0.05156971141695976, 0.07054951041936874, -0.007665651850402355, -0.04837825149297714, -0.041211578994989395, -0.045434825122356415, -0.029568681493401527, 0.010020018555223942, 0.05487392470240593, -0.06376364827156067, 0.07576393336057663, -0.0648566409945488, 0.009843967854976654, 0.03597138077020645, 0.0409729927778244, 0.029658528044819832, -0.030852818861603737, -0.002926733111962676, 0.04838184267282486, -0.02502114698290825, 0.06500977277755737, 0.06163947284221649, -0.025487607344985008, 0.022778457030653954, 0.034410007297992706, -0.046106621623039246, -0.02943304367363453, -0.07420677691698074, -0.03821629285812378, 0.01877465844154358, -0.03665818274021149, 0.03681952506303787, 0.028382347896695137, -0.023038126528263092, 0.051876362413167953, 0.03071071021258831, 0.051925987005233765, -0.06851612776517868, 0.017549067735671997, 0.0022780660074204206, 0.016894634813070297, -0.030883759260177612, 0.03364843502640724, 0.022789733484387398, -0.0677233412861824, -0.06460509449243546, 0.016149232164025307, 0.045423414558172226, -0.03412676975131035, -0.00546979159116745]},
{"question": "Is storing a delimited list in a database column really that bad?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>Imagine a web form with a set of check boxes (any or all of them can be selected). I chose to save them in a comma separated list of values stored in one column of the database table.</p>\n\n<p>Now, I know that the correct solution would be to create a second table and properly normalize the database. It was quicker to implement the easy solution, and I wanted to have a proof-of-concept of that application quickly and without having to spend too much time on it.</p>\n\n<p>I thought the saved time and simpler code was worth it in my situation, is this a defensible design choice, or should I have normalized it from the start?</p>\n\n<p>Some more context, this is a small internal application that essentially replaces an Excel file that was stored on a shared folder. I'm also asking because I'm thinking about cleaning up the program and make it more maintainable. There are some things in there I'm not entirely happy with, one of them is the topic of this question.</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>In addition to violating <a href=\"http://en.wikipedia.org/wiki/1NF\" rel=\"nofollow noreferrer\">First Normal Form</a> because of the repeating group of values stored in a single column, comma-separated lists have a lot of other more practical problems:</p>\n<ul>\n<li>Can\u2019t ensure that each value is the right data type: no way to prevent <em>1,2,3,banana,5</em></li>\n<li>Can\u2019t use foreign key constraints to link values to a lookup table; no way to enforce referential integrity.</li>\n<li>Can\u2019t enforce uniqueness: no way to prevent <em>1,2,3,3,3,5</em></li>\n<li>Can\u2019t delete a value from the list without fetching the whole list.</li>\n<li>Can't store a list longer than what fits in the string column.</li>\n<li>Hard to search for all entities with a given value in the list; you have to use an inefficient table-scan. May have to resort to regular expressions, for example in MySQL:<br>\n<code>idlist REGEXP '[[:&lt;:]]2[[:&gt;:]]'</code> or in MySQL 8.0: <code>idlist REGEXP '\\\\b2\\\\b'</code></li>\n<li>Hard to count elements in the list, or do other aggregate queries.</li>\n<li>Hard to join the values to the lookup table they reference.</li>\n<li>Hard to fetch the list in sorted order.</li>\n<li>Hard to choose a separator that is guaranteed not to appear in the values</li>\n</ul>\n<p>To solve these problems, you have to write tons of application code, reinventing functionality that the RDBMS <em>already provides much more efficiently</em>.</p>\n<p>Comma-separated lists are wrong enough that I made this the first chapter in my book: <a href=\"https://pragprog.com/titles/bksqla/\" rel=\"nofollow noreferrer\">SQL Antipatterns: Avoiding the Pitfalls of Database Programming</a>.</p>\n<p>There are times when you need to employ denormalization, but as <a href=\"https://stackoverflow.com/a/3653507/578288\">@OMG Ponies mentions</a>, these are exception cases.  Any non-relational \u201coptimization\u201d benefits one type of query at the expense of other uses of the data, so be sure you know which of your queries need to be treated so specially that they deserve denormalization.</p>\n    </div>", "total_vectors": [-0.003449826268479228, -0.05669289082288742, 0.04119941592216492, 0.018283294513821602, 0.021334419026970863, 0.05846698582172394, 0.03574454039335251, 0.02463475428521633, 0.05170464515686035, 0.008588865399360657, 0.02211541123688221, 0.07547179609537125, -0.05942442640662193, 0.016681279987096786, 0.005190120544284582, 0.0917714387178421, 0.051598403602838516, 0.013216633349657059, -0.04220203310251236, 0.03052196279168129, -0.067326121032238, -0.006949233822524548, 0.013536719605326653, 0.026248140260577202, -0.05939725041389465, -0.05876430124044418, -0.015261510387063026, -0.004014447797089815, -0.016802571713924408, -0.01614421047270298, -0.03640371933579445, 0.041423533111810684, 0.03936284780502319, -0.03641883283853531, 0.05329137295484543, 0.04490800201892853, -0.08186156302690506, 0.058995168656110764, -0.025964844971895218, -0.022166462615132332, 0.02201586216688156, -0.05279158055782318, -0.033719222992658615, -0.028513003140687943, 0.08665382117033005, -0.08046429604291916, -0.0021606548689305782, -0.04130735248327255, 0.03164226934313774, -0.04645834118127823, 0.019607672467827797, 0.09116031229496002, 0.08237152546644211, -0.003042092313989997, -0.04710976406931877, 0.0277338195592165, 0.0034651674795895815, -0.03222820907831192, -0.028451409190893173, -0.04819335788488388, -0.056846983730793, -0.053966350853443146, 0.06773416697978973, -0.06306017190217972, 0.026437286287546158, 0.00529527897015214, -0.027036599814891815, 0.03249264135956764, 0.052823323756456375, -0.05753259360790253, 0.0235433466732502, 0.05451539531350136, 0.037839096039533615, 0.07985388487577438, 0.05663258582353592, 0.04623730853199959, 0.0922367125749588, -0.014712386764585972, -0.005039421375840902, 0.044303324073553085, 0.08574048429727554, -0.04512647166848183, 0.011853615753352642, -0.0317591167986393, -0.03647463023662567, -0.04439019784331322, 0.07648248970508575, 0.01531000342220068, -0.02918076515197754, -0.03931421786546707, 0.032006192952394485, 0.015021754428744316, -0.02570275217294693, 0.010155108757317066, -0.007711606100201607, 0.05742156505584717, -0.02581208199262619, -0.05121823027729988, -0.0672072023153305, -0.07617790251970291, -0.011378242634236813, 0.028939716517925262, 0.06547931581735611, -0.08425648510456085, -0.038938891142606735, -0.03363477438688278, 0.04900240898132324, 0.05907823145389557, 0.022021904587745667, 0.05142631381750107, -0.012608050368726254, -0.08193529397249222, 0.009152131155133247, 0.038467396050691605, -0.05331537872552872, 0.060310740023851395, 0.043458230793476105, 0.007420103531330824, -0.04031124711036682, -0.04102301225066185, 0.03276235982775688, -0.02904536947607994, -0.041894495487213135, 0.016457075253129005, -0.010167313739657402, -0.039987996220588684, -0.03151337802410126, 0.04053936526179314, 0.0320870503783226, -0.010881571099162102, 0.07006313651800156, 0.002783854492008686, -0.05459882318973541, -0.013912123627960682, 0.053013917058706284, -0.007214497774839401, 0.05096918344497681, -0.04066072404384613, -0.049878139048814774, -0.08853662014007568, 0.045504819601774216, 0.020584801211953163, 0.032841820269823074, 0.014670728705823421, -0.00858917087316513, -0.06353126466274261, 0.0412227027118206, 0.01919611170887947, 0.010791556909680367, 0.00025273615028709173, -0.05980093404650688, 0.04021266847848892, -0.05950523912906647, -0.012089003808796406, 0.06547433137893677, -0.010229233652353287, -0.07039982825517654, -0.058261144906282425, -0.03505932167172432, 0.0468912199139595, -0.08843658119440079, 0.014670615084469318, 0.0285219494253397, -0.021776536479592323, 0.06101061776280403, -0.093083955347538, -0.01362090278416872, -0.009220652282238007, 0.029882658272981644, -0.02554047852754593, 0.02044820226728916, -0.05522552505135536, 0.06918879598379135, -0.07068940252065659, -0.007077574729919434, 0.009789411909878254, -0.02643280103802681, 0.004901897627860308, -0.05470632016658783, 0.009326474741101265, -0.011326126754283905, 0.0013187510194256902, -0.058798592537641525, -0.061052996665239334, 0.02318730391561985, 0.0038666031323373318, -0.05710214748978615, 0.06541826575994492, -0.03353168070316315, 0.03548556938767433, 0.05757205933332443, 0.06767977029085159, -0.0007742163143120706, -0.04487742483615875, -0.08725224435329437, -0.028048338368535042, -0.04012421891093254, 0.0926039069890976, 0.04156097397208214, 0.020953070372343063, -0.01614443026483059, 0.002361921826377511, -0.0011427321005612612, -0.046967990696430206, -0.03487064689397812, 0.07069919258356094, -0.01606234349310398, -0.04929456114768982, -0.07455054670572281, -0.02469124086201191, -0.0634305477142334, 0.020717306062579155, 0.030022483319044113, 0.018473556265234947, 0.06997928768396378, 0.023965755477547646, -0.05362279340624809, -0.03381992131471634, 0.045079849660396576, -0.008260998874902725, -0.06663330644369125, 0.02328483760356903, 0.04443613067269325, 0.04216611385345459, 0.027311895042657852, 0.05528968200087547, -0.013664382509887218, -0.006287907715886831, 0.02113747037947178, -0.0644603744149208, -0.04930791258811951, -0.040420856326818466, -0.07766668498516083, -0.05210339277982712, 0.08785542100667953, -0.014169018715620041, 0.06685449928045273, 0.09271983802318573, 0.035755839198827744, -0.0022416834253817797, -0.080226369202137, -0.06117907166481018, 0.07193029671907425, -0.03192514553666115, -0.027906298637390137, 0.047753579914569855, -0.006453975103795528, 0.02518269419670105, -0.09162552654743195, 0.07821348309516907, -0.05141701549291611, -0.02547777257859707, -0.019658252596855164, -0.061587292701005936, -0.001931403181515634, -0.03489245846867561, 0.05349447578191757, -0.07250557839870453, -0.008859027177095413, 0.05396556109189987, -0.07333093881607056, 0.05875741317868233, -0.0786442905664444, -0.03884781152009964, 0.03967113047838211, 0.01360517181456089, 0.06480037420988083, -0.027886416763067245, -0.02992340922355652, -0.059364184737205505, -0.06191200762987137, -0.029988689348101616, -0.00011722778435796499, 0.01612810604274273, -0.00929941050708294, 0.0014539214316755533, 0.010404433123767376, 0.06530806422233582, 0.07182011008262634, 0.0676259770989418, -0.018065989017486572, 0.05569368600845337, -0.009802941232919693, -0.013229211792349815, -0.002846240997314453, -0.05706794187426567, -0.022962989285588264, -0.006692233495414257, -0.017691155895590782, -0.03128442540764809, 0.005825796164572239, 0.050107184797525406, -0.011125090532004833, 0.04420822113752365, -0.01701532118022442, 0.017742455005645752, 0.0224115252494812, -0.016889261081814766, 0.026363663375377655, 0.03545418754220009, -0.009934216737747192, 0.00586516922339797, 0.06081800535321236, -0.028509819880127907, -0.026606375351548195, -0.06576772779226303, 0.022129224613308907, -0.027509508654475212, -0.04704190418124199, 0.024962369352579117, -0.09206897020339966, -0.018751539289951324, -0.047991909086704254, 0.03672961890697479, -0.01915702223777771, -0.06874250620603561, -0.04690903425216675, -0.05535561591386795, 0.01395163033157587, 0.04875464737415314, 0.04866187646985054, -0.05831091105937958, -0.03574542701244354, -0.04409056529402733, -0.009580590762197971, 0.04938662797212601, -0.03529299050569534, -0.0062567004933953285, 0.03421802818775177, 0.022729240357875824, 0.015937747433781624, 0.01378997415304184, -0.015316653065383434, 0.057118214666843414, -0.02998589165508747, 0.025355372577905655, 0.025906633585691452, -0.007834183052182198, 0.0047232042998075485, -0.005211723502725363, -0.02059774659574032, 0.013621583580970764, -0.007821820676326752, -0.0017387495609000325, -0.09186816960573196, 0.008649670518934727, 0.05027097463607788, 0.0118031557649374, -0.08332351595163345, -0.05120701342821121, -0.02025527134537697, -0.04389914497733116, 0.02205607108771801, -0.07889558374881744, -0.03706212341785431, -0.08286768198013306, -0.0906098410487175, -0.0038988629821687937, -0.039934154599905014, 0.022835511714220047, -0.06433585286140442, -0.04396486282348633, -0.07572457939386368, 0.03301464393734932, -0.021787500008940697, 0.06870419532060623, -0.08108723163604736, 0.020583441480994225, -0.011852902360260487, -0.036026597023010254, -0.026914013549685478, -0.006401926279067993, 0.019546344876289368, 0.059832703322172165, -0.05644917115569115, -0.07038524001836777, -0.0005640548770315945, 0.028280457481741905, -0.05016961693763733, -0.004508664831519127, -0.06231873854994774, 0.015229731798171997, -0.03275430202484131, 0.07101348042488098, 0.01669652946293354, 0.03934444859623909, 0.0031915041618049145, -0.019761808216571808, 0.0001417213788954541, -0.05172807723283768, -0.02931978553533554, 0.02844857983291149, -0.045258112251758575, -0.008784706704318523, -0.021551869809627533, 0.01523737795650959, 0.008101439103484154, -0.029103055596351624, -0.018668189644813538, 0.06134457886219025, 0.05877700820565224, -0.02655259519815445, 0.06860826909542084, 0.021755248308181763, 0.015011870302259922, 0.05901118367910385, -0.04641973227262497, -0.002165535930544138, -0.044249195605516434, 0.05941542237997055, 0.002328651025891304, -0.042230818420648575, -0.01778213120996952, 0.017180750146508217, 0.020228073000907898, -0.047228507697582245, -0.02394428476691246, -0.02736510895192623, 0.03106972761452198, 0.04375481233000755, 0.006088827736675739, 0.002324208850041032, -0.009756181389093399, 0.04861318692564964, 0.009545915760099888, 0.0780520960688591, 0.017789790406823158, 0.07561600208282471, -0.05944618210196495, 0.009239446371793747, 0.0020847832784056664, -0.08599986135959625, 0.012146476656198502, -0.038574472069740295, -0.05041078105568886, 0.0231354720890522, -0.05224179849028587, 0.07066284865140915, 0.04246068000793457, -0.011624451726675034, 0.004155655857175589, -0.027130940929055214, -0.05566316470503807, 0.00842904020100832, -0.05338184908032417, 0.025826776400208473, 0.05896367132663727, -0.044346388429403305, -0.06981101632118225, 0.028121517971158028, -0.00394580140709877, 0.011544120498001575, 0.0897553488612175, 0.016001837328076363, 0.028920087963342667, -0.06222250685095787, 0.029067108407616615, -0.01967824250459671, -0.06958746165037155, -0.031439926475286484, 0.040030766278505325, 0.06283966451883316, -0.02045227773487568, 0.005794533062726259, -0.029494773596525192, -0.08065292984247208, -0.0036649415269494057, -0.037176091223955154, -0.0299534872174263, 0.0777200385928154, 0.0187960434705019, -0.013356685638427734, -0.07343829423189163, 0.06306298077106476, -0.04875664785504341, 0.0028823032043874264, -0.07545755058526993, -0.016918843612074852, 0.04738232493400574, -0.05502551421523094, 0.026221690699458122, 0.013764525763690472, 0.00210296967998147, 0.0005668540834449232, -0.04862929508090019, 0.048023954033851624, -0.09018657356500626, 0.03365929052233696, 0.036209654062986374, -0.01615833304822445, -0.03731694445014, 0.0026585145387798548, -0.043353427201509476, -0.04241851344704628, 0.004564276430755854, 0.011460372246801853, 0.03524712473154068, 0.00529593275859952, -0.07609369605779648, -0.006021424196660519, 0.00242438493296504, 0.006848241202533245, -0.04011296108365059, 0.07719659805297852, -0.003665765281766653, 0.041185542941093445, -0.04422106221318245, -0.061086155474185944, -0.06072847917675972, 0.03397991508245468, 0.017239661887288094, -0.002602266613394022]},
{"question": "What is a raw type and why shouldn't we use it?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<h3>Questions:</h3>\n\n<ul>\n<li>What are raw types in Java, and why do I often hear that they shouldn't be used in new code?</li>\n<li>What is the alternative if we can't use raw types, and how is it better?</li>\n</ul>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<h2>What is a raw type?</h2>\n<p>The Java Language Specification defines a <em>raw type</em> as follows:</p>\n<h3><a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.8\" rel=\"noreferrer\">JLS 4.8 Raw Types</a></h3>\n<blockquote>\n<p>A raw type is defined to be one of:</p>\n<ul>\n<li><p>The reference type that is formed by taking the name of a generic type declaration without an accompanying type argument list.</p>\n</li>\n<li><p>An array type whose element type is a raw type.</p>\n</li>\n<li><p>A non-<code>static</code> member type of a raw type <code>R</code> that is not inherited from a superclass or superinterface of <code>R</code>.</p>\n</li>\n</ul>\n</blockquote>\n<p>Here's an example to illustrate:</p>\n<pre><code>public class MyType&lt;E&gt; {\n    class Inner { }\n    static class Nested { }\n    \n    public static void main(String[] args) {\n        MyType mt;          // warning: MyType is a raw type\n        MyType.Inner inn;   // warning: MyType.Inner is a raw type\n\n        MyType.Nested nest; // no warning: not parameterized type\n        MyType&lt;Object&gt; mt1; // no warning: type parameter given\n        MyType&lt;?&gt; mt2;      // no warning: type parameter given (wildcard OK!)\n    }\n}\n</code></pre>\n<p>Here, <code>MyType&lt;E&gt;</code> is a <em>parameterized type</em> (<a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5\" rel=\"noreferrer\">JLS 4.5</a>). It is common to colloquially refer to this type as simply <code>MyType</code> for short, but technically the name is <code>MyType&lt;E&gt;</code>.</p>\n<p><code>mt</code> has a raw type (and generates a compilation warning) by the first bullet point in the above definition; <code>inn</code> also has a raw type by the third bullet point.</p>\n<p><code>MyType.Nested</code> is not a parameterized type, even though it's a member type of a parameterized type <code>MyType&lt;E&gt;</code>, because it's <code>static</code>.</p>\n<p><code>mt1</code>, and <code>mt2</code> are both declared with actual type parameters, so they're not raw types.</p>\n<hr>\n<h2>What's so special about raw types?</h2>\n<p>Essentially, raw types behaves just like they were before generics were introduced. That is, the following is entirely legal at compile-time.</p>\n<pre><code>List names = new ArrayList(); // warning: raw type!\nnames.add(\"John\");\nnames.add(\"Mary\");\nnames.add(Boolean.FALSE); // not a compilation error!\n</code></pre>\n<p>The above code runs just fine, but suppose you also have the following:</p>\n<pre><code>for (Object o : names) {\n    String name = (String) o;\n    System.out.println(name);\n} // throws ClassCastException!\n  //    java.lang.Boolean cannot be cast to java.lang.String\n</code></pre>\n<p>Now we run into trouble at run-time, because <code>names</code> contains something that isn't an <code>instanceof String</code>.</p>\n<p>Presumably, if you want <code>names</code> to contain only <code>String</code>, you <em>could</em> perhaps still use a raw type and <em>manually check every</em> <code>add</code> yourself, and then <em>manually cast</em> to <code>String</code> every item from <code>names</code>. <strong>Even better</strong>, though is NOT to use a raw type and <em>let the compiler do all the work for you</em>, harnessing the power of Java generics.</p>\n<pre><code>List&lt;String&gt; names = new ArrayList&lt;String&gt;();\nnames.add(\"John\");\nnames.add(\"Mary\");\nnames.add(Boolean.FALSE); // compilation error!\n</code></pre>\n<p>Of course, if you <em>DO</em> want <code>names</code> to allow a <code>Boolean</code>, then you can declare it as <code>List&lt;Object&gt; names</code>, and the above code would compile.</p>\n<h3>See also</h3>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/generics/\" rel=\"noreferrer\">Java Tutorials/Generics</a></li>\n</ul>\n<hr>\n<h2>How's a raw type different from using <code>&lt;Object&gt;</code> as type parameters?</h2>\n<p>The following is a quote from <em>Effective Java 2nd Edition, Item 23: Don't use raw types in new code</em>:</p>\n<blockquote>\n<p>Just what is the difference between the raw type <code>List</code> and the parameterized type <code>List&lt;Object&gt;</code>? Loosely speaking, the former has opted out generic type checking, while the latter explicitly told the compiler that it is capable of holding objects of any type. While you can pass a <code>List&lt;String&gt;</code> to a parameter of type <code>List</code>, you can't pass it to a parameter of type <code>List&lt;Object&gt;</code>. There are subtyping rules for generics, and <code>List&lt;String&gt;</code> is a subtype of the raw type <code>List</code>, but not of the parameterized type <code>List&lt;Object&gt;</code>. As a consequence, <strong>you lose type safety if you use raw type like <code>List</code>, but not if you use a parameterized type like <code>List&lt;Object&gt;</code></strong>.</p>\n</blockquote>\n<p>To illustrate the point, consider the following method which takes a <code>List&lt;Object&gt;</code> and appends a <code>new Object()</code>.</p>\n<pre><code>void appendNewObject(List&lt;Object&gt; list) {\n   list.add(new Object());\n}\n</code></pre>\n<p>Generics in Java are invariant. A <code>List&lt;String&gt;</code> is not a <code>List&lt;Object&gt;</code>, so the following would generate a compiler warning:</p>\n<pre><code>List&lt;String&gt; names = new ArrayList&lt;String&gt;();\nappendNewObject(names); // compilation error!\n</code></pre>\n<p>If you had declared <code>appendNewObject</code> to take a raw type <code>List</code> as parameter, then this would compile, and you'd therefore lose the type safety that you get from generics.</p>\n<h3>See also</h3>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2770264/what-is-the-difference-between-e-extends-number-and-number/\">What is the difference between <code>&lt;E extends Number&gt;</code> and <code>&lt;Number&gt;</code>?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2660827/java-generics-covariance\">java generics (not) covariance</a></li>\n</ul>\n<hr>\n<h2>How's a raw type different from using <code>&lt;?&gt;</code> as a type parameter?</h2>\n<p><code>List&lt;Object&gt;</code>, <code>List&lt;String&gt;</code>, etc are all <code>List&lt;?&gt;</code>, so it may be tempting to just say that they're just <code>List</code> instead. However, there is a major difference: since a <code>List&lt;E&gt;</code> defines only <code>add(E)</code>, you can't add just any arbitrary object to a <code>List&lt;?&gt;</code>. On the other hand, since the raw type <code>List</code> does not have type safety, you can <code>add</code> just about anything to a <code>List</code>.</p>\n<p>Consider the following variation of the previous snippet:</p>\n<pre><code>static void appendNewObject(List&lt;?&gt; list) {\n    list.add(new Object()); // compilation error!\n}\n//...\n\nList&lt;String&gt; names = new ArrayList&lt;String&gt;();\nappendNewObject(names); // this part is fine!\n</code></pre>\n<p>The compiler did a wonderful job of protecting you from potentially violating the type invariance of the <code>List&lt;?&gt;</code>! If you had declared the parameter as the raw type <code>List list</code>, then the code would compile, and you'd violate the type invariant of <code>List&lt;String&gt; names</code>.</p>\n<hr>\n<h2>A raw type is the erasure of that type</h2>\n<p>Back to JLS 4.8:</p>\n<blockquote>\n<p>It is possible to use as a type <strong>the erasure</strong> of a parameterized type or the erasure of an array type whose element type is a parameterized type. <strong>Such a type is called a <em>raw type</em>.</strong></p>\n<p><em>[...]</em></p>\n<p>The superclasses (respectively, superinterfaces) of a raw type are the erasures of the superclasses (superinterfaces) of any of the parameterizations of the generic type.</p>\n<p>The type of a constructor, instance method, or non-<code>static</code> field of a raw type <code>C</code> that is not inherited from its superclasses or superinterfaces is the raw type that corresponds to the erasure of its type in the generic declaration corresponding to <code>C</code>.</p>\n</blockquote>\n<p>In simpler terms, when a raw type is used, the constructors, instance methods and non-<code>static</code> fields are <em>also erased</em>.</p>\n<p>Take the following example:</p>\n<pre><code>class MyType&lt;E&gt; {\n    List&lt;String&gt; getNames() {\n        return Arrays.asList(\"John\", \"Mary\");\n    }\n\n    public static void main(String[] args) {\n        MyType rawType = new MyType();\n        // unchecked warning!\n        // required: List&lt;String&gt; found: List\n        List&lt;String&gt; names = rawType.getNames();\n        // compilation error!\n        // incompatible types: Object cannot be converted to String\n        for (String str : rawType.getNames())\n            System.out.print(str);\n    }\n}\n</code></pre>\n<p>When we use the raw <code>MyType</code>, <code>getNames</code> becomes erased as well, so that it returns a raw <code>List</code>!</p>\n<p><a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.6\" rel=\"noreferrer\">JLS 4.6</a> continues to explain the following:</p>\n<blockquote>\n<p><strong>Type erasure also maps the signature of a constructor or method to a signature that has no parameterized types or type variables.</strong> The erasure of a constructor or method signature <code>s</code> is a signature consisting of the same name as <code>s</code> and the erasures of all the formal parameter types given in <code>s</code>.</p>\n<p><strong>The return type of a method and the type parameters of a generic method or constructor also undergo erasure if the method or constructor's signature is erased.</strong></p>\n<p>The erasure of the signature of a generic method has no type parameters.</p>\n</blockquote>\n<p>The following bug report contains some thoughts from Maurizio Cimadamore, a compiler dev, and Alex Buckley, one of the authors of the JLS, on why this sort of behavior ought to occur: <a href=\"https://bugs.openjdk.java.net/browse/JDK-6400189\" rel=\"noreferrer\">https://bugs.openjdk.java.net/browse/JDK-6400189</a>. (In short, it makes the specification simpler.)</p>\n<hr>\n<h2>If it's unsafe, why is it allowed to use a raw type?</h2>\n<p>Here's another quote from JLS 4.8:</p>\n<blockquote>\n<p>The use of raw types is allowed only as a concession to compatibility of legacy code. <em>The use of raw types in code written after the introduction of genericity into the Java programming language is strongly discouraged. It is possible that future versions of the Java programming language will disallow the use of raw types.</em></p>\n</blockquote>\n<p><em>Effective Java 2nd Edition</em> also has this to add:</p>\n<blockquote>\n<p>Given that you shouldn't use raw types, why did the language designers allow them? To provide compatibility.</p>\n<p>The Java platform was about to enter its second decade when generics were introduced, and there was an enormous amount of Java code in existence that did not use generics. It was deemed critical that all this code remains legal and interoperable with new code that does use generics. It had to be legal to pass instances of parameterized types to methods that were designed for use with ordinary types, and vice versa. This requirement, known as <em>migration compatibility</em>, drove the decision to support raw types.</p>\n</blockquote>\n<p>In summary, raw types should NEVER be used in new code. <strong>You should always use parameterized types</strong>.</p>\n<hr>\n<h2>Are there no exceptions?</h2>\n<p>Unfortunately, because Java generics are non-reified, there are two exceptions where raw types must be used in new code:</p>\n<ul>\n<li>Class literals, e.g. <code>List.class</code>, not <code>List&lt;String&gt;.class</code></li>\n<li><code>instanceof</code> operand, e.g. <code>o instanceof Set</code>, not <code>o instanceof Set&lt;String&gt;</code></li>\n</ul>\n<h3>See also</h3>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2745193/why-is-collectionstring-class-illegal/\">Why is <code>Collection&lt;String&gt;.class</code> Illegal?</a></li>\n</ul>\n    </div>", "total_vectors": [-0.0524287186563015, -0.04798468202352524, -0.0562007836997509, -0.017051875591278076, 0.015075708739459515, 0.03317217156291008, -0.048806332051754, -0.008646054193377495, 0.04056346043944359, 0.06098468601703644, -0.004656663630157709, -0.014979182742536068, -0.03248654305934906, 0.025394149124622345, -0.04294704273343086, 0.08390805125236511, -0.031168444082140923, -0.014806456863880157, 0.04880785569548607, -0.004651663824915886, 0.06861361861228943, -0.012579316273331642, 0.007775502745062113, 0.03300746530294418, 0.004287329502403736, 0.009660615585744381, -0.05947030708193779, 0.0009472665260545909, 0.0623650848865509, -0.04751098155975342, -0.03007662482559681, 0.03559402376413345, -0.008845126256346703, -0.01880682446062565, -0.0880802571773529, -0.016575414687395096, 0.039814405143260956, -0.02869575470685959, 0.006326416973024607, -0.018389461562037468, -0.015086180530488491, -0.004031812772154808, -0.014131627976894379, 0.030069656670093536, -0.05234392359852791, 0.04984316602349281, -0.03664572536945343, -0.028775222599506378, -0.016444195061922073, 0.005647254642099142, -0.015295579098165035, 0.11519522964954376, 0.03756704553961754, 0.025258438661694527, -0.027495834976434708, -0.043333496898412704, -0.07538241893053055, 0.01419631764292717, 0.061532728374004364, -0.06238929554820061, -0.04547203332185745, 0.04229240491986275, 0.0002962776634376496, -0.10399134457111359, -0.022827859967947006, 0.027014678344130516, -0.007195979356765747, -0.022749612107872963, -0.007720200810581446, -0.013999405317008495, -0.02822180837392807, 0.01528773084282875, 0.019046109169721603, -0.04599932208657265, -0.024230867624282837, 0.02341553568840027, -0.0408472940325737, -0.059452567249536514, -0.03850262239575386, 0.08081711828708649, -0.006923514883965254, 0.01932084932923317, -0.016455907374620438, -0.027168378233909607, 0.05719233304262161, 0.039520103484392166, -0.02804678864777088, 0.03219679743051529, 0.0039071994833648205, -0.020257236436009407, 0.07481886446475983, -0.024183761328458786, -0.06590051203966141, 0.06092337146401405, 0.013040587306022644, 0.048887524753808975, -0.014615697786211967, 0.060085173696279526, 0.007798671256750822, -0.0938580259680748, -0.03574182465672493, 0.05230262130498886, 0.09896209090948105, 0.029524479061365128, 0.03134344890713692, -0.033879563212394714, 0.028322210535407066, 0.013836859725415707, -0.010125868022441864, 0.016790548339486122, 0.006449782755225897, -0.053956445306539536, -0.01881871186196804, 0.0002593966491986066, 0.006074568256735802, 0.025404885411262512, 0.05952347069978714, 0.047164201736450195, 0.017386330291628838, -0.01455798652023077, -0.007820957340300083, 0.0005093003273941576, -0.0025045587681233883, -0.03839391842484474, 0.04306364059448242, 0.0009157665190286934, 0.010585838928818703, 0.03944898024201393, 0.054786648601293564, 0.009836917743086815, 0.008205869235098362, 0.08456681668758392, -0.03365478664636612, -0.04779188707470894, -0.035218220204114914, 0.026094643399119377, -0.0033595638815313578, -0.0017476812936365604, -0.08365722745656967, 0.005919564515352249, -0.020436324179172516, -0.04422379285097122, 0.00958128273487091, 0.019682036712765694, -0.01873074099421501, -0.04379315301775932, 0.06590461730957031, -0.04787809029221535, 0.06749764084815979, -0.005125079769641161, -0.03475842624902725, 0.024747489020228386, -0.09627111256122589, -0.01328783668577671, 0.04895265772938728, -0.07254365086555481, 0.019346943125128746, 0.10726599395275116, -0.02158202789723873, -0.02213164232671261, -0.032996855676174164, 0.07372482120990753, 0.02228851057589054, -0.08172614127397537, 0.019570356234908104, 0.04887300357222557, -0.024047503247857094, -0.05399921163916588, -0.02241338975727558, -0.01629788987338543, -0.0027073908131569624, -0.03774108365178108, -0.021373985335230827, -0.06364643573760986, 0.06593743711709976, 0.02694525197148323, 0.06364629417657852, -0.01814192347228527, 0.0014260211028158665, -0.0027821059338748455, -0.02935660257935524, 0.03957802802324295, -0.012027835473418236, 0.001080390065908432, 0.029540086165070534, -0.0029377425089478493, -0.002783056115731597, 0.04965724050998688, -0.03392584249377251, 0.02411140501499176, 0.029360685497522354, 0.02084062620997429, -0.006150043569505215, -0.029696336016058922, -0.0860980972647667, -0.00684670964255929, 0.05222935229539871, 0.05176973342895508, 0.011527471244335175, 0.02879447303712368, -0.05442812293767929, -0.03722646087408066, -0.0010136384516954422, 0.030489549040794373, -0.03687334060668945, 0.05642309412360191, 0.070113904774189, 0.001248638960532844, -0.06726696342229843, 0.0023806660901755095, -0.07900303602218628, -0.020555691793560982, 0.00718099856749177, 0.083766870200634, 0.06339385360479355, 0.026656560599803925, -0.07453498989343643, -0.1137019544839859, 0.02122560143470764, -0.05076901987195015, 0.024699952453374863, 0.0718245804309845, 0.003394623287022114, 0.06928340345621109, -0.007766385097056627, -0.050659339874982834, -0.06483153998851776, 0.05600674822926521, -0.04663655534386635, -0.07960787415504456, 0.016778849065303802, 0.08943750709295273, -0.022108759731054306, -0.06609344482421875, -0.00936957448720932, 0.020631419494748116, 0.0411040298640728, -0.012061098590493202, 0.0025061240885406733, -0.013884286396205425, -0.05451900139451027, 0.014988211914896965, 0.03584654629230499, -0.012999656610190868, -0.008598312735557556, 0.10892113298177719, 0.04605734348297119, -0.028728174045681953, 0.11361819505691528, -0.011901981197297573, -0.033244457095861435, -0.0037247133441269398, 0.02012777514755726, 0.09490638971328735, 0.09077901393175125, -0.023146342486143112, 0.014269576407968998, -0.02548135071992874, 0.06113676726818085, -0.008360523730516434, -0.012862199917435646, 0.06671328097581863, -0.02896808460354805, -0.035319726914167404, 0.005279536359012127, -0.03945505991578102, -0.014162842184305191, -0.06489861756563187, 0.025936651974916458, 0.04316039755940437, -0.04580555856227875, -0.09525081515312195, -0.019873740151524544, 0.05169028788805008, 0.016669321805238724, -0.015257363207638264, 0.07694418728351593, -0.002469342667609453, -0.022533617913722992, 0.007695068139582872, 0.015407226048409939, -0.07206057012081146, -0.002790973521769047, -0.03049706108868122, 0.02979247458279133, -0.033681754022836685, -0.008223542012274265, 0.007449284195899963, -0.04028233513236046, -0.007509766146540642, -0.028080835938453674, 0.08695665746927261, -0.005430953111499548, 0.026240311563014984, 0.0734487995505333, -0.03359878435730934, -0.05924162641167641, 0.07283951342105865, -0.03180540353059769, 0.00935842003673315, 0.023088129237294197, 0.02955418825149536, -0.07528732717037201, 0.034748904407024384, -0.07257873564958572, -0.002255515195429325, 0.019811734557151794, -0.06784715503454208, -0.010910261422395706, -0.011755629442632198, 0.020596779882907867, 0.0496218167245388, 0.06889892369508743, 0.0027079321444034576, 0.0689380094408989, -0.014935189858078957, -0.020478438585996628, -0.06450134515762329, 0.052876152098178864, 0.03433980420231819, 0.026730667799711227, -0.030306804925203323, -0.022398637607693672, 0.06767522543668747, 0.010314354673027992, 0.0900236964225769, -0.042266953736543655, 0.025772377848625183, 0.003953366074711084, -0.05429118499159813, 0.0067801810801029205, -0.05858166515827179, 0.03800616413354874, -0.07489826530218124, 0.002713564783334732, -0.0408504456281662, 0.01746416464447975, -0.005060272291302681, 0.05364653468132019, -0.037828393280506134, 0.006772833876311779, -0.0025546422693878412, -0.05577884241938591, 0.0723075345158577, -0.04640224948525429, -0.09489354491233826, 0.013297505676746368, 0.0356251560151577, -0.07364027947187424, 0.04795808345079422, -0.04592374339699745, -0.017960969358682632, 0.013113558292388916, -0.07849300652742386, -0.007930719293653965, 0.05343692749738693, -0.1043788343667984, 0.0021721436642110348, -0.04728313162922859, -0.020896045491099358, -0.05670551210641861, -0.0180329792201519, 0.026121364906430244, 0.04135202243924141, -0.03707374632358551, -0.06401374936103821, -0.09091469645500183, 0.04270423576235771, -0.006820209790021181, -0.0014415555633604527, 0.011944392696022987, 0.02177196368575096, 0.03768419474363327, -0.052248843014240265, 0.06847944110631943, -0.05040022358298302, 0.03769422695040703, -0.03234763815999031, -0.031026296317577362, -0.011765999719500542, -0.01660194806754589, 0.031987085938453674, -0.07715125381946564, -0.03061400167644024, -0.04662756994366646, 0.016626188531517982, 0.06839317083358765, 0.007055056747049093, -0.015650471672415733, 0.017565971240401268, -0.04886679723858833, -0.07231008261442184, -0.05182134732604027, -0.0034809010103344917, -0.027645589783787727, 0.01884717494249344, -0.058158572763204575, 0.01608896069228649, -0.06102719157934189, 0.07733402401208878, -0.011846897192299366, 0.01222438644617796, 0.0404270775616169, -0.0009800291154533625, -0.0044081746600568295, 0.0006284274277277291, -0.05486702546477318, -0.0008922746637836099, -0.06967627257108688, 0.016998177394270897, -0.09770091623067856, 0.020705457776784897, -0.07408715039491653, -0.008727634325623512, -0.03829491138458252, -0.03848375380039215, -0.013447420671582222, 0.02745427004992962, -0.012706049717962742, -0.0069734277203679085, -0.03262263908982277, 0.0215635783970356, 0.012817217037081718, -0.04069164767861366, 0.04934869706630707, 0.03592078387737274, 0.04348687082529068, 0.07648632675409317, -0.017419040203094482, -0.008981727063655853, 0.0023441396187990904, 0.07708333432674408, 0.04769683629274368, 0.006130993366241455, -0.03664243593811989, 0.05996005982160568, 0.03939312323927879, 0.09408798813819885, 0.060051437467336655, 0.03131691738963127, 0.03019348531961441, -0.06728755682706833, 0.06751193851232529, -0.01671055145561695, -0.001356247696094215, 0.03317797929048538, 0.040080759674310684, -0.04241662845015526, -0.04261788725852966, 0.030634040012955666, -0.030745582655072212, 0.01265249215066433, 0.021812401711940765, -0.06795226037502289, -0.0342026986181736, -0.03971968591213226, -0.03820304572582245, -0.06492825597524643, -0.021529067307710648, -0.06575427204370499, 0.010151619091629982, 0.07268441468477249, -0.06733263283967972, -0.0369836762547493, -0.06359261274337769, -0.08735591918230057, -0.025150535628199577, 0.02160615101456642, 0.0550326369702816, 0.06097322329878807, 0.01238201279193163, 0.02615751326084137, 0.021761823445558548, 0.030124777927994728, -0.0363774299621582, 0.006554681807756424, -0.0055389199405908585, -0.04805918410420418, 0.012375321239233017, -0.024878771975636482, 0.022883139550685883, -0.03973022475838661, -0.0013029997935518622, -0.06555131822824478, -0.07438940554857254, 0.052879951894283295, -0.11001620441675186, 0.06586398929357529, 0.01756901480257511, -0.03415108844637871, -0.032759834080934525, 0.02287886291742325, -0.038281314074993134, -0.07122208178043365, 0.004681317135691643, -0.004056314472109079, 0.03248090296983719, 0.01654043048620224, -0.0014022561954334378, -0.021702034398913383, 0.057419367134571075, 0.015621177852153778, -0.023746168240904808, 0.09673621505498886, 0.07908909022808075, -0.023465322330594063, 0.066126748919487, -0.022858519107103348, -0.04708382114768028, 0.03281479701399803, 0.028154568746685982, -0.0015709068393334746]},
{"question": "What is the scope of variables in JavaScript?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>What is the scope of variables in javascript? Do they have the same scope inside as opposed to outside a function? Or does it even matter? Also, where are the variables stored if they are defined globally?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<h2>TLDR</h2>\n<p>JavaScript has lexical (also called static) scoping and closures. This means you can tell the scope of an identifier by looking at the source code.</p>\n<p>The four scopes are:</p>\n<ol>\n<li>Global - visible by everything</li>\n<li>Function - visible within a function (and its sub-functions and blocks)</li>\n<li>Block - visible within a block (and its sub-blocks)</li>\n<li>Module - visible within a module</li>\n</ol>\n<p>Outside of the special cases of global and module scope, variables are declared using <code>var</code> (function scope), <code>let</code> (block scope), and <code>const</code> (block scope). Most other forms of identifier declaration have block scope in strict mode.</p>\n<h2>Overview</h2>\n<p>Scope is the region of the codebase over which an identifier is valid.</p>\n<p>A lexical environment is a mapping between identifier names and the values associated with them.</p>\n<p>Scope is formed of a linked nesting of lexical environments, with each level in the nesting corresponding to a lexical environment of an ancestor execution context.</p>\n<p>These linked lexical environments form a scope \"chain\". Identifier resolution is the process of searching along this chain for a matching identifier.</p>\n<p>Identifier resolution only occurs in one direction: outwards. In this way, outer lexical environments cannot \"see\" into inner lexical environments.</p>\n<p>There are three pertinent factors in deciding the <a href=\"https://en.wikipedia.org/wiki/Scope_(computer_science)\" rel=\"noreferrer\">scope</a> of an <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-names-and-keywords\" rel=\"noreferrer\">identifier</a> in JavaScript:</p>\n<ol>\n<li>How an identifier was declared</li>\n<li>Where an identifier was declared</li>\n<li>Whether you are in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" rel=\"noreferrer\">strict mode</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Sloppy_mode\" rel=\"noreferrer\">non-strict mode</a></li>\n</ol>\n<p>Some of the ways identifiers can be declared:</p>\n<ol>\n<li><code>var</code>, <code>let</code> and <code>const</code></li>\n<li>Function parameters</li>\n<li>Catch block parameter</li>\n<li>Function declarations</li>\n<li>Named function expressions</li>\n<li>Implicitly defined properties on the global object (i.e., missing out <code>var</code> in non-strict mode)</li>\n<li><code>import</code> statements</li>\n<li><code>eval</code></li>\n</ol>\n<p>Some of the locations identifiers can be declared:</p>\n<ol>\n<li>Global context</li>\n<li>Function body</li>\n<li>Ordinary block</li>\n<li>The top of a control structure (e.g., loop, if, while, etc.)</li>\n<li>Control structure body</li>\n<li>Modules</li>\n</ol>\n<h2>Declaration Styles</h2>\n<h3>var</h3>\n<p>Identifiers declared using <code>var</code> <strong>have function scope</strong>, apart from when they are declared directly in the global context, in which case they are added as properties on the global object and have global scope. There are separate rules for their use in <code>eval</code> functions.</p>\n<h3>let and const</h3>\n<p>Identifiers declared using <code>let</code> and <code>const</code> <strong>have block scope</strong>, apart from when they are declared directly in the global context, in which case they have global scope.</p>\n<p>Note: <code>let</code>, <code>const</code> and <code>var</code> <a href=\"https://stackoverflow.com/a/31222689/38522\">are all hoisted</a>. This means that their logical position of definition is the top of their enclosing scope (block or function). However, variables declared using <code>let</code> and <code>const</code> cannot be read or assigned to until control has passed the point of declaration in the source code. The interim period is known as the temporal dead zone.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function f() {\n    function g() {\n        console.log(x)\n    }\n    let x = 1\n    g()\n}\nf() // 1 because x is hoisted even though declared with `let`!</code></pre>\r\n</div>\r\n</div>\r\n\n<h3>Function parameter names</h3>\n<p>Function parameter names are scoped to the function body. Note that there is a slight complexity to this. Functions declared as default arguments close over the <a href=\"https://stackoverflow.com/questions/61208843/where-are-arguments-positioned-in-the-lexical-environment/\">parameter list</a>, and not the body of the function.</p>\n<h3>Function declarations</h3>\n<p>Function declarations have block scope in strict mode and function scope in non-strict mode. Note: non-strict mode is a complicated set of emergent rules based on the quirky historical implementations of different browsers.</p>\n<h3>Named function expressions</h3>\n<p>Named function expressions are scoped to themselves (e.g., for the purpose of recursion).</p>\n<h3>Implicitly defined properties on the global object</h3>\n<p>In non-strict mode, implicitly defined properties on the global object have global scope, because the global object sits at the top of the scope chain. In strict mode, these are not permitted.</p>\n<h3>eval</h3>\n<p>In <code>eval</code> strings, variables declared using <code>var</code> will be placed in the current scope, or, if <code>eval</code> is used indirectly, as properties on the global object.</p>\n<h2>Examples</h2>\n<p>The following will throw a ReferenceError because the names<code>x</code>, <code>y</code>, and <code>z</code> have no meaning outside of the function <code>f</code>.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function f() {\n    var x = 1\n    let y = 1\n    const z = 1\n}\nconsole.log(typeof x) // undefined (because var has function scope!)\nconsole.log(typeof y) // undefined (because the body of the function is a block)\nconsole.log(typeof z) // undefined (because the body of the function is a block)</code></pre>\r\n</div>\r\n</div>\r\n\n<p>The following will throw a ReferenceError for <code>y</code> and <code>z</code>, but not for <code>x</code>, because the visibility of <code>x</code> is not constrained by the block. Blocks that define the bodies of control structures like <code>if</code>, <code>for</code>, and <code>while</code>, behave similarly.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>{\n    var x = 1\n    let y = 1\n    const z = 1\n}\nconsole.log(x) // 1\nconsole.log(typeof y) // undefined because `y` has block scope\nconsole.log(typeof z) // undefined because `z` has block scope</code></pre>\r\n</div>\r\n</div>\r\n\n<p>In the following, <code>x</code> is visible outside of the loop because <code>var</code> has function scope:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>for(var x = 0; x &lt; 5; ++x) {}\nconsole.log(x) // 5 (note this is outside the loop!)</code></pre>\r\n</div>\r\n</div>\r\n\n<p>...because of this behavior, you need to be careful about closing over variables declared using <code>var</code> in loops. There is only one instance of variable <code>x</code> declared here, and it sits logically outside of the loop.</p>\n<p>The following prints <code>5</code>, five times, and then prints <code>5</code> a sixth time for the <code>console.log</code> outside the loop:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>for(var x = 0; x &lt; 5; ++x) {\n    setTimeout(() =&gt; console.log(x)) // closes over the `x` which is logically positioned at the top of the enclosing scope, above the loop\n}\nconsole.log(x) // note: visible outside the loop</code></pre>\r\n</div>\r\n</div>\r\n\n<p>The following prints <code>undefined</code> because <code>x</code> is block-scoped. The callbacks are run one by one asynchronously. New behavior for <code>let</code> variables means that each anonymous function closed over a different variable named <code>x</code> (unlike it would have done with <code>var</code>), and so integers <code>0</code> through <code>4</code> are printed.:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>for(let x = 0; x &lt; 5; ++x) {\n    setTimeout(() =&gt; console.log(x)) // `let` declarations are re-declared on a per-iteration basis, so the closures capture different variables\n}\nconsole.log(typeof x) // undefined</code></pre>\r\n</div>\r\n</div>\r\n\n<p>The following will NOT throw a <code>ReferenceError</code> because the visibility of <code>x</code> is not constrained by the block; it will, however, print <code>undefined</code> because the variable has not been initialised (because of the <code>if</code> statement).</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>if(false) {\n    var x = 1\n}\nconsole.log(x) // here, `x` has been declared, but not initialised</code></pre>\r\n</div>\r\n</div>\r\n\n<p>A variable declared at the top of a <code>for</code> loop using <code>let</code> is scoped to the body of the loop:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>for(let x = 0; x &lt; 10; ++x) {} \nconsole.log(typeof x) // undefined, because `x` is block-scoped</code></pre>\r\n</div>\r\n</div>\r\n\n<p>The following will throw a <code>ReferenceError</code> because the visibility of <code>x</code> is constrained by the block:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>if(false) {\n    let x = 1\n}\nconsole.log(typeof x) // undefined, because `x` is block-scoped</code></pre>\r\n</div>\r\n</div>\r\n\n<p>Variables declared using <code>var</code>, <code>let</code> or <code>const</code> are all scoped to modules:</p>\n<pre class=\"lang-js prettyprint-override\"><code>// module1.js\n\nvar x = 0\nexport function f() {}\n\n//module2.js\n\nimport f from 'module1.js'\n\nconsole.log(x) // throws ReferenceError\n</code></pre>\n<p>The following will declare a property on the global object because variables declared using <code>var</code> within the global context are added as properties to the global object:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var x = 1\nconsole.log(window.hasOwnProperty('x')) // true</code></pre>\r\n</div>\r\n</div>\r\n\n<p><code>let</code> and <code>const</code> in the global context do not add properties to the global object, but still have global scope:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let x = 1\nconsole.log(window.hasOwnProperty('x')) // false</code></pre>\r\n</div>\r\n</div>\r\n\n<p>Function parameters can be considered to be declared in the function body:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function f(x) {}\nconsole.log(typeof x) // undefined, because `x` is scoped to the function</code></pre>\r\n</div>\r\n</div>\r\n\n<p>Catch block parameters are scoped to the catch-block body:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>try {} catch(e) {}\nconsole.log(typeof e) // undefined, because `e` is scoped to the catch block</code></pre>\r\n</div>\r\n</div>\r\n\n<p>Named function expressions are scoped only to the expression itself:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>(function foo() { console.log(foo) })()\nconsole.log(typeof foo) // undefined, because `foo` is scoped to its own expression</code></pre>\r\n</div>\r\n</div>\r\n\n<p>In non-strict mode, implicitly defined properties on the global object are globally scoped. In strict mode, you get an error.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>x = 1 // implicitly defined property on the global object (no \"var\"!)\n\nconsole.log(x) // 1\nconsole.log(window.hasOwnProperty('x')) // true</code></pre>\r\n</div>\r\n</div>\r\n\n<p>In non-strict mode, function declarations have function scope. In strict mode, they have block scope.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>'use strict'\n{\n    function foo() {}\n}\nconsole.log(typeof foo) // undefined, because `foo` is block-scoped</code></pre>\r\n</div>\r\n</div>\r\n\n<h2>How it works under the hood</h2>\n<p>Scope is defined as the <a href=\"https://stackoverflow.com/a/1047479/38522\">lexical</a> region of code over which an identifier is valid.</p>\n<p>In JavaScript, every function-object has a hidden <code>[[Environment]]</code> reference that is a reference to the <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-lexical-environments\" rel=\"noreferrer\">lexical environment</a> of the <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-execution-contexts\" rel=\"noreferrer\">execution context</a> (stack frame) within which it was created.</p>\n<p>When you invoke a function, the hidden <code>[[Call]]</code> method is called. This method creates a new execution context and establishes a link between the new execution context and the lexical environment of the function-object. It does this by copying the <code>[[Environment]]</code> value on the function-object, into an <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-lexical-environments\" rel=\"noreferrer\">outer reference</a> field on the lexical environment of the new execution context.</p>\n<p>Note that this link between the new execution context and the lexical environment of the function object is called a <a href=\"https://stackoverflow.com/a/111114/38522\">closure</a>.</p>\n<p>Thus, in JavaScript, scope is implemented via lexical environments linked together in a \"chain\" by outer references. This chain of lexical environments is called the scope chain, and identifier resolution occurs by <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-getidentifierreference\" rel=\"noreferrer\">searching up the chain</a> for a matching identifier.</p>\n<p>Find out <a href=\"https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed/scope-closures\" rel=\"noreferrer\">more</a>.</p>\n    </div>", "total_vectors": [0.06215876340866089, -0.05665292590856552, -0.048689115792512894, 0.023638274520635605, -0.0027851848863065243, -0.024409445002675056, -0.048252202570438385, -0.050048600882291794, 0.006956617347896099, 0.06302780658006668, 0.008007126860320568, -0.06799447536468506, -0.0348745658993721, 0.01968849077820778, -0.015842381864786148, 0.09675242006778717, 0.042050980031490326, 0.042111385613679886, 0.016741011291742325, -0.023248136043548584, 0.06331098824739456, 0.014723282307386398, 0.04373396560549736, 0.017814969643950462, -0.0013163990806788206, -0.051779605448246, 0.012351908721029758, -0.03681989386677742, 0.04481308534741402, -0.0358317531645298, -0.08469875901937485, 0.06933863461017609, 0.0035678567364811897, -0.05198490992188454, 0.031163088977336884, 0.037393949925899506, -0.07144445925951004, 0.05095329508185387, -0.01932551898062229, 0.016242485493421555, 0.00581440981477499, 0.06272763013839722, -0.0005373049643822014, -0.013843279331922531, 0.09288299828767776, 0.030057016760110855, -0.07428436726331711, 0.05301564186811447, 0.009629666805267334, -0.03940806910395622, 0.09378362447023392, 0.09616897255182266, 0.013672281056642532, 0.04218767583370209, -0.021314924582839012, 0.06136948987841606, -0.055610690265893936, 0.04294104129076004, -0.00018022047879640013, -0.0346578024327755, -0.06696608662605286, -0.036408681422472, 0.04356421157717705, -0.06208684295415878, 0.05977243185043335, -0.018258817493915558, -0.03720724210143089, -0.018743859604001045, -0.024862052872776985, 0.0041482639499008656, -0.08695017546415329, 0.03143519535660744, 0.04005430266261101, -0.04390198364853859, 0.009177729487419128, 0.026561429724097252, -0.020676368847489357, 0.018355874344706535, -0.03145818039774895, 0.06997181475162506, 0.039195772260427475, -0.03490278869867325, 0.007505722809582949, 0.02744057960808277, 0.09353505820035934, 0.0377216674387455, -0.03317655622959137, -0.007008679676800966, -0.05424029380083084, 0.09090720862150192, 0.029206642881035805, 0.014948926866054535, 0.02158324606716633, 0.06905607879161835, -0.0018479387508705258, 0.033031560480594635, -0.030117366462945938, 0.06192507594823837, -0.010272297076880932, -0.09479700028896332, 0.026990752667188644, 0.04209969565272331, -0.033258192241191864, 0.020346257835626602, 0.09501954168081284, 0.021583620458841324, 0.08340851962566376, -0.024110153317451477, 0.009368298575282097, 0.035652656108140945, 0.05320694297552109, 0.03882022202014923, -0.021720971912145615, 0.023521849885582924, -0.020726334303617477, 0.020760731771588326, -0.009912874549627304, -0.009553232230246067, 0.05206584557890892, -0.02672610618174076, 0.018330195918679237, -0.008103354834020138, 0.03731362521648407, -0.0011572185903787613, -0.011043749749660492, -0.00950980931520462, -0.001067816629074514, 0.03239117190241814, 0.08359715342521667, 0.06296741962432861, 0.013499299064278603, 0.04636799171566963, -0.021256618201732635, -0.04140329733490944, 0.013160236179828644, -0.041912831366062164, 0.050167057663202286, -0.0020387545228004456, 5.580085053225048e-05, -0.008874675258994102, 0.06592517346143723, -0.03238007426261902, -0.01702999137341976, 0.0058051361702382565, 0.01913047395646572, -0.09638164192438126, 0.020569000393152237, 0.04259146377444267, 0.01073366031050682, 0.046470873057842255, 0.04826859384775162, 0.04767792299389839, -0.041571833193302155, 0.010750959627330303, -0.027655865997076035, -0.030294502153992653, -0.010476483032107353, 0.013408816419541836, 0.016386935487389565, 0.015401041135191917, 0.03852246329188347, 0.05313229560852051, 0.024443399161100388, 0.04516526311635971, -0.006401972845196724, 0.016164589673280716, 0.02432667277753353, -0.05546241253614426, 0.011417776346206665, 0.01697634346783161, -0.05365317687392235, 0.052217770367860794, 0.03755280748009682, 0.06745506823062897, 0.011006566695868969, 0.01990438811480999, 0.0035451955627650023, 0.010502249002456665, 0.0006231202278286219, 0.031998034566640854, 0.03178670257329941, -0.009583092294633389, 0.06726260483264923, -0.02923661097884178, 0.0351126529276371, 0.017457665875554085, 0.046918418258428574, 0.07918550819158554, 0.020222872495651245, 0.022128332406282425, 0.09113244712352753, 0.03326861560344696, -0.05032603070139885, -0.01842091605067253, -0.00015537755098193884, 0.03291935846209526, -0.005568690598011017, 0.09670112282037735, 0.006288270466029644, -0.0648515373468399, -0.0624118372797966, -0.055496785789728165, -0.09648815542459488, 0.022626416757702827, -0.05236240103840828, -0.027301473543047905, -0.03908529877662659, 0.06764200329780579, -0.09330473840236664, -0.04121147841215134, -0.02755720727145672, 0.01828385330736637, -0.013262907043099403, -0.03777249902486801, 0.055707741528749466, 0.018784338608384132, -0.027602577582001686, -0.061429623514413834, 0.01697492226958275, 0.008959678001701832, 0.09067033976316452, -0.03623480349779129, -0.024202587082982063, -0.010521170683205128, -0.02978944592177868, -0.005044183228164911, -0.04602314904332161, -0.019574671983718872, 0.048819929361343384, 0.0027208440005779266, -0.035452406853437424, 0.03562929853796959, -0.005979614797979593, -0.025230173021554947, 0.07141635566949844, -0.07858391106128693, 0.08953586220741272, -0.039608050137758255, 0.011940562166273594, 0.026108650490641594, -0.009605196304619312, 0.08675387501716614, 0.008701029233634472, 0.061978865414857864, 0.00865563377737999, 0.08462696522474289, 0.057280030101537704, -0.06387581676244736, 0.09594103693962097, 0.09075497835874557, -0.06973328441381454, 0.027048425748944283, 0.02429841458797455, 0.02324822172522545, -0.014716205187141895, -0.06225515156984329, 0.023215873166918755, -0.08500442653894424, 0.0010049447882920504, -0.02811766415834427, -0.027165792882442474, 0.011636045761406422, -0.053017228841781616, -0.017527837306261063, 0.008780205622315407, 0.024116098880767822, -0.01787007786333561, -0.06829867511987686, 0.039847515523433685, 0.008243937976658344, -0.06072898954153061, -0.013875863514840603, -0.09213843196630478, 0.018662340939044952, -0.06828944385051727, -0.025750283151865005, 0.02786153182387352, 0.027540797367691994, 0.09208172559738159, 0.020256346091628075, 0.008892828598618507, 0.0420369915664196, 0.016735559329390526, 0.053963787853717804, 0.04158708080649376, -0.08125931024551392, 0.014800340868532658, 0.04549494758248329, -0.07551326602697372, 0.09510930627584457, -0.021425439044833183, -0.009944000281393528, 0.08748514205217361, 0.003657278371974826, 0.03175097703933716, 0.04177185520529747, -0.007985011674463749, -0.05706709623336792, -0.008190464228391647, 0.0416857935488224, 0.011741836555302143, -0.00477896723896265, -0.023551467806100845, 0.017153220251202583, -0.034379515796899796, 0.0024699121713638306, -0.008803317323327065, 0.01693285070359707, -0.03215507045388222, 0.012173190712928772, -0.006345507688820362, 0.04100598767399788, -0.02323295548558235, 0.04997997358441353, -0.0023897052742540836, 0.08035336434841156, -0.03529615327715874, -0.017326222732663155, 0.016415344551205635, 0.005258580204099417, 0.09578177332878113, -0.027989480644464493, 0.004871981218457222, -0.04771304503083229, 0.001363720977678895, -0.04063786566257477, -0.00021488893253263086, 0.04634387418627739, 0.001621168339625001, 0.03733360767364502, -0.005877574905753136, -0.025852588936686516, 0.05663234740495682, -0.06708721816539764, -0.05833090841770172, -0.04831310734152794, 0.009189633652567863, -0.023106228560209274, 0.0849347934126854, -0.031319841742515564, -0.034882791340351105, 0.011024272069334984, 0.004250023514032364, 0.06978017091751099, -0.09676267206668854, 0.04657113179564476, 0.060737043619155884, -0.034969788044691086, -0.016420992091298103, 0.035976555198431015, 0.018781881779432297, 0.07480751723051071, 0.05506902560591698, 0.00045907736057415605, -0.019569741562008858, 0.017609527334570885, -0.09532161802053452, -0.037763651460409164, 0.02895422652363777, -0.02884819731116295, -0.017723187804222107, 0.008793561719357967, -0.09564279019832611, -0.027826877310872078, -0.09622717648744583, 0.035211026668548584, -0.06647145748138428, -0.005566807463765144, -0.0014584247255697846, 0.0948217585682869, 0.02760099060833454, 0.0027277767658233643, 0.05915691331028938, 0.02938110940158367, 0.00871566403657198, -0.03693326562643051, 0.0638774111866951, 0.0009834641823545098, 0.011240264400839806, 0.06324686110019684, -0.03608785197138786, 0.011715991422533989, 0.016832279041409492, 0.03637596219778061, -0.019669966772198677, 0.014641397632658482, 0.06976984441280365, 0.025021638721227646, 0.0072687226347625256, -0.058113813400268555, -0.028110260143876076, -0.017392348498106003, 0.09663594514131546, -0.030151741579174995, 0.026583736762404442, -0.0025045520160347223, -0.059447772800922394, -0.03656025230884552, 0.001828754204325378, 0.06857424229383469, -0.05470813810825348, 0.012650859542191029, -0.008559382520616055, -0.0459035225212574, 0.0077285850420594215, -0.007519963663071394, -0.0931890681385994, 0.013531687669456005, -0.008016379550099373, 0.015615061856806278, -0.07422814518213272, -0.02611079066991806, -0.024653995409607887, 0.054102398455142975, -0.03819647058844566, -0.00834463257342577, 0.03522990643978119, 0.06974836438894272, 0.014637394808232784, 0.010228469036519527, 0.057168181985616684, 0.02117251232266426, 0.07147044688463211, -0.027041666209697723, 0.03663340210914612, 0.08323270082473755, -0.0778283104300499, 0.07100169360637665, 0.002492313040420413, -0.03182162716984749, -0.04645908251404762, -0.04625709354877472, 0.045371849089860916, -0.03729622811079025, -0.054472941905260086, 0.009429075755178928, -0.009072929620742798, -0.05804053321480751, 0.06834250688552856, -0.0002947548928204924, -0.0625826045870781, -0.004762121010571718, -0.023055577650666237, 0.012784816324710846, 0.013852500356733799, 0.062087126076221466, 0.038503676652908325, 0.03887701779603958, 0.040168069303035736, 0.02933671325445175, -0.03508404642343521, 0.035017333924770355, 0.0965634137392044, -0.03278639167547226, 0.009711949154734612, -0.08800582587718964, 0.053022533655166626, 0.00670415535569191, 0.016690170392394066, 0.06363967061042786, 0.033959709107875824, 0.06019807606935501, -0.08320262283086777, -0.0005451702745631337, -0.029161592945456505, -0.0733785331249237, -0.009515365585684776, -0.0698607787489891, 0.03739892691373825, 0.013464880175888538, 0.00627895537763834, 0.06826682388782501, 0.04550709202885628, 0.02432992495596409, -0.0038831199053674936, -0.03631157428026199, 0.021910788491368294, 0.025324633345007896, -0.00468274625018239, -0.03299924358725548, -0.05136455222964287, -0.037543825805187225, 0.008844061754643917, -0.057673465460538864, 0.040720384567976, 0.019999681040644646, -0.0763491839170456, -0.005460573360323906, 0.02535674162209034, -0.010651512071490288, 0.038011059165000916, -0.0336306206882, 0.05286354199051857, -0.06324183195829391, -0.010250660590827465, 0.024187389761209488, 0.0392826572060585, 0.01048243511468172, -0.016901066526770592, -0.006575014442205429, 0.008345309644937515, 0.015016286633908749, -0.007600937969982624, 0.07298444956541061, -0.010745794512331486, -0.022690581157803535, 0.049712419509887695, 0.018043318763375282, -0.013736038468778133, 0.06083555147051811, 0.0636272057890892, -0.028092430904507637]},
{"question": "What do querySelectorAll and getElementsBy* methods return?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>Do <code>getElementsByClassName</code> (and similar functions like <code>getElementsByTagName</code> and <code>querySelectorAll</code>) work the same as <code>getElementById</code> or do they return an array of elements?</p>\n\n<p>The reason I ask is because I am trying to change the style of all elements using <code>getElementsByClassName</code>. See below.</p>\n\n<pre><code>//doesn't work\ndocument.getElementsByClassName('myElement').style.size = '100px';\n\n//works\ndocument.getElementById('myIdElement').style.size = '100px';\n</code></pre>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>Your <code>getElementById()</code> code works since IDs have to be unique and thus the function always returns exactly one element (or <code>null</code> if none was found).</p>\n<p>However, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName#syntax\" rel=\"nofollow noreferrer\"><code>getElementsByClassName()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll\" rel=\"nofollow noreferrer\"><code>querySelectorAll()</code></a>, and other <code>getElementsBy*</code> methods return an array-like collection of elements. Iterate over it like you would with a real array:</p>\n<pre><code>var elems = document.getElementsByClassName('myElement');\nfor(var i = 0; i &lt; elems.length; i++) {\n    elems[i].style.size = '100px';\n}\n</code></pre>\n<p>If you prefer something shorter, consider using <a href=\"http://jquery.com\" rel=\"nofollow noreferrer\">jQuery</a>:</p>\n<pre><code>$('.myElement').css('size', '100px');\n</code></pre>\n    </div>", "total_vectors": [-0.017321432009339333, -0.04340481758117676, 0.027049507945775986, -0.007123896386474371, -0.016547707840800285, 0.026038940995931625, 0.01474743988364935, 0.021887533366680145, -0.08042065054178238, 0.03752502426505089, 0.04015350341796875, -0.030580924823880196, -0.032250791788101196, 0.03246830403804779, 0.05490008741617203, 0.11580249667167664, -0.014574147760868073, 0.0201579462736845, -0.02503162808716297, 0.009376615285873413, 0.11191298067569733, -0.008782267570495605, -0.00888122245669365, 0.05814036726951599, -0.0642513632774353, 0.015246755443513393, 0.006723399274051189, -0.0036234701983630657, 0.0352841317653656, 0.006505526136606932, -0.017428945749998093, 0.050137557089328766, 0.011680119670927525, 0.013561956584453583, -0.010784895159304142, -0.03254764527082443, -0.05648576468229294, -0.0491609051823616, -0.02111208811402321, 0.04161963611841202, 0.02667405642569065, -0.04157806932926178, 0.019790034741163254, 0.01244798582047224, 0.0759526714682579, 0.015410219319164753, -0.05773892626166344, -0.051810894161462784, 0.017590556293725967, -0.015926212072372437, 0.04233327880501747, 0.1155020222067833, -0.09390271455049515, -0.026078887283802032, 0.005968659650534391, 0.047174353152513504, 0.043832845985889435, -0.01494088675826788, 0.045348405838012695, -0.0139466542750597, 0.015501945279538631, 0.007053372450172901, -0.03566968813538551, -0.03488710895180702, -0.004028483759611845, -0.0596882663667202, -0.041868530213832855, -0.0016770632937550545, 0.0084321778267622, 0.03633939102292061, -0.0601213313639164, 0.02168511599302292, -0.02542031928896904, -0.045109767466783524, -0.03218171000480652, 0.007386192679405212, -0.052188146859407425, 0.023624854162335396, -0.042220328003168106, 0.011402798816561699, -0.01619505137205124, 0.028872013092041016, -0.0018130240496248007, -0.021968020126223564, 0.11605417728424072, 0.0016845731297507882, -0.04118900001049042, -0.014835101552307606, -0.06061195582151413, 0.07500161975622177, 0.024816419929265976, 0.0007744533941149712, 0.014974887482821941, -0.0075454870238900185, -0.04678027704358101, 0.013164188712835312, 0.06799312680959702, 0.05084644630551338, -0.024285821244120598, -0.08472253382205963, -0.02883867360651493, 0.00664026802405715, 0.034249380230903625, 0.015086191706359386, 0.06359052658081055, -0.013381514698266983, 0.013691788539290428, -0.013478565961122513, -0.004307701718062162, 0.06039978563785553, -0.02550610713660717, -0.010895203799009323, 0.0005445713177323341, -0.06135289743542671, 0.010497286915779114, -0.051354970782995224, -0.011615759693086147, -0.03192576393485069, -0.04039536044001579, -0.0003585627127904445, 0.03207971528172493, -0.016475163400173187, 0.004909828770905733, -0.01975679211318493, 0.010461078956723213, -0.019465522840619087, -0.016131602227687836, 0.027327030897140503, 0.04331633821129799, 0.00610130513086915, -0.00046544981887564063, 0.035411618649959564, 0.021046645939350128, -0.04918231442570686, 0.0050474912859499454, -0.03319811448454857, -0.07149667292833328, 0.049597036093473434, 0.03193788230419159, 0.02068415656685829, 0.0035939752124249935, -0.0416729561984539, -0.020908933132886887, 0.007917781360447407, 0.028390580788254738, -0.09619521349668503, 0.06036011502146721, -0.05906572565436363, -0.012236990965902805, -0.0474107563495636, -0.006959287915378809, -0.030597366392612457, -0.04827771335840225, -0.008555869571864605, 0.00825977511703968, -0.02709314040839672, -0.006312184501439333, 0.10619047284126282, 0.030379462987184525, -0.04123501852154732, 0.06087714061141014, 0.006773482542484999, -0.02656286209821701, -0.0077571626752614975, 0.01232859119772911, -0.01484465878456831, -0.026894116774201393, -0.04191751405596733, -0.021888019517064095, -0.036991603672504425, -0.026695333421230316, 0.009641289710998535, 0.031895242631435394, -0.023035122081637383, 0.019459551200270653, -0.0617501325905323, -0.03767606243491173, 0.030499523505568504, 0.04103381931781769, 0.005058855749666691, -0.04007048159837723, -0.017855564132332802, -0.023858990520238876, 0.0653218999505043, -0.0325818695127964, 0.003694379236549139, -0.04212705045938492, 0.09857594221830368, 0.017655137926340103, 0.023848067969083786, 0.07768181711435318, -0.05080094188451767, 0.09200819581747055, -0.06508338451385498, 0.04707236960530281, 0.03431355580687523, -0.016152087599039078, 0.11332929879426956, 0.013498151674866676, 0.013913673348724842, -0.08506175130605698, -0.022483758628368378, -0.0467655286192894, 0.0006702670361846685, -0.02507600001990795, 0.044489018619060516, 0.07657939195632935, 0.09127255529165268, -0.07122141122817993, 0.04785854369401932, 0.028656313195824623, 0.03673806041479111, -0.04979049041867256, -0.022310005500912666, 0.06646402180194855, 0.04083932563662529, -0.04436562955379486, -0.07942003756761551, 0.06649775803089142, 0.033017899841070175, 0.004924857057631016, -0.006502140779048204, 0.03206973150372505, 0.06281528621912003, 0.019118765369057655, -0.04818008840084076, -0.03666812926530838, 0.024007827043533325, 0.022419845685362816, -0.04144761338829994, 0.0580146461725235, 0.11699731647968292, -0.014455540105700493, 0.03424816578626633, 0.07266552746295929, -0.013133373111486435, 0.07012403011322021, -0.06010521203279495, 0.07062658667564392, 0.028254490345716476, -0.09210508316755295, 0.01624245010316372, -0.046600352972745895, -0.005262067541480064, 0.045927487313747406, 0.09645244479179382, 0.0447668693959713, -0.015568375587463379, 0.12364546954631805, 0.05682937428355217, -0.05933915078639984, 0.04183187335729599, -0.026072412729263306, 0.03077106364071369, 0.024856561794877052, 0.02398531511425972, -0.06894827634096146, -0.08951961994171143, 0.03677770867943764, -0.02108456939458847, -0.008569368161261082, -0.062263842672109604, -0.04904964938759804, -0.09534123539924622, -0.013741829432547092, -0.030868764966726303, -0.015056496486067772, -0.09118426591157913, -0.006239170208573341, -0.06289570033550262, -0.03736019507050514, -0.05345258116722107, -0.05297834798693657, 0.07655555009841919, 0.01252826303243637, -0.03456362336874008, -0.00024981735623441637, 0.04409181326627731, 0.01851045712828636, -0.0007193105993792415, 0.030896764248609543, -0.03668477013707161, -0.052114445716142654, -0.07505936920642853, 0.010527189821004868, -0.0013278682017698884, -0.04998347908258438, 0.039676424115896225, -0.03400220349431038, 0.05237956345081329, 0.022191481664776802, -0.03361076861619949, -0.03036639280617237, -0.024375181645154953, 0.08066921681165695, 0.012623579241335392, 0.041947171092033386, -0.05541885271668434, -0.0013019843026995659, 0.02939872443675995, 0.028665313497185707, -0.04097035899758339, -0.040047332644462585, -0.010888572782278061, -0.0637282058596611, 0.01811463199555874, -0.01952166110277176, -0.04107329994440079, -0.037497568875551224, 0.04691722244024277, -0.016401229426264763, 0.09280560910701752, -0.060142502188682556, 0.017732596024870872, 0.031708210706710815, 0.021968042477965355, -0.06383877992630005, 0.09098606556653976, 0.003933710511773825, 0.04122236743569374, 0.08273375034332275, -0.043215062469244, 0.04059400036931038, -0.0028111806605011225, -0.04201331362128258, 0.014853511936962605, 0.05712693929672241, 0.05559488385915756, -0.03786234185099602, -0.03667406365275383, 0.05048597231507301, -0.005508337169885635, 0.02004816383123398, -0.07540882378816605, 0.0108807273209095, -0.004706018604338169, -0.08757307380437851, 0.014785783365368843, 0.02068096213042736, -0.00569006847217679, -0.0024268082343041897, -0.006779330316931009, 0.021054517477750778, 0.004564420785754919, -0.11194644868373871, 0.02876773476600647, -0.010319793596863747, 0.06096348538994789, 0.001775848912075162, -0.011809178628027439, -0.0627569928765297, -0.06806212663650513, -0.03648851439356804, 0.055250342935323715, -0.05632518604397774, 0.061423782259225845, -0.10934990644454956, 0.04062338545918465, -0.016148535534739494, 0.003201916581019759, 0.06107206642627716, -0.03243531286716461, -0.11501152068376541, 0.03410440310835838, -0.05081097036600113, -0.038495197892189026, -0.054729003459215164, 0.044326815754175186, -0.04351671040058136, 0.010088462382555008, 0.06187238171696663, -0.013644292019307613, 0.031065229326486588, 0.02064383774995804, 0.025307293981313705, -0.07104938477277756, 0.020363206043839455, -0.0024359419476240873, -0.013483871705830097, 0.045998573303222656, 0.0269185621291399, -0.02356700412929058, -0.01014223787933588, 0.04848063737154007, -0.01849953457713127, 0.015548279508948326, 0.08804067969322205, 0.042188823223114014, 0.07829580456018448, -0.029730770736932755, -0.029837148264050484, -0.07992728054523468, 0.08392415195703506, -0.03159208968281746, 0.013857788406312466, -0.09159846603870392, -0.06982678920030594, -0.02397150732576847, 0.047401491552591324, 0.0719517320394516, 0.02779824286699295, 0.009784206748008728, 0.07050992548465729, -0.032676566392183304, 0.018771160393953323, 0.046455446630716324, -0.036206137388944626, 0.03484904766082764, -0.030172482132911682, 0.03410922363400459, -0.08763521164655685, 0.03169475868344307, 0.0014656402636319399, 0.008952545933425426, -0.006968988571316004, -0.012621266767382622, 0.04718439280986786, 0.02527032420039177, 0.01649152673780918, -0.005562922917306423, -0.024374376982450485, -0.01662762090563774, -0.021281322464346886, 0.014674902893602848, 0.02218233048915863, -0.012480211444199085, 0.009595234878361225, 0.036609310656785965, -0.0693182572722435, -0.05771024152636528, 0.042143359780311584, -0.03786962479352951, 0.08643065392971039, 0.05745562165975571, -0.00513342535123229, 0.0159608107060194, 0.0959736779332161, -0.0017802058719098568, 0.0629512220621109, 0.015187748707830906, 0.04765470325946808, 0.0601198635995388, -0.008995737880468369, 0.014911586418747902, 0.0652402937412262, 0.018276290968060493, 0.0670240968465805, 0.018284698948264122, -0.024619601666927338, 0.0023648471105843782, 0.07595599442720413, -0.010011546313762665, 0.10573321580886841, 0.017886780202388763, 0.010957992635667324, -0.08552588522434235, 0.016563821583986282, -0.047248050570487976, -0.015896372497081757, 0.03417360782623291, -0.009816618636250496, 0.030160723254084587, -0.01459066104143858, -0.002041551982983947, -0.027468478307127953, -0.012197230011224747, -0.026890475302934647, -0.013146146200597286, 0.002966156927868724, 0.025036241859197617, 0.02538478747010231, 0.029479697346687317, 0.04926883429288864, 0.028585320338606834, 0.02729673683643341, -0.02440008893609047, -0.045680563896894455, 0.005085817072540522, 0.018314018845558167, 0.014832072891294956, 0.06684928387403488, 0.008223681710660458, -0.02472737431526184, -0.0001400843757437542, -0.000785697135142982, 0.03367464616894722, 0.005992884282022715, -0.010544151067733765, -0.018312066793441772, -0.04795118421316147, -0.031520526856184006, -0.025995688512921333, 0.04389096796512604, 0.05376794561743736, 0.024223990738391876, 0.014891194179654121, 0.0646633580327034, -0.059568747878074646, 0.039560601115226746, -0.04693334549665451, 0.014301324263215065, -0.01051242370158434, 0.03566722571849823, 0.061448756605386734, 0.06762931495904922, -0.0030478970147669315, -0.02593550831079483, 0.03757629543542862, 0.025096477940678596, 0.07356671988964081, 0.02139943279325962, -0.018592989072203636]},
{"question": "The Use of Multiple JFrames: Good or Bad Practice? [closed]", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                    <div>\r\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\r\n        <div class=\"grid fd-column fw-nowrap\">\r\n            <div class=\"grid fw-nowrap\">\r\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\r\n                    <div class=\"grid--cell fl1 lh-lg\">\r\n                        <b>Closed</b>. This question is <a href=\"/help/closed-questions\">opinion-based</a>. It is not currently accepting answers.\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n            <hr class=\"my12 outline-none baw0 bb bc-powder-400\">\r\n        <div class=\"grid fw-nowrap fc-black-600\">\r\n                <div class=\"grid--cell mr8\">\r\n                    <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" width=\"18\" height=\"18\" viewbox=\"0 0 18 18\"><path d=\"M15 6.38A6.48 6.48 0 007.78.04h-.02A6.49 6.49 0 002.05 5.6a6.31 6.31 0 002.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0015 6.37zM4.03 5.85A4.49 4.49 0 018 2.02a4.48 4.48 0 015 4.36 4.3 4.3 0 01-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 01-1.64-3.94zM10 18a1 1 0 000-2H7a1 1 0 100 2h3z\"></path></svg>\r\n                </div>\r\n            <div class=\"grid--cell lh-md\">\r\n                <p class=\"mb0\">\r\n                    <b>Want to improve this question?</b> Update the question so it can be answered with facts and citations by <a href=\"/posts/9554636/edit\">editing this post</a>.\r\n                </p>\r\n                    <p class=\"mb0 mt6\">Closed <span title=\"2014-12-29 15:51:06Z\" class=\"relativetime\">6 years ago</span>.</p>\r\n            </div>\r\n        </div>\r\n            <div class=\"mt24 grid gsx gs8\">\r\n                    <a class=\"s-btn s-btn__outlined grid--cell js-post-notice-edit-post\" href=\"/posts/9554636/edit\">\r\n                        Improve this question\r\n                    </a>\r\n            </div>\r\n</aside>\r\n\r\n    </div>\r\n\r\n<p>I'm developing an application which displays images, and plays sounds from a database. I'm trying to decide whether or not to use a separate JFrame to add images to the database from the GUI. </p>\n\n<p>I'm just wondering whether it is good practice to use multiple JFrame windows?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<blockquote>\n  <p>I'm just wondering whether it is good practice to use multiple JFrames?</p>\n</blockquote>\n\n<p>Bad (bad, bad) practice.  </p>\n\n<ul>\n<li>User unfriendly: The user sees multiple icons in their task bar when expecting to see only one.  Plus the side effects of the coding problems..</li>\n<li>A nightmare to code and maintain:\n\n<ul>\n<li>A <a href=\"http://docs.oracle.com/javase/tutorial/uiswing/misc/modality.html\" rel=\"noreferrer\">modal dialog</a> offers the easy opportunity to focus attention on the content of that dialog - choose/fix/cancel this, <strong>then</strong> proceed.  Multiple frames do not.</li>\n<li>A dialog (or floating tool-bar) with a parent will come to front when the parent is clicked on - you'd have to implement that in frames if that was the desired behavior.</li>\n</ul></li>\n</ul>\n\n<hr>\n\n<p>There are any number of ways of displaying many elements in one GUI, e.g.:</p>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/uiswing/layout/card.html\" rel=\"noreferrer\"><code>CardLayout</code></a> (short <a href=\"https://stackoverflow.com/a/5786005/418556\">demo.</a>). Good for:\n\n<ol>\n<li>Showing wizard like dialogs.</li>\n<li>Displaying list, tree etc. selections for items that have an associated component.</li>\n<li>Flipping between no component and visible component.</li>\n</ol></li>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/internalframe.html\" rel=\"noreferrer\"><code>JInternalFrame</code>/<code>JDesktopPane</code></a> typically used for an <a href=\"http://en.wikipedia.org/wiki/Multiple_document_interface\" rel=\"noreferrer\">MDI</a>.</li>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/tabbedpane.html\" rel=\"noreferrer\"><code>JTabbedPane</code></a> for groups of components.</li>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/splitpane.html\" rel=\"noreferrer\"><code>JSplitPane</code></a> A way to display two components of which the importance between one or the other (the size) varies according to what the user is doing.</li>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/layeredpane.html\" rel=\"noreferrer\"><code>JLayeredPane</code></a> far many well ..layered components.</li>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/toolbar.html\" rel=\"noreferrer\"><code>JToolBar</code></a> typically contains groups of actions or controls.  Can be dragged around the GUI, or off it entirely according to user need.  As mentioned above, will minimize/restore according to the parent doing so.</li>\n<li>As items in a <a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/list.html\" rel=\"noreferrer\"><code>JList</code></a> (simple example below).</li>\n<li>As nodes in a <a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/tree.html\" rel=\"noreferrer\"><code>JTree</code></a>.</li>\n<li><a href=\"https://stackoverflow.com/a/5630271/418556\">Nested layouts</a>.<br><img src=\"https://i.stack.imgur.com/Jaqap.png\"></li>\n</ul>\n\n<p>But if those strategies do not work for a particular use-case, try the following.  Establish a single main <code>JFrame</code>, then have <a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html\" rel=\"noreferrer\"><code>JDialog</code></a> or <a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html#features\" rel=\"noreferrer\"><code>JOptionPane</code></a> instances appear for the rest of the free-floating elements, using the frame as the parent for the dialogs.</p>\n\n<h2>Many images</h2>\n\n<p>In this case where the multiple elements are images, it would be better to use either of the following instead:</p>\n\n<ol>\n<li>A single <code>JLabel</code> (centered in a scroll pane) to display whichever image the user is interested in at that moment.  As seen in <a href=\"https://stackoverflow.com/a/13463684/418556\"><code>ImageViewer</code></a>.<br><img src=\"https://i.stack.imgur.com/5JXpC.gif\"></li>\n<li>A single row <code>JList</code>. As seen in <a href=\"https://stackoverflow.com/a/9544652/418556\">this answer</a>.  The 'single row' part of that only works if they are all the same dimensions.  Alternately, if you are prepared to scale the images on the fly, and they are all the same aspect ratio (e.g. 4:3 or 16:9).</li>\n</ol>\n\n<p><img src=\"https://i.stack.imgur.com/q8hEl.jpg\"></p>\n    </div>", "total_vectors": [0.0007600881508551538, -0.04247363656759262, 0.02220844104886055, -0.08127433806657791, 0.007723805028945208, 0.056750569492578506, -0.024357309564948082, -0.03868197649717331, -0.02793246880173683, 0.06334549188613892, 0.011848287656903267, 0.019579194486141205, -0.02797164022922516, -0.026816975325345993, -0.023254210129380226, 0.09857210516929626, 0.03001871146261692, -0.029005510732531548, -0.07078162580728531, 0.014499267563223839, 0.09256477653980255, -0.005010115448385477, 0.013071713037788868, -0.022279780358076096, -0.051536690443754196, -0.03435014188289642, 0.022642387077212334, 0.03545060753822327, -0.01566300541162491, 0.012340848334133625, -0.036813754588365555, 0.0514129213988781, 0.02207489311695099, 0.049529068171978, -0.014076818712055683, 0.02217933163046837, 0.022163139656186104, -0.02174469456076622, -0.05589595064520836, 0.004810485523194075, 0.00807458721101284, -0.01002216525375843, -0.012908010743558407, -0.013178004883229733, 0.08725639432668686, -0.050607841461896896, -0.05002910643815994, 0.07425369322299957, 0.00022719602566212416, -0.02104235254228115, 0.05421019718050957, 0.10246659815311432, 0.0772092342376709, -0.026933036744594574, 0.0035777809098362923, 0.007862209342420101, -0.02255682833492756, -0.04126187041401863, -0.0614362433552742, -0.021701833233237267, -0.03713545948266983, -0.0361325778067112, 0.010860362090170383, -0.05159672722220421, 0.027003206312656403, 0.05298919603228569, -0.0363655723631382, -0.00023015201441012323, 0.05355621874332428, 0.013242359273135662, -0.002225056290626526, -0.027396421879529953, 0.08851740509271622, -0.0300392284989357, -0.0015178018948063254, -0.058069776743650436, 0.01655321754515171, -0.03813142329454422, -0.013226992450654507, 0.08109911531209946, -0.02676899917423725, -0.06209941580891609, -0.004871801473200321, -0.002865835325792432, 0.011715294793248177, 0.011648879386484623, 0.03843729943037033, -0.012554097920656204, -0.04461761191487312, -0.006094153970479965, 0.06475949287414551, -0.07160457223653793, -0.07177775353193283, 0.03111226111650467, -0.057764288038015366, -0.007394126616418362, -0.06880859285593033, 0.054749686270952225, -0.01894756220281124, -0.10263876616954803, -0.0323740653693676, -0.006889960262924433, 0.10009825229644775, 0.04311204329133034, -0.031877875328063965, -0.025929290801286697, 0.008286146447062492, 0.08290054649114609, 0.0006944910273887217, 0.03460060805082321, 0.06193380430340767, -0.039969127625226974, -0.019710728898644447, 0.011526156216859818, 0.016554728150367737, 0.022852666676044464, 0.0302069541066885, 0.04188325256109238, 0.010910038836300373, -0.02169661782681942, 0.042436398565769196, 0.003937483299523592, -0.07956642657518387, -0.011807304807007313, 0.05126199871301651, -0.06160728633403778, -0.04741235822439194, 0.031643521040678024, 0.03495305776596069, -0.05202863737940788, 0.023768486455082893, -0.014772087335586548, -0.019047055393457413, -0.05046562850475311, -0.0657360628247261, 0.012705852277576923, 0.012799746356904507, -0.038624849170446396, 0.03795681148767471, 0.030445467680692673, 0.0512850321829319, -0.03542317450046539, -0.01653740555047989, -0.003635771106928587, -0.05293795466423035, -0.08132883906364441, 0.018114816397428513, -0.05193345248699188, 0.0370548777282238, 0.056097615510225296, 0.0025633613113313913, 0.004317221697419882, -0.09158153086900711, -0.03449885919690132, -0.010077646002173424, 0.002845196286216378, 0.013598543591797352, 0.037527456879615784, -0.018902957439422607, 0.0060855974443256855, 0.05242826044559479, 0.0027435573283582926, 0.054013561457395554, 0.019810084253549576, 0.0001732902164803818, 0.05015072971582413, 0.02989540435373783, -0.05690336599946022, 0.005941073875874281, 0.04300320893526077, 0.0188919547945261, -0.020266113802790642, -0.029946105554699898, 0.028200192376971245, -0.04364960640668869, 0.011234147474169731, -0.02848070114850998, 0.06472508609294891, 0.034091249108314514, -0.030589530244469643, 0.04814126715064049, 0.03281329199671745, -0.03453474119305611, -0.05589689686894417, 0.027714628726243973, 0.00248018279671669, -0.020162075757980347, 0.012768075801432133, -0.04417463019490242, -0.027871109545230865, 0.07045849412679672, -0.0022351618390530348, -0.08461029082536697, -0.025405410677194595, 0.0017523346468806267, 0.033787649124860764, -0.01635056734085083, 0.10102437436580658, -0.0021681494545191526, -0.030381040647625923, -0.05324380099773407, 0.03442267328500748, -0.017515601590275764, -0.06483001261949539, -0.03703583776950836, -0.055948201566934586, 0.07287156581878662, 0.013439689762890339, -0.07698915153741837, -0.02821168676018715, -0.08948050439357758, 0.017709916457533836, 0.08677341043949127, -0.010835042223334312, 0.07915996015071869, 0.019486114382743835, 0.0075971465557813644, -0.0913643091917038, 0.04734605550765991, -0.03369405120611191, -0.024246469140052795, -0.0424773134291172, 0.07081019133329391, 0.042041365057229996, 0.02477080374956131, 0.0693756490945816, 0.027009209617972374, 0.09413888305425644, -0.031240643933415413, -0.0005331630818545818, 0.03187735006213188, -0.01968454010784626, -0.05743386223912239, 0.027482829988002777, 0.050109874457120895, -0.019332239404320717, 0.021558858454227448, -0.058083921670913696, -0.026663487777113914, -0.03534309193491936, -0.09419827908277512, -0.04388521984219551, -0.08771739155054092, -0.046617213636636734, -0.03633081912994385, 0.07452043890953064, -0.04198510944843292, -0.035489119589328766, 0.05172532796859741, 0.09025310724973679, -0.08869647979736328, 0.06392589956521988, -0.0065221479162573814, 0.07113167643547058, -0.07183511555194855, -0.039453621953725815, -0.030737224966287613, -0.09660738706588745, 0.019465429708361626, 0.05046430602669716, 0.01499067060649395, 0.06767873466014862, -0.03922249376773834, -0.06338971108198166, -0.019883893430233, -0.055034130811691284, 0.0294288769364357, -0.04817170649766922, 0.0330500565469265, 0.006706657819449902, -0.0909968689084053, -0.06048237159848213, 0.006674015894532204, 0.042365048080682755, -0.037846509367227554, 0.033570289611816406, 0.06142750009894371, -0.03507106751203537, 0.06722074002027512, 0.05039232224225998, 0.024403611198067665, 0.036589059978723526, 0.027960484847426414, -0.03195366635918617, -0.015312924981117249, -0.07069762796163559, 0.05421191081404686, -0.028098588809370995, 0.05237968638539314, -0.029603885486721992, -0.05088154226541519, 0.0873509868979454, -0.019905399531126022, -0.029653919860720634, 0.08118711411952972, -0.02721661515533924, 0.048765406012535095, -0.05775708332657814, 0.029300015419721603, 0.011136065237224102, -0.010883352719247341, -0.08600769937038422, 0.012262457981705666, -0.0010950524592772126, 0.0036051124334335327, 0.03988488391041756, 0.06439369916915894, -0.0007715519168414176, -0.01902671530842781, 0.037397369742393494, -0.02377943880856037, 0.05164850130677223, 0.011931118555366993, 0.02857188880443573, 0.004296979866921902, 0.0018096888670697808, 0.031752992421388626, 0.021078500896692276, 0.036178965121507645, 0.005802995525300503, -0.002952833427116275, -0.0847838819026947, -0.004185560159385204, -0.03492729738354683, -0.08172301948070526, 0.03314980864524841, 0.06345643103122711, 0.028982583433389664, 0.04523500055074692, 0.022470232099294662, -0.0430128239095211, 0.009936926886439323, 0.028483957052230835, 0.04790826141834259, 0.005551483947783709, 0.014144061133265495, -0.009047111496329308, -0.07046705484390259, 0.046839721500873566, 0.011154006235301495, 0.0031524444930255413, -0.03312317654490471, -0.049811869859695435, 0.04511864110827446, -0.09832972288131714, 0.010574501007795334, 0.05832216143608093, 0.05877086520195007, -0.0018613488646224141, -0.00324382446706295, 0.008749539032578468, -0.00876519363373518, 0.0016815284034237266, -0.08129902184009552, 0.04763774946331978, -0.0240379236638546, -0.09900714457035065, -0.03704746812582016, -0.023795494809746742, 0.015636058524250984, -0.019959094002842903, 0.02422112412750721, -0.0838242620229721, -0.022221852093935013, -0.05882025510072708, -0.045980650931596756, -0.06431169807910919, -0.012038636021316051, -0.013802305795252323, -0.02222730591893196, 0.01928071677684784, -0.03410939499735832, -0.016726789996027946, 0.04039686545729637, -0.00899919867515564, -0.032978229224681854, 0.01309142541140318, -0.013109508901834488, 0.04992873594164848, -0.05586659908294678, -0.015559112653136253, -0.007821804843842983, -0.028949353843927383, -0.0013670189073309302, -0.08541925996541977, 0.031695518642663956, 0.08274319767951965, 0.017567439004778862, -0.047137219458818436, -0.036810409277677536, 0.013125923462212086, -0.016827672719955444, -0.009866151958703995, -0.010308373719453812, 0.05469576269388199, -0.03365415334701538, -0.029282866045832634, -0.061169203370809555, -0.015036676079034805, 0.02335973083972931, 0.07238892465829849, 0.06578809022903442, 0.06796231865882874, -0.03639962524175644, 0.010811325162649155, 0.01167653501033783, -0.053944703191518784, -0.04549597576260567, -0.02315264567732811, 0.0005812174640595913, 0.048124007880687714, 0.004247375763952732, -0.05938694626092911, 0.05072672665119171, -0.0506310909986496, 0.02037336304783821, 0.015700960531830788, 0.03811175748705864, -0.008393460884690285, -0.0708543211221695, -0.07247196137905121, -0.05468743294477463, -0.06265584379434586, 0.0077916597947478294, 0.05617952719330788, 0.048719462007284164, 0.031028680503368378, 0.058876264840364456, -0.09331300109624863, 0.030903490260243416, 0.06811061501502991, -0.0017692875117063522, 0.0516306534409523, -0.019800297915935516, -0.036485522985458374, 0.015501809306442738, 0.04350883886218071, 0.03991374745965004, 0.026464728638529778, -0.014050804078578949, -0.007450335193425417, 0.04834282770752907, 0.00394385727122426, 0.0006959295715205371, 0.07392723113298416, 0.052930545061826706, 0.039696864783763885, -0.021110733970999718, 0.007618940435349941, 0.03711460530757904, 0.024283280596137047, 0.015735670924186707, 0.0932353064417839, 0.04128836840391159, 0.010264171287417412, 0.010636812075972557, 0.028363076969981194, 0.07065770030021667, -0.026724059134721756, -0.0031676285434514284, 0.013148616068065166, 0.02360379509627819, 0.022812407463788986, -0.019048182293772697, -0.000813728547655046, -0.06008591130375862, 0.022171273827552795, 0.04032634571194649, 0.021008968353271484, 0.03201447054743767, 0.015290048904716969, 0.07249488681554794, -0.005545970518141985, 0.047267794609069824, -0.05242348089814186, -0.041939835995435715, 0.03675583750009537, -0.06275191903114319, 0.07822241634130478, -0.01843356527388096, 0.030966689810156822, 0.0250251367688179, 0.038075659424066544, -0.053928643465042114, 0.005860081408172846, 0.017819223925471306, -0.09473445266485214, 0.03839436173439026, 0.04999418184161186, 0.013086065649986267, 0.02255609631538391, -0.024242104962468147, -0.03479994460940361, -0.06017870083451271, 0.03927873075008392, -0.03206769749522209, 0.0759734958410263, -0.007898927666246891, -0.030065232887864113, 0.08115462958812714, 0.04366428405046463, -0.00919251423329115, -0.010271229781210423, 0.0904032289981842, 0.01364850252866745, 0.029342593625187874, 0.014262890443205833, 0.03267188370227814, -0.07467496395111084, 0.08527503162622452, -0.024825872853398323, -0.0007817021105438471]},
{"question": "How to pivot a dataframe?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<ul>\n<li>What is pivot?</li>\n<li>How do I pivot?</li>\n<li>Is this a pivot?</li>\n<li>Long format to wide format?</li>\n</ul>\n<p>I've seen a lot of questions that ask about pivot tables.  Even if they don't know that they are asking about pivot tables, they usually are.  It is virtually impossible to write a canonical question and answer that encompasses all aspects of pivoting...</p>\n<p>... But I'm going to give it a go.</p>\n<hr>\n<p>The problem with existing questions and answers is that often the question is focused on a nuance that the OP has trouble generalizing in order to use a number of the existing good answers.  However, none of the answers attempt to give a comprehensive explanation (because it's a daunting task)</p>\n<p>Look a few examples from my <a href=\"https://www.google.com/search?q=how%20to%20pivot%20a%20pandas%20dataframe&amp;oq=How%20do%20I%20pivot%20a%20pandas%20dataframe\" rel=\"noreferrer\"><strong>google search</strong></a></p>\n<ol>\n<li><a href=\"https://stackoverflow.com/q/28337117/2336654\">How to pivot a dataframe in Pandas?</a></li>\n</ol>\n<ul>\n<li>Good question and answer.  But the answer only answers the specific question with little explanation.</li>\n</ul>\n<ol start=\"2\">\n<li><a href=\"https://stackoverflow.com/q/42708193/2336654\">pandas pivot table to data frame</a></li>\n</ol>\n<ul>\n<li>In this question, the OP is concerned with the output of the pivot.  Namely how the columns look.  OP wanted it to look like R.  This isn't very helpful for pandas users.</li>\n</ul>\n<ol start=\"3\">\n<li><a href=\"https://stackoverflow.com/q/11400181/2336654\">pandas pivoting a dataframe, duplicate rows</a></li>\n</ol>\n<ul>\n<li>Another decent question but the answer focuses on one method, namely <code>pd.DataFrame.pivot</code></li>\n</ul>\n<p>So whenever someone searches for <code>pivot</code> they get sporadic results that are likely not going to answer their specific question.</p>\n<hr>\n<h1>Setup</h1>\n<p>You may notice that I conspicuously named my columns and relevant column values to correspond with how I'm going to pivot in the answers below.</p>\n<pre><code>import numpy as np\nimport pandas as pd\nfrom numpy.core.defchararray import add\n\nnp.random.seed([3,1415])\nn = 20\n\ncols = np.array(['key', 'row', 'item', 'col'])\narr1 = (np.random.randint(5, size=(n, 4)) // [2, 1, 2, 1]).astype(str)\n\ndf = pd.DataFrame(\n    add(cols, arr1), columns=cols\n).join(\n    pd.DataFrame(np.random.rand(n, 2).round(2)).add_prefix('val')\n)\nprint(df)\n\n     key   row   item   col  val0  val1\n0   key0  row3  item1  col3  0.81  0.04\n1   key1  row2  item1  col2  0.44  0.07\n2   key1  row0  item1  col0  0.77  0.01\n3   key0  row4  item0  col2  0.15  0.59\n4   key1  row0  item2  col1  0.81  0.64\n5   key1  row2  item2  col4  0.13  0.88\n6   key2  row4  item1  col3  0.88  0.39\n7   key1  row4  item1  col1  0.10  0.07\n8   key1  row0  item2  col4  0.65  0.02\n9   key1  row2  item0  col2  0.35  0.61\n10  key2  row0  item2  col1  0.40  0.85\n11  key2  row4  item1  col2  0.64  0.25\n12  key0  row2  item2  col3  0.50  0.44\n13  key0  row4  item1  col4  0.24  0.46\n14  key1  row3  item2  col3  0.28  0.11\n15  key0  row3  item1  col1  0.31  0.23\n16  key0  row0  item2  col3  0.86  0.01\n17  key0  row4  item0  col3  0.64  0.21\n18  key2  row2  item2  col0  0.13  0.45\n19  key0  row2  item0  col4  0.37  0.70\n</code></pre>\n<h3>Question(s)</h3>\n<ol>\n<li><p>Why do I get <code>ValueError: Index contains duplicate entries, cannot reshape</code></p>\n</li>\n<li><p>How do I pivot <code>df</code> such that the <code>col</code> values are columns, <code>row</code> values are the index, and mean of <code>val0</code> are the values?</p>\n<pre><code> col   col0   col1   col2   col3  col4\n row                                  \n row0  0.77  0.605    NaN  0.860  0.65\n row2  0.13    NaN  0.395  0.500  0.25\n row3   NaN  0.310    NaN  0.545   NaN\n row4   NaN  0.100  0.395  0.760  0.24\n</code></pre>\n</li>\n<li><p>How do I pivot <code>df</code> such that the <code>col</code> values are columns, <code>row</code> values are the index, mean of <code>val0</code> are the values, and missing values are <code>0</code>?</p>\n<pre><code> col   col0   col1   col2   col3  col4\n row                                  \n row0  0.77  0.605  0.000  0.860  0.65\n row2  0.13  0.000  0.395  0.500  0.25\n row3  0.00  0.310  0.000  0.545  0.00\n row4  0.00  0.100  0.395  0.760  0.24\n</code></pre>\n</li>\n<li><p>Can I get something other than <code>mean</code>, like maybe <code>sum</code>?</p>\n<pre><code> col   col0  col1  col2  col3  col4\n row                               \n row0  0.77  1.21  0.00  0.86  0.65\n row2  0.13  0.00  0.79  0.50  0.50\n row3  0.00  0.31  0.00  1.09  0.00\n row4  0.00  0.10  0.79  1.52  0.24\n</code></pre>\n</li>\n<li><p>Can I do more that one aggregation at a time?</p>\n<pre><code>        sum                          mean                           \n col   col0  col1  col2  col3  col4  col0   col1   col2   col3  col4\n row                                                                \n row0  0.77  1.21  0.00  0.86  0.65  0.77  0.605  0.000  0.860  0.65\n row2  0.13  0.00  0.79  0.50  0.50  0.13  0.000  0.395  0.500  0.25\n row3  0.00  0.31  0.00  1.09  0.00  0.00  0.310  0.000  0.545  0.00\n row4  0.00  0.10  0.79  1.52  0.24  0.00  0.100  0.395  0.760  0.24\n</code></pre>\n</li>\n<li><p>Can I aggregate over multiple value columns?</p>\n<pre><code>       val0                             val1                          \n col   col0   col1   col2   col3  col4  col0   col1  col2   col3  col4\n row                                                                  \n row0  0.77  0.605  0.000  0.860  0.65  0.01  0.745  0.00  0.010  0.02\n row2  0.13  0.000  0.395  0.500  0.25  0.45  0.000  0.34  0.440  0.79\n row3  0.00  0.310  0.000  0.545  0.00  0.00  0.230  0.00  0.075  0.00\n row4  0.00  0.100  0.395  0.760  0.24  0.00  0.070  0.42  0.300  0.46\n</code></pre>\n</li>\n<li><p>Can Subdivide by multiple columns?</p>\n<pre><code> item item0             item1                         item2                   \n col   col2  col3  col4  col0  col1  col2  col3  col4  col0   col1  col3  col4\n row                                                                          \n row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.605  0.86  0.65\n row2  0.35  0.00  0.37  0.00  0.00  0.44  0.00  0.00  0.13  0.000  0.50  0.13\n row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.000  0.28  0.00\n row4  0.15  0.64  0.00  0.00  0.10  0.64  0.88  0.24  0.00  0.000  0.00  0.00\n</code></pre>\n</li>\n<li><p>Or</p>\n<pre><code> item      item0             item1                         item2                  \n col        col2  col3  col4  col0  col1  col2  col3  col4  col0  col1  col3  col4\n key  row                                                                         \n key0 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.86  0.00\n      row2  0.00  0.00  0.37  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.50  0.00\n      row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.00  0.00  0.00\n      row4  0.15  0.64  0.00  0.00  0.00  0.00  0.00  0.24  0.00  0.00  0.00  0.00\n key1 row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.81  0.00  0.65\n      row2  0.35  0.00  0.00  0.00  0.00  0.44  0.00  0.00  0.00  0.00  0.00  0.13\n      row3  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.28  0.00\n      row4  0.00  0.00  0.00  0.00  0.10  0.00  0.00  0.00  0.00  0.00  0.00  0.00\n key2 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.40  0.00  0.00\n      row2  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.13  0.00  0.00  0.00\n      row4  0.00  0.00  0.00  0.00  0.00  0.64  0.88  0.00  0.00  0.00  0.00  0.00\n</code></pre>\n</li>\n<li><p>Can I aggregate the frequency in which the column and rows occur together, aka \"cross tabulation\"?</p>\n<pre><code> col   col0  col1  col2  col3  col4\n row                               \n row0     1     2     0     1     1\n row2     1     0     2     1     2\n row3     0     1     0     2     0\n row4     0     1     2     2     1\n</code></pre>\n</li>\n<li><p>How do I convert a DataFrame from long to wide by pivoting on ONLY two columns? Given,</p>\n<pre><code>np.random.seed([3, 1415])\ndf2 = pd.DataFrame({'A': list('aaaabbbc'), 'B': np.random.choice(15, 8)})        \ndf2        \n   A   B\n0  a   0\n1  a  11\n2  a   2\n3  a  11\n4  b  10\n5  b  10\n6  b  14\n7  c   7\n</code></pre>\n<p>The expected should look something like</p>\n<pre><code>      a     b    c\n0   0.0  10.0  7.0\n1  11.0  10.0  NaN\n2   2.0  14.0  NaN\n3  11.0   NaN  NaN\n</code></pre>\n</li>\n<li><p>How do I flatten the multiple index to single index after <code>pivot</code></p>\n<p>From</p>\n<pre><code>   1  2   \n   1  1  2        \na  2  1  1\nb  2  1  0\nc  1  0  0\n</code></pre>\n<p>To</p>\n<pre><code>   1|1  2|1  2|2               \na    2    1    1\nb    2    1    0\nc    1    0    0\n</code></pre>\n</li>\n</ol>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>We start by answering the first question:</p>\n\n<h2>Question 1</h2>\n\n<blockquote>\n  <p>Why do I get <code>ValueError: Index contains duplicate entries, cannot reshape</code></p>\n</blockquote>\n\n<p>This occurs because pandas is attempting to reindex either a <code>columns</code> or <code>index</code> object with duplicate entries.  There are varying methods to use that can perform a pivot.  Some of them are not well suited to when there are duplicates of the keys in which it is being asked to pivot on.  For example.  Consider <code>pd.DataFrame.pivot</code>.  I know there are duplicate entries that share the <code>row</code> and <code>col</code> values:</p>\n\n<pre><code>df.duplicated(['row', 'col']).any()\n\nTrue\n</code></pre>\n\n<p>So when I <code>pivot</code> using</p>\n\n<pre><code>df.pivot(index='row', columns='col', values='val0')\n</code></pre>\n\n<p>I get the error mentioned above.  In fact, I get the same error when I try to perform the same task with:</p>\n\n<pre><code>df.set_index(['row', 'col'])['val0'].unstack()\n</code></pre>\n\n<p>Here is a list of idioms we can use to pivot</p>\n\n<ol>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html\" rel=\"noreferrer\"><strong><code>pd.DataFrame.groupby</code></strong></a> + <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.unstack.html\" rel=\"noreferrer\"><strong><code>pd.DataFrame.unstack</code></strong></a>\n\n<ul>\n<li>Good general approach for doing just about any type of pivot</li>\n<li>You specify all columns that will constitute the pivoted row levels and column levels in one group by.  You follow that by selecting the remaining columns you want to aggregate and the function(s) you want to perform the aggregation.  Finally, you <code>unstack</code> the levels that you want to be in the column index.</li>\n</ul></li>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.pivot_table.html\" rel=\"noreferrer\"><strong><code>pd.DataFrame.pivot_table</code></strong></a>\n\n<ul>\n<li>A glorified version of <code>groupby</code> with more intuitive API.  For many people, this is the preferred approach.  And is the intended approach by the developers.</li>\n<li>Specify row level, column levels, values to be aggregated, and function(s) to perform aggregations.</li>\n</ul></li>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.set_index.html\" rel=\"noreferrer\"><strong><code>pd.DataFrame.set_index</code></strong></a> + <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.unstack.html\" rel=\"noreferrer\"><strong><code>pd.DataFrame.unstack</code></strong></a>\n\n<ul>\n<li>Convenient and intuitive for some (myself included).  Cannot handle duplicate grouped keys.</li>\n<li>Similar to the <code>groupby</code> paradigm, we specify all columns that will eventually be either row or column levels and set those to be the index.  We then <code>unstack</code> the levels we want in the columns.  If either the remaining index levels or column levels are not unique, this method will fail.</li>\n</ul></li>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot.html\" rel=\"noreferrer\"><strong><code>pd.DataFrame.pivot</code></strong></a>\n\n<ul>\n<li>Very similar to <code>set_index</code> in that it shares the duplicate key limitation.  The API is very limited as well.  It only takes scalar values for <code>index</code>, <code>columns</code>, <code>values</code>.</li>\n<li>Similar to the <code>pivot_table</code> method in that we select rows, columns, and values on which to pivot.  However, we cannot aggregate and if either rows or columns are not unique, this method will fail.</li>\n</ul></li>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.crosstab.html\" rel=\"noreferrer\"><strong><code>pd.crosstab</code></strong></a>\n\n<ul>\n<li>This a specialized version of <code>pivot_table</code> and in it's purest form is the most intuitive way to perform several tasks.</li>\n</ul></li>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.factorize.html\" rel=\"noreferrer\"><strong><code>pd.factorize</code></strong></a> + <a href=\"https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.bincount.html\" rel=\"noreferrer\"><strong><code>np.bincount</code></strong></a>\n\n<ul>\n<li>This is a highly advanced technique that is very obscure but is very fast.  It cannot be used in all circumstances, but when it can be used and you are comfortable using it, you will reap the performance rewards.</li>\n</ul></li>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.get_dummies.html\" rel=\"noreferrer\"><strong><code>pd.get_dummies</code></strong></a> + <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.dot.html\" rel=\"noreferrer\"><strong><code>pd.DataFrame.dot</code></strong></a>\n\n<ul>\n<li>I use this for cleverly performing cross tabulation.  </li>\n</ul></li>\n</ol>\n\n<hr>\n\n<h1>Examples</h1>\n\n<p>What I'm going to do for each subsequent answer and question is to answer it using <code>pd.DataFrame.pivot_table</code>.  Then I'll provide alternatives to perform the same task.  </p>\n\n<h2>Question 3</h2>\n\n<blockquote>\n  <p>How do I pivot <code>df</code> such that the <code>col</code> values are columns, <code>row</code> values are the index, mean of <code>val0</code> are the values, and missing values are <code>0</code>?</p>\n</blockquote>\n\n<ul>\n<li><p><code>pd.DataFrame.pivot_table</code></p>\n\n<ul>\n<li><code>fill_value</code> is not set by default.  I tend to set it appropriately.  In this case I set it to <code>0</code>.  Notice I skipped <strong>question 2</strong> as it's the same as this answer without the <code>fill_value</code></li>\n<li><p><code>aggfunc='mean'</code> is the default and I didn't have to set it.  I included it to be explicit.</p>\n\n<pre><code>df.pivot_table(\n    values='val0', index='row', columns='col',\n    fill_value=0, aggfunc='mean')\n\ncol   col0   col1   col2   col3  col4\nrow                                  \nrow0  0.77  0.605  0.000  0.860  0.65\nrow2  0.13  0.000  0.395  0.500  0.25\nrow3  0.00  0.310  0.000  0.545  0.00\nrow4  0.00  0.100  0.395  0.760  0.24\n</code></pre></li>\n</ul></li>\n<li><p><code>pd.DataFrame.groupby</code></p>\n\n<pre><code>df.groupby(['row', 'col'])['val0'].mean().unstack(fill_value=0)\n</code></pre></li>\n<li><p><code>pd.crosstab</code></p>\n\n<pre><code>pd.crosstab(\n    index=df['row'], columns=df['col'],\n    values=df['val0'], aggfunc='mean').fillna(0)\n</code></pre></li>\n</ul>\n\n<hr>\n\n<h2>Question 4</h2>\n\n<blockquote>\n  <p>Can I get something other than <code>mean</code>, like maybe <code>sum</code>?</p>\n</blockquote>\n\n<ul>\n<li><p><code>pd.DataFrame.pivot_table</code></p>\n\n<pre><code>df.pivot_table(\n    values='val0', index='row', columns='col',\n    fill_value=0, aggfunc='sum')\n\ncol   col0  col1  col2  col3  col4\nrow                               \nrow0  0.77  1.21  0.00  0.86  0.65\nrow2  0.13  0.00  0.79  0.50  0.50\nrow3  0.00  0.31  0.00  1.09  0.00\nrow4  0.00  0.10  0.79  1.52  0.24\n</code></pre></li>\n<li><p><code>pd.DataFrame.groupby</code></p>\n\n<pre><code>df.groupby(['row', 'col'])['val0'].sum().unstack(fill_value=0)\n</code></pre></li>\n<li><p><code>pd.crosstab</code></p>\n\n<pre><code>pd.crosstab(\n    index=df['row'], columns=df['col'],\n    values=df['val0'], aggfunc='sum').fillna(0)\n</code></pre></li>\n</ul>\n\n<hr>\n\n<h2>Question 5</h2>\n\n<blockquote>\n  <p>Can I do more that one aggregation at a time?</p>\n</blockquote>\n\n<p>Notice that for <code>pivot_table</code> and <code>crosstab</code> I needed to pass list of callables.  On the other hand, <code>groupby.agg</code> is able to take strings for a limited number of special functions.  <code>groupby.agg</code> would also have taken the same callables we passed to the others, but it is often more efficient to leverage the string function names as there are efficiencies to be gained.</p>\n\n<ul>\n<li><p><code>pd.DataFrame.pivot_table</code></p>\n\n<pre><code>df.pivot_table(\n    values='val0', index='row', columns='col',\n    fill_value=0, aggfunc=[np.size, np.mean])\n\n     size                      mean                           \ncol  col0 col1 col2 col3 col4  col0   col1   col2   col3  col4\nrow                                                           \nrow0    1    2    0    1    1  0.77  0.605  0.000  0.860  0.65\nrow2    1    0    2    1    2  0.13  0.000  0.395  0.500  0.25\nrow3    0    1    0    2    0  0.00  0.310  0.000  0.545  0.00\nrow4    0    1    2    2    1  0.00  0.100  0.395  0.760  0.24\n</code></pre></li>\n<li><p><code>pd.DataFrame.groupby</code></p>\n\n<pre><code>df.groupby(['row', 'col'])['val0'].agg(['size', 'mean']).unstack(fill_value=0)\n</code></pre></li>\n<li><p><code>pd.crosstab</code></p>\n\n<pre><code>pd.crosstab(\n    index=df['row'], columns=df['col'],\n    values=df['val0'], aggfunc=[np.size, np.mean]).fillna(0, downcast='infer')\n</code></pre></li>\n</ul>\n\n<hr>\n\n<h2>Question 6</h2>\n\n<blockquote>\n  <p>Can I aggregate over multiple value columns?</p>\n</blockquote>\n\n<ul>\n<li><p><code>pd.DataFrame.pivot_table</code> we pass <code>values=['val0', 'val1']</code> but we could've left that off completely</p>\n\n<pre><code>df.pivot_table(\n    values=['val0', 'val1'], index='row', columns='col',\n    fill_value=0, aggfunc='mean')\n\n      val0                             val1                          \ncol   col0   col1   col2   col3  col4  col0   col1  col2   col3  col4\nrow                                                                  \nrow0  0.77  0.605  0.000  0.860  0.65  0.01  0.745  0.00  0.010  0.02\nrow2  0.13  0.000  0.395  0.500  0.25  0.45  0.000  0.34  0.440  0.79\nrow3  0.00  0.310  0.000  0.545  0.00  0.00  0.230  0.00  0.075  0.00\nrow4  0.00  0.100  0.395  0.760  0.24  0.00  0.070  0.42  0.300  0.46\n</code></pre></li>\n<li><p><code>pd.DataFrame.groupby</code></p>\n\n<pre><code>df.groupby(['row', 'col'])['val0', 'val1'].mean().unstack(fill_value=0)\n</code></pre></li>\n</ul>\n\n<hr>\n\n<h2>Question 7</h2>\n\n<blockquote>\n  <p>Can Subdivide by multiple columns?</p>\n</blockquote>\n\n<ul>\n<li><p><code>pd.DataFrame.pivot_table</code></p>\n\n<pre><code>df.pivot_table(\n    values='val0', index='row', columns=['item', 'col'],\n    fill_value=0, aggfunc='mean')\n\nitem item0             item1                         item2                   \ncol   col2  col3  col4  col0  col1  col2  col3  col4  col0   col1  col3  col4\nrow                                                                          \nrow0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.605  0.86  0.65\nrow2  0.35  0.00  0.37  0.00  0.00  0.44  0.00  0.00  0.13  0.000  0.50  0.13\nrow3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.000  0.28  0.00\nrow4  0.15  0.64  0.00  0.00  0.10  0.64  0.88  0.24  0.00  0.000  0.00  0.00\n</code></pre></li>\n<li><p><code>pd.DataFrame.groupby</code></p>\n\n<pre><code>df.groupby(\n    ['row', 'item', 'col']\n)['val0'].mean().unstack(['item', 'col']).fillna(0).sort_index(1)\n</code></pre></li>\n</ul>\n\n<hr>\n\n<h2>Question 8</h2>\n\n<blockquote>\n  <p>Can Subdivide by multiple columns?</p>\n</blockquote>\n\n<ul>\n<li><p><code>pd.DataFrame.pivot_table</code></p>\n\n<pre><code>df.pivot_table(\n    values='val0', index=['key', 'row'], columns=['item', 'col'],\n    fill_value=0, aggfunc='mean')\n\nitem      item0             item1                         item2                  \ncol        col2  col3  col4  col0  col1  col2  col3  col4  col0  col1  col3  col4\nkey  row                                                                         \nkey0 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.86  0.00\n     row2  0.00  0.00  0.37  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.50  0.00\n     row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.00  0.00  0.00\n     row4  0.15  0.64  0.00  0.00  0.00  0.00  0.00  0.24  0.00  0.00  0.00  0.00\nkey1 row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.81  0.00  0.65\n     row2  0.35  0.00  0.00  0.00  0.00  0.44  0.00  0.00  0.00  0.00  0.00  0.13\n     row3  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.28  0.00\n     row4  0.00  0.00  0.00  0.00  0.10  0.00  0.00  0.00  0.00  0.00  0.00  0.00\nkey2 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.40  0.00  0.00\n     row2  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.13  0.00  0.00  0.00\n     row4  0.00  0.00  0.00  0.00  0.00  0.64  0.88  0.00  0.00  0.00  0.00  0.00\n</code></pre></li>\n<li><p><code>pd.DataFrame.groupby</code></p>\n\n<pre><code>df.groupby(\n    ['key', 'row', 'item', 'col']\n)['val0'].mean().unstack(['item', 'col']).fillna(0).sort_index(1)\n</code></pre></li>\n<li><p><code>pd.DataFrame.set_index</code> because the set of keys are unique for both rows and columns</p>\n\n<pre><code>df.set_index(\n    ['key', 'row', 'item', 'col']\n)['val0'].unstack(['item', 'col']).fillna(0).sort_index(1)\n</code></pre></li>\n</ul>\n\n<hr>\n\n<h2>Question 9</h2>\n\n<blockquote>\n  <p>Can I aggregate the frequency in which the column and rows occur together, aka \"cross tabulation\"?</p>\n</blockquote>\n\n<ul>\n<li><p><code>pd.DataFrame.pivot_table</code></p>\n\n<pre><code>df.pivot_table(index='row', columns='col', fill_value=0, aggfunc='size')\n\n    col   col0  col1  col2  col3  col4\nrow                               \nrow0     1     2     0     1     1\nrow2     1     0     2     1     2\nrow3     0     1     0     2     0\nrow4     0     1     2     2     1\n</code></pre></li>\n<li><p><code>pd.DataFrame.groupby</code></p>\n\n<pre><code>df.groupby(['row', 'col'])['val0'].size().unstack(fill_value=0)\n</code></pre></li>\n<li><p><code>pd.crosstab</code></p>\n\n<pre><code>pd.crosstab(df['row'], df['col'])\n</code></pre></li>\n<li><p><code>pd.factorize</code> + <code>np.bincount</code></p>\n\n<pre><code># get integer factorization `i` and unique values `r`\n# for column `'row'`\ni, r = pd.factorize(df['row'].values)\n# get integer factorization `j` and unique values `c`\n# for column `'col'`\nj, c = pd.factorize(df['col'].values)\n# `n` will be the number of rows\n# `m` will be the number of columns\nn, m = r.size, c.size\n# `i * m + j` is a clever way of counting the \n# factorization bins assuming a flat array of length\n# `n * m`.  Which is why we subsequently reshape as `(n, m)`\nb = np.bincount(i * m + j, minlength=n * m).reshape(n, m)\n# BTW, whenever I read this, I think 'Bean, Rice, and Cheese'\npd.DataFrame(b, r, c)\n\n      col3  col2  col0  col1  col4\nrow3     2     0     0     1     0\nrow2     1     2     1     0     2\nrow0     1     0     1     2     1\nrow4     2     2     0     1     1\n</code></pre></li>\n<li><p><code>pd.get_dummies</code></p>\n\n<pre><code>pd.get_dummies(df['row']).T.dot(pd.get_dummies(df['col']))\n\n      col0  col1  col2  col3  col4\nrow0     1     2     0     1     1\nrow2     1     0     2     1     2\nrow3     0     1     0     2     0\nrow4     0     1     2     2     1\n</code></pre></li>\n</ul>\n\n<hr>\n\n<h2>Question 10</h2>\n\n<blockquote>\n  <p>How do I convert a DataFrame from long to wide by pivoting on ONLY two\n  columns?</p>\n</blockquote>\n\n<p>The first step is to assign a number to each row - this number will be the row index of that value in the pivoted result. This is done using <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.cumcount.html\" rel=\"noreferrer\"><strong><code>GroupBy.cumcount</code></strong></a>:</p>\n\n<pre><code>df2.insert(0, 'count', df.groupby('A').cumcount())\ndf2\n\n   count  A   B\n0      0  a   0\n1      1  a  11\n2      2  a   2\n3      3  a  11\n4      0  b  10\n5      1  b  10\n6      2  b  14\n7      0  c   7\n</code></pre>\n\n<p>The second step is to use the newly created column as the index to call <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot.html\" rel=\"noreferrer\"><strong><code>DataFrame.pivot</code></strong></a>. </p>\n\n<pre><code>df2.pivot(*df)\n# df.pivot(index='count', columns='A', values='B')\n\nA         a     b    c\ncount                 \n0       0.0  10.0  7.0\n1      11.0  10.0  NaN\n2       2.0  14.0  NaN\n3      11.0   NaN  NaN\n</code></pre>\n\n<hr>\n\n<h2>Question 11</h2>\n\n<blockquote>\n  <p>How do I flatten the multiple index to single index after <code>pivot</code></p>\n</blockquote>\n\n<p>If <code>columns</code> type <code>object</code> with string <code>join</code> </p>\n\n<pre><code>df.columns = df.columns.map('|'.join)\n</code></pre>\n\n<p>else <code>format</code></p>\n\n<pre><code>df.columns = df.columns.map('{0[0]}|{0[1]}'.format) \n</code></pre>\n    </div>", "total_vectors": [-0.028377439826726913, -0.07985362410545349, 0.03130244091153145, 0.028194736689329147, 0.03338306397199631, 0.0034778318367898464, -0.032602936029434204, -0.0708187147974968, 0.01815667748451233, 0.07308170199394226, -0.0038210710044950247, 0.03251335769891739, -0.0018875926034525037, 0.05306156352162361, -0.006048162002116442, 0.08089958131313324, 0.03847843036055565, -0.050384148955345154, 0.03932308033108711, -0.03025374934077263, 0.0037924530915915966, -0.06394374370574951, 0.012485946528613567, -0.022904379293322563, -0.028826816007494926, -0.012812399305403233, -0.038297466933727264, -0.02431352436542511, 0.0027665388770401478, 0.04411356523633003, 0.024648822844028473, 0.04127943143248558, 0.04983038827776909, -0.0159835834056139, -0.022110063582658768, 0.005697445012629032, -0.049835242331027985, 0.03238699957728386, -0.05072132498025894, -0.03941977769136429, 0.03813232108950615, -0.01105194166302681, -0.027940982952713966, 0.04652124270796776, 0.05797935277223587, 0.03847446292638779, -0.020788026973605156, 0.0036111001390963793, -0.04369649291038513, 0.011815197765827179, 0.02705385908484459, 0.079891137778759, -0.008028456009924412, -0.007328310515731573, 0.017980502918362617, -0.03253057971596718, 0.04104503244161606, -0.010147370398044586, -0.0036056803073734045, 0.006156771443784237, -0.06277768313884735, -0.022369010373950005, -0.04172522574663162, 0.026517188176512718, -0.0005628376384265721, -0.019981781020760536, 0.018007274717092514, -0.05196567624807358, -0.06956658512353897, 0.06333920359611511, 0.04793882369995117, -0.02071027085185051, -0.050846610218286514, 0.06521045416593552, 0.013718302361667156, 0.03703619912266731, 0.07895519584417343, 0.03562919795513153, 0.026376258581876755, 0.05224532634019852, 0.03793752193450928, 0.017585860565304756, 0.017989959567785263, -0.07285980135202408, -0.0401843823492527, -0.06469660252332687, -0.05080726370215416, -0.06994307786226273, -0.0010155641939491034, 0.013636558316648006, -0.05339359492063522, 0.05028622969985008, 0.005905148107558489, 0.07407356798648834, -0.04714787378907204, -0.004989448003470898, -0.025787290185689926, 0.045917097479104996, -0.007127831224352121, -0.0804411917924881, -0.023160750046372414, 0.03424229472875595, -0.0697452500462532, -0.010114704258739948, -0.02365356683731079, 0.045100223273038864, -0.05713146924972534, -0.005157274194061756, 0.012002434581518173, 0.000508745841216296, 0.039227552711963654, -0.06813158839941025, -0.021181968972086906, -0.04515194520354271, -0.004889225587248802, -0.01727880723774433, -0.05063533037900925, -0.0281766876578331, 0.02852557972073555, -0.04034929350018501, 0.026750661432743073, 0.02844601683318615, -0.01766344904899597, 0.05372566729784012, -0.03506527096033096, 0.035669293254613876, 0.06476917862892151, -0.01838923618197441, 0.0733877643942833, 0.019567124545574188, -0.026344342157244682, -0.01781841181218624, -0.028852183371782303, -0.0013070908607915044, 0.027786217629909515, 0.015714244917035103, -0.042214956134557724, 0.024882948026061058, -0.02650308981537819, 0.00793500803411007, 0.06008017808198929, -0.02213420905172825, 0.04493580013513565, -0.06459464877843857, 0.0066929967142641544, -0.06603795289993286, 0.01596277765929699, 0.01883137971162796, 0.054603174328804016, 0.003909189719706774, -0.04650368168950081, 0.035110749304294586, 0.0058451765216887, 0.03442704305052757, -0.02804636023938656, 0.004894555546343327, -0.03290608152747154, -0.06240108236670494, 0.042114030569791794, 0.03441537171602249, -0.07437565177679062, 0.021309303119778633, 0.008683884516358376, 0.0548892542719841, -0.030091088265180588, -0.07295925915241241, -0.06167805194854736, -0.028885914012789726, -0.04780301824212074, 0.00043030790402553976, -0.00037526877713389695, 0.026436669752001762, 0.053794797509908676, 0.03031279891729355, 0.033335618674755096, -0.017529834061861038, 0.015920791774988174, 0.03894803673028946, -0.05143355578184128, -0.0030031681526452303, 0.05799693614244461, 0.07737163454294205, 0.023615289479494095, 0.015864141285419464, 0.04438922926783562, -0.007868409156799316, 0.023458674550056458, 0.0747411698102951, -0.0343477837741375, 0.06279022991657257, -0.018239028751850128, 0.03715096786618233, 0.04019015282392502, 0.07648992538452148, -0.06643181294202805, 0.015023913234472275, 0.014975479803979397, 0.08107127249240875, 0.07149671018123627, -0.0448041632771492, 0.023600028827786446, -0.056933265179395676, -0.05150417238473892, 0.07189099490642548, 0.0022322959266602993, 0.005229608155786991, -0.039181001484394073, -0.0624544657766819, -0.07577648013830185, -0.006412811577320099, -0.015609395690262318, 0.07645072042942047, -0.002077041659504175, 0.037571340799331665, -0.0034192362800240517, 0.001183125888928771, -0.02622348442673683, 0.07680442929267883, 0.016953464597463608, 0.024786554276943207, 0.07322143763303757, -0.04817677289247513, -0.03352852910757065, 0.0632627084851265, 0.044524818658828735, -0.03793078660964966, 0.023838747292757034, -0.008458607830107212, -0.05561252310872078, -0.014203297905623913, -0.04663890600204468, -0.03623045235872269, -0.009731477126479149, -0.01200163085013628, 0.0782814770936966, -0.06745243072509766, 0.06320162117481232, 0.07952189445495605, 0.00761546241119504, 0.052740953862667084, -0.036626461893320084, -0.03655878081917763, -0.0016589023871347308, 0.027381135150790215, 0.07389677315950394, 0.07890850305557251, 0.01522035337984562, 0.04219948872923851, 0.08020003139972687, 0.06415407359600067, 0.06988661736249924, -0.02389385551214218, -0.03651025518774986, -0.06355240941047668, -0.05597430467605591, 0.05163297429680824, 0.028997182846069336, -0.07499493658542633, 0.0637257769703865, -0.01552435290068388, -0.07111787050962448, 0.052364517003297806, -0.07965505868196487, 0.030638715252280235, -0.02610563300549984, -0.01755077764391899, -0.05575830861926079, -0.07821806520223618, -0.047029413282871246, 0.021351635456085205, -0.04874417558312416, 0.040070679038763046, 0.06889934092760086, -0.02005009539425373, -0.06829740852117538, 0.06979721784591675, -0.026263941079378128, 0.04755740612745285, 0.08011890202760696, -0.0038351702969521284, 0.04993010312318802, -0.014184737578034401, -0.013247502036392689, 0.030720356851816177, 0.013248994946479797, -0.07082907855510712, 0.06671962887048721, -0.032417915761470795, 0.051887188106775284, -0.04421127960085869, 0.051034148782491684, 0.02684478834271431, 0.024149104952812195, -0.007749913726001978, 0.0787343755364418, 0.07116809487342834, -0.020890574902296066, -0.027313565835356712, -0.07829322665929794, 0.0019846223294734955, -0.0450034998357296, -0.0449855662882328, -0.02665463462471962, -0.05558853968977928, -0.04588712751865387, -0.015801839530467987, 0.03243757411837578, -0.015312721952795982, -0.05836905911564827, -0.0038963807746767998, -0.030382394790649414, -0.03808973357081413, -0.02585252746939659, 0.035252876579761505, -0.055167023092508316, -0.051030781120061874, -0.048211123794317245, 0.05994747206568718, -0.02726643532514572, 0.055059764534235, -0.06036486476659775, -0.004440329968929291, -0.03087526559829712, -0.06906118243932724, -0.007898038253188133, 0.050793349742889404, -0.0075250109657645226, -0.05478908121585846, -0.01733851619064808, 0.02016279846429825, 0.05548163875937462, -0.025906547904014587, 0.0695013478398323, 0.06627707928419113, -0.03243113309144974, 0.06075718626379967, -0.030598031356930733, 0.01426800899207592, 0.058583006262779236, 0.03805013373494148, 0.01894860714673996, 0.00867017824202776, 0.0709891989827156, -0.03909176215529442, -0.0811818316578865, 0.06965204328298569, 0.0584762766957283, -0.0652385726571083, -0.03503755107522011, 0.02988266758620739, 0.00538185378536582, 0.03883933275938034, -0.003385277697816491, -0.02688985876739025, -0.01088503748178482, -0.07084063440561295, -0.08037608861923218, -0.009492281824350357, -0.05390312895178795, 0.022213373333215714, -0.06483873724937439, -0.06702116876840591, -0.0808601975440979, -0.030980071052908897, 0.054505933076143265, -0.0012324439594522119, -0.07115834206342697, -0.03656093031167984, 0.03331780806183815, 0.07972453534603119, -0.03686092048883438, -0.044980887323617935, 0.010731426998972893, 0.05937014892697334, 0.006369952578097582, -0.07215308398008347, 0.0022844162303954363, -0.051079701632261276, 0.03454688936471939, -0.06961853802204132, 0.08061298727989197, 0.07448554784059525, 0.03585894778370857, -0.01455544214695692, -0.035379160195589066, -0.01606784760951996, 0.06564582139253616, 0.06950034201145172, 0.04176494479179382, -0.04666168615221977, -0.037435296922922134, -0.06498713791370392, -0.06796026229858398, 0.020604854449629784, -0.07402403652667999, 0.07134728878736496, 0.01963738538324833, 0.02674550563097, -0.020059535279870033, 0.054561957716941833, 0.02491931803524494, -7.380839815596119e-05, -0.021712277084589005, 0.05380825325846672, 0.052745968103408813, 0.03414712846279144, -0.06592965871095657, -0.020863186568021774, 0.0031422434840351343, 0.01503085345029831, -0.05987218767404556, 0.01164918765425682, -0.0221625417470932, -0.037599775940179825, -0.007393719162791967, -0.06845235824584961, 0.05190296843647957, 0.05837584659457207, 0.0067152585834264755, 0.0443996898829937, -0.0594845712184906, -0.01884494535624981, -0.027300624176859856, 0.04164040461182594, 0.03494537994265556, 0.06375973671674728, -0.05433452129364014, 0.06589140743017197, -0.0789734423160553, 0.005525290034711361, -0.020765051245689392, -0.030306078493595123, -0.06517243385314941, -0.009540579281747341, -0.07315797358751297, -0.0018072634702548385, -0.012305691838264465, 0.010550492443144321, -0.00856966432183981, -0.01869724690914154, -0.06316512078046799, -0.07205764949321747, 0.008927701972424984, -0.027337295934557915, -0.01544902939349413, 0.027627231553196907, 0.004915342666208744, -0.018229683861136436, -0.010481033474206924, 0.06363562494516373, 0.04449038207530975, 0.07081380486488342, 0.07435902953147888, 0.06708429008722305, -0.030852951109409332, -0.07671639323234558, -0.04066016897559166, 0.038403552025556564, -0.01713135652244091, 0.012426893226802349, 0.043539583683013916, 0.05029851943254471, 0.02481452003121376, 0.01441942248493433, 0.023452844470739365, -0.04591353237628937, -0.035483743995428085, 0.03033745475113392, 0.015098179690539837, -0.027897492051124573, 0.013262970373034477, 0.04205935448408127, 0.07553592324256897, -0.023764362558722496, 0.003750158939510584, 0.020264634862542152, -0.04253533482551575, 0.03532455116510391, 0.014730594120919704, -0.0766531452536583, 0.05188532546162605, -0.0022440245375037193, 0.06354275345802307, 0.06740643829107285, 0.04493898153305054, 0.04534877464175224, 0.07968291640281677, 0.04190381243824959, 0.004391785711050034, 0.009652934037148952, -0.004955234471708536, 0.036821089684963226, -0.016453368589282036, 0.05273022875189781, 0.029899077489972115, -0.05426732450723648, -0.02181326225399971, -0.009710348211228848, -0.03497735783457756, -0.0476364828646183, 0.01063833013176918, -0.05931350961327553, -0.014834336005151272, 0.030090536922216415, 0.04079114645719528, -0.03600955754518509, -0.06951966881752014, -0.016182733699679375, -0.030880775302648544, 0.08026286214590073, 0.04633161798119545, -0.023542631417512894]},
{"question": "Where and why do I have to put the \u201ctemplate\u201d and \u201ctypename\u201d keywords?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>In templates, where and why do I have to put <code>typename</code> and <code>template</code> on dependent names?<br>\nWhat exactly are dependent names anyway?  </p>\n\n<p>I have the following code:</p>\n\n<pre><code>template &lt;typename T, typename Tail&gt; // Tail will be a UnionNode too.\nstruct UnionNode : public Tail {\n    // ...\n    template&lt;typename U&gt; struct inUnion {\n        // Q: where to add typename/template here?\n        typedef Tail::inUnion&lt;U&gt; dummy; \n    };\n    template&lt; &gt; struct inUnion&lt;T&gt; {\n    };\n};\ntemplate &lt;typename T&gt; // For the last node Tn.\nstruct UnionNode&lt;T, void&gt; {\n    // ...\n    template&lt;typename U&gt; struct inUnion {\n        char fail[ -2 + (sizeof(U)%2) ]; // Cannot be instantiated for any U\n    };\n    template&lt; &gt; struct inUnion&lt;T&gt; {\n    };\n};\n</code></pre>\n\n<p>The problem I have is in the <code>typedef Tail::inUnion&lt;U&gt; dummy</code> line. I'm fairly certain that <code>inUnion</code> is a dependent name, and VC++ is quite right in choking on it.<br>\nI also know that I should be able to add <code>template</code> somewhere to tell the compiler that inUnion is a template-id. But where exactly? And should it then assume that inUnion is a class template, i.e. <code>inUnion&lt;U&gt;</code> names a type and not a function?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>(See <a href=\"https://stackoverflow.com/a/17579889/4561887\">here also for my C++11 answer</a>)</p>\n\n<p>In order to parse a C++ program, the compiler needs to know whether certain names are types or not. The following example demonstrates that:</p>\n\n<pre><code>t * f;\n</code></pre>\n\n<p>How should this be parsed? For many languages a compiler doesn't need to know the meaning of a name in order to parse and basically know what action a line of code does. In C++, the above however can yield vastly different interpretations depending on what <code>t</code> means. If it's a type, then it will be a declaration of a pointer <code>f</code>. However if it's not a type, it will be a multiplication. So the C++ Standard says at paragraph (3/7):</p>\n\n<blockquote>\n  <p>Some names denote types or templates. In general, whenever a name is encountered it is necessary to determine whether that name denotes one of these entities before continuing to parse the program that contains it. The process that determines this is called name lookup.</p>\n</blockquote>\n\n<p>How will the compiler find out what a name <code>t::x</code> refers to, if <code>t</code> refers to a template type parameter? <code>x</code> could be a static int data member that could be multiplied or could equally well be a nested class or typedef that could yield to a declaration. <strong>If a name has this property - that it can't be looked up until the actual template arguments are known - then it's called a <em>dependent name</em> (it \"depends\" on the template parameters).</strong> </p>\n\n<p>You might recommend to just wait till the user instantiates the template: </p>\n\n<blockquote>\n  <p><em>Let's wait until the user instantiates the template, and then later find out the real meaning of <code>t::x * f;</code>.</em> </p>\n</blockquote>\n\n<p>This will work and actually is allowed by the Standard as a possible implementation approach. These compilers basically copy the template's text into an internal buffer, and only when an instantiation is needed, they parse the template and possibly detect errors in the definition. But instead of bothering the template's users (poor colleagues!) with errors made by a template's author, other implementations choose to check templates early on and give errors in the definition as soon as possible, before an instantiation even takes place. </p>\n\n<p>So there has to be a way to tell the compiler that certain names are types and that certain names aren't. </p>\n\n<h2>The \"typename\" keyword</h2>\n\n<p>The answer is: <em>We</em> decide how the compiler should parse this. If <code>t::x</code> is a dependent name, then we need to prefix it by <code>typename</code> to tell the compiler to parse it in a certain way. The Standard says at (14.6/2):</p>\n\n<blockquote>\n  <p>A name used in a template declaration or definition and that is dependent on a template-parameter is\n  assumed not to name a type unless the applicable name lookup finds a type name or the name is qualified\n  by the keyword typename. </p>\n</blockquote>\n\n<p>There are many names for which <code>typename</code> is not necessary, because the compiler can, with the applicable name lookup in the template definition, figure out how to parse a construct itself - for example with <code>T *f;</code>, when <code>T</code> is a type template parameter. But for <code>t::x * f;</code> to be a declaration, it must be written as <code>typename t::x *f;</code>. If you omit the keyword and the name is taken to be a non-type, but when instantiation finds it denotes a type, the usual error messages are emitted by the compiler. Sometimes, the error consequently is given at definition time:</p>\n\n<pre><code>// t::x is taken as non-type, but as an expression the following misses an\n// operator between the two names or a semicolon separating them.\nt::x f;\n</code></pre>\n\n<p><em>The syntax allows <code>typename</code> only before qualified names</em> - it is therefor taken as granted that unqualified names are always known to refer to types if they do so.</p>\n\n<p>A similar gotcha exists for names that denote templates, as hinted at by the introductory text.</p>\n\n<h2>The \"template\" keyword</h2>\n\n<p>Remember the initial quote above and how the Standard requires special handling for templates as well? Let's take the following innocent-looking example: </p>\n\n<pre><code>boost::function&lt; int() &gt; f;\n</code></pre>\n\n<p>It might look obvious to a human reader. Not so for the compiler. Imagine the following arbitrary definition of <code>boost::function</code> and <code>f</code>:</p>\n\n<pre><code>namespace boost { int function = 0; }\nint main() { \n  int f = 0;\n  boost::function&lt; int() &gt; f; \n}\n</code></pre>\n\n<p>That's actually a valid <em>expression</em>! It uses the less-than operator to compare <code>boost::function</code> against zero (<code>int()</code>), and then uses the greater-than operator to compare the resulting <code>bool</code> against <code>f</code>. However as you might well know, <code>boost::function</code> <a href=\"http://www.boost.org/doc/libs/1_54_0/doc/html/function.html\" rel=\"noreferrer\">in real life</a> is a template, so the compiler knows (14.2/3):</p>\n\n<blockquote>\n  <p>After name lookup (3.4) finds that a name is a template-name, if this name is followed by a &lt;, the &lt; is\n  always taken as the beginning of a template-argument-list and never as a name followed by the less-than\n  operator.</p>\n</blockquote>\n\n<p>Now we are back to the same problem as with <code>typename</code>. What if we can't know yet whether the name is a template when parsing the code? We will need to insert <code>template</code> immediately before the template name, as specified by <code>14.2/4</code>. This looks like:</p>\n\n<pre><code>t::template f&lt;int&gt;(); // call a function template\n</code></pre>\n\n<p>Template names can not only occur after a <code>::</code> but also after a <code>-&gt;</code> or <code>.</code> in a class member access. You need to insert the keyword there too:</p>\n\n<pre><code>this-&gt;template f&lt;int&gt;(); // call a function template\n</code></pre>\n\n<hr>\n\n<h2>Dependencies</h2>\n\n<p>For the people that have thick Standardese books on their shelf and that want to know what exactly I was talking about, I'll talk a bit about how this is specified in the Standard.</p>\n\n<p>In template declarations some constructs have different meanings depending on what template arguments you use to instantiate the template: Expressions may have different types or values, variables may have different types or function calls might end up calling different functions. Such constructs are generally said to <em>depend</em> on template parameters.</p>\n\n<p>The Standard defines precisely the rules by whether a construct is dependent or not. It separates them into logically different groups: One catches types, another catches expressions. Expressions may depend by their value and/or their type. So we have, with typical examples appended:</p>\n\n<ul>\n<li>Dependent types (e.g: a type template parameter <code>T</code>)</li>\n<li>Value-dependent expressions (e.g: a non-type template parameter <code>N</code>)</li>\n<li>Type-dependent expressions (e.g: a cast to a type template parameter <code>(T)0</code>)</li>\n</ul>\n\n<p>Most of the rules are intuitive and are built up recursively: For example, a type constructed as <code>T[N]</code> is a dependent type if <code>N</code> is a value-dependent expression or <code>T</code> is a dependent type. The details of this can be read in section <code>(14.6.2/1</code>) for dependent types, <code>(14.6.2.2)</code> for type-dependent expressions and <code>(14.6.2.3)</code> for value-dependent expressions. </p>\n\n<h3>Dependent names</h3>\n\n<p>The Standard is a bit unclear about what <em>exactly</em> is a <em>dependent name</em>. On a simple read (you know, the principle of least surprise), all it defines as a <em>dependent name</em> is the special case for function names below. But since clearly <code>T::x</code> also needs to be looked up in the instantiation context, it also needs to be a dependent name (fortunately, as of mid C++14 the committee has started to look into how to fix this confusing definition). </p>\n\n<p>To avoid this problem, I have resorted to a simple interpretation of the Standard text. Of all the constructs that denote dependent types or expressions, a subset of them represent names. Those names are therefore \"dependent names\". A name can take different forms - the Standard says:</p>\n\n<blockquote>\n  <p>A name is a use of an identifier (2.11), operator-function-id (13.5), conversion-function-id (12.3.2), or template-id (14.2) that denotes an entity or label (6.6.4, 6.1)</p>\n</blockquote>\n\n<p>An identifier is just a plain sequence of characters / digits, while the next two are the <code>operator +</code> and <code>operator type</code> form. The last form is <code>template-name &lt;argument list&gt;</code>. All these are names, and by conventional use in the Standard, a name can also include qualifiers that say what namespace or class a name should be looked up in.</p>\n\n<p>A value dependent expression <code>1 + N</code> is not a name, but <code>N</code> is. The subset of all dependent constructs that are names is called <em>dependent name</em>. Function names, however, may have different meaning in different instantiations of a template, but unfortunately are not caught by this general rule. </p>\n\n<h3>Dependent function names</h3>\n\n<p>Not primarily a concern of this article, but still worth mentioning: Function names are an exception that are handled separately. An identifier function name is dependent not by itself, but by the type dependent argument expressions used in a call. In the example <code>f((T)0)</code>, <code>f</code> is a dependent name. In the Standard, this is specified at <code>(14.6.2/1)</code>.</p>\n\n<h2>Additional notes and examples</h2>\n\n<p>In enough cases we need both of <code>typename</code> and <code>template</code>. Your code should look like the following</p>\n\n<pre><code>template &lt;typename T, typename Tail&gt;\nstruct UnionNode : public Tail {\n    // ...\n    template&lt;typename U&gt; struct inUnion {\n        typedef typename Tail::template inUnion&lt;U&gt; dummy;\n    };\n    // ...\n};\n</code></pre>\n\n<p>The keyword <code>template</code> doesn't always have to appear in the last part of a name. It can appear in the middle before a class name that's used as a scope, like in the following example</p>\n\n<pre><code>typename t::template iterator&lt;int&gt;::value_type v;\n</code></pre>\n\n<p>In some cases, the keywords are forbidden, as detailed below</p>\n\n<ul>\n<li><p>On the name of a dependent base class you are not allowed to write <code>typename</code>. It's assumed that the name given is a class type name. This is true for both names in the base-class list and the constructor initializer list:</p>\n\n<pre><code> template &lt;typename T&gt;\n struct derive_from_Has_type : /* typename */ SomeBase&lt;T&gt;::type \n { };\n</code></pre></li>\n<li><p>In using-declarations it's not possible to use <code>template</code> after the last <code>::</code>, and the C++ committee <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#109\" rel=\"noreferrer\">said</a> not to work on a solution. </p>\n\n<pre><code> template &lt;typename T&gt;\n struct derive_from_Has_type : SomeBase&lt;T&gt; {\n    using SomeBase&lt;T&gt;::template type; // error\n    using typename SomeBase&lt;T&gt;::type; // typename *is* allowed\n };\n</code></pre></li>\n</ul>\n    </div>", "total_vectors": [0.03465372696518898, -0.02947366237640381, -0.01199324894696474, 0.03147026523947716, 0.012024584226310253, -0.0005226262146607041, 0.04916752129793167, 0.05863945558667183, -0.0036603999324142933, 0.022054379805922508, 0.0042475005611777306, 0.01741803251206875, -0.04162006825208664, -0.08388154208660126, -0.013900239020586014, 0.09334085881710052, 0.025117870420217514, 0.026939932256937027, 0.037830233573913574, 0.04356728866696358, 0.0833548754453659, 0.08266571909189224, -0.0506131649017334, 0.03670179098844528, -0.011809627525508404, -0.012327813543379307, -0.0024294217582792044, -0.05898960307240486, -0.03528403490781784, 0.033737607300281525, 0.07412393391132355, 0.025824280455708504, 0.035933881998062134, 0.012251886539161205, -0.06828626245260239, 0.00875004567205906, -0.01365656964480877, -0.019059671089053154, -0.03554050624370575, 0.017636198550462723, -0.06477972120046616, -0.003523545805364847, 0.029345305636525154, -0.04264366626739502, 0.046040263026952744, 0.0029924800619482994, -0.028864912688732147, -0.01858922280371189, -0.056870829313993454, -0.04377289116382599, -0.06298334896564484, 0.09996593743562698, 0.030964436009526253, -0.011264744214713573, -0.048191990703344345, -0.07379809021949768, -0.06594665348529816, -0.0324258953332901, -0.029447291046380997, -0.0602603554725647, -0.001175580662675202, 0.03605169802904129, -0.02423720248043537, -0.04270864278078079, 0.004803630523383617, -0.0646144300699234, -0.041701752692461014, -0.03361162915825844, -0.01285532396286726, -0.047189611941576004, 0.011990037746727467, -0.0025593102909624577, 0.038803476840257645, 0.052572570741176605, 0.026671916246414185, -0.018571410328149796, -0.006067935843020678, -0.006518459878861904, 0.02629213035106659, 0.030324392020702362, -0.0359189547598362, 0.01724531501531601, -0.024711109697818756, -0.019022153690457344, 0.04185672104358673, 0.032373905181884766, 0.009513496421277523, 0.028373470529913902, -0.03526097163558006, -0.03293590247631073, 0.036343567073345184, -0.005182476248592138, 0.021446727216243744, 0.02703474834561348, -0.017021458595991135, 0.049214936792850494, 0.022568348795175552, 0.06398661434650421, -0.0024914550594985485, -0.09351794421672821, 0.03767852857708931, 0.011496000923216343, 0.026949886232614517, -0.01945590041577816, -0.03288227692246437, 0.01644177734851837, -0.03961475193500519, -0.005769173614680767, 0.014366395771503448, -0.020107237622141838, -0.010014225728809834, -0.05705709755420685, 0.02222074195742607, -0.04709896072745323, 0.019275503233075142, 0.03126753866672516, -0.011886203661561012, 0.03640022501349449, 0.009360388852655888, 0.008401845581829548, -0.05633215978741646, 0.06274856626987457, 0.00646630534902215, -0.024876756593585014, 0.00564052676782012, -0.03142455220222473, -0.045158471912145615, 0.04763238877058029, 0.025719569995999336, -0.06036980822682381, 0.07130128145217896, 0.0346011221408844, -0.07017936557531357, -0.03966832533478737, 0.03898131474852562, -0.05243418738245964, -0.024662062525749207, -0.015973921865224838, -0.06259313225746155, 0.07582258433103561, 0.031006688252091408, 0.002138687064871192, -0.0524221807718277, 0.06867852807044983, -0.058909788727760315, -0.04783305153250694, 0.07134966552257538, 0.04802531376481056, 0.046126291155815125, -0.07180802524089813, -0.03393051400780678, -0.01708499900996685, 0.01105036772787571, -0.006083644460886717, 0.03231700509786606, 0.001765281893312931, -0.025251314043998718, 0.07857434451580048, 0.05954542011022568, -0.06440257281064987, -0.0335453599691391, -0.03076286055147648, 0.055792443454265594, 0.031401559710502625, 0.05784178152680397, 0.0384797677397728, -0.03335713595151901, -0.02866734378039837, -0.011449991725385189, -0.029137378558516502, -0.03618301451206207, -0.008836441673338413, 0.08827059715986252, 0.06117352470755577, 0.03306753560900688, -0.014254539273679256, -0.028383813798427582, 0.03084648959338665, 0.011904221959412098, 0.02019425481557846, -0.03597782179713249, -0.017575744539499283, 0.055949147790670395, 0.011729897931218147, 0.0585094653069973, 0.015407503582537174, -0.021289216354489326, 0.02213016338646412, -0.05602346733212471, 0.03443586453795433, 0.05491723492741585, -0.008277740329504013, 0.05260709673166275, -0.0761294811964035, 0.011917954310774803, -0.03573891147971153, 0.025569012388586998, 0.09386331588029861, 0.020419098436832428, -0.05626511573791504, -0.03776106610894203, -0.07945596426725388, 0.020841777324676514, 0.07408589869737625, -0.024518312886357307, 0.04931783676147461, 0.0810534879565239, 0.06853952258825302, -0.08401516824960709, 0.014865963719785213, -0.038383886218070984, 0.06788395345211029, -0.02365243062376976, 0.0328032411634922, 0.08957688510417938, -0.03371061012148857, -0.0319073349237442, -0.09519965946674347, 0.007401290349662304, 0.029418349266052246, -0.05088609829545021, -0.030966762453317642, -0.03912847489118576, 0.06962411105632782, -0.0111065823584795, -0.001336782588623464, -0.07134091854095459, 0.06636179983615875, -0.019772503525018692, -0.05689559504389763, -0.03273409232497215, -0.03428076207637787, 0.018613137304782867, 0.031833749264478683, 0.03594302758574486, 0.025972014293074608, 0.06046359986066818, 0.005171553697437048, 0.010152850300073624, 0.03144001588225365, 0.05315199866890907, -0.030610768124461174, -0.004376299679279327, -0.0020474439952522516, 0.07430399954319, 0.07529444247484207, -0.004060565494000912, -0.0029892141465097666, 0.09726490825414658, 0.07156310230493546, -0.04464871808886528, 0.019250405952334404, -0.02490837685763836, 0.05638983100652695, 0.029723571613430977, -0.07973429560661316, 0.05681426823139191, -0.053910642862319946, 0.06217072531580925, -0.041389793157577515, -0.05202901363372803, 0.04175083339214325, -0.031367309391498566, -0.06880085915327072, 0.04174119234085083, -0.01856744848191738, -0.04683058336377144, -0.020178211852908134, 0.04774319753050804, 0.06780456751585007, -0.05671273171901703, -0.0030692117288708687, -0.05086911842226982, 0.09339204430580139, 0.06741555780172348, 0.03767363354563713, -0.020733918994665146, 0.041109323501586914, 0.009595801122486591, 0.015516395680606365, 0.014265495352447033, -0.013356328010559082, 0.01750320941209793, -0.03575759381055832, 0.03186643123626709, -0.05415946990251541, -0.07149657607078552, -0.011510972864925861, 0.0845477283000946, 0.009693387895822525, -0.049204979091882706, -0.0005886214203201234, -0.04989498853683472, -0.04328715056180954, 0.08575303852558136, -0.013296413235366344, -0.041067562997341156, 0.08217918872833252, -0.014204026199877262, -0.00888825673609972, 0.05060018599033356, -0.006321958266198635, -0.08495284616947174, 0.031313456594944, 0.02752014622092247, 0.07005123794078827, 0.0020554137881845236, 3.309132807771675e-05, -0.029593147337436676, -0.015537353232502937, 0.06150849536061287, 0.019652020186185837, 0.04618086665868759, 0.0456962026655674, 0.035205140709877014, 0.02076067216694355, -0.03055603988468647, 0.0006195926107466221, 0.018437841907143593, -0.016235360875725746, 0.008972632698714733, -0.04195726662874222, -0.00024234263401012868, 0.006017106119543314, 0.03185087442398071, 0.03092610463500023, -0.046234577894210815, -0.011370609514415264, 0.03655560687184334, 0.04770596697926521, 0.023948613554239273, -0.0434449277818203, 0.02357015199959278, -0.021465133875608444, 0.03171633929014206, -0.017741825431585312, -0.01755191572010517, -0.03447327762842178, 0.026952557265758514, -0.0005078191752545536, 0.01946922577917576, 0.027806390076875687, 0.04219696298241615, -0.056103870272636414, -0.08070264011621475, 0.0005075031658634543, 0.034996386617422104, -0.009256568737328053, -0.04583912715315819, 0.02254643104970455, 0.030225349590182304, 0.015708791092038155, -0.0421232245862484, 0.06796393543481827, -0.019614819437265396, -0.009144791401922703, -0.0958341509103775, -0.0018632934661582112, -0.009437178261578083, 0.004805953241884708, 0.02648274414241314, -0.012055653147399426, -0.05981951579451561, 0.020969295874238014, 0.00380689580924809, 0.008710822090506554, -0.040987249463796616, 0.02470480650663376, 0.056151844561100006, -0.03547680005431175, 0.023422379046678543, -0.07324814051389694, 0.06539103388786316, 0.0706891342997551, 0.052078258246183395, 0.007700284477323294, 0.08050962537527084, -0.029277751222252846, -0.014954858459532261, -0.03583589568734169, 0.02693861536681652, 0.07758021354675293, -0.05707786604762077, -0.025319533422589302, -0.005244011990725994, 0.057579297572374344, 0.06217218190431595, -0.03422566503286362, -0.01965239644050598, 0.04214760661125183, 0.05073397979140282, -0.0040047261863946915, -0.00504444120451808, 0.0690142884850502, -0.01146148145198822, 0.06472769379615784, -0.03361808881163597, -0.02914937399327755, -0.05999394878745079, 0.02140403352677822, -0.024763965979218483, 0.001927166129462421, 0.03322962671518326, 0.05963592231273651, 0.024507733061909676, 0.04360431805253029, -0.015337221324443817, -0.035200636833906174, 0.021885216236114502, 0.02039654739201069, -0.08414199203252792, 0.027880607172846794, 0.0645398497581482, -0.0758112370967865, -0.02778993919491768, -0.024116497486829758, 0.027801040560007095, 0.08165356516838074, -0.04019968584179878, 0.0006868016207590699, -4.4739816075889394e-05, 0.06590823829174042, -0.02219492383301258, -0.03465620055794716, 0.08378531783819199, -0.08002178370952606, 0.0673115998506546, 0.08938141167163849, -0.009544074535369873, 0.0394292026758194, 0.03332701325416565, 0.027111519128084183, 0.04697737097740173, -0.03568486124277115, 0.05759608373045921, 0.04666058346629143, 0.0776069238781929, 0.03639644384384155, 0.07062181085348129, 0.026849715039134026, 0.058328550308942795, -0.03747180849313736, 0.06840435415506363, 0.007605943363159895, -0.06912350654602051, 0.04942460358142853, 0.0032792803831398487, 0.03344397619366646, 0.03833401948213577, -0.0251302607357502, -0.034426771104335785, -0.03710301220417023, 0.02422880195081234, 0.046491172164678574, 0.050188690423965454, -0.06563036888837814, 0.0779343843460083, -0.08787789940834045, 0.04583313316106796, -0.00705717084929347, 0.049518611282110214, -0.0858244001865387, -0.0379592701792717, -0.07054921239614487, 0.06095392629504204, -0.0673418864607811, 0.014887433499097824, -0.04193448647856712, -0.005010899621993303, 0.08349046856164932, -0.009518153965473175, -0.018140451982617378, 0.011204774491488934, -0.008646972477436066, -0.059065259993076324, 0.05135827884078026, -0.057355720549821854, 0.005032829940319061, -0.02155616693198681, -0.04229893907904625, -0.0025408617220818996, -0.044286325573921204, -0.0007757949060760438, -0.030235452577471733, -0.037043247371912, 0.04902671277523041, -0.046941351145505905, 0.024730298668146133, 0.0002664861676748842, -0.02933824062347412, -0.01871899515390396, 0.010072922334074974, 0.006300735753029585, 0.013928147964179516, 0.04907943680882454, 0.049285318702459335, -0.03374991938471794, 0.06447289884090424, 0.08963441103696823, -0.06878256797790527, 0.05353980138897896, 0.07225382328033447, 0.02650943212211132, 0.09036083519458771, 0.0689561516046524, -0.009768222458660603, 0.026318764314055443, -0.09206635504961014, -0.07804430276155472, 0.03692476078867912, -0.02069459669291973, 0.003201994113624096]},
{"question": "Can a local variable's memory be accessed outside its scope?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>I have the following code.</p>\n\n<pre><code>#include &lt;iostream&gt;\n\nint * foo()\n{\n    int a = 5;\n    return &amp;a;\n}\n\nint main()\n{\n    int* p = foo();\n    std::cout &lt;&lt; *p;\n    *p = 8;\n    std::cout &lt;&lt; *p;\n}\n</code></pre>\n\n<p>And the code is just running with no runtime exceptions!</p>\n\n<p>The output was <code>58</code></p>\n\n<p>How can it be? Isn't the memory of a local variable inaccessible outside its function?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<blockquote>\n  <p>How can it be? Isn't the memory of a local variable inaccessible outside its function?</p>\n</blockquote>\n\n<p>You rent a hotel room. You put a book in the top drawer of the bedside table and go to sleep.  You check out the next morning, but \"forget\" to give back your key. You steal the key!</p>\n\n<p>A week later, you return to the hotel, do not check in, sneak into your old room with your stolen key, and look in the drawer. Your book is still there. Astonishing!</p>\n\n<p><strong>How can that be? Aren't the contents of a hotel room drawer inaccessible if you haven't rented the room?</strong></p>\n\n<p>Well, obviously that scenario can happen in the real world no problem. There is no mysterious force that causes your book to disappear when you are no longer authorized to be in the room. Nor is there a mysterious force that prevents you from entering a room with a stolen key.</p>\n\n<p>The hotel management is not <em>required</em> to remove your book. You didn't make a contract with them that said that if you leave stuff behind, they'll shred it for you. If you illegally re-enter your room with a stolen key to get it back, the hotel security staff is not <em>required</em> to catch you sneaking in. You didn't make a contract with them that said \"if I try to sneak back into my room later, you are required to stop me.\" Rather, you signed a contract with them that said \"I promise not to sneak back into my room later\", a contract which <em>you broke</em>.</p>\n\n<p>In this situation <strong>anything can happen</strong>. The book can be there -- you got lucky. Someone else's book can be there and yours could be in the hotel's furnace. Someone could be there right when you come in, tearing your book to pieces. The hotel could have removed the table and book entirely and replaced it with a wardrobe. The entire hotel could be just about to be torn down and replaced with a football stadium, and you are going to die in an explosion while you are sneaking around. </p>\n\n<p>You don't know what is going to happen; when you checked out of the hotel and stole a key to illegally use later, you gave up the right to live in a predictable, safe world because <em>you</em> chose to break the rules of the system.</p>\n\n<p><strong>C++ is not a safe language</strong>. It will cheerfully allow you to break the rules of the system. If you try to do something illegal and foolish like going back into a room you're not authorized to be in and rummaging through a desk that might not even be there anymore, C++ is not going to stop you. Safer languages than C++ solve this problem by restricting your power -- by having much stricter control over keys, for example.</p>\n\n<h2>UPDATE</h2>\n\n<p>Holy goodness, this answer is getting a lot of attention. (I'm not sure why -- I considered it to be just a \"fun\" little analogy, but whatever.)</p>\n\n<p>I thought it might be germane to update this a bit with a few more technical thoughts.</p>\n\n<p>Compilers are in the business of generating code which manages the storage of the data manipulated by that program. There are lots of different ways of generating code to manage memory, but over time two basic techniques have become entrenched. </p>\n\n<p>The first is to have some sort of \"long lived\" storage area where the \"lifetime\" of each byte in the storage -- that is, the period of time when it is validly associated with some program variable -- cannot be easily predicted ahead of time. The compiler generates calls into a \"heap manager\" that knows how to dynamically allocate storage when it is needed and reclaim it when it is no longer needed.</p>\n\n<p>The second method is to have a \u201cshort-lived\u201d storage area where the lifetime of each byte is well known. Here, the lifetimes follow a \u201cnesting\u201d pattern. The longest-lived of these short-lived variables will be allocated before any other short-lived variables, and will be freed last. Shorter-lived variables will be allocated after the longest-lived ones, and will be freed before them. The lifetime of these shorter-lived variables is \u201cnested\u201d within the lifetime of longer-lived ones.</p>\n\n<p>Local variables follow the latter pattern; when a method is entered, its local variables come alive. When that method calls another method, the new method's local variables come alive. They'll be dead before the first method's local variables are dead.  The relative order of the beginnings and endings of lifetimes of storages associated with local variables can be worked out ahead of time.</p>\n\n<p>For this reason, local variables are usually generated as storage on a \"stack\" data structure, because a stack has the property that the first thing pushed on it is going to be the last thing popped off. </p>\n\n<p>It's like the hotel decides to only rent out rooms sequentially, and you can't check out until everyone with a room number higher than you has checked out. </p>\n\n<p>So let's think about the stack. In many operating systems you get one stack per thread and the stack is allocated to be a certain fixed size. When you call a method, stuff is pushed onto the stack. If you then pass a pointer to the stack back out of your method, as the original poster does here, that's just a pointer to the middle of some entirely valid million-byte memory block. In our analogy, you check out of the hotel; when you do, you just checked out of the highest-numbered occupied room.  If no one else checks in after you, and you go back to your room illegally, all your stuff is guaranteed to still be there <em>in this particular hotel</em>.</p>\n\n<p>We use stacks for temporary stores because they are really cheap and easy. An implementation of C++ is not required to use a stack for storage of locals; it could use the heap. It doesn't, because that would make the program slower. </p>\n\n<p>An implementation of C++ is not required to leave the garbage you left on the stack untouched so that you can come back for it later illegally; it is perfectly legal for the compiler to generate code that turns back to zero everything in the \"room\" that you just vacated. It doesn't because again, that would be expensive.</p>\n\n<p>An implementation of C++ is not required to ensure that when the stack logically shrinks, the addresses that used to be valid are still mapped into memory. The implementation is allowed to tell the operating system \"we're done using this page of stack now. Until I say otherwise, issue an exception that destroys the process if anyone touches the previously-valid stack page\".  Again, implementations do not actually do that because it is slow and unnecessary.</p>\n\n<p>Instead, implementations let you make mistakes and get away with it. Most of the time. Until one day something truly awful goes wrong and the process explodes.</p>\n\n<p>This is problematic. There are a lot of rules and it is very easy to break them accidentally. I certainly have many times. And worse, the problem often only surfaces when memory is detected to be corrupt billions of nanoseconds after the corruption happened, when it is very hard to figure out who messed it up.</p>\n\n<p>More memory-safe languages solve this problem by restricting your power. In \"normal\" C# there simply is no way to take the address of a local and return it or store it for later. You can take the address of a local, but the language is cleverly designed so that it is impossible to use it after the lifetime of the local ends. In order to take the address of a local and pass it back, you have to put the compiler in a special \"unsafe\" mode, <em>and</em> put the word \"unsafe\" in your program, to call attention to the fact that you are probably doing something dangerous that could be breaking the rules. </p>\n\n<p>For further reading:</p>\n\n<ul>\n<li><p>What if C# did allow returning references? Coincidentally that is the subject of today's blog post:</p>\n\n<p><a href=\"https://ericlippert.com/2011/06/23/ref-returns-and-ref-locals/\" rel=\"noreferrer\">https://ericlippert.com/2011/06/23/ref-returns-and-ref-locals/</a></p></li>\n<li><p>Why do we use stacks to manage memory? Are value types in C# always stored on the stack? How does virtual memory work? And many more topics in how the C# memory manager works. Many of these articles are also germane to C++ programmers:</p>\n\n<p><a href=\"https://ericlippert.com/tag/memory-management/\" rel=\"noreferrer\">https://ericlippert.com/tag/memory-management/</a></p></li>\n</ul>\n    </div>", "total_vectors": [0.06859338283538818, 0.01342081744223833, -0.07190710306167603, -0.02409653551876545, -0.04638582468032837, -0.0016193260671570897, -0.02237083949148655, -0.018031561747193336, 0.03525445982813835, 0.04624110087752342, 0.004314984194934368, 0.0829220712184906, -0.06452199816703796, 0.05397528037428856, -0.026540227234363556, 0.08921705186367035, -0.013688835315406322, 0.06817526370286942, 0.06824624538421631, -0.046729035675525665, -0.008107642643153667, 0.039450861513614655, 0.03000304289162159, -0.02932768315076828, -0.03277542069554329, 0.06133551895618439, 0.04272919520735741, -0.037020064890384674, 0.026187539100646973, -0.0369613915681839, -0.08625897765159607, 0.06308966130018234, -0.014666460454463959, -0.07300936430692673, 0.04963303729891777, 0.06295439600944519, -0.04805716127157211, 0.0740203857421875, -0.01090104877948761, -0.04094034060835838, 0.04605183005332947, 0.044601764529943466, -0.014490405097603798, 0.026029549539089203, 0.0432453490793705, -0.021695857867598534, -0.021142270416021347, 0.0743756964802742, -0.03109888918697834, -0.015622491016983986, 0.002946600317955017, 0.08875525742769241, 0.06913352757692337, 0.059621863067150116, 0.02157522179186344, 0.04751269519329071, -0.02518622763454914, -0.0028081024065613747, -0.044117338955402374, -0.06366575509309769, -0.013732105493545532, -0.000683486694470048, 0.054207105189561844, -0.06800248473882675, 0.06513575464487076, -0.06001873314380646, -0.07025386393070221, 0.051835786551237106, -0.030071550980210304, 0.036425963044166565, -0.014303872361779213, 0.032737016677856445, 0.06283792853355408, -0.025905940681695938, 0.005214346572756767, 0.038168080151081085, 0.007159939035773277, 0.04904044792056084, -0.025513911619782448, 0.04779120162129402, 0.049803078174591064, -0.07730787992477417, -0.036613933742046356, 0.0431978777050972, 0.07893159985542297, 0.028052600100636482, 0.026899192482233047, 0.05421935021877289, 0.007565573323518038, -0.030282754451036453, 0.058233842253685, -0.058493468910455704, -0.02622907981276512, 0.038715895265340805, 0.025399120524525642, 0.05565541982650757, 0.008424905128777027, -0.022450000047683716, -0.008945520967245102, -0.07238851487636566, 0.06910323351621628, 0.025566302239894867, -0.01896834559738636, -0.003882407210767269, 0.006632828153669834, 0.0565602108836174, -0.05161616951227188, 0.01776237227022648, 0.058502163738012314, -0.0035663621965795755, 0.006874924059957266, 0.0649162009358406, -0.04961620643734932, 0.041303426027297974, 0.026612378656864166, 0.04543505981564522, 0.05721189081668854, -0.03913333639502525, 0.04983991011977196, -0.010905943810939789, -0.06709229946136475, 0.05727383866906166, 0.017799705266952515, -0.010758185759186745, 0.0019579289946705103, 0.012863357551395893, -0.032779451459646225, -0.02171284332871437, 0.03146927058696747, -0.01993182860314846, 0.08402065932750702, 0.04869280010461807, -0.02280387282371521, -0.08608655631542206, 0.03949012607336044, -0.0507693737745285, 0.03620073199272156, -0.03814026713371277, -0.012668641284108162, -0.03510640189051628, 0.009252185933291912, -0.022957690060138702, -0.06293770670890808, -0.02658032439649105, 0.03700023517012596, -0.07538246363401413, 0.0643247440457344, 0.04491075500845909, 0.008724254556000233, 0.015350599773228168, 0.021420899778604507, -0.020130136981606483, 0.015840629115700722, -0.017272980883717537, 0.011771660298109055, -0.031881026923656464, -0.0268340352922678, -0.043931882828474045, -0.0221517663449049, 0.05635618045926094, -0.041432008147239685, 0.0656011775135994, -0.03607882186770439, 0.0035498379729688168, 0.01149602048099041, 0.022621193900704384, 0.07617615908384323, -0.05225876718759537, 0.03671003878116608, 0.032880011945962906, -0.0419013611972332, 0.0017067348817363381, 0.03877118602395058, 0.04906253144145012, 0.016617700457572937, 0.0037136583123356104, -0.04131554812192917, 0.04375489801168442, -0.04231230914592743, -0.01944407820701599, 0.06030185893177986, -0.006985103711485863, 0.014757842756807804, -0.05144364386796951, 0.058341775089502335, 0.019524725154042244, 0.052361976355314255, 0.041905131191015244, -0.0031503525096923113, 0.03642028570175171, 0.08669456839561462, 0.06113762408494949, -0.05686020851135254, -0.05706474184989929, 0.032602742314338684, 0.05209305137395859, 0.004355523735284805, 0.07890234142541885, -0.002269531600177288, -0.007650007493793964, -0.024098508059978485, -0.05816687270998955, 0.03767715394496918, -0.008750244043767452, -0.04770258441567421, -0.012916628271341324, 0.05248328298330307, 0.05482397973537445, -0.07533658295869827, 0.007217784412205219, -0.03944810479879379, 0.02590756118297577, -0.018070481717586517, -0.02078070677816868, 0.07095178961753845, 0.02548958733677864, 0.0037665076088160276, 0.003878945019096136, 0.01563005894422531, -0.03316148370504379, -0.04447983205318451, 0.05628441274166107, 0.04293665662407875, 0.015955915674567223, -0.04029380902647972, 0.007540687918663025, 0.04082376882433891, -0.06441505253314972, 0.05811982601881027, 0.039209019392728806, -0.006452447269111872, -0.04629286378622055, 0.042623307555913925, -0.04988656938076019, 0.08146238327026367, -0.07768355309963226, 0.053665537387132645, -0.019117875024676323, 0.003687986871227622, -0.00280783511698246, 0.03486257791519165, -0.0040757241658866405, 0.05721689760684967, 0.04474863409996033, 0.019913747906684875, 0.0400925911962986, 0.03485983982682228, -0.07884327322244644, -0.0900115892291069, 0.06989733129739761, -0.07265409827232361, 0.0011075792135670781, 0.008914689533412457, 0.015141964890062809, -0.01266381423920393, 0.019223107025027275, 0.05359341576695442, -0.07521340250968933, 0.0020112672355026007, -0.014995732344686985, -0.028768207877874374, 0.061434101313352585, -0.08457852154970169, -0.03921543061733246, -0.008124087937176228, 0.05724526196718216, -0.016710758209228516, 0.023426011204719543, 0.07652795314788818, 0.0037644344847649336, -0.07587269693613052, -0.07017374038696289, -0.010731827467679977, 0.05269531533122063, -0.06713671237230301, 0.029998917132616043, 0.06295730918645859, -0.03809857368469238, 0.018365688621997833, 0.005083958152681589, -0.041248250752687454, 0.028176963329315186, 0.032459136098623276, 0.07474089413881302, -0.02209208905696869, -0.07054165005683899, -0.009735802188515663, 0.034136008471250534, 0.023659585043787956, -0.053461551666259766, 0.05518428236246109, -0.024737421423196793, 0.03354080766439438, -0.02462613955140114, -0.01787000149488449, 0.01658354513347149, 0.031738750636577606, -0.02672688104212284, -0.023573964834213257, -0.022842684760689735, -0.002817898290231824, -0.009175015613436699, 0.019175982102751732, 0.06613847613334656, -0.07022950053215027, -0.039959073066711426, -0.00215667812153697, 0.010304856114089489, -0.06886226683855057, 0.008624283596873283, -0.019271403551101685, 0.060038357973098755, -0.005796719342470169, 0.08039582520723343, -0.039966732263565063, 0.042088583111763, -0.05210985615849495, -0.04999411106109619, 0.009938701055943966, -0.03873654454946518, 0.049294229596853256, -0.07911237329244614, -0.047804202884435654, -0.03265838697552681, 0.04678678512573242, -0.0037006910424679518, 0.030677346512675285, -0.01892518810927868, 0.001211971859447658, 0.02199322171509266, -0.008823641575872898, -0.00806040596216917, 0.07169701904058456, -0.019318636506795883, 0.02949202060699463, -0.06539354473352432, 0.025746306404471397, -0.058552805334329605, 0.054072219878435135, -0.06360931694507599, -0.014367463998496532, 0.01329120434820652, -0.02050577662885189, 0.06887874752283096, -0.08917606621980667, -0.02757968194782734, 0.06209813058376312, -0.06372322887182236, -0.08476582914590836, 0.029277212917804718, 0.010612416081130505, 0.07935596257448196, -0.006149643566459417, 0.025447966530919075, -0.0026141118723899126, 0.00491533474996686, -0.08851125091314316, -0.02231120504438877, 0.008319081738591194, 0.03847499191761017, -0.0486605241894722, -0.04028509929776192, -0.08158669620752335, 0.03589950501918793, -0.03353945165872574, -0.0009817755781114101, -0.06337910890579224, 0.016329310834407806, 0.0070694927126169205, -0.012251878157258034, 0.024664072319865227, -0.01245908997952938, 0.027161266654729843, 2.3670127120567486e-05, -0.052145104855298996, -0.06237621605396271, 0.05467817559838295, -0.03090955689549446, 0.0278523750603199, -0.052285004407167435, -0.06436464935541153, -0.04513515904545784, 0.0023597371764481068, -0.03654253110289574, 0.043379753828048706, -0.0518396832048893, 0.07283003628253937, -0.017023028805851936, -0.04632579907774925, 0.009852685034275055, -0.03221564739942551, -0.02080402709543705, -0.03688477724790573, -0.029866158962249756, -0.05705472454428673, -0.035084836184978485, -0.06530508399009705, -0.05962531268596649, -0.06813011318445206, 0.017762573435902596, -0.009804299101233482, -0.03314610943198204, 0.038527943193912506, -0.035367127507925034, 0.0568140484392643, -0.017876774072647095, -0.04946324974298477, 0.028271393850445747, 0.03990195691585541, 0.07929567992687225, -0.03234048932790756, -0.011015219613909721, -0.031994037330150604, 0.05998392403125763, 0.01986975409090519, -0.043311621993780136, 0.004114614333957434, 0.02807050198316574, 0.013505123555660248, 0.06407181173563004, 0.05533088743686676, -0.019607942551374435, 0.07119276374578476, -0.005644354037940502, -0.0009149465477094054, -0.03888264298439026, -0.046046365052461624, 0.04702480509877205, -0.06276164203882217, -0.031117448583245277, -0.04187470301985741, -0.04195054993033409, 0.018855303525924683, 0.008171589113771915, -0.021249551326036453, 0.06748231500387192, -0.06269370019435883, 0.04575516656041145, 0.07381455600261688, -0.01385045237839222, -0.051666874438524246, -0.009128005243837833, -0.017925677821040154, 0.01226925291121006, -0.022217383608222008, 0.06872715801000595, 0.04767979681491852, 0.02833184227347374, 0.00136749935336411, -0.023666931316256523, -0.019005930051207542, 0.04537806287407875, 0.08867239952087402, 0.003513116855174303, 0.03761134669184685, -0.03446498513221741, 0.07764595001935959, -0.039832744747400284, 0.011455892585217953, 0.026896128430962563, -0.05854586511850357, -0.02923172153532505, -0.08239121735095978, -0.07403338700532913, -0.021350262686610222, -0.033048443496227264, -0.03638940304517746, -0.062472883611917496, 0.0675143226981163, 0.07873516529798508, 0.06600147485733032, 0.07637935876846313, 0.01586616039276123, 0.01625650003552437, -0.052915893495082855, -0.07403498888015747, 0.008766887709498405, 0.03407387435436249, -0.06119823828339577, -0.028180712834000587, -0.05353411287069321, -0.006384552456438541, -0.02014838345348835, -0.04574309661984444, 0.03278977423906326, 0.013324177823960781, -0.08174485713243484, -0.05183015391230583, 0.03867182508111, 0.0036736251786351204, 0.023192334920167923, 0.0010311936493963003, 0.05884581431746483, -0.016583681106567383, 0.027297480031847954, 0.06825258582830429, 0.008395262993872166, -0.001651101978495717, -0.03273024410009384, 0.05013064295053482, 0.046005729585886, 0.04074149206280708, -0.07635185122489929, 0.06665431708097458, -0.039430882781744, -0.04836185276508331, 0.06899171322584152, -0.013735800981521606, 0.015316992066800594, 0.006328905001282692, 0.05393129959702492, -0.008420607075095177]},
{"question": "What are the basic rules and idioms for operator overloading?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>Note: The answers were given in <em>a specific order</em>, but since many users sort answers according to votes, rather than the time they were given, here's an <em><strong>index of the answers</strong></em> in the order in which they make the most sense:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/4421706/operator-overloading-in-c/4421715#4421715\">The General Syntax of operator overloading in C++</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4421706/operator-overloading-in-c/4421708#4421708\">The Three Basic Rules of Operator Overloading in C++</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4421706/operator-overloading-in-c/4421729#4421729\">The Decision between Member and Non-member</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4421706/operator-overloading-in-c/4421719#4421719\">Common operators to overload</a></li>\n<li>Assignment Operator</li>\n<li>Input and Output Operators</li>\n<li>Function call operator</li>\n<li>Comparison operators</li>\n<li>Arithmetic Operators</li>\n<li>Array Subscripting</li>\n<li>Operators for Pointer-like Types</li>\n<li><a href=\"https://stackoverflow.com/questions/4421706/operator-overloading/16615725#16615725\">Conversion Operators</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4421706/operator-overloading-in-c/4421791#4421791\">Overloading new and delete</a></li>\n</ul>\n<p><sub><em>(Note: This is meant to be an entry to <a href=\"https://stackoverflow.com/questions/tagged/c++-faq\">Stack Overflow's C++ FAQ</a>. If you want to critique the idea of providing an FAQ in this form, then <a href=\"https://meta.stackexchange.com/questions/68647/setting-up-a-faq-for-the-c-tag\">the posting on meta that started all this</a> would be the place to do that. Answers to that question are monitored in the <a href=\"https://chat.stackoverflow.com/rooms/10/c-lounge\">C++ chatroom</a>, where the FAQ idea started in the first place, so your answer is very likely to get read by those who came up with the idea.)</em>\n</sub></p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<h1>Common operators to overload</h1>\n\n<p>Most of the work in overloading operators is boiler-plate code. That is little wonder, since operators are merely syntactic sugar, their actual work could be done by (and often is forwarded to) plain functions. But it is important that you get this boiler-plate code right. If you fail, either your operator\u2019s code won\u2019t compile or your users\u2019 code won\u2019t compile or your users\u2019 code will behave surprisingly.</p>\n\n<h2>Assignment Operator</h2>\n\n<p>There's a lot to be said about assignment. However, most of it has already been said in <a href=\"https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom\">GMan's famous Copy-And-Swap FAQ</a>, so I'll skip most of it here, only listing the perfect assignment operator for reference:</p>\n\n<pre><code>X&amp; X::operator=(X rhs)\n{\n  swap(rhs);\n  return *this;\n}\n</code></pre>\n\n<h2>Bitshift Operators (used for Stream I/O)</h2>\n\n<p>The bitshift operators <code>&lt;&lt;</code> and <code>&gt;&gt;</code>, although still used in hardware interfacing for the bit-manipulation functions they inherit from C, have become more prevalent as overloaded stream input and output operators in most applications.  For guidance overloading as bit-manipulation operators, see the section below on Binary Arithmetic Operators.  For implementing your own custom format and parsing logic when your object is used with iostreams, continue.</p>\n\n<p>The stream operators, among the most commonly overloaded operators, are binary infix operators for which the syntax specifies no restriction on whether they should be members or non-members.\nSince they change their left argument (they alter the stream\u2019s state), they should, according to the rules of thumb, be implemented as members of their left operand\u2019s type. However, their left operands are streams from the standard library, and while most of the stream output and input operators defined by the standard library are indeed defined as members of the stream classes, when you implement output and input operations for your own types, you cannot change the standard library\u2019s stream types. That\u2019s why you need to implement these operators for your own types as non-member functions.\nThe canonical forms of the two are these:</p>\n\n<pre><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const T&amp; obj)\n{\n  // write obj to stream\n\n  return os;\n}\n\nstd::istream&amp; operator&gt;&gt;(std::istream&amp; is, T&amp; obj)\n{\n  // read obj from stream\n\n  if( /* no valid object of T found in stream */ )\n    is.setstate(std::ios::failbit);\n\n  return is;\n}\n</code></pre>\n\n<p>When implementing <code>operator&gt;&gt;</code>, manually setting the stream\u2019s state is only necessary when the reading itself succeeded, but the result is not what would be expected.</p>\n\n<h2>Function call operator</h2>\n\n<p>The function call operator, used to create function objects, also known as functors, must be defined as a <strong><em>member</em></strong> function, so it always has the implicit <code>this</code> argument of member functions. Other than this, it can be overloaded to take any number of additional arguments, including zero.</p>\n\n<p>Here's an example of the syntax:</p>\n\n<pre><code>class foo {\npublic:\n    // Overloaded call operator\n    int operator()(const std::string&amp; y) {\n        // ...\n    }\n};\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>foo f;\nint a = f(\"hello\");\n</code></pre>\n\n<p>Throughout the C++ standard library, function objects are always copied. Your own function objects should therefore be cheap to copy. If a function object absolutely needs to use data which is expensive to copy, it is better to store that data elsewhere and have the function object refer to it.</p>\n\n<h2>Comparison operators</h2>\n\n<p>The binary infix comparison operators should, according to the rules of thumb, be implemented as non-member functions<sup>1</sup>. The unary prefix negation <code>!</code> should (according to the same rules) be implemented as a member function. (but it is usually not a good idea to overload it.)</p>\n\n<p>The standard library\u2019s algorithms (e.g. <code>std::sort()</code>) and types (e.g. <code>std::map</code>) will always only expect <code>operator&lt;</code> to be present. However, the <em>users of your type will expect all the other operators to be present</em>, too, so if you define <code>operator&lt;</code>, be sure to follow the third fundamental rule of operator overloading and also define all the other boolean comparison operators. The canonical way to implement them is this:</p>\n\n<pre><code>inline bool operator==(const X&amp; lhs, const X&amp; rhs){ /* do actual comparison */ }\ninline bool operator!=(const X&amp; lhs, const X&amp; rhs){return !operator==(lhs,rhs);}\ninline bool operator&lt; (const X&amp; lhs, const X&amp; rhs){ /* do actual comparison */ }\ninline bool operator&gt; (const X&amp; lhs, const X&amp; rhs){return  operator&lt; (rhs,lhs);}\ninline bool operator&lt;=(const X&amp; lhs, const X&amp; rhs){return !operator&gt; (lhs,rhs);}\ninline bool operator&gt;=(const X&amp; lhs, const X&amp; rhs){return !operator&lt; (lhs,rhs);}\n</code></pre>\n\n<p>The important thing to note here is that only two of these operators actually do anything, the others are just forwarding their arguments to either of these two to do the actual work.</p>\n\n<p>The syntax for overloading the remaining binary boolean operators (<code>||</code>, <code>&amp;&amp;</code>) follows the rules of the comparison operators. However, it is <em>very</em> unlikely that you would find a reasonable use case for these<sup>2</sup>.</p>\n\n<p><sup>1</sup> <sub>As with all rules of thumb, sometimes there might be reasons to break this one, too. If so, do not forget that the left-hand operand of the binary comparison operators, which for member functions will be <code>*this</code>, needs to be <code>const</code>, too. So a comparison operator implemented as a member function would have to have this signature:</sub></p>\n\n<pre><code>bool operator&lt;(const X&amp; rhs) const { /* do actual comparison with *this */ }\n</code></pre>\n\n<p><sub>(Note the <code>const</code> at the end.)</sub></p>\n\n<p><sup>2</sup> <sub>It should be noted that the built-in version of <code>||</code> and <code>&amp;&amp;</code> use shortcut semantics. While the user defined ones (because they are syntactic sugar for method calls) do not use shortcut semantics. User will expect these operators to have shortcut semantics, and their code may depend on it, Therefore it is highly advised NEVER to define them.</sub></p>\n\n<h2>Arithmetic Operators</h2>\n\n<h3>Unary arithmetic operators</h3>\n\n<p>The unary increment and decrement operators come in both prefix and postfix flavor. To tell one from the other, the postfix variants take an additional dummy int argument. If you overload increment or decrement, be sure to always implement both prefix and postfix versions.\nHere is the canonical implementation of increment, decrement follows the same rules:</p>\n\n<pre><code>class X {\n  X&amp; operator++()\n  {\n    // do actual increment\n    return *this;\n  }\n  X operator++(int)\n  {\n    X tmp(*this);\n    operator++();\n    return tmp;\n  }\n};\n</code></pre>\n\n<p>Note that the postfix variant is implemented in terms of prefix. Also note that postfix does an extra copy.<sup>2</sup></p>\n\n<p>Overloading unary minus and plus is not very common and probably best avoided. If needed, they should probably be overloaded as member functions. </p>\n\n<p><sup>2</sup> <sub>Also note that the postfix variant does more work and is therefore less efficient to use than the prefix variant. This is a good reason to generally prefer prefix increment over postfix increment. While compilers can usually optimize away the additional work of postfix increment for built-in types, they might not be able to do the same for user-defined types (which could be something as innocently looking as a list iterator). Once you got used to do <code>i++</code>, it becomes very hard to remember to do <code>++i</code> instead when <code>i</code> is not of a built-in type (plus you'd have to change code when changing a type), so it is better to make a habit of always using prefix increment, unless postfix is explicitly needed.</sub></p>\n\n<h3>Binary arithmetic operators</h3>\n\n<p>For the binary arithmetic operators, do not forget to obey the third basic rule operator overloading: If you provide <code>+</code>, also provide <code>+=</code>, if you provide <code>-</code>, do not omit <code>-=</code>, etc. Andrew Koenig is said to have been the first to observe that the compound assignment operators can be used as a base for their non-compound counterparts. That is, operator <code>+</code> is implemented in terms of <code>+=</code>, <code>-</code> is implemented in terms of <code>-=</code> etc.</p>\n\n<p>According to our rules of thumb, <code>+</code> and its companions should be non-members, while their compound assignment counterparts (<code>+=</code> etc.), changing their left argument, should be a member. Here is the exemplary code for <code>+=</code> and <code>+</code>; the other binary arithmetic operators should be implemented in the same way:</p>\n\n<pre><code>class X {\n  X&amp; operator+=(const X&amp; rhs)\n  {\n    // actual addition of rhs to *this\n    return *this;\n  }\n};\ninline X operator+(X lhs, const X&amp; rhs)\n{\n  lhs += rhs;\n  return lhs;\n}\n</code></pre>\n\n<p><code>operator+=</code> returns its result per reference, while <code>operator+</code> returns a copy of its result. Of course, returning a reference is usually more efficient than returning a copy, but in the case of <code>operator+</code>, there is no way around the copying. When you write <code>a + b</code>, you expect the result to be a new value, which is why <code>operator+</code> has to return a new value.<sup>3</sup>\nAlso note that <code>operator+</code> takes its left operand <strong><em>by copy</em></strong> rather than by const reference. The reason for this is the same as the reason giving for <code>operator=</code> taking its argument per copy.</p>\n\n<p>The bit manipulation operators <code>~</code> <code>&amp;</code> <code>|</code> <code>^</code> <code>&lt;&lt;</code> <code>&gt;&gt;</code> should be implemented in the same way as the arithmetic operators. However, (except for overloading <code>&lt;&lt;</code> and <code>&gt;&gt;</code> for output and input) there are very few reasonable use cases for overloading these.</p>\n\n<p><sup>3</sup> <sub>Again, the lesson to be taken from this is that <code>a += b</code> is, in general, more efficient than <code>a + b</code> and should be preferred if possible.</sub></p>\n\n<h2>Array Subscripting</h2>\n\n<p>The array subscript operator is a binary operator which must be implemented as a class member. It is used for container-like types that allow access to their data elements by a key.\nThe canonical form of providing these is this:</p>\n\n<pre><code>class X {\n        value_type&amp; operator[](index_type idx);\n  const value_type&amp; operator[](index_type idx) const;\n  // ...\n};\n</code></pre>\n\n<p>Unless you do not want users of your class to be able to change data elements returned by <code>operator[]</code> (in which case you can omit the non-const variant), you should always provide both variants of the operator.</p>\n\n<p>If value_type is known to refer to a built-in type, the const variant of the operator should better return a copy instead of a const reference:</p>\n\n<pre><code>class X {\n  value_type&amp; operator[](index_type idx);\n  value_type  operator[](index_type idx) const;\n  // ...\n};\n</code></pre>\n\n<h2>Operators for Pointer-like Types</h2>\n\n<p>For defining your own iterators or smart pointers, you have to overload the unary prefix dereference operator <code>*</code> and the binary infix pointer member access operator <code>-&gt;</code>:</p>\n\n<pre><code>class my_ptr {\n        value_type&amp; operator*();\n  const value_type&amp; operator*() const;\n        value_type* operator-&gt;();\n  const value_type* operator-&gt;() const;\n};\n</code></pre>\n\n<p>Note that these, too, will almost always need both a const and a non-const version.\nFor the <code>-&gt;</code> operator, if <code>value_type</code> is of <code>class</code> (or <code>struct</code> or <code>union</code>) type, another <code>operator-&gt;()</code> is called recursively, until an <code>operator-&gt;()</code> returns a value of non-class type.</p>\n\n<p>The unary address-of operator should never be overloaded.</p>\n\n<p>For <code>operator-&gt;*()</code> see <a href=\"https://stackoverflow.com/q/8777845/140719\">this question</a>. It's rarely used and thus rarely ever overloaded. In fact, even iterators do not overload it.</p>\n\n<hr>\n\n<p>Continue to <a href=\"https://stackoverflow.com/questions/4421706/operator-overloading/16615725#16615725\">Conversion Operators</a></p>\n    </div>", "total_vectors": [0.03623747080564499, -0.07630813121795654, 0.04929971694946289, 0.03868318721652031, 0.02413356304168701, 0.03138047456741333, -0.014143891632556915, 0.03848095238208771, -0.06330285966396332, 0.01592104509472847, -0.007996423169970512, 0.0003474364639259875, -0.023485712707042694, -0.046506814658641815, -0.03385477885603905, 0.08297745138406754, 0.025759590789675713, 0.05743183568120003, 0.0017539331456646323, 0.040715377777814865, 0.05728476122021675, 0.04157494008541107, -0.0680404007434845, -0.014995841309428215, 0.0411091186106205, -0.008623210713267326, -0.001261062570847571, -0.05042373016476631, 0.04875395447015762, 0.03836089000105858, 0.04284884035587311, 0.029079757630825043, -0.06526242196559906, 0.03821026161313057, 0.0020588182378560305, -0.01010170578956604, 0.04796027019619942, -0.0357423797249794, -0.012139016762375832, 0.07073544710874557, 0.017374921590089798, -0.009548014961183071, 0.049859147518873215, -0.008722054772078991, 0.012790920212864876, 0.041700221598148346, -0.05511682108044624, 0.01995125226676464, 0.028104577213525772, -0.015190157108008862, -0.03988780081272125, 0.08912447094917297, -0.025480376556515694, -0.06372682005167007, 0.008879576809704304, 0.03173995763063431, 0.0295126773416996, -0.06749732792377472, 0.04289192706346512, -0.03797713294625282, -0.03919406607747078, 0.07645753026008606, -0.0038626922760158777, -0.014052738435566425, -0.003583471290767193, -0.030552973970770836, 0.03366084769368172, -0.03822094202041626, 0.0363476537168026, -0.019094521179795265, 0.04017278924584389, 0.07000385224819183, 0.062153641134500504, 0.04202467203140259, -0.025512605905532837, -0.013393798843026161, -0.06879818439483643, -0.06247768551111221, 0.020497886463999748, 0.04671734198927879, -0.013929950073361397, 0.006901506334543228, 0.03780173137784004, 0.042378611862659454, 0.07664714008569717, -0.029501449316740036, 0.06718484312295914, 0.04255037382245064, -0.08266334235668182, 0.008442970924079418, -0.006092261057347059, 0.03286518156528473, 0.017084091901779175, 0.052751656621694565, -0.0315176323056221, 0.04500706121325493, -0.06438040733337402, 0.03866623714566231, -0.04655686393380165, -0.07844270020723343, 0.01055221538990736, 0.03768930956721306, -0.0494883731007576, -0.008769745007157326, 0.06623302400112152, 0.01428244635462761, -0.06013118103146553, -0.0012581245973706245, -0.056743916124105453, 0.01088065467774868, 0.043202128261327744, -0.06149671599268913, 0.021048612892627716, -0.06868387758731842, -0.02039180137217045, -0.023633144795894623, -0.08240187168121338, 0.03428222984075546, -0.050256479531526566, -0.013599644415080547, -0.04657479003071785, -0.030199725180864334, -0.004889444448053837, -0.013869782909750938, 0.03637195751070976, -0.04041709378361702, -0.02362614870071411, -0.052293919026851654, 0.06945372372865677, 0.034297291189432144, -0.021513182669878006, 0.017070164903998375, 0.0027378983795642853, -0.08079753071069717, -0.028367042541503906, -0.027069251984357834, 0.019470836967229843, -0.07355084270238876, -0.030789850279688835, 0.01936238259077072, 0.07460310310125351, -0.015220713801681995, 0.008552155457437038, 0.038497161120176315, -0.08473790436983109, -0.08376647531986237, 0.018998827785253525, -0.008937683887779713, -0.022691898047924042, -0.011311771348118782, -0.019829628989100456, 0.025233743712306023, -0.03751888871192932, 0.0443495512008667, -0.0704837292432785, -0.0030347988940775394, -0.03178929165005684, 0.05776958540081978, 0.014436245895922184, -0.03048619069159031, 0.07872377336025238, 0.07747171819210052, 0.05322488024830818, 0.04139162227511406, -0.00793147087097168, 0.04782557860016823, -0.037139881402254105, -0.033011745661497116, 0.0009267639252357185, -0.03839270770549774, 0.050130393356084824, 0.009933127090334892, 0.028490116819739342, -0.010624420829117298, 0.05980290472507477, -0.014592153951525688, -0.013035655952990055, 0.0026110049802809954, 0.02489970624446869, 0.043101247400045395, -0.029793860390782356, -0.037617579102516174, 0.01829637959599495, 0.0680922120809555, 0.07025263458490372, -0.026304837316274643, 0.055238958448171616, 0.05188203975558281, -0.0519370399415493, -0.010745285078883171, 0.08876853436231613, 0.02878127247095108, 0.038925476372241974, -0.027849571779370308, -0.07638697326183319, -0.023878788575530052, 0.05588778853416443, 0.08210503309965134, -0.018249966204166412, 0.005917907226830721, -0.08396163582801819, 0.02025577612221241, 0.03446390852332115, -0.04512370750308037, 0.03709059953689575, 0.024671584367752075, 0.06735487282276154, 0.0704743042588234, -0.058902788907289505, -0.019362619146704674, -0.03131932392716408, 0.05490345135331154, -0.022093040868639946, -0.014490930363535881, 0.06937259435653687, -0.013496155850589275, -0.053312964737415314, -0.007056571077555418, 0.020299073308706284, -0.02376316860318184, -0.013840602710843086, 0.032750777900218964, -0.034798797219991684, 0.07949818670749664, 0.014911470003426075, -0.0752880796790123, 0.005654727574437857, 0.005662316456437111, 0.07134302705526352, -0.030366603285074234, -0.04106076806783676, 0.07492873072624207, -0.003974547144025564, -0.0577663779258728, 0.035704489797353745, -0.06286944448947906, 0.06583507359027863, -0.034320130944252014, -0.02235191874206066, 0.04564701020717621, -0.005880715325474739, -0.04359571263194084, -0.044352151453495026, -0.038288962095975876, 0.027652110904455185, 0.08285550773143768, 0.0396139919757843, 0.03787975385785103, 0.08887150883674622, 0.067787766456604, -0.05780242756009102, -0.008056842721998692, 0.061389900743961334, 0.052462220191955566, -0.0027934641111642122, -0.07435811311006546, 0.023143591359257698, -0.05941520258784294, 0.063047856092453, 0.009753908030688763, -0.06000636890530586, 0.06505938619375229, 0.02949928306043148, -0.04762188345193863, -0.04787308722734451, -0.01965201273560524, -0.012290667742490768, -0.06625209748744965, -0.055153246968984604, 0.0020290538668632507, -0.07480418682098389, -0.08240141719579697, 0.008482490666210651, 0.02960333786904812, -0.0675056129693985, 0.010362536646425724, 0.013281798921525478, 0.025759847834706306, 0.038473889231681824, 0.020814096555113792, 0.05603288114070892, -0.01807871274650097, -0.060966216027736664, -0.0221951212733984, 0.0598255954682827, -0.04632440581917763, 0.009894081391394138, 0.046436335891485214, -0.008016032166779041, -0.04734602943062782, 0.0004280922294128686, 0.018473977223038673, -0.012182803824543953, -0.04957716912031174, 0.04623773321509361, 0.07216517627239227, -0.028763554990291595, 0.030855625867843628, 0.03067106194794178, 0.02242966927587986, -0.01130081620067358, -0.030887097120285034, 0.028563864529132843, 0.05531184375286102, -0.00296209380030632, 0.03949299454689026, 0.052045442163944244, 0.022897519171237946, 0.031233668327331543, 0.04598245769739151, -0.041905708611011505, 0.02883436717092991, -0.03953307867050171, 0.021092001348733902, -0.034191977232694626, 0.06346742063760757, -0.0035251204390078783, 0.06864822655916214, 0.054569948464632034, -0.04570538178086281, -0.011238271370530128, -0.02548046037554741, -0.014755437150597572, -0.039589572697877884, 0.012147938832640648, -0.0636826902627945, 0.005900583695620298, 0.039822354912757874, 0.0387394092977047, -0.06137216091156006, -0.058670397847890854, -0.055981721729040146, -0.037649355828762054, -0.08321341127157211, -0.014398321509361267, -0.03762606158852577, 0.012576895765960217, -0.009909304790198803, 0.05504312738776207, 0.031760551035404205, -0.02611490525305271, 0.03996361047029495, 0.053627368062734604, -0.07079653441905975, -0.08270558714866638, 0.02505604922771454, 0.07949414104223251, -0.04331052675843239, 0.045085057616233826, -0.00787047203630209, 0.01333744265139103, 0.038181647658348083, -0.05590950325131416, 0.013811837881803513, -0.0462266206741333, 0.0017120601842179894, -0.08632241189479828, -0.020213527604937553, -0.0104896891862154, -0.05638507381081581, -0.007640582975000143, 0.002767357509583235, -0.042881377041339874, -0.0683782547712326, 0.010015790350735188, -0.0018214754527434707, -0.06051680073142052, 0.01930498518049717, -0.044004250317811966, 0.030602095648646355, 0.020518269389867783, -0.047045089304447174, 0.056395724415779114, 0.06921334564685822, 0.011709010228514671, -0.037805575877428055, 0.000468529382487759, -0.03492904454469681, -0.04832815006375313, -0.0018986674258485436, -0.028749192133545876, 0.008301104418933392, -0.069462850689888, 0.015197343192994595, -0.0513741672039032, -0.05772891640663147, -0.013697396963834763, 0.055945396423339844, 0.04003417491912842, -0.026712948456406593, 0.006966845132410526, -0.05786467343568802, -0.049282606691122055, 0.02473715879023075, 0.031086862087249756, -0.047995954751968384, -0.03614430129528046, 0.07824806123971939, 0.00964786484837532, 0.0800541341304779, -0.025860685855150223, -0.03688327968120575, -0.026698408648371696, -0.05748586356639862, -0.048166148364543915, 0.006702659651637077, -0.04330918565392494, -0.07065050303936005, -0.05202830582857132, 0.0443897470831871, -0.05792424455285072, -0.02890208177268505, 0.035212550312280655, 0.08092903345823288, -0.04809710755944252, 0.048556849360466, 0.016009708866477013, 0.08076128363609314, -0.008594871498644352, -0.04711579158902168, -0.053577639162540436, 0.04764443635940552, -0.024701254442334175, -0.06909871101379395, 0.05343606695532799, 0.035710401833057404, 0.007895381189882755, 0.05642444267868996, 0.053325507789850235, 0.05403916910290718, 0.03391121327877045, 0.046703923493623734, 0.027459805831313133, -0.043579407036304474, -0.017812248319387436, 0.024319251999258995, 0.007020864635705948, 0.08134405314922333, -0.02334081195294857, 0.02927037701010704, 0.05302586033940315, 0.059003330767154694, 0.03371252864599228, -0.03371599689126015, -0.05888000875711441, 0.008160151541233063, 0.045368146151304245, 0.07702677696943283, -0.007575510069727898, -0.010361647233366966, -0.0014633045066148043, 0.032224927097558975, 0.08018874377012253, -0.06158369779586792, -0.037066176533699036, -0.06903310120105743, 0.0631808489561081, -0.047663845121860504, 0.007469974923878908, -0.015374721959233284, 0.051286689937114716, 0.07400491833686829, 0.05863276496529579, -0.06463022530078888, 0.002356512239202857, -0.07898814231157303, 0.013814041391015053, 0.02987195923924446, -0.08613385260105133, -0.006875709164887667, -0.05929301679134369, 0.0038359235040843487, 0.05012490600347519, -0.061024803668260574, 0.011002457700669765, -0.06468377262353897, -0.0036399608943611383, 0.0599699430167675, 0.056708913296461105, -0.05721360445022583, 0.01116691343486309, 0.041541580110788345, 0.048838432878255844, -0.07030589133501053, 0.016544919461011887, 0.06603964418172836, -0.01988488808274269, 0.014788693748414516, 0.046531856060028076, -0.07243717461824417, -0.007481085602194071, 0.009171828627586365, -0.02271026372909546, 0.006847789045423269, 0.031685344874858856, 0.02211899124085903, 0.03364243730902672, 0.027932677417993546, 0.04985319823026657, -0.03484388813376427, 0.010027124546468258, -0.03698171675205231, -0.007745211943984032, 0.07907643169164658, 0.07106845080852509, 0.036996159702539444, 0.04924346134066582, -0.015706326812505722, -0.037586282938718796, -0.004098627716302872, 0.02807890810072422, -0.012333917431533337]},
{"question": "Dynamically access object property using variable", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>I'm trying to access a property of an object using a dynamic name. Is this possible?</p>\n\n<pre><code>const something = { bar: \"Foobar!\" };\nconst foo = 'bar';\nsomething.foo; // The idea is to access something.bar, getting \"Foobar!\"\n</code></pre>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>There are <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors\" rel=\"noreferrer\">two ways to access properties</a> of an object:</p>\n<ul>\n<li>Dot notation: <code>something.bar</code></li>\n<li>Bracket notation: <code>something['bar']</code></li>\n</ul>\n<p>The value between the brackets can be any expression. Therefore, if the property name is stored in a variable, you have to use bracket notation:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var something = {\n  bar: 'foo'\n};\nvar foo = 'bar';\n\n// both x = something[foo] and something[foo] = x work as expected\nconsole.log(something[foo]);\nconsole.log(something.bar)</code></pre>\r\n</div>\r\n</div>\r\n\n    </div>", "total_vectors": [0.037742506712675095, -0.029539117589592934, 0.012686054222285748, 0.05983784422278404, -0.05345766618847847, 0.043825168162584305, -0.01241337414830923, -0.04794718697667122, -0.015095082111656666, 0.06394043564796448, 0.05690888687968254, 0.03725016489624977, -0.023541945964097977, 0.06063559651374817, -0.010604928247630596, 0.08072824031114578, -0.0068408711813390255, -0.003654898377135396, 0.042749397456645966, 0.006213400047272444, 0.06764406710863113, 0.007775954902172089, 0.01801772601902485, 0.04887501895427704, 0.050248730927705765, 0.05163923278450966, 0.04395294934511185, -0.01936238817870617, -0.05393189191818237, -0.056860119104385376, -0.0660388320684433, 0.016911355778574944, 0.005637509748339653, -0.0599539652466774, -8.468737360090017e-05, -0.015233060345053673, -0.07089781016111374, -0.04680807515978813, 0.04133263975381851, 0.016187090426683426, 0.024397261440753937, 0.037243738770484924, -0.03270045667886734, 0.051811739802360535, 0.0803925096988678, 0.012585729360580444, -0.06612567603588104, 0.03159727901220322, 0.06132588908076286, -0.04253961145877838, 0.04054604098200798, 0.04766666889190674, 0.06393883377313614, 0.03775101527571678, -0.007146609481424093, 0.034981876611709595, 0.007195225916802883, 0.0013248781906440854, 0.023642724379897118, -0.059301815927028656, 0.010997666977345943, -0.02289806865155697, -0.06113167107105255, -0.03395109623670578, 0.07495807856321335, -0.06520771235227585, 0.018715862184762955, -0.04096473380923271, -0.016022013500332832, 0.04624982550740242, -0.07572977244853973, 0.03610847890377045, -0.03420230373740196, -0.06363699585199356, -0.06743200868368149, 0.06955276429653168, 0.035311829298734665, 0.0165014136582613, -0.043041620403528214, 0.022264907136559486, -0.028533464297652245, -0.050485704094171524, -0.005728847347199917, 0.021277552470564842, 0.0791974738240242, 0.04674166813492775, -0.014375350438058376, -0.016292812302708626, -0.06658993661403656, 0.002713872119784355, 0.06848803907632828, -0.011525255627930164, -0.05075861141085625, -0.008916393853724003, 0.015980936586856842, -0.013357667252421379, 0.05025485157966614, 0.05988749861717224, -0.04888342693448067, -0.07999498397111893, 0.026929669082164764, 0.022478170692920685, -0.030809136107563972, -0.0709889829158783, 0.07232559472322464, 0.06528645753860474, 0.0014370331773534417, -0.008291013538837433, 0.02250969037413597, 0.06329300254583359, 0.06964214146137238, 0.031196992844343185, 0.01676911488175392, -0.023391081020236015, -0.04071173071861267, 0.025249114260077477, 0.008741055615246296, -0.0170535147190094, 0.027976680546998978, -0.04648401960730553, -0.006691424176096916, 0.05657915025949478, -0.04435063526034355, -0.03895176202058792, -0.06607750058174133, -0.04593469575047493, -0.06456732004880905, -0.03257409483194351, 0.06587076932191849, 0.060319721698760986, 0.04163254424929619, 0.05535181239247322, -0.07097192853689194, -0.056391578167676926, 0.02336331456899643, 0.010135297663509846, -0.019664542749524117, -0.02113993838429451, 0.04966587573289871, -0.045265547931194305, 0.061935994774103165, 0.003376440843567252, 0.0318499431014061, -0.016522729769349098, -0.028507981449365616, -0.08038677275180817, 0.07922378182411194, 0.04161534085869789, -0.0492105595767498, -0.06481429189443588, 0.06005128100514412, 0.018262391909956932, 0.06829024106264114, 0.018840674310922623, 0.019809823483228683, 0.02095714956521988, -0.009868013672530651, -0.07721813768148422, 0.06921686232089996, 0.005593647249042988, -0.020943308249115944, 0.04872308298945427, 0.0621768943965435, -0.05664774775505066, 0.028907535597682, -0.06443443894386292, 0.06253787130117416, -0.008523362688720226, 0.037033166736364365, 0.021452903747558594, -0.05943356454372406, 0.032192476093769073, 0.06196288764476776, 0.04015939682722092, -0.07535400986671448, 0.019716817885637283, 0.061537761241197586, 0.040843237191438675, 0.03223828598856926, -0.017930516973137856, 0.06190415471792221, -0.04181257635354996, -0.026456238701939583, 0.03974013030529022, -0.004769581835716963, -0.012785672210156918, 0.04677323251962662, 0.07970304042100906, 0.023452116176486015, -0.0020579062402248383, 0.04621032625436783, 0.06327278167009354, -0.06567253172397614, -0.05763917788863182, -0.029582977294921875, 0.025759393349289894, -0.022376812994480133, 0.08072832971811295, 0.011320831254124641, -0.03397724777460098, 0.0010695874225348234, -0.06210581213235855, -0.05280422791838646, 0.06980285048484802, -0.02194306254386902, -0.010971271432936192, 0.045408036559820175, -0.0341513454914093, -0.0805765762925148, -0.03009807877242565, -0.046326473355293274, -0.009903042577207088, -0.035590384155511856, -0.0427556186914444, -0.03501133620738983, 0.03241591900587082, -0.03516284003853798, 0.07064007222652435, 0.029091855511069298, -0.0029188930056989193, 0.03284670412540436, 0.011617324315011501, -0.042859893292188644, 0.03648051247000694, -0.02281196229159832, -0.003660448594018817, 0.04880596697330475, -0.006965084932744503, -0.03728891536593437, -0.05638907849788666, 0.0117977075278759, -0.054370805621147156, 0.05062725394964218, -0.05982113629579544, 0.07270978391170502, -0.07143288105726242, 0.07971734553575516, -0.030618485063314438, 0.009087098762392998, 0.07002783566713333, 0.04042775556445122, 0.02338441088795662, -0.014661045745015144, -0.007752061355859041, 0.026968466117978096, 0.0715421661734581, 0.048112232238054276, -0.0425824411213398, -0.029945023357868195, 0.07972703874111176, 0.011131225153803825, 0.03926331177353859, -0.03287503123283386, -0.031440429389476776, -0.01754654198884964, -0.03361690789461136, 0.054700784385204315, -0.07947825640439987, 0.05301801860332489, -0.01072706375271082, -0.06350255757570267, 0.04743354395031929, -0.022036094218492508, 0.05262135714292526, 0.009848976507782936, -0.050689417868852615, -0.03355666622519493, -0.049636710435152054, 0.003931680228561163, -0.01628423109650612, -0.058453261852264404, -0.07087621092796326, -0.07297073304653168, 0.06006753817200661, -0.019252073019742966, 0.03945540636777878, -0.0029158606193959713, 0.0003076279244851321, 0.08048010617494583, -0.00450952397659421, -0.039237089455127716, -0.05866238847374916, 0.03278582543134689, 0.022144978865981102, 0.037941303104162216, -0.07952284067869186, 0.010661385022103786, 0.00344080594368279, 0.003846399486064911, -0.019570965319871902, 0.049884945154190063, 0.02016633003950119, -0.03681863471865654, 0.04645897448062897, 0.061228469014167786, 0.030393732711672783, -0.019495606422424316, -0.07777747511863708, -0.026595110073685646, 0.05705852434039116, 0.02176881581544876, -0.008732665330171585, -0.022969383746385574, -0.005989279132336378, 0.061283666640520096, -0.004035309888422489, -0.016296781599521637, 0.002705395221710205, -0.03635834902524948, -0.06289465725421906, -0.06680302321910858, 0.07223108410835266, -0.0450022928416729, -0.023116450756788254, 0.06246412545442581, 0.02168738842010498, -0.005452191922813654, 0.027296289801597595, 0.043973106890916824, -0.030398640781641006, 0.07245724648237228, 0.020143089815974236, -0.049231160432100296, -0.06932138651609421, -0.07043915241956711, -0.03539929538965225, -0.0012528388760983944, -0.009581000544130802, 0.046952150762081146, -0.0028061193879693747, 0.011363810859620571, -0.06194249540567398, -0.005840226076543331, 0.07184379547834396, 0.02694452740252018, -0.044876351952552795, -0.009735175408422947, -0.05199333280324936, 0.07168978452682495, 0.008872671984136105, -0.034717172384262085, 0.051074832677841187, -0.05030933767557144, 0.04769996181130409, -0.08072789758443832, 0.019953271374106407, 0.07419472932815552, 0.008570941165089607, -0.04839061200618744, 0.025042928755283356, 0.011015930213034153, 0.06661993265151978, 0.010353661142289639, -0.07507185637950897, -0.049507346004247665, 0.01615901105105877, -0.08057018369436264, -0.03657902032136917, -0.0014030926395207644, -0.02677847445011139, 0.0022295599337667227, 0.03426343947649002, -0.08072774857282639, 0.05037454515695572, -0.06060434877872467, 0.005858112126588821, 0.02360011823475361, -0.025099320337176323, 0.07524365186691284, 0.011463643051683903, 0.015852726995944977, -0.07706884294748306, 0.034128546714782715, 0.06698160618543625, 0.06512551754713058, -0.05762190371751785, 0.06323228776454926, -0.05788258835673332, 0.054983656853437424, 0.0440429262816906, 0.03678899258375168, -0.017661411315202713, -0.052990496158599854, -0.045264989137649536, -0.06881328672170639, -0.06288757920265198, 0.06297411024570465, 0.009103866294026375, 0.006012233439832926, -0.02886919677257538, -0.05235831066966057, -0.02693314664065838, 0.014642002061009407, -0.052744317799806595, 0.01824082061648369, -0.047517549246549606, -0.001036382163874805, -0.03282835707068443, -0.011173748411238194, 0.034182578325271606, -0.0514950305223465, -0.011859717778861523, 0.013517044484615326, -0.05833381414413452, 0.06114419922232628, 0.034613896161317825, -0.0801149383187294, -0.039165008813142776, -0.022309044376015663, -0.0008061229600571096, 0.06481585651636124, -0.030957035720348358, -0.016306305304169655, 0.019554074853658676, -0.008310629986226559, -0.02289356291294098, -0.021452968940138817, 0.07344716787338257, 0.05393047258257866, -0.014542308636009693, 0.06520367413759232, -0.017979329451918602, 0.033730655908584595, -0.007966878823935986, 0.011841082945466042, 0.03903578966856003, -0.07564564794301987, 0.07672670483589172, 0.02001510001718998, 0.03211714327335358, -0.037156347185373306, 0.06589829921722412, 0.022880712524056435, -0.020410917699337006, -0.07050217688083649, 0.019821664318442345, -0.058445245027542114, 0.01866811141371727, 0.07840665429830551, -0.03713976964354515, 0.028728565201163292, 0.011302019469439983, -0.0340019166469574, -0.06706980615854263, -0.00345048145391047, -0.053616005927324295, 0.06526660174131393, -0.032587822526693344, -0.022889792919158936, 0.052811477333307266, 0.0188873503357172, -0.026228882372379303, 0.08072463423013687, -0.028907272964715958, 0.04287140816450119, -0.03143351897597313, 0.04359619319438934, 0.0666327252984047, 0.030051905661821365, 0.006015147548168898, -0.0030418825335800648, 0.04754114896059036, -0.03294675052165985, 0.07531210780143738, 0.02554338611662388, -0.05948562175035477, -0.02127261832356453, -0.06393444538116455, 0.0143948495388031, 0.004865847993642092, 0.02514686807990074, 0.0752650797367096, 0.019725248217582703, -0.028669357299804688, -0.016105951741337776, 0.03204657882452011, -0.019554242491722107, 0.017679978162050247, -0.04206443578004837, -0.07381363213062286, -0.036384519189596176, -0.042479753494262695, 0.03600943461060524, 0.0021179786417633295, 0.02712937816977501, 0.014060907997190952, 0.042454008013010025, -0.058588407933712006, -0.04533391073346138, -0.05150296539068222, 0.06913887709379196, -0.0016379774315282702, 0.04634006321430206, -0.018099520355463028, 0.04173079878091812, 0.03582814335823059, 0.025898950174450874, 0.025161443278193474, -0.011623412370681763, -0.009409667924046516, -0.01803494244813919, 0.009841235354542732, -0.025251604616642, -0.05548935383558273, 0.006036064121872187, 8.358065679203719e-05, 0.003067633369937539, 0.05499723181128502, -0.007903128862380981, 0.07843384891748428, 0.04896420240402222, -0.013457395136356354]},
{"question": "List changes unexpectedly after assignment. How do I clone or copy it to prevent this?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>While using <code>new_list = my_list</code>, any modifications to <code>new_list</code> changes <code>my_list</code> every time. Why is this, and how can I clone or copy the list to prevent it?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>With <code>new_list = my_list</code>, you don't actually have two lists. The assignment just copies the reference to the list, not the actual list, so both <code>new_list</code> and <code>my_list</code> refer to the same list after the assignment.</p>\n\n<p>To actually copy the list, you have various possibilities:</p>\n\n<ul>\n<li><p>You can use the builtin <a href=\"https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types\" rel=\"noreferrer\"><code>list.copy()</code></a> method (available since Python 3.3):</p>\n\n<pre><code>new_list = old_list.copy()\n</code></pre></li>\n<li><p>You can slice it: </p>\n\n<pre><code>new_list = old_list[:]\n</code></pre>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Alex_Martelli\" rel=\"noreferrer\" title=\"Alex Martelli\">Alex Martelli's</a> opinion (at least <a href=\"https://www.youtube.com/watch?v=g7V89K8QfgQ\" rel=\"noreferrer\" title=\"Bay Area Python Interest Group August 2007 Meeting\">back in 2007</a>) about this is, that <em>it is a weird syntax and it does not make sense to use it ever</em>. ;) (In his opinion, the next one is more readable).</p></li>\n<li><p>You can use the built in <a href=\"https://docs.python.org/2/library/functions.html#list\" rel=\"noreferrer\" title=\"list\"><code>list()</code></a> function:</p>\n\n<pre><code>new_list = list(old_list)\n</code></pre></li>\n<li><p>You can use generic <a href=\"https://docs.python.org/2/library/copy.html#copy.copy\" rel=\"noreferrer\" title=\"copy.copy\"><code>copy.copy()</code></a>:</p>\n\n<pre><code>import copy\nnew_list = copy.copy(old_list)\n</code></pre>\n\n<p>This is a little slower than <code>list()</code> because it has to find out the datatype of <code>old_list</code> first.</p></li>\n<li><p>If the list contains objects and you want to copy them as well, use generic <a href=\"https://docs.python.org/2/library/copy.html#copy.deepcopy\" rel=\"noreferrer\" title=\"copy.deepcopy\"><code>copy.deepcopy()</code></a>:</p>\n\n<pre><code>import copy\nnew_list = copy.deepcopy(old_list)\n</code></pre>\n\n<p>Obviously the slowest and most memory-needing method, but sometimes unavoidable.</p></li>\n</ul>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>import copy\n\nclass Foo(object):\n    def __init__(self, val):\n         self.val = val\n\n    def __repr__(self):\n        return 'Foo({!r})'.format(self.val)\n\nfoo = Foo(1)\n\na = ['foo', foo]\nb = a.copy()\nc = a[:]\nd = list(a)\ne = copy.copy(a)\nf = copy.deepcopy(a)\n\n# edit orignal list and instance \na.append('baz')\nfoo.val = 5\n\nprint('original: %r\\nlist.copy(): %r\\nslice: %r\\nlist(): %r\\ncopy: %r\\ndeepcopy: %r'\n      % (a, b, c, d, e, f))\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>original: ['foo', Foo(5), 'baz']\nlist.copy(): ['foo', Foo(5)]\nslice: ['foo', Foo(5)]\nlist(): ['foo', Foo(5)]\ncopy: ['foo', Foo(5)]\ndeepcopy: ['foo', Foo(1)]\n</code></pre>\n    </div>", "total_vectors": [0.029972592368721962, -0.04700779542326927, 0.05824548006057739, -0.023057380691170692, 0.03968876600265503, 0.06081254407763481, 0.051864318549633026, 0.015463684685528278, -0.015615246258676052, 0.06832262873649597, 0.002605253830552101, 0.009204093366861343, 0.02654140070080757, -0.06333854049444199, 0.056062716990709305, 0.09205202758312225, 0.024564169347286224, -0.02775624394416809, 0.03167155385017395, -0.040701400488615036, 0.05540429800748825, -0.06725934147834778, -0.0004976558266207576, 0.025174343958497047, 0.07212541997432709, -0.06890325248241425, 0.042608633637428284, 0.03687013313174248, 0.011339654214680195, 0.06866307556629181, -0.03048861026763916, 0.016473213210701942, -0.02258439175784588, -0.06471507251262665, 0.08317586779594421, -0.03547770529985428, -0.06112810596823692, -0.057897284626960754, -0.012654746882617474, -0.04753044620156288, -0.03402019664645195, -0.07962263375520706, 0.014245806261897087, -0.074198879301548, 0.07885406166315079, -0.017680369317531586, 0.010619429871439934, -0.039016980677843094, 0.00992707721889019, -0.009820141829550266, -0.044391632080078125, 0.09065961837768555, -0.0031069654505699873, -0.048786234110593796, -0.029636016115546227, 0.05651426687836647, -0.01378771010786295, 0.028570640832185745, -0.051798634231090546, -0.012408779934048653, -0.023633744567632675, 0.04462013021111488, -0.032291654497385025, -0.0554504469037056, 0.016357630491256714, -0.06949770450592041, -0.06256169825792313, -0.01335152518004179, 0.015383144840598106, -0.06075775623321533, -0.008506878279149532, 0.031140536069869995, 0.013357873074710369, -0.0027253900188952684, 0.025388842448592186, -0.004716868512332439, -0.014867204241454601, 0.08329363167285919, -0.0649440735578537, 0.07101432234048843, -0.05448500066995621, 0.039179589599370956, -0.06535053998231888, 0.006362379528582096, -0.015976635739207268, 0.012076477520167828, 0.03326290473341942, 0.03865714371204376, -0.05559412017464638, 0.05224485322833061, -0.05591356381773949, -0.0059477523900568485, 0.044402457773685455, 0.023616883903741837, -0.04134930670261383, 0.04109063744544983, 0.06778623908758163, 0.032681871205568314, -0.003452795557677746, -0.08802451938390732, -0.04303012043237686, 0.03553030639886856, -0.07062114775180817, 0.04301033914089203, -0.05664145573973656, 0.004385760519653559, -0.06983949989080429, -0.03475604206323624, -0.051467426121234894, 0.004291900433599949, -0.013253603130578995, -0.05735359340906143, -0.040859322994947433, 0.010331660509109497, 0.01981964521110058, -0.007264916319400072, -0.027109278365969658, -0.05697473883628845, -0.029216276481747627, -0.02308734692633152, -0.05020105838775635, 0.05415944382548332, -0.017671585083007812, 0.016203947365283966, -0.03180021792650223, 0.001710717799142003, -0.008067234419286251, 0.029657214879989624, 0.020952826365828514, 0.04528394341468811, 0.042740922421216965, 0.053082823753356934, -0.03099622018635273, -0.06678411364555359, -0.045658838003873825, -0.07198464125394821, -0.08048030734062195, 0.0024128826335072517, -0.045813966542482376, 0.05038641393184662, 0.0010032661957666278, -0.0032533244229853153, -0.0023057926446199417, 0.058231353759765625, -0.04428213834762573, -0.05255434662103653, -0.035683389753103256, -0.007904483936727047, 0.026901116594672203, -0.007578317075967789, -0.04310258850455284, -0.0445377416908741, 0.06072087585926056, 0.0018469945061951876, 0.05659545585513115, 0.011774938553571701, 0.005807061679661274, 0.02477180026471615, 0.07469285279512405, 0.04711729660630226, -0.07598184794187546, -0.05643760785460472, 0.000498367240652442, 0.03775804489850998, -0.038841791450977325, -0.0021358057856559753, -0.06731010228395462, 0.0597185418009758, 0.0252862349152565, -0.05148075520992279, 0.007406143005937338, -0.08500852435827255, 0.07472793757915497, -0.001146511291153729, -0.05422079190611839, -0.008387818932533264, -0.055024199187755585, -0.009300820529460907, 0.016289634630084038, -0.042849063873291016, 0.08016573637723923, -0.06385604292154312, -0.05717097595334053, -0.035046957433223724, 0.015211505815386772, -0.05032029002904892, -0.004827085882425308, 0.05107425898313522, 0.007544418331235647, 0.0548631027340889, 0.08429402858018875, 0.05688602477312088, -0.012302241288125515, -0.04867970198392868, 0.030499069020152092, 0.03468715026974678, -0.021016303449869156, 0.09213738888502121, 0.00374720455147326, -0.041727133095264435, -0.007178483530879021, 0.054583899676799774, 0.03889372944831848, 0.07860766351222992, 0.05507272854447365, -0.03155038133263588, -0.034983765333890915, -0.025129934772849083, -0.06881551444530487, 0.03781289979815483, -0.02573391981422901, 0.037880413234233856, 0.06444466859102249, -0.041506629437208176, 0.0371025912463665, -0.03043302334845066, -0.011590996757149696, 0.014454400166869164, 0.003061312483623624, -0.02233165316283703, 0.01549733616411686, -0.014162561856210232, -0.006919927429407835, 0.0063051036559045315, 0.03655490651726723, -0.039131153374910355, -0.0408850833773613, -0.007182689383625984, -0.0008611750672571361, -0.058018673211336136, -0.07439348101615906, 0.030446026474237442, -0.02898375876247883, -0.026605291292071342, 0.05868846923112869, 0.022518113255500793, 0.0694214478135109, -0.05778997763991356, 0.05089038610458374, -0.015947481617331505, 0.009376694448292255, -0.022450275719165802, -0.044143594801425934, 0.0019185802666470408, 0.08205854892730713, 0.0906614288687706, 0.009871019050478935, 0.044642191380262375, 0.09061260521411896, 0.08419269323348999, -0.07784155756235123, 0.04479798302054405, -0.018146352842450142, -0.01811971887946129, 0.015620228834450245, 0.030991962179541588, -0.08311563730239868, 0.0017881245585158467, -0.0070947264321148396, -4.3744283175328746e-05, -0.06952530890703201, -0.015198436565697193, -0.0568411685526371, -2.3071914256433956e-05, -0.055375464260578156, 0.031065449118614197, 0.040792252868413925, -0.0789179727435112, 0.030769560486078262, -0.05545072257518768, -0.048099927604198456, -0.021856967359781265, -0.04780326038599014, 0.06573469191789627, -0.0044544413685798645, 0.04532531276345253, 0.013828982599079609, 0.020987631753087044, 0.07862883061170578, 0.05842190980911255, 0.06811584532260895, -0.01776576228439808, -0.06300253421068192, -0.053092725574970245, -0.00782120879739523, -0.05719473212957382, -0.052950598299503326, 0.03996063768863678, -0.044448088854551315, 0.06003137305378914, 0.052712056785821915, -0.03676237538456917, -0.053229447454214096, -0.02364073507487774, 0.08273795992136002, 0.009859704412519932, 0.050914470106363297, -0.026515597477555275, -0.013033999130129814, 0.0554632842540741, 0.021428827196359634, -0.01238853670656681, -0.017699118703603745, 0.03667158633470535, -0.048554446548223495, -0.03915680944919586, -0.008652932941913605, 0.041409578174352646, -0.015547136776149273, 0.0004362767795100808, -0.005552851129323244, 0.021344279870390892, 0.03568919748067856, -0.05138546973466873, -0.05163945257663727, 0.029426226392388344, 0.0022714752703905106, 0.053886331617832184, 0.02135649137198925, -0.0014176202239468694, 0.040377676486968994, 0.014072614721953869, 0.042729198932647705, -0.032915402203798294, 0.024535957723855972, 0.025750599801540375, 0.010572846047580242, 0.006424950901418924, 0.06414904445409775, -0.014282947406172752, 0.02202557399868965, -0.045298442244529724, 0.011884442530572414, 0.005995671730488539, 0.004790204577147961, -0.008719021454453468, 0.013622513972222805, 0.03728185594081879, 0.052842456847429276, 0.01008747797459364, 0.014573168940842152, 0.015423116274178028, 0.014725349843502045, -0.05825958028435707, -0.09171511232852936, 0.026169924065470695, -0.04960580915212631, -0.007165226154029369, -0.0264873243868351, 0.023775829002261162, 0.04672921076416969, 0.035860080271959305, 0.00692590419203043, -0.017439283430576324, 0.028977997601032257, -0.0008334749727509916, -0.09032150357961655, -0.009308394975960255, 0.012957730330526829, -0.01686907559633255, -0.062317151576280594, -0.03018374741077423, -0.0828205794095993, 0.044266264885663986, 0.057397790253162384, -0.03584762290120125, -0.06820377707481384, 0.04518057405948639, 0.06266536563634872, 0.03161361813545227, 0.030029473826289177, -0.07414287328720093, -0.025320421904325485, 0.05735720694065094, -0.0020349991973489523, -0.06885520368814468, 0.06598788499832153, 0.026699218899011612, 0.04421344771981239, 0.021257903426885605, -0.04207906499505043, 0.02125173807144165, 0.02246195822954178, -0.0359269455075264, 0.047828830778598785, 0.06006188690662384, 0.0703490674495697, 0.04789150506258011, -0.034173205494880676, -0.008335072547197342, -0.06396248936653137, -0.02477242425084114, -0.029356777667999268, -0.03714301809668541, -0.040188487619161606, 0.029211850836873055, -0.04129083454608917, 0.07090135663747787, -0.050754815340042114, 0.03129810094833374, 0.06387102603912354, -0.04045845568180084, -0.06760180741548538, 0.058314114809036255, -0.024383921176195145, 0.01667013019323349, -0.05893804132938385, 0.022946124896407127, -0.01612628996372223, 0.045470353215932846, -0.0733090341091156, 0.001529158093035221, 0.05487073212862015, -0.03175833821296692, 0.010613245889544487, 0.07053195685148239, -0.016908593475818634, 0.04188186675310135, 0.03835863620042801, 0.06623082607984543, -0.02180636115372181, -0.05255153775215149, -0.03843671455979347, 0.012822987511754036, -0.03577867150306702, 0.014433489181101322, 0.04647316411137581, 0.07863838970661163, 0.001599770155735314, 0.06604652106761932, -0.01136320922523737, -0.039173658937215805, 0.06804460287094116, 0.05039794370532036, 0.03509005904197693, 0.02939644642174244, 0.07505049556493759, 0.01733325608074665, -0.03224964812397957, 0.05453592538833618, -0.028157342225313187, -0.0072890291921794415, 0.0627502053976059, -0.003449516836553812, 0.023857340216636658, 0.05879314988851547, 0.047179192304611206, 0.06134844571352005, -0.04136951267719269, -0.049266356974840164, -0.033443842083215714, 0.015099422074854374, 0.08631233125925064, -0.02931148372590542, 0.004343736916780472, 0.000317168771289289, -0.07179668545722961, -0.039628975093364716, -0.06374907493591309, -0.00972731038928032, -0.03339379280805588, 0.06329763680696487, -0.05849833786487579, -0.03940688446164131, -0.02142072655260563, -0.07847192138433456, 0.038951266556978226, -0.06509871780872345, -0.008858161978423595, 0.05190790444612503, 0.06527026742696762, 0.025355279445648193, 0.018226349726319313, -0.046061813831329346, -0.06762435287237167, 0.01741674728691578, -0.05819140374660492, -0.04160061106085777, -0.042829446494579315, 0.001127024064771831, -0.07347354292869568, -0.05779697746038437, 0.042245447635650635, -0.008069409057497978, -0.00442179711535573, 0.05755723640322685, 0.08385468274354935, 0.053675394505262375, -0.03702321648597717, 0.046789199113845825, 0.010189312510192394, -0.05183342471718788, 0.04774695634841919, 0.050364259630441666, 0.00020860679796896875, -0.027382710948586464, 0.08896365761756897, -0.035104043781757355, 0.047952596098184586, -0.06140171363949776, 0.015195454470813274, 0.007045037113130093, -0.038581788539886475, 0.038800135254859924, -0.01069095078855753, 0.006605819333344698, -0.03805742412805557, 0.02031789720058441, 0.021196071058511734, 0.04539729282259941, -0.01837453991174698, 0.030101153999567032]},
{"question": "What is the explicit promise construction antipattern and how do I avoid it?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>I was writing code that does something that looks like:</p>\n\n<pre><code>function getStuffDone(param) {           | function getStuffDone(param) {\n    var d = Q.defer(); /* or $q.defer */ |     return new Promise(function(resolve, reject) {\n    // or = new $.Deferred() etc.        |     // using a promise constructor\n    myPromiseFn(param+1)                 |         myPromiseFn(param+1)\n    .then(function(val) { /* or .done */ |         .then(function(val) {\n        d.resolve(val);                  |             resolve(val);\n    }).catch(function(err) { /* .fail */ |         }).catch(function(err) {\n        d.reject(err);                   |             reject(err);\n    });                                  |         });\n    return d.promise; /* or promise() */ |     });\n}                                        | }\n</code></pre>\n\n<p>Someone told me this is called the \"<strong>deferred antipattern</strong>\" or the \"<strong><code>Promise</code> constructor antipattern</strong>\" respectively, what's bad about this code and why is this called an <a href=\"https://en.wikipedia.org/wiki/Anti-pattern\" rel=\"noreferrer\">antipattern</a>?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>The <a href=\"https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns#the-deferred-anti-pattern\" rel=\"noreferrer\">deferred antipattern (now explicit-construction anti-pattern)</a> coined by <a href=\"https://stackoverflow.com/users/995876/esailija\">Esailija</a> is a common anti-pattern people who are new to promises make, I've made it myself when I first used promises. The problem with the above code is that is fails to utilize the fact that promises chain.</p>\n\n<p>Promises can chain with <code>.then</code> and you can return promises directly. Your code in <code>getStuffDone</code> can be rewritten as:</p>\n\n<pre><code>function getStuffDone(param){\n    return myPromiseFn(param+1); // much nicer, right?\n}\n</code></pre>\n\n<p>Promises are all about making asynchronous code more readable and behave like synchronous code without hiding that fact. Promises represent an abstraction over a value of one time operation, they abstract the notion of a statement or expression in a programming language.</p>\n\n<p>You should only use deferred objects when you are <a href=\"https://stackoverflow.com/questions/22519784/how-do-i-convert-an-existing-callback-api-to-promises\">converting an API to promises</a> and can't do it automatically, or when you're writing aggregation functions that are easier expressed this way. </p>\n\n<p>Quoting Esailija:</p>\n\n<blockquote>\n  <p>This is the most common anti-pattern. It is easy to fall into this when you don't really understand promises and think of them as glorified event emitters or callback utility. Let's recap: promises are about making asynchronous code retain most of the lost properties of synchronous code such as flat indentation and one exception channel.</p>\n</blockquote>\n    </div>", "total_vectors": [0.07007019221782684, 0.03273657336831093, 0.018256036564707756, -0.03203940764069557, -0.02226046845316887, 0.04884163662791252, 0.0049074734561145306, 0.010435017757117748, 0.008432404138147831, 0.04466633126139641, -0.006975134368985891, 0.027770793065428734, 0.009766937233507633, -0.06173505634069443, 0.0626470074057579, 0.08197242766618729, 0.01877988502383232, 0.04347308352589607, 0.014281821437180042, 0.02453300729393959, 0.09041954576969147, 0.04040699452161789, -0.032150670886039734, -0.05575812608003616, -0.017113028094172478, -0.046810928732156754, 0.03148701414465904, -0.03482963889837265, -0.016416242346167564, 0.049303412437438965, 0.03624049574136734, -0.00562030915170908, -0.04609142616391182, 0.03126018866896629, -0.05176236480474472, 0.011804522946476936, -0.04667310044169426, -0.007308816071599722, -0.04890798032283783, 0.02727939933538437, 0.016213512048125267, 0.04906126856803894, -0.022469937801361084, 0.01562952622771263, 0.03221334144473076, 0.00047717156121507287, -0.07737692445516586, -0.05416793003678322, 0.024243611842393875, -0.047814469784498215, -0.053935691714286804, 0.10659464448690414, -0.0032002865336835384, -0.04640503600239754, -0.015020523220300674, -0.03413768857717514, -0.008668024092912674, -0.044319309294223785, 0.046719662845134735, -0.07902565598487854, 0.010724355466663837, 0.04467776045203209, 0.016935357823967934, -0.06562026590108871, -0.05027090758085251, -0.05746004357933998, -0.02319360338151455, -0.005847590509802103, -0.004628544207662344, 0.06441321223974228, 0.0237556304782629, 0.015962889418005943, 0.061093371361494064, -0.03983571007847786, 0.023518966510891914, -0.04137919843196869, -0.04612439125776291, 0.07301127910614014, -0.02550419047474861, 0.0691632404923439, 0.00644941721111536, -0.026981906965374947, -0.007742932997643948, -0.021965622901916504, 0.0839834064245224, -0.05436055734753609, 0.06273344159126282, 0.021508701145648956, -0.074986532330513, 0.006504950579255819, -0.0036255046725273132, 0.06481724232435226, -0.0358319953083992, -0.004698554985225201, -0.05986557528376579, -0.02347925305366516, -0.0272064171731472, 0.06130893900990486, -0.027504250407218933, -0.061946481466293335, -0.002792917424812913, 0.007483023684471846, 0.024330126121640205, 0.005826181266456842, 0.016355182975530624, -0.006395004689693451, -0.066823311150074, -0.0007608594023622572, -0.03882279247045517, 0.04040275514125824, 0.06424977630376816, -0.09949357062578201, -0.021959876641631126, 0.022491512820124626, 0.02294445037841797, -0.011497654020786285, 0.03901559114456177, 0.00754583952948451, -0.014239021576941013, -0.07338812202215195, -0.003487457986921072, -0.05256818234920502, 0.003114002291113138, -0.02453349158167839, 0.03608476743102074, -0.016490507870912552, -0.03911089897155762, 0.05424772575497627, 0.07676446437835693, 0.05147784203290939, 0.06179848685860634, -0.011062818579375744, -0.0015895157121121883, -0.09514925628900528, -0.025964166969060898, -0.08325426280498505, -0.037715550512075424, -0.03650721535086632, -0.022527869790792465, 0.02453666925430298, 0.03891981020569801, -4.393445124151185e-05, -0.016204917803406715, 0.013671348802745342, -0.011074144393205643, -0.09461063146591187, 0.018742436543107033, 0.02096131443977356, -0.044252876192331314, -0.003877733601257205, -0.04246078059077263, -0.05079586058855057, -0.050887200981378555, 0.0022937895264476538, -0.0072384364902973175, 0.022626174613833427, 0.004257651511579752, 0.09902796894311905, 0.027369432151317596, -0.02983272634446621, 0.07214510440826416, 0.07025520503520966, 0.06292156130075455, -0.008150406181812286, 0.04237084835767746, -0.006838532630354166, 0.01644456945359707, -0.0019557210616767406, 0.002001815941184759, -0.0544673353433609, -0.034736160188913345, -0.09514874964952469, 0.036525093019008636, -0.056641630828380585, 0.06647999584674835, -0.010897268541157246, 0.02943330444395542, 0.016684800386428833, 0.023211244493722916, -0.0569048747420311, -0.03931180387735367, -0.014567378908395767, -0.006972638424485922, -0.044111188501119614, -0.021118933334946632, 0.03708491101861, -0.006377110723406076, 0.001962591428309679, 0.023477692157030106, 0.07333384454250336, 0.08260348439216614, 0.014879915863275528, 0.0028954450972378254, -0.06506114453077316, -0.031533125787973404, 0.012244170531630516, 0.0027615544386208057, 0.08502520620822906, 0.024020615965127945, 0.005121015012264252, -0.026128148660063744, 0.03789805993437767, -0.020642114803195, 0.0875314325094223, -0.026752009987831116, -0.03569905832409859, 0.029465774074196815, 0.08844025433063507, -0.07201465964317322, 0.015233191661536694, -0.05575336143374443, 0.06006743386387825, 0.04497690126299858, 0.029750511050224304, 0.027646521106362343, -0.03447970375418663, -0.015290864743292332, -0.06865835934877396, 0.014715052209794521, -0.022514283657073975, -0.04820719733834267, -0.06566730886697769, -0.04913557693362236, 0.043803438544273376, 0.062073785811662674, 0.01814899779856205, -0.06554810702800751, 0.0485568568110466, -0.018374091014266014, 0.01281148660928011, 0.026721714064478874, 0.0893985852599144, 0.02132536470890045, -0.06256826221942902, 0.07780228555202484, -0.058290909975767136, 0.052582334727048874, -0.03237306326627731, -0.017834661528468132, -0.0582989901304245, -0.037367258220911026, 0.03730759024620056, 0.03728260472416878, 0.07816724479198456, 0.00567594962194562, 0.10461105406284332, -0.01598699390888214, 0.056229762732982635, 0.10652630031108856, 0.07697759568691254, -0.06092749536037445, 0.036514755338430405, -0.048638634383678436, -0.010881919413805008, 0.0139076616615057, -0.015626084059476852, -0.0014487147564068437, 0.00983962882310152, -0.005251514259725809, -0.004307194147258997, -0.0334167405962944, -0.03658294305205345, -0.033140745013952255, -0.044087398797273636, 0.035972755402326584, 0.06421028077602386, -0.017780562862753868, -0.061555251479148865, 0.07257309556007385, 0.049023061990737915, -0.04575832560658455, -0.0695701390504837, -0.08467324823141098, 0.10362982749938965, -0.02387380041182041, 0.03560907021164894, -0.033604029566049576, -0.039609529078006744, -0.02462717704474926, 0.06166472285985947, -0.050134725868701935, -0.033011794090270996, -0.02256704494357109, -0.037309713661670685, 0.02553313598036766, -0.03315324708819389, 0.017718104645609856, 0.008119187317788601, 0.0352044478058815, 0.020442094653844833, 0.0016285901656374335, 0.028880935162305832, -0.02398962713778019, 0.00738356402143836, 0.06466257572174072, 0.030028531327843666, 0.019906675443053246, -0.009620362892746925, 0.03675123304128647, 0.030154528096318245, 0.019054953008890152, -0.010819029062986374, -0.056401327252388, 0.08826707303524017, -0.0028259363025426865, 0.07198254764080048, -0.028251543641090393, 0.03865336254239082, -0.025945615023374557, -0.0526178814470768, 0.006625880021601915, 0.021369177848100662, 0.016253650188446045, -0.026870956644415855, -0.02967699244618416, 0.0707608088850975, 0.013927113264799118, 0.0057396916672587395, -0.03653791546821594, 0.008066591806709766, 0.007724853698164225, 0.036818698048591614, 0.0556861013174057, -0.05149524286389351, 0.022570088505744934, -0.018106458708643913, 0.019666749984025955, -0.0592120923101902, 0.07076482474803925, -0.01085485890507698, -0.06071848049759865, -0.006521564908325672, -0.0028246892616152763, -0.007363495416939259, -0.026156142354011536, -0.05608697608113289, -0.040770094841718674, 0.056579023599624634, 0.04835102707147598, 0.03690335154533386, 0.027905650436878204, -0.051137957721948624, 0.018795043230056763, -0.0027178653981536627, -0.07601621747016907, -0.04654131084680557, 0.005579933524131775, -0.055389780551195145, -0.06353788822889328, 0.02259969525039196, -0.006247354205697775, -0.052559174597263336, -0.056479424238204956, -0.005176392383873463, -0.05905983969569206, 0.0016036855522543192, -0.09971054643392563, -0.029181290417909622, 0.05647362768650055, -0.0119821447879076, 0.0694383829832077, -0.015611553564667702, -0.055878572165966034, 0.05433950200676918, 0.0058383699506521225, -0.022742984816432, -0.08998386561870575, 0.0005304516525939107, -0.023498648777604103, -0.02138475514948368, 0.020529745146632195, -0.05241147056221962, 0.0839047059416771, 0.039473820477724075, -0.040750399231910706, -0.07563937455415726, -0.0214387197047472, -0.002213248750194907, 0.009005720727145672, 0.03711917996406555, -0.020613491535186768, 0.0014670902164652944, -0.07172813266515732, -0.04669450595974922, 0.06113559007644653, -0.029281150549650192, 0.08157365024089813, -0.0229930616915226, 0.02638285420835018, -0.028716254979372025, 0.05183904245495796, -0.054328206926584244, 0.05608080327510834, 0.04706966504454613, 0.07618863135576248, 0.0016893550055101514, -0.010128695517778397, -0.017810635268688202, -0.008092524483799934, 0.07229163497686386, -0.02551119402050972, -0.004609876312315464, 0.004918063525110483, -0.019155748188495636, -0.025908423587679863, -0.049910906702280045, -0.05144886672496796, -0.07020258903503418, -0.0651155412197113, 0.07044082134962082, -0.09490050375461578, -0.057547010481357574, -0.012306095100939274, 0.03346182033419609, -0.08339036256074905, 0.05218088626861572, -0.0065919687040150166, 0.08192063868045807, 0.012984328903257847, -0.05035695433616638, -0.00798006635159254, -0.04352810978889465, -0.04251473397016525, 0.056732818484306335, 0.06561391800642014, -0.08622009307146072, 0.04045862704515457, 0.05434591695666313, -0.018747828900814056, 0.02985607460141182, -0.0018062591552734375, -0.03516259416937828, 0.040879253298044205, 0.003175209742039442, 0.02649911306798458, 0.0029409669805318117, 0.05546334758400917, 0.02477528154850006, 0.04111557826399803, 0.05395831912755966, 0.02518386021256447, -0.01651107333600521, 0.031000910326838493, 0.04425623267889023, 0.017407728359103203, -0.01974412426352501, -0.00817902758717537, 0.025068992748856544, -0.022571904584765434, -0.006991533096879721, 0.007620007731020451, 0.029057703912258148, 0.0766248106956482, -0.012694720178842545, -0.030866416171193123, -0.06402067840099335, 0.06316576153039932, -0.07283253967761993, -0.08492851257324219, -0.01955397240817547, -0.015448019839823246, 0.004837850574404001, -0.023236561566591263, -0.03741632029414177, 0.03528629615902901, -0.09603825211524963, 0.001007418497465551, -0.012564090080559254, 0.0010313109960407019, 0.04338977485895157, -0.04006095975637436, -0.047988224774599075, -0.032671939581632614, -0.05338316783308983, 0.047342896461486816, -0.02430524304509163, 0.035273484885692596, 0.02774215303361416, -0.01781252957880497, 0.016825634986162186, 0.019520597532391548, -0.04947349801659584, -0.018555710092186928, -0.06868620961904526, 0.005599447060376406, 0.039524421095848083, 0.03653910011053085, 0.008221431635320187, 0.004577553831040859, 0.08353196084499359, -0.04093829169869423, -0.012505583465099335, 0.06958810985088348, -0.004085888620465994, 0.05664095655083656, 0.023620983585715294, 0.06368853896856308, 0.034323617815971375, 0.05612235143780708, 0.02505224198102951, 0.015937458723783493, -0.01107192412018776, -0.019366657361388206, 0.07745111733675003, 0.0958857461810112, -0.007994653657078743, 0.014580201357603073, -0.006201046984642744, -0.024691756814718246, 0.07944044470787048, -0.040954023599624634, 0.028168868273496628]},
{"question": "How can I get query string values in JavaScript?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                    <div>\r\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\r\n        <div class=\"grid fd-column fw-nowrap\">\r\n            <div class=\"grid fw-nowrap\">\r\n                    <div class=\"grid--cell mr8\">\r\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconLock\" width=\"18\" height=\"18\" viewbox=\"0 0 18 18\"><path d=\"M16 9a2 2 0 00-2-2V6A5 5 0 004 6v1a2 2 0 00-2 2v6c0 1.1.9 2 2 2h10a2 2 0 002-2V9zm-7 5a2 2 0 110-4 2 2 0 010 4zm3.1-7H5.9V6a3.1 3.1 0 016.2 0v1z\"></path></svg>\r\n                    </div>\r\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\r\n                    <div class=\"grid--cell fl1 lh-lg\">\r\n                        <b>This question's answers are a <a href=\"/help/privileges/edit-community-wiki\">community effort</a></b>. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n</aside>\r\n\r\n    </div>\r\n\r\n<p>Is there a plugin-less way of retrieving <a href=\"http://en.wikipedia.org/wiki/Query_string\" rel=\"nofollow noreferrer\">query string</a> values via jQuery (or without)? </p>\n\n<p>If so, how? If not, is there a plugin which can do so?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p><strong>Update: Sep-2018</strong></p>\n<p>You can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams#Browser_compatibility\" rel=\"noreferrer\">URLSearchParams</a> which is simple and has <a href=\"https://caniuse.com/#feat=urlsearchparams\" rel=\"noreferrer\">decent (but not complete) browser support</a>.</p>\n<pre><code>const urlParams = new URLSearchParams(window.location.search);\nconst myParam = urlParams.get('myParam');\n</code></pre>\n<p><strong>Original</strong></p>\n<p>You don't need jQuery for that purpose. You can use just some pure JavaScript:</p>\n<pre><code>function getParameterByName(name, url = window.location.href) {\n    name = name.replace(/[\\[\\]]/g, '\\\\$&amp;');\n    var regex = new RegExp('[?&amp;]' + name + '(=([^&amp;#]*)|&amp;|#|$)'),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n</code></pre>\n<p><strong>Usage:</strong></p>\n<pre><code>// query string: ?foo=lorem&amp;bar=&amp;baz\nvar foo = getParameterByName('foo'); // \"lorem\"\nvar bar = getParameterByName('bar'); // \"\" (present with empty value)\nvar baz = getParameterByName('baz'); // \"\" (present with no value)\nvar qux = getParameterByName('qux'); // null (absent)\n</code></pre>\n<p>NOTE: If a parameter is present several times (<code>?foo=lorem&amp;foo=ipsum</code>), you will get the first value (<code>lorem</code>). There is no standard about this and usages vary, see for example this question: <a href=\"https://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys\">Authoritative position of duplicate HTTP GET query keys</a>.</p>\n<p>NOTE: The function is case-sensitive. If you prefer case-insensitive parameter name, <a href=\"https://stackoverflow.com/questions/3939715/case-insensitive-regex-in-javascript\">add 'i' modifier to RegExp</a></p>\n<hr>\n<p>This is an update based on the new <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\" rel=\"noreferrer\">URLSearchParams specs</a> to achieve the same result more succinctly. See answer titled \"<a href=\"https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript/901144#12151322\">URLSearchParams</a>\" below.</p>\n    </div>", "total_vectors": [0.028840532526373863, -0.05206087976694107, 0.057646844536066055, 0.01611127145588398, 0.02437492273747921, -0.009432384744286537, -0.010585952550172806, -0.06374463438987732, -0.07902371883392334, 0.05995719134807587, 0.03634592890739441, -0.07234755158424377, -0.023623457178473473, 0.06808952242136002, -0.000443856610218063, 0.08830369263887405, 0.026594845578074455, 0.02642018534243107, 0.042753320187330246, -0.01444181427359581, 0.04818382486701012, -0.030237533152103424, 0.04185154661536217, -0.025901909917593002, -0.044376567006111145, -0.06429925560951233, 0.005876332521438599, 0.025214334949851036, -0.013115049339830875, 0.0008459226228296757, -0.029356040060520172, 0.008226201869547367, 0.01600067690014839, -0.04240712523460388, 0.02854868397116661, 0.018803073093295097, -0.05442643165588379, 0.002468729857355356, -0.001365023315884173, 0.04880020022392273, -0.030886603519320488, 0.037136830389499664, 0.014514986425638199, 0.0021551346872001886, 0.08822082728147507, -0.023226298391819, -0.06553800404071808, 0.03216452896595001, -0.02713753469288349, -0.011923947371542454, 0.08528631925582886, 0.08793269097805023, 0.003077832516282797, -0.014188356697559357, -0.011407644487917423, 0.02641604095697403, -0.05556681752204895, -0.020592007786035538, 0.012760180048644543, 0.016180744394659996, -0.02456025220453739, 0.02446167543530464, -0.022513646632432938, -0.03868900611996651, -0.013015838339924812, -0.04757845029234886, 0.018179355189204216, 0.0407075397670269, 0.0593554824590683, 0.01627812348306179, -0.08625758439302444, 0.03304566442966461, 0.04362861067056656, -0.010279247537255287, 0.03334752842783928, 0.08233089745044708, 0.036329057067632675, 0.054640188813209534, -0.009118249639868736, 0.0751495510339737, 0.07019858062267303, 0.033769238740205765, -0.007464135531336069, 0.06469008326530457, 0.08232542872428894, -0.020383749157190323, -0.020397335290908813, 0.025810204446315765, -0.04448738694190979, 0.06912826001644135, 0.006139911245554686, 0.0009959378512576222, -0.004647660069167614, 0.008856694214046001, 0.049085959792137146, 0.02585507743060589, 0.03620496392250061, 0.04579618200659752, -0.06226018816232681, -0.08763853460550308, 0.04473721608519554, 0.0374467633664608, -0.07824579626321793, 0.01989508606493473, 0.0876060500741005, -0.02365938201546669, 0.08781465888023376, 0.014961673878133297, -0.02551165409386158, -0.024396555498242378, 0.003185858251526952, 0.028980527073144913, 0.033974673599004745, 0.012483520433306694, -0.07412351667881012, -0.0026777461171150208, -0.020164363086223602, -0.05965292826294899, 0.033616259694099426, -0.008113346062600613, 0.05916116014122963, -0.01858624629676342, 0.04967562481760979, -0.052148181945085526, 0.021039297804236412, -0.035228170454502106, -0.00291952071711421, 0.02562708966434002, 0.07199497520923615, 0.012915285304188728, 0.002350312191992998, 0.029977018013596535, -0.0657210573554039, 0.026363644748926163, 0.03669432923197746, -0.05186573043465614, -0.028969069942831993, 0.0021946988999843597, -0.026379812508821487, -0.06454954296350479, 0.05745378136634827, -0.012165505439043045, 0.019788462668657303, 0.017241181805729866, 0.00869858916848898, -0.08814793825149536, -0.03535953909158707, 0.005593353882431984, 0.029530119150877, 0.032632507383823395, -0.02658424898982048, -0.007259839214384556, 0.026645245030522346, 0.0066922567784786224, 0.022896451875567436, -0.021020811051130295, 0.0006024398608133197, -0.06045705825090408, 0.022405924275517464, -0.05459989979863167, -0.008259170688688755, 0.03311137855052948, 0.0019753077067434788, 0.029846658930182457, 0.0056405276991426945, -0.043329868465662, -0.01984744891524315, -0.02040109969675541, -0.062409549951553345, 0.03548160940408707, -0.03125981613993645, 0.043044865131378174, -0.022189393639564514, -0.02863408997654915, 0.020367419347167015, -0.01280011236667633, 0.005278770346194506, 0.0258896853774786, -0.01698598824441433, 0.035848695784807205, -0.039958514273166656, -0.01481766439974308, 0.018667621538043022, 0.037346623837947845, 0.02303292229771614, -0.0074196187779307365, 0.003455748315900564, 0.08682727813720703, 0.046689193695783615, 0.061446547508239746, 0.0792764350771904, 0.035499341785907745, 0.016298796981573105, -0.08448253571987152, -0.03363318741321564, 0.032839447259902954, 0.005485267378389835, 0.08830364793539047, 0.03407055884599686, -0.05845795199275017, -0.07117310911417007, -0.020746955648064613, -0.08802611380815506, 0.0835186094045639, -0.012973631732165813, -0.011282742023468018, -0.0442640483379364, 0.02563444711267948, -0.08676300197839737, 0.011700463481247425, 0.014816449023783207, 0.04544329270720482, 0.011259445920586586, 0.005284878425300121, 0.047125063836574554, -0.0421249195933342, -0.05295747518539429, 0.04153860732913017, 0.04268212988972664, 0.009763841517269611, 0.08177299797534943, -0.026027869433164597, -4.113672184757888e-05, -0.018916873261332512, -0.0216678436845541, 0.03216224163770676, -0.01200045458972454, -0.01054244302213192, 0.05951273441314697, -0.05635648965835571, -0.05683259293437004, -0.044948510825634, 0.003919702954590321, -0.08347053825855255, 0.0767514556646347, -0.042347751557826996, 0.08751533180475235, 0.026692312210798264, 0.03873620182275772, 0.02081173099577427, -0.033521868288517, 0.08129282295703888, 0.02405819296836853, 0.07066865265369415, -0.03855450451374054, 0.08702174574136734, 0.04838724061846733, -0.05443967133760452, 0.08697819709777832, 0.08568643778562546, -0.027740858495235443, 0.04120364785194397, 0.016434671357274055, 0.0008222477044910192, -0.05460410192608833, -0.07657027244567871, 0.024265233427286148, -0.0823134109377861, -0.006772823166102171, -0.04624449089169502, -0.05321567878127098, 0.035298071801662445, -0.08299384266138077, -0.03276718407869339, 0.06650426983833313, 0.04543795809149742, -0.007591311354190111, -0.0859689936041832, -0.06281531602144241, -0.05937958136200905, -0.06794212013483047, -0.019251098856329918, -0.08706766366958618, -0.019211305305361748, -0.05933183804154396, 0.0048582288436591625, -0.0034744045697152615, 0.08011024445295334, 0.08813096582889557, -0.03833658620715141, 0.0008138770936056972, 0.036748580634593964, -0.01775074191391468, 0.03295546770095825, -0.0013561698142439127, -0.0861891359090805, 0.016247279942035675, 0.032267358154058456, -0.06791731715202332, 0.08821465820074081, -0.03817551210522652, -0.02852206863462925, 0.08361046761274338, -0.0006115423166193068, 0.08330895751714706, -0.05378090217709541, -0.03548652306199074, -0.04437948390841484, -0.028408195823431015, 0.04903349280357361, 0.029230577871203423, -0.023464351892471313, -0.020694594830274582, 0.0501045398414135, 0.03749418631196022, -0.013015222735702991, -0.04416606202721596, 0.0001462686195736751, 0.02411976270377636, -0.021394673734903336, 0.0010369891533628106, 0.00802616123110056, -0.016700075939297676, -0.01572270877659321, -0.003292448353022337, 0.07845383882522583, -0.018664835020899773, -0.018834024667739868, 0.07357310503721237, 0.008437979966402054, 0.08757767826318741, 0.0026454697363078594, 0.0257122702896595, -0.05351647362112999, 0.043682459741830826, -0.032270148396492004, 0.018985457718372345, 0.023096825927495956, 0.02567051164805889, 0.045487936586141586, -0.04206601530313492, -0.0005829480942338705, 0.01693475991487503, 0.056869108229875565, -0.03603495657444, 0.017656221985816956, -0.04727308079600334, -0.017065566033124924, 0.073916956782341, -0.0648539736866951, -0.011366131715476513, 0.00012071661330992356, -0.005402914248406887, 0.019661718979477882, -0.08830199390649796, 0.016492748633027077, 0.05100305378437042, 0.028709651902318, 0.022628771141171455, -0.023501979187130928, 0.04839615896344185, 0.03978509455919266, 0.05813943222165108, 0.0335870124399662, -0.0493728369474411, -0.04519139602780342, -0.08776499330997467, -0.03412309288978577, -0.014914765022695065, -0.038853198289871216, -0.06764107942581177, 0.0011554519878700376, -0.08828388154506683, 0.030127186328172684, -0.08817845582962036, 0.007091166451573372, -0.06288651376962662, -0.018485143780708313, 0.07396098971366882, 0.08520669490098953, -0.038528766483068466, -0.012216108851134777, -0.0009575878502801061, 0.06304402649402618, 0.010699783451855183, -0.08024479448795319, 0.01771128736436367, 0.007837940007448196, -0.014028611592948437, 0.07548624277114868, 0.055396102368831635, -0.05246667191386223, 0.03437451273202896, -0.03460820019245148, 0.001247138949111104, -0.0037201715167611837, 0.07904892414808273, 0.030567701905965805, -0.0083713224157691, -0.030735492706298828, -0.06113864853978157, -0.01946941949427128, 0.08827165514230728, -0.058118272572755814, 0.021575644612312317, -0.011549726128578186, -0.024287013337016106, -0.03759397566318512, 0.011811983771622181, 0.07761085033416748, -0.014056018553674221, -0.0317961648106575, -0.045154742896556854, 1.065820652002003e-05, 0.0009671580628491938, 0.0319497250020504, -0.08801928907632828, 0.004824651405215263, -0.002528687473386526, 0.041676804423332214, -0.0731349065899849, -0.019163021817803383, 0.05517692491412163, 0.04855989292263985, -0.0734994038939476, -0.056729402393102646, 0.0416506789624691, -0.027206914499402046, -0.03229725733399391, 0.0011637061834335327, 0.035712406039237976, 0.0268941018730402, 0.04487167298793793, -0.07204551249742508, 0.010250774212181568, 0.08512023836374283, -0.05551671236753464, 0.08445648103952408, 0.022510835900902748, -0.03506754711270332, -0.020992329344153404, -0.008754144422709942, 0.027985190972685814, -0.05371435359120369, -0.06628593057394028, -0.0025492196436971426, 0.035209741443395615, -0.07791469246149063, 0.024845298379659653, 0.058019958436489105, -0.0005573404487222433, 0.006417613942176104, 0.052936404943466187, 0.032844264060258865, -0.006607980001717806, -0.07580096274614334, 0.08380015194416046, -0.0014097740640863776, 0.04574240371584892, 0.024943744763731956, -0.016553986817598343, 0.0017386050894856453, 0.08827883750200272, -0.020631881430745125, -0.01202513836324215, -0.08629076182842255, 0.003218771191313863, 0.04337109625339508, -0.028991714119911194, 0.014970637857913971, 0.03819136694073677, 0.008864963427186012, 0.01039881817996502, 0.055644888430833817, 0.03165896609425545, -0.05585557594895363, -0.022834381088614464, 0.018182266503572464, -0.026604246348142624, -0.021550951525568962, 0.022474531084299088, 0.016460075974464417, 0.011532576754689217, 0.05014573410153389, -0.036120522767305374, 0.008517635986208916, -0.02803235873579979, -0.008933662436902523, 0.014798750169575214, -0.039744604378938675, -0.015308464877307415, -0.05661085620522499, 0.0159829743206501, -0.018840663135051727, -8.616432023700327e-05, 0.06663113832473755, 0.0852997899055481, -0.054595332592725754, -0.005473841913044453, -0.06427706032991409, 0.04927242547273636, -0.007776080630719662, -0.025907116010785103, 0.00446320278570056, 0.013426465913653374, -0.04250778257846832, -0.016954492777585983, 0.0380898155272007, 0.014274937100708485, 0.035615473985672, -0.031558748334646225, -0.036408666521310806, 0.013005170039832592, 0.00011254007404204458, -0.03359176218509674, -0.015793904662132263, 0.05955338850617409, 0.012033618986606598, 0.005707837641239166, 0.08594825118780136, 0.010050035081803799, 0.03565722331404686]},
{"question": "How to join (merge) data frames (inner, outer, left, right)", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>Given two data frames:</p>\n\n<pre><code>df1 = data.frame(CustomerId = c(1:6), Product = c(rep(\"Toaster\", 3), rep(\"Radio\", 3)))\ndf2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep(\"Alabama\", 2), rep(\"Ohio\", 1)))\n\ndf1\n#  CustomerId Product\n#           1 Toaster\n#           2 Toaster\n#           3 Toaster\n#           4   Radio\n#           5   Radio\n#           6   Radio\n\ndf2\n#  CustomerId   State\n#           2 Alabama\n#           4 Alabama\n#           6    Ohio\n</code></pre>\n\n<p>How can I do database style, i.e., <a href=\"http://en.wikipedia.org/wiki/Join_%28SQL%29\" rel=\"noreferrer\">sql style, joins</a>? That is, how do I get:</p>\n\n<ul>\n<li>An <a href=\"http://en.wikipedia.org/wiki/Join_%28SQL%29#Inner_join\" rel=\"noreferrer\">inner join</a> of <code>df1</code> and <code>df2</code>:<br>\nReturn only the rows in which the left table have matching keys in the right table.</li>\n<li>An <a href=\"http://en.wikipedia.org/wiki/Join_%28SQL%29#Outer_join\" rel=\"noreferrer\">outer join</a> of <code>df1</code> and <code>df2</code>:<br>\nReturns all rows from both tables, join records from the left which have matching keys in the right table.</li>\n<li>A <a href=\"http://en.wikipedia.org/wiki/Join_%28SQL%29#Left_outer_join\" rel=\"noreferrer\">left outer join (or simply left join)</a> of <code>df1</code> and <code>df2</code><br>\nReturn all rows from the left table, and any rows with matching keys from the right table.</li>\n<li>A <a href=\"http://en.wikipedia.org/wiki/Join_%28SQL%29#Right_outer_join\" rel=\"noreferrer\">right outer join</a> of <code>df1</code> and <code>df2</code><br>\nReturn all rows from the right table, and any rows with matching keys from the left table.</li>\n</ul>\n\n<hr>\n\n<p><strong>Extra credit:</strong></p>\n\n<p>How can I do a SQL style select statement?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>By using the <code>merge</code> function and its optional parameters:</p>\n\n<p><strong><em>Inner join:</em></strong> <code>merge(df1, df2)</code> will work for these examples because R automatically joins the frames by common variable names, but you would most likely want to specify <code>merge(df1, df2, by = \"CustomerId\")</code> to make sure that you were matching on only the fields you desired.  You can also use the <code>by.x</code> and <code>by.y</code> parameters if the matching variables have different names in the different data frames.</p>\n\n<p><strong><em>Outer join:</em></strong> <code>merge(x = df1, y = df2, by = \"CustomerId\", all = TRUE)</code></p>\n\n<p><strong><em>Left outer:</em></strong> <code>merge(x = df1, y = df2, by = \"CustomerId\", all.x = TRUE)</code></p>\n\n<p><strong><em>Right outer:</em></strong> <code>merge(x = df1, y = df2, by = \"CustomerId\", all.y = TRUE)</code></p>\n\n<p><strong><em>Cross join:</em></strong> <code>merge(x = df1, y = df2, by = NULL)</code></p>\n\n<p><strike>Just as with the inner join, you would probably want to explicitly pass \"CustomerId\" to R as the matching variable.</strike>  I think it's almost always best to explicitly state the identifiers on which you want to merge; it's safer if the input data.frames change unexpectedly and easier to read later on.</p>\n\n<p>You can merge on multiple columns by giving <code>by</code> a vector, e.g., <code>by = c(\"CustomerId\", \"OrderId\")</code>. </p>\n\n<p>If the column names to merge on are not the same, you can specify, e.g., <code>by.x = \"CustomerId_in_df1\", by.y = \"CustomerId_in_df2\"</code> where <code>CustomerId_in_df1</code> is the name of the column in the first data frame and <code>CustomerId_in_df2</code> is the name of the column in the second data frame. (These can also be vectors if you need to merge on multiple columns.)</p>\n    </div>", "total_vectors": [0.04325028136372566, -0.08418527990579605, -0.01686238683760166, 0.020701197907328606, 0.029267191886901855, -0.057014498859643936, 0.048491738736629486, -0.03435337916016579, -0.0495125912129879, 0.0790623128414154, 0.03605612367391586, -0.02691219560801983, 0.011832492426037788, -0.00931707862764597, -0.008485152386128902, 0.08856312185525894, -0.012511050328612328, -0.06016041710972786, 0.002266969531774521, -0.006675319746136665, -0.011123180389404297, 0.05693390592932701, 0.059306927025318146, 0.013385985977947712, 0.012192003428936005, -0.06949831545352936, 0.07497859746217728, 0.027018476277589798, 0.01747298240661621, 0.01856304705142975, -0.04072865843772888, 0.05186070501804352, 0.0814821794629097, -0.00572972884401679, 0.05198511853814125, 0.03474040329456329, -0.046605393290519714, 0.06429322063922882, -0.04864690080285072, -0.03949788585305214, -0.061591751873493195, -0.044525690376758575, 0.012632504105567932, -0.01021520420908928, 0.07220283895730972, -0.04974609613418579, -0.03962497413158417, 0.04886055365204811, -0.009743046946823597, -0.021979691460728645, -0.03185499459505081, 0.08665172010660172, -6.610641139559448e-05, 0.024677788838744164, 0.06422632187604904, -0.07406708598136902, 0.060310542583465576, -0.0485428124666214, 0.035434067249298096, 0.025229837745428085, -0.07251852750778198, 0.026231402531266212, 0.03621343895792961, 0.02787916548550129, -0.01050228625535965, -0.04442461580038071, 0.021252218633890152, -0.04169783741235733, 0.0038609951734542847, 0.006022782064974308, 0.009029222652316093, 0.04026715084910393, 0.0022235047072172165, 0.0654822289943695, -0.0013177760411053896, -0.05065205320715904, 0.06513858586549759, 0.07012641429901123, -0.03181307762861252, -0.02794884890317917, 0.07842789590358734, 0.002338012447580695, 0.023383034393191338, -0.07410014420747757, -0.03227217495441437, -0.05268203094601631, 0.021397365257143974, 0.029698584228754044, -0.06842608004808426, -0.052381210029125214, -0.04539025202393532, -0.006280980538576841, 0.01683095283806324, 0.06674884259700775, 0.03587687388062477, -0.05993911996483803, -0.024187078699469566, 0.025928374379873276, -0.02295704185962677, -0.08022327721118927, -0.032566312700510025, 0.0404227152466774, -0.05917968600988388, -0.03006751649081707, -0.03201516717672348, 0.08292435109615326, 0.013222664594650269, 0.056790195405483246, 0.07915907353162766, -0.014947730116546154, -0.040967538952827454, -0.0018705069087445736, -0.02690541371703148, 0.038012683391571045, 0.0064789908938109875, 0.04016639664769173, 0.03233872726559639, 0.032043345272541046, -0.03855932876467705, -0.05527012422680855, -0.029259419068694115, 0.021280847489833832, -0.011254160664975643, 0.05062950402498245, 0.022251836955547333, 0.04436693713068962, -0.019018113613128662, -0.008857880719006062, 0.0555015504360199, 0.03448428586125374, 0.04883154481649399, 0.0021133706904947758, 0.018327053636312485, -0.0330628827214241, -0.061634816229343414, -0.010145782493054867, -0.00937863439321518, 0.00019159757357556373, 0.03474026173353195, -0.06152767315506935, 0.054907526820898056, -0.013781081885099411, 0.007559534627944231, 0.022253146395087242, -0.050035860389471054, -0.054550930857658386, 0.026146480813622475, 0.020827028900384903, 0.04840652272105217, -0.0367976613342762, -0.04631299898028374, -0.03236344829201698, 0.04706503823399544, 0.0016947782132774591, 0.061346154659986496, 0.054489489644765854, -0.06764774024486542, -0.05039246380329132, -0.023611711338162422, 0.01797722652554512, -0.08304593712091446, 0.03644359111785889, -0.07570728659629822, 0.07644791901111603, -0.01622536964714527, -0.061312705278396606, -0.0370241142809391, 0.01918824203312397, 0.025675350800156593, -0.04561731219291687, 0.02132728509604931, -0.0017696100985631347, -0.018495293334126472, 0.0787079781293869, 0.045489586889743805, 0.014284313656389713, 0.006988573353737593, 0.07822449505329132, -0.03309357911348343, -0.06909839063882828, 0.07197485119104385, 0.06370005011558533, -0.005044025834649801, 0.008928108960390091, -0.020145079120993614, -0.008085235022008419, -0.009863264858722687, 0.057593706995248795, -0.025590358301997185, 0.010404269210994244, 0.015419268980622292, -0.05332739278674126, -0.005697529297322035, 0.0012825855519622564, -0.03163619339466095, 0.06040405109524727, 0.003343266202136874, 0.08821197599172592, 0.0345010906457901, -0.0393265075981617, 0.0169818177819252, -0.036719758063554764, -0.01517979521304369, 0.04779353737831116, 0.010925504378974438, -0.0232001431286335, -0.05717630311846733, -0.06157362088561058, -0.06944511085748672, 0.018229275941848755, 0.014178059063851833, 0.024138884618878365, -0.0011954492656514049, 0.01294039562344551, 0.042235713452100754, 0.004140427801758051, -0.039035022258758545, 0.02666136622428894, 0.03054051846265793, 0.052810318768024445, 0.03689911589026451, -0.03474804013967514, 0.04239366948604584, 0.05943044647574425, 0.04516952112317085, 0.017491405829787254, 0.03305601328611374, -0.006856335327029228, -0.03160257637500763, 0.053255755454301834, -0.03800055384635925, 0.015253659337759018, -0.03858679160475731, -0.05415112525224686, 0.07922530919313431, -0.027483375743031502, 0.06726714223623276, 0.07446835190057755, -0.016136854887008667, 0.013637199997901917, -0.011724061332643032, -0.003676679218187928, -0.08580999076366425, 0.01718081720173359, 0.002201578812673688, 0.08442233502864838, -0.00403065187856555, 0.03708204999566078, 0.03482092544436455, 0.07597000151872635, -0.05638878419995308, 0.009294571354985237, -0.0028152570594102144, -0.07292857766151428, -0.005736727733165026, 0.06528550386428833, -0.057832155376672745, -0.07626103609800339, 0.008961851708590984, 0.07269119471311569, -0.06734355539083481, 0.013154315762221813, -0.07139043509960175, 0.03712436929345131, -0.004927120637148619, 0.022821202874183655, -0.04535439610481262, -0.06486969441175461, -0.04029710218310356, 0.018704183399677277, -0.07115820795297623, -0.06993135809898376, 0.058953214436769485, 0.04852283000946045, -0.0174891147762537, 0.07177938520908356, 0.011916586197912693, -0.044027186930179596, 0.07275845110416412, 0.04615326598286629, 0.03289339691400528, -0.033649295568466187, 0.027166279032826424, 0.02145501598715782, -0.03068768046796322, -0.05761390179395676, 0.005483351647853851, -0.06159354746341705, -0.0059495605528354645, -0.04986264184117317, 0.016709426417946815, -0.05316173657774925, -0.05053160712122917, -0.07733539491891861, 0.0598033107817173, -0.005879716947674751, 0.06268322467803955, -0.07663743942975998, 0.02470541000366211, -0.04835817217826843, -0.040934473276138306, -0.06173061951994896, -0.014413196593523026, -0.03386368975043297, 0.02805851399898529, 0.02464248053729534, 0.009400884620845318, -0.06659386307001114, -0.03035326860845089, 0.05038052424788475, -0.02409670501947403, -0.032329756766557693, 0.041191667318344116, 0.029791036620736122, -0.00895152147859335, 0.03616536781191826, -0.04565488547086716, 0.01868915744125843, 0.06467629224061966, -0.06270813941955566, -0.015952259302139282, -0.05049451068043709, -0.011227402836084366, -0.07310500741004944, -0.04866394028067589, 0.01352848019450903, 0.056055981665849686, -0.07606136053800583, 0.02292773686349392, -0.059636469930410385, 0.0675664097070694, -0.04821202903985977, 0.060934603214263916, 0.06375576555728912, -0.04636496305465698, -0.023833246901631355, -0.01679789088666439, -0.07037860155105591, 0.02900477685034275, -0.006698590703308582, 0.04238833859562874, 0.02472810074687004, 0.024966664612293243, -0.03700230270624161, -0.0869247317314148, 0.06236288323998451, 0.007169362157583237, 0.006262675859034061, -0.07620517164468765, 0.056931737810373306, -0.008042442612349987, 0.053640469908714294, -0.01969824731349945, -0.04048712179064751, 0.05788324028253555, -0.05142175033688545, -0.08628525584936142, -0.06472863256931305, -0.04895621910691261, 0.027200689539313316, -0.009077298454940319, 0.0389084666967392, -0.08367591351270676, 0.015829749405384064, 0.060655079782009125, 0.02460572123527527, -0.06261856853961945, -0.01279937569051981, 0.031486935913562775, 0.002250956604257226, 0.025730840861797333, 0.018949761986732483, 0.02222721092402935, 0.07332863658666611, 0.016702692955732346, -0.01583530195057392, -0.009957753121852875, 0.01877543330192566, 0.047859761863946915, -0.05522143095731735, 0.05445220321416855, 0.043834298849105835, 0.07253248244524002, 0.004587793257087469, 0.05082688480615616, -0.018560852855443954, 0.061295285820961, 0.04285195469856262, 0.057071343064308167, -0.02953287586569786, -0.024420997127890587, -0.049771882593631744, -0.058345895260572433, -0.016245299950242043, -0.07443952560424805, 0.06500469148159027, -0.027563419193029404, -0.03533915430307388, -0.021191932260990143, 0.05421536788344383, 0.03795589506626129, -0.013051522895693779, 0.03822418674826622, -0.013611703179776669, 0.036643847823143005, -0.014718146063387394, -0.06722588837146759, -0.008412200026214123, 0.014559869654476643, -0.022098209708929062, -0.03926817700266838, -0.051505547016859055, 0.029261598363518715, -0.0387757234275341, 0.0111932922154665, -0.04275592416524887, 0.05383611097931862, -0.0031720204278826714, -0.07094138115644455, 0.07735501229763031, -0.03346440568566322, 0.061799392104148865, -0.05933726578950882, -0.057621072977781296, 0.002934883115813136, 0.03630969673395157, -0.02176421508193016, 0.07278051972389221, -0.048065733164548874, 0.03487822785973549, 0.04945485293865204, -0.03142176568508148, 0.0005656964494846761, -0.005510720424354076, -0.06994260847568512, 0.003219358855858445, -0.005967909470200539, 0.026915602385997772, -0.02090192399919033, -0.07710538059473038, -0.06722057610750198, 0.024855399504303932, -0.021345632150769234, 0.03375614061951637, 0.05588889122009277, 0.034372299909591675, 0.007940626703202724, -0.07674454897642136, -0.04842378944158554, 0.007986798882484436, 0.07097364217042923, 0.014415341429412365, 0.07859059423208237, 0.05654243752360344, 0.0400996133685112, -0.01757180131971836, 0.07220984995365143, -0.02997305616736412, -0.007184753194451332, 0.05641684681177139, 0.045680560171604156, 0.016182154417037964, 0.04789624735713005, -0.019262120127677917, 0.01447930559515953, -0.049467217177152634, -0.010679371654987335, -0.04787566885352135, 0.02079850807785988, -0.02309277653694153, 0.07016531378030777, 0.011737260967493057, -0.05575587972998619, -0.031091803684830666, -0.002332948846742511, -0.0520726703107357, -0.0005857368232682347, -0.01902689039707184, -0.06866446137428284, -0.07683999091386795, -0.054736968129873276, 0.012022580951452255, 0.00044718393473885953, 0.016968321055173874, 0.0621960423886776, 0.07498176395893097, 0.0752163901925087, 0.008437271229922771, -0.04589027166366577, -0.025219792500138283, -0.05024079233407974, 0.037171099334955215, -0.040958549827337265, 0.03001074679195881, -0.02185916341841221, -0.036943305283784866, 0.05871700495481491, 0.004085229244083166, -0.04812360554933548, 0.0036799705121666193, 0.032308429479599, 0.05463284254074097, 0.02757316455245018, -0.003181606763973832, -0.0358259342610836, 0.00741835031658411, -0.059093695133924484, 0.03384065628051758, -0.0005105370073579252, 0.07880013436079025, 0.022069334983825684, 0.0004640107217710465]},
{"question": "Is there a CSS parent selector?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>How do I select the <code>&lt;li&gt;</code> element that is a direct parent of the anchor element?</p>\n\n<p>As an example, my CSS would be something like this:</p>\n\n<pre><code>li &lt; a.active {\n    property: value;\n}\n</code></pre>\n\n<p>Obviously there are ways of doing this with JavaScript, but I'm hoping that there is some sort of workaround that exists native to CSS Level 2.</p>\n\n<p>The menu that I am trying to style is being spewed out by a CMS, so I can't move the active element to the <code>&lt;li&gt;</code> element... (unless I theme the menu creation module which I'd rather not do).</p>\n\n<p>Any ideas?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>There is currently no way to select the parent of an element in CSS.</p>\n<p>If there was a way to do it, it would be in either of the current CSS selectors specs:</p>\n<ul>\n<li><a href=\"https://www.w3.org/TR/css3-selectors/#selectors\" rel=\"noreferrer\">Selectors Level 3 Spec</a></li>\n<li><a href=\"https://www.w3.org/TR/CSS2/selector.html#pattern-matching\" rel=\"noreferrer\">CSS 2.1 Selectors Spec</a></li>\n</ul>\n<p>That said, the <a href=\"https://dev.w3.org/csswg/selectors4/#relational\" rel=\"noreferrer\">Selectors Level 4 Working Draft</a> includes a <code>:has()</code> pseudo-class that will provide this capability. It will be similar to the <a href=\"https://api.jquery.com/has-selector/\" rel=\"noreferrer\">jQuery implementation</a>.</p>\n<pre class=\"lang-css prettyprint-override\"><code>li:has(&gt; a.active) { /* styles to apply to the li tag */ }\n</code></pre>\n<p>However, as of 2020, <strong><a href=\"https://caniuse.com/#feat=css-has\" rel=\"noreferrer\">this is still not supported by any browser</a></strong>.</p>\n<p>In the meantime, you'll have to resort to JavaScript if you need to select a parent element.</p>\n    </div>", "total_vectors": [0.050942759960889816, -0.020894702523946762, 0.06733245402574539, 0.04736664146184921, -0.024406755343079567, 0.024577265605330467, 0.01598668098449707, -0.04382632300257683, 0.051906753331422806, 0.018065227195620537, 0.03232641890645027, 0.050064098089933395, 0.025897927582263947, 0.0663181021809578, 0.05127955228090286, 0.08408232033252716, -0.08334386348724365, 0.04882177338004112, 0.028862232342362404, -0.08005199581384659, -0.015577968209981918, 0.02725997008383274, -0.021430719643831253, -0.00739153241738677, 0.0061067743226885796, -0.062400296330451965, -0.03893638402223587, -0.031701117753982544, -0.021395942196249962, 0.05720921605825424, 0.015904782339930534, -0.01038957480341196, 0.08240368217229843, -0.04846988990902901, 0.06152515858411789, -0.03682431951165199, -0.03188738226890564, 0.0010710677597671747, -0.04234835505485535, 0.054848019033670425, 0.08316588401794434, -0.03343994915485382, 0.024675579741597176, 0.06374357640743256, 0.08175918459892273, -0.014121396467089653, 0.01667676866054535, -0.02488972805440426, -0.0007007642998360097, 0.022159390151500702, 0.08026022464036942, 0.08422236144542694, 0.06282748281955719, -0.04843887686729431, -0.007846652530133724, 0.004182528704404831, -0.005490749608725309, 0.03224702179431915, -0.02205716446042061, 0.041414689272642136, -0.05293990299105644, -0.05114281177520752, -0.0757756307721138, -0.055328574031591415, -0.021121887490153313, -0.04702458530664444, -0.01752573437988758, -0.06361006945371628, 0.03971326723694801, 0.0045892721973359585, -0.07724810391664505, 0.013362127356231213, 0.04565636068582535, 0.04554716870188713, 0.012467310763895512, 0.05385198816657066, 0.016680393368005753, 0.02009105496108532, -0.052643321454524994, -0.001826072228141129, -0.03710062429308891, -0.006857144180685282, 0.051661185920238495, -0.005413512233644724, 0.00918689277023077, -0.050250258296728134, 0.04368562623858452, 0.030497735366225243, 0.01183495856821537, -0.050146717578172684, -0.02692236937582493, 0.0315166674554348, -0.05580785498023033, 0.04963316023349762, -0.0696190819144249, 0.02943783812224865, -0.05470673739910126, -0.009455201216042042, -0.009683678857982159, -0.05129779875278473, 0.04822668433189392, -0.039681024849414825, -0.02509940415620804, 0.028690563514828682, 0.0837944746017456, -0.01903441734611988, 0.08140972256660461, 0.007178294472396374, -0.0038395775482058525, -0.0013151948805898428, 0.07377849519252777, -0.04103203862905502, -0.028612950816750526, 0.05781710520386696, 0.020844552665948868, 0.0280119851231575, 0.013080021366477013, 0.01910746842622757, -0.05832994356751442, 0.023072753101587296, 0.06364413350820541, -0.049147553741931915, -0.0375673808157444, -0.020477714017033577, -0.054925646632909775, 0.007435804232954979, -0.010112758725881577, -0.003677566070109606, 0.05403057858347893, 0.02548777312040329, -0.04124649614095688, 0.029600800946354866, -0.031405139714479446, 0.07625678181648254, 0.02030801959335804, 0.018314769491553307, 0.050994664430618286, 0.022626986727118492, 0.013429869897663593, 0.08153405040502548, 0.05665111541748047, 0.012229322455823421, -0.004011506214737892, 0.00710920337587595, -0.026445729658007622, -0.08053305745124817, -0.011147280223667622, 0.008911224082112312, 0.07546831667423248, -0.05507225543260574, -0.008719658479094505, 0.012196039780974388, -0.047189969569444656, -0.02149316482245922, 0.031262610107660294, -0.010755770839750767, -0.02057100273668766, -0.018218031153082848, -0.016589587554335594, 0.0476936399936676, -0.01048937439918518, 0.08134377002716064, 0.007122728507965803, -0.0005289679975248873, -0.0204963106662035, 0.04462110623717308, -0.0577085055410862, 0.006047273986041546, -0.031601402908563614, -0.04437565058469772, 0.004632910247892141, -0.01309470646083355, 0.06852176785469055, -0.045789122581481934, 0.004442861769348383, -0.021435527130961418, -0.04044509679079056, -0.043438807129859924, -0.014084937982261181, 0.06593195348978043, 0.055962204933166504, -0.014978780411183834, 0.010273865424096584, 0.039598096162080765, 0.04114009439945221, -0.010382416658103466, 0.04930625110864639, 0.054585330188274384, -0.026485074311494827, 0.06921267509460449, 0.021183721721172333, 0.005686920136213303, 0.05335228517651558, -0.04167113080620766, -0.024829834699630737, 0.04129664599895477, 0.00029631846700794995, 0.08410772681236267, 0.07388029247522354, -0.037124939262866974, -0.005619645584374666, 0.006768097635358572, -0.08350282907485962, 0.011144024319946766, 0.019004110246896744, 0.05154655873775482, 0.03722335770726204, -0.0421355739235878, 0.009928452782332897, 0.029233144596219063, -0.023026157170534134, -0.05961039289832115, 0.018924755975604057, 0.06131899356842041, 0.062490131705999374, 0.016376376152038574, -0.021114470437169075, 0.046720895916223526, 0.05658552795648575, -0.014969241805374622, 0.0827525407075882, -0.005214056000113487, -0.0016834527486935258, 0.04780362546443939, 0.057748690247535706, 0.006789281498640776, -0.06079382076859474, -0.035627830773591995, 0.03263404220342636, -0.023427996784448624, 0.05939757823944092, -0.027051834389567375, 0.02109302021563053, 0.00012493840768001974, 0.06177325174212456, -0.024080144241452217, 0.07079754769802094, -0.04929421842098236, 0.03309114649891853, -0.010694441385567188, -0.02786615863442421, 0.0428999699652195, -0.011909532360732555, -0.029003875330090523, 0.06884436309337616, 0.06290189921855927, 0.0010852980194613338, 0.06401782482862473, -0.08248897641897202, 0.07124807685613632, -0.058926522731781006, 0.030159318819642067, -0.018189262598752975, 0.057818084955215454, -0.05077860876917839, -0.05270358547568321, 0.03573315963149071, -0.05217494070529938, 0.04533332586288452, -0.004269958473742008, -0.0737471729516983, -0.01529353391379118, 0.032220032066106796, 0.02861233614385128, 0.03580327332019806, 0.014071187935769558, -0.01551884226500988, -0.05187822878360748, 0.024029899388551712, 0.05529569834470749, -0.03005197085440159, -0.002210735809057951, -0.08120688796043396, 0.008326617069542408, -0.05598395690321922, 0.016584407538175583, -0.0258235651999712, -0.06656953692436218, 0.07272148132324219, -0.025470515713095665, 0.0483703576028347, 0.06759089231491089, -0.02350769191980362, 0.018362170085310936, 0.01486874371767044, -0.07104229182004929, -0.015020952560007572, -0.042624231427907944, -0.01876441016793251, 0.07962735742330551, 0.04088447242975235, -0.044882770627737045, 0.03378942236304283, 0.015948986634612083, 0.05130854249000549, -0.030802734196186066, 0.0356035977602005, -0.07868167012929916, -0.0800340473651886, 0.00028598154312931, 0.018017960712313652, -0.07437031716108322, 0.04761817678809166, -0.050535328686237335, 0.06942683458328247, 0.05702679231762886, 0.04375737905502319, 0.07098851352930069, -0.00981226284056902, 0.04191245883703232, -0.02868698537349701, 0.031481124460697174, 0.00372512498870492, -0.07024090737104416, 0.06169908866286278, 0.08243689686059952, 0.02294563129544258, 0.032442133873701096, -0.0274153184145689, 0.021636581048369408, 0.08362460881471634, -0.016497576609253883, 0.012592012993991375, -0.03569883108139038, -0.012495764531195164, 0.041351739317178726, 0.02889474295079708, -0.06618785113096237, 0.02801390178501606, -0.02460428699851036, -0.041037824004888535, -0.07052262872457504, -0.05670243129134178, -0.015076301991939545, -0.030371887609362602, 0.06093728542327881, -0.01733183115720749, -0.0021628965623676777, 0.07736610621213913, -0.04773661121726036, 0.01728116348385811, 0.000730346015188843, 0.03931613638997078, -0.0561530664563179, -0.08278095722198486, 0.049879204481840134, 0.06171409785747528, -0.06774461269378662, 0.05838905647397041, 0.015555967576801777, -0.031859248876571655, 0.012223917990922928, 0.020986907184123993, 0.061778724193573, 0.016441581770777702, -0.04611225053668022, -0.08223935216665268, 0.03733746334910393, 0.011547049507498741, -0.01788555271923542, -0.06656718254089355, 0.06317222118377686, -0.08070444315671921, 0.021933412179350853, -0.0837266594171524, -0.039964959025382996, -0.07863624393939972, 0.02899531088769436, 0.049974601715803146, 0.03786896541714668, 0.0201810821890831, -0.04138755053281784, 0.04384130612015724, 0.05752455070614815, -0.027514642104506493, -0.013935830444097519, 0.022933727130293846, 0.05757513269782066, -0.059814490377902985, 0.027088690549135208, 0.012772607617080212, -0.07246455550193787, 0.04391759634017944, 0.06461898237466812, -0.004227792844176292, 0.04685064032673836, 0.039056677371263504, -0.05019505321979523, 0.05869187414646149, 0.02755769155919552, -0.04967150464653969, -0.0361628457903862, 0.08396990597248077, 0.050604332238435745, 0.00275987247005105, -0.05668522045016289, 0.00946519710123539, -0.04538033902645111, 0.0031011176761239767, 0.0517321415245533, -0.020853305235505104, 0.01420349907130003, -0.012919770553708076, 0.03217295929789543, -0.04765000566840172, -0.04059575870633125, -0.048663053661584854, -0.0464625246822834, 0.006226124707609415, -0.0016459707403555512, -0.0708680972456932, 0.025659611448645592, -0.018611520528793335, -0.009199939668178558, -0.00722187664359808, 0.07939168065786362, 0.05812656879425049, 0.05351240560412407, 0.01856619119644165, -0.055458132177591324, 0.006299909669905901, -0.05598410964012146, -0.010624355636537075, -0.020568758249282837, 0.005478547420352697, 0.055730532854795456, 0.02637258730828762, 0.07778468728065491, -0.05278212949633598, -0.05564918741583824, 0.02200535498559475, -0.026669273152947426, -0.024969017133116722, -0.0656973123550415, -0.07059216499328613, 0.0577329657971859, -0.07643162459135056, -0.08360403031110764, -0.05700075626373291, -0.03299311175942421, -0.029032841324806213, -0.04519876837730408, -0.06619873642921448, 0.012364991009235382, -0.02745489403605461, 0.07229381799697876, 0.02308565378189087, 0.06443814933300018, 0.012552717700600624, -0.0043981620110571384, 0.05539697781205177, -0.007251747418195009, 0.0814492329955101, 0.026796232908964157, 0.038654182106256485, -0.0754573866724968, 0.038919270038604736, 0.017494989559054375, -0.03873907029628754, 0.06512217968702316, -0.08423501253128052, 0.0294841006398201, 0.0071485708467662334, -0.026284152641892433, 0.05606813728809357, -0.057292524725198746, 0.03278175741434097, -0.05186758190393448, -0.044875625520944595, -0.014052054844796658, 0.024449674412608147, -0.05426514893770218, -0.07562147825956345, 0.0351531021296978, 0.0010095133911818266, -0.062417760491371155, 0.008298995904624462, 0.029730727896094322, 0.01505852397531271, -0.079872265458107, -0.021062232553958893, 0.0382467582821846, -0.04076647385954857, 0.02109953574836254, -0.028836630284786224, -0.05049942806363106, -0.01739567145705223, 0.012730526737868786, 0.009256747551262379, 0.01318619679659605, -0.04300417751073837, 0.007597242947667837, 0.06737682968378067, -0.060174886137247086, -0.035714440047740936, 0.002077051904052496, 0.009855012409389019, -0.02057119458913803, -0.01836632937192917, -0.048703987151384354, -0.015331876464188099, 0.0766180157661438, 0.015049457550048828, 0.0417083278298378, 0.019014770165085793, 0.014317316934466362, 0.019500039517879486, -0.020954972133040428, 0.05314544960856438, 0.05081076920032501, -0.024285977706313133, -0.00526281027123332]},
{"question": "\u201cLeast Astonishment\u201d and the Mutable Default Argument", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>Anyone tinkering with Python long enough has been bitten (or torn to pieces) by the following issue:</p>\n\n<pre><code>def foo(a=[]):\n    a.append(5)\n    return a\n</code></pre>\n\n<p>Python novices would expect this function to always return a list with only one element: <code>[5]</code>. The result is instead very different, and very astonishing (for a novice):</p>\n\n<pre><code>&gt;&gt;&gt; foo()\n[5]\n&gt;&gt;&gt; foo()\n[5, 5]\n&gt;&gt;&gt; foo()\n[5, 5, 5]\n&gt;&gt;&gt; foo()\n[5, 5, 5, 5]\n&gt;&gt;&gt; foo()\n</code></pre>\n\n<p>A manager of mine once had his first encounter with this feature, and called it \"a dramatic design flaw\" of the language. I replied that the behavior had an underlying explanation, and it is indeed very puzzling and unexpected if you don't understand the internals. However, I was not able to answer (to myself) the following question: what is the reason for binding the default argument at function definition, and not at function execution? I doubt the experienced behavior has a practical use (who really used static variables in C, without breeding bugs?)</p>\n\n<p><strong>Edit</strong>: </p>\n\n<p>Baczek made an interesting example. Together with most of your comments and Utaal's in particular, I elaborated further:</p>\n\n<pre><code>&gt;&gt;&gt; def a():\n...     print(\"a executed\")\n...     return []\n... \n&gt;&gt;&gt;            \n&gt;&gt;&gt; def b(x=a()):\n...     x.append(5)\n...     print(x)\n... \na executed\n&gt;&gt;&gt; b()\n[5]\n&gt;&gt;&gt; b()\n[5, 5]\n</code></pre>\n\n<p>To me, it seems that the design decision was relative to where to put the scope of parameters: inside the function or \"together\" with it?</p>\n\n<p>Doing the binding inside the function would mean that <code>x</code> is effectively bound to the specified default when the function is called, not defined, something that would present a deep flaw: the <code>def</code> line would be \"hybrid\" in the sense that part of the binding (of the function object) would happen at definition, and part (assignment of default parameters) at function invocation time.</p>\n\n<p>The actual behavior is more consistent: everything of that line gets evaluated when that line is executed, meaning at function definition.</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p>Actually, this is not a design flaw, and it is not because of internals, or performance.<br>\nIt comes simply from the fact that functions in Python are first-class objects, and not only a piece of code.</p>\n<p>As soon as you get to think into this way, then it completely makes sense: a function is an object being evaluated on its definition; default parameters are kind of \"member data\" and therefore their state may change from one call to the other - exactly as in any other object.</p>\n<p>In any case, Effbot has a very nice explanation of the reasons for this behavior in <a href=\"https://web.archive.org/web/20200221224620/http://effbot.org/zone/default-values.htm\" rel=\"noreferrer\">Default Parameter Values in Python</a>.<br>\nI found it very clear, and I really suggest reading it for a better knowledge of how function objects work.</p>\n    </div>", "total_vectors": [0.012120784260332584, -0.02344706654548645, -0.050035808235406876, -0.0025471076369285583, 0.04782187193632126, 0.06961848586797714, 0.020438065752387047, 0.011905249208211899, -0.03453375771641731, 0.08366870135068893, -0.052395038306713104, 0.0007944305543787777, 0.012008164077997208, -0.035033609718084335, 0.02741551212966442, 0.08016852289438248, 0.04869851469993591, 0.056195296347141266, 0.012931759469211102, 0.03905602544546127, 0.07877442240715027, 0.0727105364203453, 0.0028096355963498354, 0.04177656024694443, 0.0005554669187404215, 0.0007989350124262273, 0.06104184687137604, -0.0011648386716842651, -0.040240999311208725, -0.02412908896803856, 0.04657282307744026, 0.06515797227621078, -0.0578664131462574, -0.05832436680793762, -0.07285894453525543, -0.023796938359737396, -0.03277414292097092, -0.03406129404902458, 0.05075936019420624, 0.07291972637176514, 0.024043647572398186, -0.053872641175985336, 0.04626936838030815, -0.013809246942400932, 0.08318772166967392, -0.029539410024881363, -0.051088787615299225, -0.016296491026878357, 0.051645804196596146, -0.04597713053226471, 0.026664869859814644, 0.03975773602724075, -0.003639994654804468, -0.05213739722967148, 0.02699875459074974, -0.049947451800107956, -0.06122712418437004, -0.041214969009160995, -0.012577906250953674, -0.055704548954963684, -0.0681605339050293, -0.007291348651051521, -0.024427905678749084, 0.06066662445664406, -0.009524013847112656, 0.07241854816675186, 0.046102043241262436, -0.012057192623615265, -0.05408798158168793, -0.01825718954205513, 0.04916761443018913, 0.01785323955118656, 0.058733824640512466, 0.03501693904399872, 0.006506458390504122, 0.028677061200141907, -0.0840638279914856, 0.06640120595693588, 0.042990006506443024, 0.07290077209472656, 0.030804572626948357, 0.02532251738011837, -0.031056195497512817, 0.022498667240142822, 0.04346655681729317, 0.01704537123441696, 0.05263388156890869, -0.053438037633895874, -0.07830942422151566, -0.031161198392510414, 0.0345303975045681, 0.03318062424659729, -0.009351029060781002, 0.022678913548588753, -0.04559890180826187, -0.0005152435041964054, 0.010888258926570415, 0.04020114243030548, -0.048103343695402145, -0.05120183154940605, -0.034295376390218735, 0.0694342851638794, 0.04177381843328476, 0.04532041773200035, 0.029886707663536072, 0.012944708578288555, -0.035154663026332855, 0.05408800020813942, -0.0015327977016568184, 0.01947955973446369, -0.03860235586762428, -0.08830226957798004, -0.059412408620119095, -0.0032039822544902563, 0.05327098071575165, -0.004466107580810785, -0.06560961902141571, 0.04582424461841583, -0.015598316676914692, -0.00033016299130395055, -0.007692500948905945, -0.005936626344919205, 0.058158814907073975, -0.003460422856733203, 0.022354397922754288, -0.026903921738266945, -0.058255475014448166, 0.036280110478401184, 0.034431058913469315, 0.012276706285774708, 0.01110224612057209, 0.0007138500805012882, -0.028673194348812103, -0.02017558366060257, 0.012903841212391853, 0.03745026886463165, 0.06177501380443573, 0.03865260258316994, -0.028742261230945587, -0.022490940988063812, -0.06319507956504822, -0.02068060077726841, -0.02249189466238022, -0.03498762473464012, 0.04492916539311409, -0.08092484623193741, 0.06964368373155594, 0.017757443711161613, -0.0024402104318141937, -0.06908323615789413, -0.043174970895051956, 0.005208742804825306, -0.04088771715760231, 0.010961526073515415, -0.03510883450508118, 0.06781517714262009, -0.04954368621110916, -0.0827535018324852, 0.014994046650826931, -0.071137435734272, -0.026750385761260986, -0.03035755082964897, 0.03918226808309555, 0.0031736763194203377, 0.06438083201646805, 0.043143853545188904, -0.07483815401792526, 0.03798133134841919, 0.06835263222455978, -0.00810171663761139, -0.04485589265823364, -0.07791969180107117, 0.05505496263504028, -0.056292951107025146, 0.027695780619978905, 0.016352856531739235, -0.02428228035569191, 0.05473490431904793, 0.01538769155740738, -0.009600702673196793, -0.01768496446311474, -0.0016393959522247314, 0.04688667878508568, -0.00583268329501152, -0.053014885634183884, -0.04935643821954727, 0.0442468523979187, 0.0380253903567791, -0.02399286814033985, -0.022098224610090256, 0.08691579103469849, -0.0504981204867363, 0.06751953810453415, -0.06021067127585411, 0.02621370553970337, 0.06131281331181526, 0.060696691274642944, 0.08775755763053894, 0.07818259298801422, -0.034159209579229355, -0.051858216524124146, 0.06521483510732651, -0.08238991349935532, -0.0485241524875164, 0.0005254512652754784, 0.01814454048871994, 0.0015751353930681944, 0.04097247123718262, -0.040524110198020935, -0.03488260507583618, -0.05731819570064545, 0.0249691940844059, 0.01175602525472641, -0.018645774573087692, -0.06170296669006348, -0.007407902739942074, 0.024980420246720314, 0.02287929318845272, 0.040710385888814926, -0.051834478974342346, -0.015486102551221848, -0.05370702967047691, -0.032499901950359344, 0.06715206056833267, -0.010189836844801903, -0.048454649746418, 0.048428263515233994, -0.03476613759994507, 0.009939554147422314, 0.0523565374314785, 0.00820166151970625, 0.026962554082274437, 0.009869394823908806, 0.03977673128247261, 0.024775324389338493, -0.03012782521545887, 0.009696368128061295, -0.027988022193312645, 0.025272265076637268, 0.021526595577597618, 0.02420964650809765, 0.015889758244156837, -0.0799238383769989, -0.0025907265953719616, -0.01225161924958229, 0.08386501669883728, 0.049784399569034576, 0.06942783296108246, 0.07114557176828384, 0.07602453231811523, -0.0706968829035759, -0.01137720700353384, -0.013380789197981358, 0.00520281819626689, 0.0519794262945652, -0.0005298325559124351, -0.006555561441928148, -0.05244963616132736, 0.01930314488708973, -0.006822632160037756, -0.06851600110530853, -0.07705174386501312, 0.039439428597688675, -0.06840359419584274, -0.051407814025878906, 0.07209143042564392, 0.013534603640437126, 0.05901312455534935, 0.013446862809360027, -0.030226655304431915, -0.08089359104633331, -0.0731586217880249, 0.03751591965556145, 0.08779595047235489, -0.044939685612916946, -0.07349943369626999, -0.0009126238874159753, 0.027803145349025726, 0.053118400275707245, -0.03615204989910126, -0.04013154283165932, -0.034476377069950104, -0.012223346158862114, -0.05417989194393158, 0.04698649421334267, -0.020085258409380913, -0.054658807814121246, 0.00962452869862318, -0.0048823365941643715, -0.016676345840096474, -0.024576859548687935, 0.07306522876024246, -0.0016139571089297533, -0.043007053434848785, -0.07712464034557343, 0.053366098552942276, 0.06106168404221535, -0.019504649564623833, 0.03320486471056938, 0.00128650211263448, 0.027788875624537468, -0.022348519414663315, -0.056984204798936844, 0.024736875668168068, -0.041426148265600204, 0.017560763284564018, -0.037916552275419235, -0.005707240663468838, -0.044664736837148666, 0.023353416472673416, 0.059301842004060745, 0.0322597399353981, -0.010066229850053787, -0.007035483606159687, -0.05631671100854874, 0.02261800318956375, -0.023715628311038017, 0.03294847905635834, -0.01943236216902733, 0.05288330838084221, -0.06761950999498367, -0.07453542202711105, 0.02709481306374073, -0.008216097950935364, 0.03941696137189865, -0.06086137145757675, 0.029721032828092575, 0.002041438827291131, -0.007464013062417507, 0.04549924284219742, -0.05759508162736893, -0.00028279045363888144, 0.06935396790504456, -0.04859244078397751, 0.009740176610648632, -0.03945227712392807, -0.038935694843530655, 0.03895168378949165, 0.04413190856575966, 0.005351774860173464, -0.007731035817414522, 0.00012596504529938102, -0.002817912958562374, -0.04642565920948982, -0.08967295289039612, 0.061067625880241394, 0.06920544058084488, 0.03355146571993828, 0.03223152086138725, -0.005331810098141432, -0.044305626302957535, 0.04087632894515991, -0.0684509202837944, 0.022882670164108276, 0.012397494167089462, 0.035843636840581894, -0.08712051063776016, 0.0005262160557322204, -0.014721485786139965, 0.01234513521194458, 0.06881444156169891, -0.04512065649032593, -0.049893349409103394, 0.04495226591825485, 0.050091441720724106, -0.01082923635840416, -0.03485902026295662, 0.07220768183469772, 0.03522169217467308, -0.032531749457120895, -0.07410218566656113, 0.020000362768769264, -0.03626057505607605, 0.08140828460454941, -0.0173355620354414, 0.02155490592122078, 0.04151300713419914, -0.03967546299099922, -0.05722203105688095, -0.018963133916258812, -0.06110022962093353, -0.04025951400399208, -0.06547777354717255, 0.0570724792778492, 0.0711263045668602, 0.04382624477148056, 0.0299806147813797, 0.0665508434176445, 0.027068322524428368, -0.048854801803827286, 0.05067552253603935, 0.008015148341655731, -0.06064600124955177, -0.0768689513206482, -0.0599556528031826, 0.013653736561536789, 0.015265011228621006, 0.002945934422314167, -0.0652584508061409, -0.03182164579629898, -0.03760535269975662, -0.046644341200590134, 0.02403825893998146, 0.050905682146549225, 0.0012846589088439941, 0.023037556558847427, -0.038110822439193726, -0.011419659480452538, -0.08194371312856674, 0.04836246371269226, -0.01318659819662571, -0.010563228279352188, 0.048882704228162766, 0.010860446840524673, 0.06419984251260757, 0.007742575369775295, -0.06639397889375687, 0.05986188352108002, -0.032068200409412384, 0.007138962857425213, 0.018891964107751846, -0.041260045021772385, 0.024956602603197098, 0.07469888776540756, 0.02667626366019249, -0.011862440966069698, 0.047397516667842865, 0.029224345460534096, -0.05228893458843231, 0.036588240414857864, -0.051448311656713486, 0.06976388394832611, -0.010327018797397614, -0.014074945822358131, 0.05294650048017502, -0.008482011966407299, -0.031902991235256195, 0.07602116465568542, -0.05803665518760681, -0.001666155643761158, 0.056888602674007416, 0.0005212346441112459, 0.05269145220518112, 0.04442640766501427, -0.006602015811949968, -0.0333343967795372, -0.038496822118759155, -0.025301804766058922, 0.04233432561159134, -0.012190968729555607, -0.0176936574280262, -0.03031288832426071, 0.06275874376296997, 0.002795309294015169, 0.05494891107082367, 0.0015374458162114024, 0.02826811373233795, -0.03753846138715744, -0.07733932882547379, -0.0010931725846603513, 0.05018587410449982, -0.020869027823209763, -0.018192924559116364, 0.0753156840801239, -0.010743189603090286, -0.043518081307411194, 0.06042427569627762, 0.009537662379443645, -0.04477240517735481, 0.04770409315824509, 0.0012035793624818325, 0.07451292127370834, 0.030918482691049576, -0.0569099523127079, -0.06132496893405914, 0.028342129662632942, -0.030940091237425804, 0.008990220725536346, 0.07680971920490265, 0.059146326035261154, 0.0002700519107747823, 0.08304303884506226, 0.0163325984030962, -0.04878698289394379, 0.03046504594385624, 0.014074643142521381, -0.05592519789934158, 0.015797413885593414, 0.0653180330991745, -0.05202449485659599, -0.060661155730485916, 0.0021935408003628254, -0.007982419803738594, -0.02070833370089531, 0.021173516288399696, -0.05902829393744469, 0.05810544639825821, -0.010783456265926361, 0.07326417416334152, -0.042444393038749695, -0.011400224640965462, 0.0019051366252824664, 0.026470456272363663, 0.044540707021951675, 0.07272922247648239, -0.03282902017235756, 0.0021641261409968138, 0.054131925106048584, 0.03694656491279602, 0.08859608322381973, -0.015587922185659409, -0.02222122624516487]},
{"question": "How to fix 'android.os.NetworkOnMainThreadException'?", "details": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n                \r\n<p>I got an error while running my Android project for RssReader. </p>\n\n<p>Code:</p>\n\n<pre><code>URL url = new URL(urlToRssFeed);\nSAXParserFactory factory = SAXParserFactory.newInstance();\nSAXParser parser = factory.newSAXParser();\nXMLReader xmlreader = parser.getXMLReader();\nRssHandler theRSSHandler = new RssHandler();\nxmlreader.setContentHandler(theRSSHandler);\nInputSource is = new InputSource(url.openStream());\nxmlreader.parse(is);\nreturn theRSSHandler.getFeed();\n</code></pre>\n\n<p>And it shows the below error:</p>\n\n<pre><code>android.os.NetworkOnMainThreadException\n</code></pre>\n\n<p>How can I fix this issue?</p>\n    </div>", "answers": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\r\n<p><strong>NOTE : AsyncTask was deprecated in API level 30.<br>\n<a href=\"https://developer.android.com/reference/android/os/AsyncTask\" rel=\"noreferrer\">https://developer.android.com/reference/android/os/AsyncTask</a></strong></p>\n<p>This exception is thrown when an application attempts to perform a networking operation on its main thread. Run your code in <a href=\"http://developer.android.com/reference/android/os/AsyncTask.html\" rel=\"noreferrer\"><code>AsyncTask</code></a>:</p>\n<pre><code>class RetrieveFeedTask extends AsyncTask&lt;String, Void, RSSFeed&gt; {\n\n    private Exception exception;\n\n    protected RSSFeed doInBackground(String... urls) {\n        try {\n            URL url = new URL(urls[0]);\n            SAXParserFactory factory = SAXParserFactory.newInstance();\n            SAXParser parser = factory.newSAXParser();\n            XMLReader xmlreader = parser.getXMLReader();\n            RssHandler theRSSHandler = new RssHandler();\n            xmlreader.setContentHandler(theRSSHandler);\n            InputSource is = new InputSource(url.openStream());\n            xmlreader.parse(is);\n\n            return theRSSHandler.getFeed();\n        } catch (Exception e) {\n            this.exception = e;\n\n            return null;\n        } finally {\n            is.close();\n        }\n    }\n\n    protected void onPostExecute(RSSFeed feed) {\n        // TODO: check this.exception\n        // TODO: do something with the feed\n    }\n}\n</code></pre>\n<p>How to execute the task:</p>\n<p>In <code>MainActivity.java</code> file you can add this line within your <code>oncreate()</code> method</p>\n<pre><code>new RetrieveFeedTask().execute(urlToRssFeed);\n</code></pre>\n<p>Don't forget to add this to <code>AndroidManifest.xml</code> file:</p>\n<pre><code>&lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;\n</code></pre>\n    </div>", "total_vectors": [-0.044913433492183685, 0.007748143281787634, 0.015920722857117653, 0.03398040309548378, 0.05499802529811859, 0.06365714967250824, 0.013179076835513115, -0.004273298662155867, 0.005269329994916916, 0.08026689291000366, -0.01996096596121788, -0.024043843150138855, -0.015244927257299423, 0.08519922196865082, -0.04728304594755173, 0.10698520392179489, -0.0006098878220655024, 0.015136388130486012, -0.04393521696329117, -0.05120009928941727, 0.05116305127739906, -0.015640879049897194, 0.008637530729174614, -0.035871606320142746, 0.03472455218434334, 0.03753786161541939, 0.024619989097118378, 0.008565591648221016, -0.01968853548169136, 0.01858842372894287, 0.02538199909031391, 0.07102557271718979, -0.027399519458413124, -0.008295176550745964, -0.04497881233692169, -0.0061492277309298515, 0.01738293096423149, -0.03662379831075668, -0.03158208355307579, -0.021303506568074226, 0.05123355612158775, -0.06771429628133774, -0.028687486425042152, -0.03928004205226898, 0.09305039048194885, -0.03187631070613861, 0.023142553865909576, -0.040415532886981964, 0.03534918650984764, 0.009629622101783752, 0.04232511296868324, 0.09703941643238068, -0.017275648191571236, -0.06910163164138794, -0.07948554307222366, 0.008096255362033844, 0.012471150606870651, 0.0076949759386479855, 0.04603452980518341, -0.007682886905968189, -0.07642333209514618, -0.02878888137638569, -0.022458083927631378, -0.044602956622838974, -0.030997170135378838, -0.06798673421144485, -0.06372048705816269, -0.03238988667726517, 0.055196717381477356, -0.03519904613494873, -0.04136815667152405, -0.0028766277246177197, 0.011829640716314316, -0.07316380739212036, 0.0071928417310118675, -0.01893601380288601, -0.02362334541976452, 0.02795390971004963, 0.03831593319773674, 0.06844048947095871, -0.01863940991461277, 0.08763008564710617, -0.010448048822581768, 0.0007864445215091109, 0.03195181116461754, -0.0055753691121935844, -0.025332864373922348, 0.013056138530373573, 0.0924798920750618, 0.015288937836885452, 0.025090452283620834, -0.0315077006816864, -0.0341205932199955, 0.05353445187211037, -0.010311175137758255, 0.04196244850754738, 0.03218002989888191, 0.08343586325645447, -0.009167229756712914, -0.09373719245195389, 0.019463075324892998, -0.030676739290356636, -0.07517288625240326, -0.007680876646190882, -0.07241296768188477, 0.016231045126914978, -0.01722758635878563, 0.012835885398089886, 0.04557964205741882, -0.024542154744267464, 0.003962531685829163, -0.02296770177781582, -0.03757619857788086, -0.018184009939432144, 0.003551027039065957, 0.009026349522173405, -0.004923386964946985, 0.005692952778190374, -0.04972396790981293, -0.0811694860458374, 0.04155638441443443, 0.042026400566101074, -0.023594917729496956, 0.04468987137079239, 0.006550073157995939, 0.013888010755181313, 0.04725373163819313, -0.06051531061530113, 0.031388260424137115, 0.05591374263167381, -0.06042807549238205, 0.0721404030919075, -0.013261955231428146, -0.030244892463088036, 0.07185148447751999, -0.065399669110775, -0.10313571989536285, -0.01217696350067854, -0.021742185577750206, -0.06895244866609573, -0.03391020745038986, -0.059184424579143524, 0.04773150756955147, -0.03222388029098511, 0.0007445722003467381, -0.02202792651951313, -0.01273274701088667, -0.024085314944386482, 0.010299804620444775, -0.006075440440326929, 0.051829416304826736, -0.05844474956393242, 0.05620654672384262, -0.03245871514081955, -0.058917999267578125, -0.005199171602725983, 0.03634122014045715, -0.07771586626768112, 0.015685223042964935, 0.04021414741873741, -0.01698221266269684, -0.04699823632836342, 0.06644798070192337, -0.0045632473193109035, -0.007835213094949722, -0.0016519346972927451, -0.03461768105626106, -0.0011544371955096722, -0.0121262576431036, 0.025916272774338722, -0.0025150333531200886, -0.10961796343326569, 0.0292777381837368, -0.019460618495941162, 0.05394758656620979, 0.025732658803462982, 0.052426423877477646, -0.013716273941099644, -0.016798879951238632, 0.05911548435688019, -0.05313890427350998, 0.042026586830616, -0.03110811673104763, -0.014658736996352673, 0.03251703828573227, 0.02316499873995781, 0.010869125835597515, 0.005360014270991087, -0.034602757543325424, 0.053680092096328735, -0.046204786747694016, -0.00815668236464262, 0.04194091632962227, -0.00032327102962881327, 0.05731106549501419, -0.05905827879905701, -0.025447281077504158, 0.10263572633266449, 0.03858780860900879, -0.0010763753671199083, -0.06301337480545044, 0.0033512308727949858, 0.04330996796488762, 0.10081755369901657, -0.019979087635874748, -0.008593389764428139, -0.06150928884744644, -0.0331161767244339, -0.06807783246040344, -0.003726014867424965, -0.0048222728073596954, -0.007389049045741558, 0.01898844912648201, 0.030105916783213615, 0.03712572157382965, -0.01169322244822979, -0.006984726060181856, 0.0816681832075119, 0.0548335425555706, -0.004825035110116005, -0.034042298793792725, -0.015562139451503754, 0.03826994448900223, 0.0005797370104119182, 0.0058712465688586235, -0.056825678795576096, 0.015568090602755547, 0.052030619233846664, 0.04777896776795387, -0.02329881303012371, -0.05090804770588875, 0.05545269325375557, 0.08488243818283081, 0.06562068313360214, -0.009417526423931122, 0.018078811466693878, 0.028920147567987442, -0.004307563416659832, -8.419080586463679e-06, 0.061944201588630676, 0.001286582788452506, -0.011007871478796005, -0.014679462648928165, 0.0280760545283556, -0.004923474043607712, 0.10897035151720047, 0.00304958107881248, 0.0414709635078907, 0.1112435981631279, -0.0035704271867871284, -0.04981829226016998, -0.03820648789405823, -0.08081411570310593, -0.04843372851610184, -0.058183636516332626, 0.02964758314192295, -0.016649670898914337, -0.09163636714220047, -0.0044649564661085606, 0.03386279195547104, 0.03329186141490936, -0.03765321522951126, -0.11123432219028473, 0.056763455271720886, 0.0028386926278471947, 0.058251190930604935, 0.03529391810297966, -0.10783262550830841, 0.0016453105490654707, -0.039274778217077255, -0.054695114493370056, 0.0389259047806263, -0.04926440864801407, -0.07341592758893967, -0.05112210288643837, -0.008591338992118835, 0.00404355488717556, -0.03691722825169563, 0.0882437601685524, 0.03698456287384033, 0.051088448613882065, -0.0019657614175230265, -0.008677014149725437, 0.013320946134626865, -0.014165148138999939, -0.0771939754486084, 0.051639240235090256, 0.0365077406167984, -0.03460134193301201, 0.04446576535701752, -0.03299908712506294, 0.06814523786306381, -0.030234722420573235, 0.0015475364634767175, 0.10873507708311081, -0.00765377189964056, 0.004683902952820063, -0.031163621693849564, 0.02085489220917225, 0.019751157611608505, -0.00693119503557682, 0.0010001695482060313, -0.07372409850358963, 0.027266964316368103, 0.08388463407754898, -0.008408027701079845, 0.06476042419672012, 0.06833737343549728, 0.004352274350821972, 0.0237176101654768, 0.029207954183220863, -0.025762056931853294, -0.05121032893657684, 0.010916818864643574, 0.051086846739053726, 0.031450435519218445, 0.06377916783094406, 0.0615820437669754, -0.008547071367502213, -0.017511364072561264, -0.06099160760641098, -0.0029265591874718666, 0.055398158729076385, -0.04371124133467674, -0.007186159025877714, 0.0640765056014061, -0.010436566546559334, 0.05310233309864998, -0.006597886327654123, 0.0498615987598896, 0.058630358427762985, -0.01498979888856411, -0.012064165435731411, 0.05962448939681053, -0.03287278488278389, -0.01323443278670311, 0.012456747703254223, -0.05320127308368683, -0.02091679535806179, -0.04561822861433029, 0.05535664036870003, 0.004487964324653149, 0.04788362979888916, 0.015309929847717285, -0.05675870180130005, -0.0710241049528122, -0.04897874593734741, -0.07754027098417282, -0.03729967400431633, -0.014320077374577522, 0.011850389651954174, 0.006243961397558451, -0.03969944640994072, -0.025691740214824677, 0.0015516193816438317, -0.05564387887716293, -0.10313455760478973, -0.011579927057027817, -0.05126315355300903, -0.00796522293239832, -0.09018091857433319, -0.040298204869031906, -0.05928622558712959, -0.010107515379786491, 0.015826420858502388, -0.06040798872709274, -0.09835343807935715, -0.01631852239370346, 0.10455299913883209, 0.04815218225121498, 0.008561274968087673, 0.06355632096529007, 0.008754865266382694, -0.0036132733803242445, -0.007450801786035299, -0.0827830582857132, -0.0469626784324646, 0.021613148972392082, -0.0409860797226429, 0.08917190879583359, -0.04057586193084717, -0.01139971986413002, 0.027954913675785065, -0.007924608886241913, 0.0667678564786911, -0.028022319078445435, 0.08331888914108276, 0.02226254902780056, 0.045230668038129807, 0.019153211265802383, -0.0318179652094841, -0.06184046342968941, -0.00108455924782902, -0.03007274493575096, 0.042838502675294876, -0.05092382803559303, -0.006987270433455706, -0.008525063283741474, -0.00990209449082613, 0.05276038125157356, 0.028167540207505226, -0.0021646099630743265, -0.038210391998291016, 0.010598036460578442, 0.060331668704748154, 0.007983913645148277, -0.041800327599048615, -0.01752668246626854, -0.035515811294317245, -0.007248615380376577, -0.03603195399045944, -0.05922450125217438, 0.0329948291182518, 0.002141849370673299, 0.0620441772043705, 0.016191577538847923, 0.06385571509599686, 0.04555026441812515, -0.03831501305103302, -0.029500029981136322, -0.04832115396857262, -0.047298613935709, 0.0051152827218174934, -0.0637354627251625, -0.026118364185094833, 0.033375997096300125, 0.054925184696912766, 0.03235825151205063, -0.06134390830993652, 0.058795660734176636, 0.018485981971025467, 0.012544296681880951, -0.03000505268573761, 0.07215138524770737, -0.0334022082388401, -0.009432763792574406, 0.08304279297590256, -0.012739492580294609, 0.06900235265493393, -0.020859340205788612, 0.004963479936122894, -0.02131410874426365, 0.0061051188968122005, -0.003292783861979842, 0.012405971996486187, -0.03876937925815582, 0.014356751926243305, 0.04674512892961502, -0.053687188774347305, -0.010948235169053078, -0.011000658385455608, -0.04968486726284027, 0.07824812829494476, -0.026298576965928078, 0.056354086846113205, -0.07003399729728699, -0.04322829842567444, -0.002911219373345375, -0.022464677691459656, 0.06402993202209473, -0.021292658522725105, -0.04386001080274582, 0.0036585438065230846, -0.04557054489850998, 0.07949338853359222, 0.004788071382790804, -0.0010657880920916796, 0.07406621426343918, 0.01586798019707203, 0.015245466493070126, -0.005247129127383232, 0.02389310859143734, -0.05618849769234657, -0.03354659676551819, -0.026222795248031616, -0.027295298874378204, 0.031228579580783844, -0.024755092337727547, 0.035421960055828094, 0.044833775609731674, -0.009289073757827282, -0.033439021557569504, 0.04968200623989105, 0.059185098856687546, 0.009532005526125431, 0.01993614248931408, 0.1073567271232605, 0.036132946610450745, -0.04671197384595871, 0.016782069578766823, -0.00019413107656873763, 0.010811971500515938, -0.01678629033267498, 0.03420607000589371, 0.05948779731988907, 0.01665397919714451, 0.09663031995296478, -0.04443972185254097, -0.01948435604572296, 0.08411478996276855, -0.03449038043618202, -0.006012875121086836, -0.01840880699455738, -0.022507203742861748, 0.04221305996179581, -0.01784444972872734, 0.04344784840941429, -0.04976935312151909, -0.020676719024777412, 0.044745832681655884, 0.07233065366744995, -0.02139093168079853]}
]