[
{"question": "How to add JTable in JPanel with null layout?", "details": "I want to add JTable into JPanel whose layout is null.  JPanel contains other components. I have to add JTable at proper position.", "answers": ["I want to add JTable into JPanel whose layout is null.  JPanel contains other components. I have to add JTable at proper position.", "The Java Tutorial has comprehensive information on using layout managers. See the  lesson for further details.One aspect of layouts that is  covered well by the tutorial is that of nested layouts, putting one layout inside another to get complex effects.The following code puts a variety of components into a frame to demonstrate how to use nested layouts.  All the layouts that are explicitly set are shown as a titled-border for the panel on which they are used.Notable aspects of the code are:\n\n\n\n\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ActionEvent;\nimport javax.swing.*;\nimport javax.swing.table.DefaultTableModel;\nimport javax.swing.border.TitledBorder;\n\n/** A short example of a nested layout that can change PLAF at runtime.\nThe TitledBorder of each JPanel shows the layouts explicitly set.\n@author Andrew Thompson\n@version 2011-04-12 */\nclass NestedLayoutExample {\n\n    public static void main(String[] args) {\n\n        Runnable r = new Runnable() {\n\n            public void run() {\n                final JFrame frame = new JFrame(\"Nested Layout Example\");\n                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n                final JPanel gui = new JPanel(new BorderLayout(5,5));\n                gui.setBorder( new TitledBorder(\"BorderLayout(5,5)\") );\n\n                //JToolBar tb = new JToolBar();\n                JPanel plafComponents = new JPanel(\n                    new FlowLayout(FlowLayout.RIGHT, 3,3));\n                plafComponents.setBorder(\n                    new TitledBorder(\"FlowLayout(FlowLayout.RIGHT, 3,3)\") );\n\n                final UIManager.LookAndFeelInfo[] plafInfos =\n                    UIManager.getInstalledLookAndFeels();\n                String[] plafNames = new String[plafInfos.length];\n                for (int ii=0; ii<plafInfos.length; ii++) {\n                    plafNames[ii] = plafInfos[ii].getName();\n                }\n                final JComboBox plafChooser = new JComboBox(plafNames);\n                plafComponents.add(plafChooser);\n\n                final JCheckBox pack = new JCheckBox(\"Pack on PLAF change\", true);\n                plafComponents.add(pack);\n\n                plafChooser.addActionListener( new ActionListener(){\n                    public void actionPerformed(ActionEvent ae) {\n                        int index = plafChooser.getSelectedIndex();\n                        try {\n                            UIManager.setLookAndFeel(\n                                plafInfos[index].getClassName() );\n                            SwingUtilities.updateComponentTreeUI(frame);\n                            if (pack.isSelected()) {\n                                frame.pack();\n                                frame.setMinimumSize(frame.getSize());\n                            }\n                        } catch(Exception e) {\n                            e.printStackTrace();\n                        }\n                    }\n                } );\n\n                gui.add(plafComponents, BorderLayout.NORTH);\n\n                JPanel dynamicLabels = new JPanel(new BorderLayout(4,4));\n                dynamicLabels.setBorder(\n                    new TitledBorder(\"BorderLayout(4,4)\") );\n                gui.add(dynamicLabels, BorderLayout.WEST);\n\n                final JPanel labels = new JPanel(new GridLayout(0,2,3,3));\n                labels.setBorder(\n                    new TitledBorder(\"GridLayout(0,2,3,3)\") );\n\n                JButton addNew = new JButton(\"Add Another Label\");\n                dynamicLabels.add( addNew, BorderLayout.NORTH );\n                addNew.addActionListener( new ActionListener(){\n\n                    private int labelCount = 0;\n\n                    public void actionPerformed(ActionEvent ae) {\n                        labels.add( new JLabel(\"Label \" + ++labelCount) );\n                        frame.validate();\n                    }\n                } );\n\n                dynamicLabels.add( new JScrollPane(labels), BorderLayout.CENTER );\n\n                String[] header = {\"Name\", \"Value\"};\n                String[] a = new String[0];\n                String[] names = System.getProperties().\n                    stringPropertyNames().toArray(a);\n                String[][] data = new String[names.length][2];\n                for (int ii=0; ii<names.length; ii++) {\n                    data[ii][0] = names[ii];\n                    data[ii][1] = System.getProperty(names[ii]);\n                }\n                DefaultTableModel model = new DefaultTableModel(data, header);\n                JTable table = new JTable(model);\n                try {\n                    // 1.6+\n                    table.setAutoCreateRowSorter(true);\n                } catch(Exception continuewithNoSort) {\n                }\n                JScrollPane tableScroll = new JScrollPane(table);\n                Dimension tablePreferred = tableScroll.getPreferredSize();\n                tableScroll.setPreferredSize(\n                    new Dimension(tablePreferred.width, tablePreferred.height/3) );\n\n                JPanel imagePanel = new JPanel(new GridBagLayout());\n                imagePanel.setBorder(\n                    new TitledBorder(\"GridBagLayout()\") );\n\n                BufferedImage bi = new BufferedImage(\n                    200,200,BufferedImage.TYPE_INT_ARGB);\n                Graphics2D g = bi.createGraphics();\n                GradientPaint gp = new GradientPaint(\n                    20f,20f,Color.red, 180f,180f,Color.yellow);\n                g.setPaint(gp);\n                g.fillRect(0,0,200,200);\n                ImageIcon ii = new ImageIcon(bi);\n                JLabel imageLabel = new JLabel(ii);\n                imagePanel.add( imageLabel, null );\n\n                JSplitPane splitPane = new JSplitPane(\n                    JSplitPane.VERTICAL_SPLIT,\n                    tableScroll,\n                    new JScrollPane(imagePanel));\n                gui.add( splitPane, BorderLayout.CENTER );\n\n                frame.setContentPane(gui);\n\n                frame.pack();\n\n                frame.setLocationRelativeTo(null);\n                try {\n                    // 1.6+\n                    frame.setLocationByPlatform(true);\n                    frame.setMinimumSize(frame.getSize());\n                } catch(Throwable ignoreAndContinue) {\n                }\n\n                frame.setVisible(true);\n            }\n        };\n        SwingUtilities.invokeLater(r);\n    }\n}\n", "Don't use a null layout.  Learn to use LayoutManagers:LayoutManagers allow you to properly handle things window resizing or dynamic component counts.  They might seem intimidating at first, but they are worth the effort to learn.", "As I can remember, the  layout means an absolute position so it will be pretty hard you to count the X point for your JTable left upper corner location. But if you just want to have all panel components one by one you can use FlowLayout() manager asJPanel panel=new JPanel(new FlowLayout());\npanel.add(new aComponent());\npanel.add(new bComponent());\npanel.add(new JTable());\nor if you need to fill the panel you should use GridLayout() as...int x=2,y=2;\nJPanel panel=new JPanel(new GridLayout(y,x));\npanel.add(new aComponent());\npanel.add(new bComponent());\npanel.add(new JTable());\nGood luck", "If you are using null layout manager you always need to set the bounds of a component.\nThat is the problem in your case.You should do what everyone suggest here and go and use some layout manager believe they save time.\nGo and check out the tutorial in @jzd's post.Enjoy, Boro.", "JTable should be added into the JScrollPane which actually should be added into the JPanel.The JPanel should have some layout manager.If you don't care about the precision of components size you can use pure BorderLayout and combine it with FlowLayout and GridLayout. if you need precision - use jgoodies FormLayout.The FormLayout is really tricky one, but you can play a little with WindowBuilder (which is embedded into Eclipse) and a look at the code it generates. It may look complicated but it is just an ignorance.Good luck. ", "First, you should seriously consider other Layout managers, for example the BorderLayoutManager (new JPanel(new BorderLayout())) is a good start. Also when designing your dialog, remember that you can and should : one JPanel inside another JPanel (e.g. a GridLayout inside a BorderLayout). Please note: a 'good' dialog should , so that if the user resizes your Frame, you want to automatically extend your information objects such as your table, and not show large areas of JPanel background. That's something you cannot achieve with a NullLayout.But there are probably cases - somewhere in this big world - where a NullLayout is just the thing. So here's an example:import java.awt.Dimension;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.table.DefaultTableModel;\n\npublic class JTableInNullLayout\n{\n  public static void main(String[] argv) throws Exception {\n\n      DefaultTableModel model = new DefaultTableModel(\n          new String[][] { { \"a\", \"123\"} , {\"b\", \"456\"} }, \n          new String[] { \"name\", \"value\" } );\n\n      JTable t = new JTable(model);\n\n      JPanel panel = new JPanel(null);\n\n      JScrollPane scroll = new JScrollPane(t);\n      scroll.setBounds( 0, 20, 150, 100 ); // x, y, width, height\n      panel.add(scroll);\n\n      JFrame frame = new JFrame();\n      frame.add(panel);\n      frame.setPreferredSize( new Dimension(200,200));\n      frame.pack();\n      frame.setVisible(true);\n  }\n}\n", "When a component have a \"null\" layout, you have to manage the layout by yourself, that means you have to calculate the dimensions and locations for the children of the component to decide where they are drawn. Quite tedious unless it is absolutely necessary.If you really want that fine-grained control, maybe try GridBagLayout first before going mudding with the UI arrangement.", "You can make use of the following code. To add JTable to JPanel.JPanel panel = new JPanel();\nthis.setContentPane(panel);\npanel.setLayout(null);\nString data[][] = {{\"1.\", \"ABC\"}, {\"2.\", \"DEF\"}, {\"3.\", \"GHI\" }};\nString col[] = {\"Sr. No\", \"Name\"};\nJTable table = new JTable(data,col);\ntable.setBounds(100, 100, 100, 80);\npanel.add(table);\nsetVisible(true);\nsetSize(300,300);\n", "JPanel panel = new JPanel();\nJTable table = new JTable(rowData, colData);\nJScrollPane scrollPane = new JScrollPane(table);\npanel.add(scrollPane, BorderLayout.CENTER);\npanel.setSize(800, 150);\npanel.add(table);\npanel.setLocationRelativeTo(null);\npanel.setVisible(true);\nHope this helps.", "JFrame frame = new JFrame(\"Sample Frame\");\nframe.setSize(600, 600);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    JPanel panel = new JPanel();\n        DefaultTableModel dfm = new DefaultTableModel(data, columnNames);\n        JTable table = new JTable(dfm);\n        JScrollPane scrollPane = new JScrollPane(table);\n    panel.add(scrollPane);\nframe.add(panel);\nframe.setVisible(true);\ntable model depends on your requirement", "this.setTitle(\"Sample\");\n        JPanel p = new JPanel(new BorderLayout());\n        WindowEvent we = new WindowEvent(this, WindowEvent.WINDOW_CLOSED);\n        this.addWindowListener(new WindowAdapter() {\n            public void windowClosing(WindowEvent we) {\n                System.exit(0);\n            }\n        }); \n        // Create columns names\n        String columnNames[] = { \"FirstCol\", \"SecondCol\",\n                \"ThirdCol\", \"FourthCol\" };\n        dataModel = new DefaultTableModel();\n        for (int col = 0; col < columnNames.length; col++) {\n            dataModel.addColumn(columnNames[col]);\n        }\n        // Create a new table instance\n        table = new JTable(dataModel);\n        table.setPreferredScrollableViewportSize(new Dimension(200, 120));\n        table.setFillsViewportHeight(true);\n        table.setShowGrid(true);\n        table.setAutoscrolls(true);\n\n        // Add the table to a scrolling pane\n        scrollPane = new JScrollPane(table,\n                JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,\n                JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n        scrollPane.setPreferredSize(new Dimension(700, 700));\n        JPanel jpResultPanel = new JPanel();\n        jpResultPanel.setBorder(BorderFactory.createTitledBorder(\n                BorderFactory.createEtchedBorder(), \"Result\",\n                TitledBorder.CENTER, TitledBorder.TOP));\n        jpResultPanel.add(scrollPane);\n        add(jpResultPanel);\n        pack();\n        setSize(720, 720);\n        setVisible(true);\nTry this."]},
{"question": "How do I remove the space between inline/inline-block elements?", "details": "Given this HTML and CSS:span {\r\n    display:inline-block;\r\n    width:100px;\r\n    background-color:palevioletred;\r\n}<p>\r\n    <span> Foo </span>\r\n    <span> Bar </span>\r\n</p>As a result, there will be a 4\u00a0pixel wide space between the SPAN elements. I understand why this happens, and I also know that I could get rid of that space by removing the white-space between the SPAN elements in the HTML source code, like so:<p>\n    <span> Foo </span><span> Bar </span>\n</p>\nHowever, I was hoping for a CSS solution that doesn't require the HTML source code to be tampered with.I know how to solve this with JavaScript - by removing the text nodes from the container element (the paragraph), like so:// jQuery\n$('p').contents().filter(function() { return this.nodeType === 3; }).remove();\n But can this issue be solved with CSS alone?", "answers": ["Given this HTML and CSS:span {\r\n    display:inline-block;\r\n    width:100px;\r\n    background-color:palevioletred;\r\n}<p>\r\n    <span> Foo </span>\r\n    <span> Bar </span>\r\n</p>As a result, there will be a 4\u00a0pixel wide space between the SPAN elements. I understand why this happens, and I also know that I could get rid of that space by removing the white-space between the SPAN elements in the HTML source code, like so:<p>\n    <span> Foo </span><span> Bar </span>\n</p>\nHowever, I was hoping for a CSS solution that doesn't require the HTML source code to be tampered with.I know how to solve this with JavaScript - by removing the text nodes from the container element (the paragraph), like so:// jQuery\n$('p').contents().filter(function() { return this.nodeType === 3; }).remove();\n But can this issue be solved with CSS alone?", "Since this answer has become rather popular, I'm rewriting it significantly.Let's not forget the actual question that was asked:How to remove the space between ? I was hoping\n  for a CSS solution that doesn't require the HTML source code to be\n  tampered with. It  possible to solve this problem with CSS alone, but there are no  robust CSS fixes.The solution I had in my initial answer was to add font-size: 0 to the parent element, and then declare a sensible font-size on the children.This works in recent versions of all modern browsers. It works in IE8. It does not work in Safari 5, but it  work in Safari 6. Safari 5 is nearly a dead browser ().Most of the possible issues with relative font sizes are not complicated to fix.However, while this is a reasonable solution if you  a CSS only fix, it's not what I recommend if you're free to change your HTML (as most of us are).This is what I, as a reasonably experienced web developer, actually do to solve this problem:<p>\n    <span>Foo</span><span>Bar</span>\n</p>\nYes, that's right. I remove the whitespace in the HTML between the inline-block elements.It's easy. It's simple. It works everywhere. It's the pragmatic solution.You do sometimes have to carefully consider where whitespace will come from.  No, not if you do it properly.Let's go on a magical journey of different ways to remove the whitespace, with some new HTML:<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n</ul>\n\nYou can do this, as I usually do:<ul>\n    <li>Item 1</li><li>Item 2</li><li>Item 3</li>\n</ul>\n\nOr, this:<ul>\n    <li>Item 1</li\n    ><li>Item 2</li\n    ><li>Item 3</li>\n</ul>\n\nOr, use comments:<ul>\n    <li>Item 1</li><!--\n    --><li>Item 2</li><!--\n    --><li>Item 3</li>\n</ul>\n\nOr, if you are using using PHP or similar:<ul>\n    <li>Item 1</li><?\n    ?><li>Item 2</li><?\n    ?><li>Item 3</li>\n</ul>\n\nOr,  even skip  closing tags entirely (all browsers are fine with this):<ul>\n    <li>Item 1\n    <li>Item 2\n    <li>Item 3\n</ul>\n\nNow that I've gone and bored you to death with \"one thousand different ways to remove whitespace, by thirtydot\", hopefully you've forgotten all about font-size: 0.Alternatively, you  to achieve many of the layouts that you may previously have used inline-block for: ", "For CSS3 conforming browsers there is white-space-collapsing:discard see: ", "EDIT: today, we should just use .OLD ANSWER:OK, although I've upvoted both the font-size: 0; and the not implemented CSS3 feature answers, \nafter trying I found out that .Actually, there is not even one workaround without strong side effects.Then  (this answers is about this argument) between the inline-block divs from my HTML source (JSP),\nturning this:<div class=\"inlineBlock\">\n    I'm an inline-block div\n</div>\n<div class=\"inlineBlock\">\n    I'm an inline-block div\n</div>\nto this<div class=\"inlineBlock\">\n    I'm an inline-block div\n</div><div class=\"inlineBlock\">\n    I'm an inline-block div\n</div>\nthat is ugly, but working.But, wait a minute... what if I'm generating my divs inside Taglibs loops (Struts2, JSTL, etc...) ? For example:<s:iterator begin=\"0\" end=\"6\" status=\"ctrDay\">\n    <br/>\n    <s:iterator begin=\"0\" end=\"23\" status=\"ctrHour\">\n        <s:push value=\"%{days[#ctrDay.index].hours[#ctrHour.index]}\">\n            <div class=\"inlineBlock>\n                I'm an inline-block div in a matrix \n                (Do something here with the pushed object...)\n           </div>\n       </s:push>\n    </s:iterator>\n</s:iterator>\nIt is absolutely not thinkable to inline all that stuff, it would mean<s:iterator begin=\"0\" end=\"6\" status=\"ctrDay\">\n    <br/>\n    <s:iterator begin=\"0\" end=\"23\" status=\"ctrHour\"><s:push value=\"%{days[#ctrDay.index].hours[#ctrHour.index]}\"><div class=\"inlineBlock>\n                I'm an inline-block div in a matrix             \n                (Do something here with the pushed object...)\n           </div></s:push></s:iterator>\n</s:iterator>\nthat is not readable, hard to mantain and understand, etc...The solution i found: <s:iterator begin=\"0\" end=\"6\" status=\"ctrDay\">\n   <br/>\n   <s:iterator begin=\"0\" end=\"23\" status=\"ctrHour\"><!--\n    --><s:push value=\"%{days[#ctrDay.index].hours[#ctrHour.index]}\"><!--\n        --><div class=\"inlineBlock>\n                I'm an inline-block div in a matrix             \n                (Do something here with the pushed object...)\n           </div><!--\n    --></s:push><!--\n--></s:iterator>\n</s:iterator>\nThis way you will have a readable and correctly indented code.And, as a positive side effect, the HTML source, although infested by empty comments, \nwill result correctly indented; let's take the first example. In my humble opinion, this:    <div class=\"inlineBlock\">\n        I'm an inline-block div\n    </div><!--\n --><div class=\"inlineBlock\">\n        I'm an inline-block div\n    </div>\nis better than this:    <div class=\"inlineBlock\">\n         I'm an inline-block div\n    </div><div class=\"inlineBlock\">\n         I'm an inline-block div\n    </div>\n", "Add display: flex; to the parent element. Here is the solution with a prefix:Simplified version \ud83d\udc47p {\r\n  display: flex;\r\n}\r\n\r\nspan {\r\n  width: 100px;\r\n  background: tomato;\r\n  font-size: 30px;\r\n  color: white;\r\n  text-align: center;\r\n}<p>\r\n  <span> Foo </span>\r\n  <span> Bar </span>\r\n</p>Fix with prefix \ud83d\udc47p {\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n}\r\nspan {\r\n  float: left;\r\n  display: inline-block;\r\n  width: 100px;\r\n  background: blue;\r\n  font-size: 30px;\r\n  color: white;\r\n  text-align: center;\r\n}<p>\r\n  <span> Foo </span>\r\n  <span> Bar </span>\r\n</p>", "Add  between elements to NOT have a white space. For me it is easier than resetting font size to zero and then setting it back.<div>\n    Element 1\n</div><!--\n--><div>\n    Element 2\n</div>\n", "All the space elimination techniques for display:inline-block are nasty hacks...   It's awesome, solves all this inline-block layout bs, and as of 2017 has  (more if you don't care about old IEs). \n\n\n\n\n", "This is the same answer I gave over on the related: There\u2019s actually a really simple way to remove whitespace from inline-block that\u2019s both easy and semantic. It\u2019s called a custom font with zero-width spaces, which allows you to collapse the whitespace (added by the browser for inline elements when they're on separate lines) at the font level using a very tiny font. Once you declare the font, you just change the font-family on the container and back again on the children, and voila. Like this:@font-face{ \n    font-family: 'NoSpace';\n    src: url('../Fonts/zerowidthspaces.eot');\n    src: url('../Fonts/zerowidthspaces.eot?#iefix') format('embedded-opentype'),\n         url('../Fonts/zerowidthspaces.woff') format('woff'),\n         url('../Fonts/zerowidthspaces.ttf') format('truetype'),\n         url('../Fonts/zerowidthspaces.svg#NoSpace') format('svg');\n}\n\nbody {\n    font-face: 'OpenSans', sans-serif;\n}\n\n.inline-container {\n    font-face: 'NoSpace';\n}\n\n.inline-container > * {\n    display: inline-block;\n    font-face: 'OpenSans', sans-serif;\n}\nSuit to taste. Here\u2019s a download to the font I just cooked up in font-forge and converted with FontSquirrel webfont generator. Took me all of 5 minutes. The css @font-face declaration is included: . It's in Google Drive so you'll need to click File > Download to save it to your computer. You'll probably need to change the font paths as well if you copy the declaration to your main css file.", "Two more options based on  (instead of white-space-collapsing:discard which had been dropped from the spec draft):\nword-spacing: -100%;\nIn theory, it should do exactly what is needed \u2014 shorten whitespaces\n    between 'words' by the 100% of the space character width, i.e. to\n    zero. But seems not to work anywhere, unfortunately, and this\n    feature is marked 'at risk' (it can be dropped from the specification, too).\nword-spacing: -1ch;\nIt shortens the inter-word spaces by the width of the digit '0'. In a monospace font it should be exactly equal to the width of the space character (and any other character as well). This works in Firefox 10+, Chrome 27+, and almost works in Internet\u00a0Explorer\u00a09+.", "Unfortunately, it is 2019 and white-space-collapse is still not implemented.In the meantime, give the parent element font-size: 0; and set the font-size on the children. This should do the trick", "Use flexbox and do a fallback (from suggestions above) for older browsers:ul {\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n}\n", "Simple:item {\n  display: inline-block;\n  margin-right: -0.25em;\n}\nThere is no need to touch the parent element.Only condition here: the item's font-size must not be defined (must be equal to parent's font-size).0.25em is the default word-spacing", "font-size:0; can be a bit trickier to manage...I think the following couple lines is a lot better and more re-usable, and time saver than any other methods. I personally use this:.inline-block-wrapper>.inline-block-wrapper,\n.inline-block-wrapper{letter-spacing: -4px;}\n.inline-block-wrapper>*{letter-spacing: 0;display: inline-block;}\n\n/* OR better shorter name...*/\n.items>.items,\n.items{letter-spacing: -4px;}\n.items>*{letter-spacing: 0;display: inline-block;}\nThen you can use it as following...<ul class=\"items\">\n   <li>Item 1</li>\n   <li>Item 2</li>\n   <li>Item 3</li>\n</ul>\nAs far I as I know (I may be wrong) but all browsers support this method.:This works (maybe -3px may be better) exactly as you would anticipate it to work.\n\nclass=\"items\"\nYou will NOT have the need to go back to the css, and add another css rule, for your new inline blocks.Solving two issues at once.Also note the > (greater than sign) this means that */all children should be inline-block.NOTE: I have modified to accommodate to inherit letter-spacing when a wrapper has a child wrapper.", "Though, technically not an answer to the question:\n\"How do I remove the space between inline-block elements?\"You can try the flexbox solution and apply the code below and the space will be remove.p {\n   display: flex;\n   flex-direction: row;\n}\nYou can learn more about it on this link: ", "I'm not pretty sure if you want to make two blue spans without a gap or want to handle other white-space, but if you want to remove the gap:span {\n    display: inline-block;\n    width: 100px;\n    background: blue;\n    font-size: 30px;\n    color: white;\n    text-align: center;\n\n    float: left;\n}\nAnd done.", "Generally we use elements like this in different lines, but in case of display:inline-block using tags in same line will remove the space, but in a different line will not.An example with tags in a different line:p span {\r\n  display: inline-block;\r\n  background: red;\r\n}<p>\r\n  <span> Foo </span>\r\n  <span> Bar </span>\r\n</p>Example with tags in same linep span {\r\n  display: inline-block;\r\n  background: red;\r\n}<p>\r\n  <span> Foo </span><span> Bar </span>\r\n</p>Another efficient method is a CSS job that is using font-size:0 to the parent element and give font-size to a child element as much as you want.p {\r\n  font-size: 0;\r\n}\r\np span {\r\n  display: inline-block;\r\n  background: red;\r\n  font-size: 14px;\r\n}<p>\r\n  <span> Foo </span>\r\n  <span> Bar </span>\r\n</p>The above methods may not work somewhere depending on the whole application, but the last method is a foolproof solution for this situation and can be used anywhere.", "I had this problem right now and from font-size:0; I've found that in Internet\u00a0Explorer\u00a07 the problem remains because Internet\u00a0Explorer thinks \"Font Size 0?!?! WTF are you crazy man?\" - So, in my case I've Eric Meyer's CSS reset and with font-size:0.01em; I have a difference of 1 pixel from Internet\u00a0Explorer\u00a07 to Firefox\u00a09, so, I think this can be a solution.", "p {\r\n  display: flex;\r\n}\r\nspan {\r\n  float: left;\r\n  display: inline-block;\r\n  width: 100px;\r\n  background: red;\r\n  font-size: 30px;\r\n  color: white;\r\n}<p>\r\n  <span> hello </span>\r\n  <span> world </span>\r\n</p>", "I\u2019ve been tackling this recently and instead of setting the parent font-size:0 then setting the child back to a reasonable value, I\u2019ve been getting consistent results by setting the parent container letter-spacing:-.25em then the child back to letter-spacing:normal.In an alternate thread I saw a commenter mention that font-size:0 isn\u2019t always ideal because people can control minimum font sizes in their browsers, completely negating the possibility of setting the font-size to zero.Using ems appears to work regardless of whether the font-size specified is 100%, 15pt or 36px.", "I think there is a very simple/old method for this which is supported by all browsers even IE 6/7. We could simply set letter-spacing to a large negative value in parent and then set it back to normal at child elements:body { font-size: 24px }\r\nspan { border: 1px solid #b0b0c0; } /* show borders to see spacing */\r\n\r\n.no-spacing { letter-spacing: -1em; } /* could be a large negative value */\r\n.no-spacing > * { letter-spacing: normal; } /* => back to normal spacing */<p style=\"color:red\">Wrong (default spacing):</p>\r\n\r\n<div class=\"\">\r\n  <span>Item-1</span>\r\n  <span>Item-2</span>\r\n  <span>Item-3</span>\r\n</div>\r\n\r\n<hr/>\r\n\r\n<p style=\"color:green\">Correct (no-spacing):</p>\r\n\r\n<div class=\"no-spacing\">\r\n  <span>Item-1</span>\r\n  <span>Item-2</span>\r\n  <span>Item-3</span>\r\n</div>", "The simplest answer to this question is to add.cssfloat: left;\ncodepen link: ", "With PHP brackets:ul li {\r\n  display: inline-block;\r\n}    <ul>\r\n        <li>\r\n            <div>first</div>\r\n        </li><?\r\n        ?><li>\r\n            <div>first</div>\r\n        </li><?\r\n        ?><li>\r\n            <div>first</div>\r\n        </li>\r\n    </ul>", "I'm going to expand on user5609829's answer a little bit as I believe the other solutions here are too complicated/too much work.  Applying a margin-right: -4px to the inline block elements will remove the spacing and is supported by all browsers.  See the updated fiddle .  For those concerned with using negative margins, try giving  a read. ", "The text-space-collapse property, which allow to control the how white space inside and around an element is processed.So, regarding your example, you would just have to write this:p {\n  text-space-collapse: discard;\n}\nUnfortunately, no browser is implementing this property yet (as of September 2016) as mentioned in the comments to the .", "I found a pure CSS solution that worked for me very well in all browsers:span {\n    display: table-cell;\n}\n", "Add white-space: nowrap to the container element:CSS:* {\n    box-sizing: border-box;\n}\n.row {\n    vertical-align: top;\n    white-space: nowrap;\n}\n.column{\n    float: left;\n    display: inline-block;\n    width: 50% // Or whatever in your case\n}\nHTML:<div class=\"row\">\n    <div class=\"column\"> Some stuff</div>\n    <div class=\"column\">Some other stuff</div>\n</div>\nHere is the .", "There are lots of solutions like font-size:0,word-spacing,margin-left,letter-spacing and so on.Normally I prefer using letter-spacing because-1emword-spacingmargin-left-1emfont-sizeemfont-sizeSo, letter-spacing seems to be the best choice.However, I have to warn youletter-spacing-0.3em-0.31em* {\n  margin: 0;\n  padding: 0;\n}\na {\n  text-decoration: none;\n  color: inherit;\n  cursor: auto;\n}\n.nav {\n  width: 260px;\n  height: 100px;\n  background-color: pink;\n  color: white;\n  font-size: 20px;\n  letter-spacing: -1em;\n}\n.nav__text {\n  width: 90px;\n  height: 40px;\n  box-sizing: border-box;\n  border: 1px solid black;\n  line-height: 40px;\n  background-color: yellowgreen;\n  text-align: center;\n  display: inline-block;\n  letter-spacing: normal;\n}<nav class=\"nav\">\n    <span class=\"nav__text\">nav1</span>\n    <span class=\"nav__text\">nav2</span>\n    <span class=\"nav__text\">nav3</span>\n</nav>If you are using Chrome(test version 66.0.3359.139) or Opera(test version 53.0.2907.99), what you see might be:If you are using Firefox(60.0.2),IE10 or Edge, what you see might be:That's interesting. So, I checked the  and found this:lengthSpecifies extra inter-character space in addition to the default space between characters. Values may be negative, but there may be implementation-specific limits. It seems that this is the reason.", "Add letter-spacing:-4px; on parent p css and add letter-spacing:0px; to your span css. span {\r\n  display:inline-block;\r\n  width:100px;\r\n  background-color:palevioletred;\r\n  vertical-align:bottom;\r\n  letter-spacing:0px;\r\n}\r\n\r\np {\r\n  letter-spacing:-4px;\r\n}<p>\r\n    <span> Foo </span>\r\n    <span> Bar </span>\r\n</p>", "I thought I'd add something new to this question as although many of the answers currently provided are more than adequate & relevant, there are some new CSS properties which can achieve a very clean output, with full support across all browsers, and little to no 'hacks'. This does move away from inline-block but it gives you the same results as the question asked for.gridCSS Grid is highly supported () apart from IE which only needs an -ms- prefix to allow for it to work.CSS Grid is also highly flexible, and takes all the good parts from table, flex, and inline-block elements and brings them into one place.When creating a grid you can specify the gaps between the rows and columns. The default gap is already set to 0px but you can change this value to whatever you like. To cut it a bit short, heres a relevant working example:body {\r\n  background: lightblue;\r\n  font-family: sans-serif;\r\n}\r\n\r\n.container {\r\n  display: grid;\r\n  grid-template-columns: 100px 100px;\r\n  grid-column-gap: 0; /* Not needed but useful for example */\r\n  grid-row-gap: 0; /* Not needed but useful for example */\r\n}\r\n\r\n.box {\r\n  background: red;\r\n}\r\n.box:nth-child(even) {\r\n  background: green;\r\n}<div class=\"container\">\r\n  <div class=\"box\">\r\n    Hello\r\n  </div>\r\n  <div class=\"box\">\r\n    Test\r\n  </div>  \r\n</div>", "Negative marginYou can scoot the elements back into place with negative 4px of margin (may need to be adjusted based on font size of parent). Apparently this is problematic in older IE (6 & 7), but if you don\u2019t care about those browsers at least you can keep the code formatting clean.span {\n  display: inline-block;\n  margin-right: -4px;\n}\n", "One another way I found is applying margin-left as negative values except the first element of the row.span { \n display:inline-block;\n width:100px;\n background:blue;\n font-size:30px;\n color:white; \n text-align:center;\n margin-left:-5px;\n}\nspan:first-child{\n margin:0px;\n}\n"]},
{"question": "How can I get query string values in JavaScript?", "details": "Is there a plugin-less way of retrieving  values via jQuery (or without)? If so, how? If not, is there a plugin which can do so?", "answers": ["Is there a plugin-less way of retrieving  values via jQuery (or without)? If so, how? If not, is there a plugin which can do so?", "You can use  which is simple and has .const urlParams = new URLSearchParams(window.location.search);\nconst myParam = urlParams.get('myParam');\nUnfortunately URLSearchParams don't properly parse query strings with string keyed values.\nYou might want to try console.log(new URLSearchParams('a=b&c=d').toString()); // a=b&c=d\nconsole.log(new URLSearchParams('a=b&c=d').get('a')); // b\nconsole.log(new URLSearchParams('filters[a]=b&filters[c]=d').toString()); // filters%5Ba%5D=b&filters%5Bc%5D=d\nconsole.log(new URLSearchParams('filters[a]=b&filters[c]=d').get('filters')); // null\nYou don't need jQuery for that purpose. You can use just some pure JavaScript:function getParameterByName(name, url = window.location.href) {\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n// query string: ?foo=lorem&bar=&baz\nvar foo = getParameterByName('foo'); // \"lorem\"\nvar bar = getParameterByName('bar'); // \"\" (present with empty value)\nvar baz = getParameterByName('baz'); // \"\" (present with no value)\nvar qux = getParameterByName('qux'); // null (absent)\nNOTE: If a parameter is present several times (?foo=lorem&foo=ipsum), you will get the first value (lorem). There is no standard about this and usages vary, see for example this question: .NOTE: The function is case-sensitive. If you prefer case-insensitive parameter name, This is an update based on the new  to achieve the same result more succinctly. See answer titled \"\" below.", "Some of the solutions posted here are inefficient. Repeating the regular expression search every time the script needs to access a parameter is completely unnecessary, one single function to split up the parameters into an associative-array style object is enough. If you're not working with the HTML 5 History API, this is only necessary once per page load.  The other suggestions here also fail to decode the URL correctly.var urlParams;\n(window. = function () {\n    var match,\n        pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n        search = /([^&=]+)=?([^&]*)/g,\n        decode = function (s) { return (s.replace(pl, \" \")); },\n        query  = window..search.(1);\n\n    urlParams = {};\n    while (match = search.(query))\n       urlParams[decode(match[1])] = decode(match[2]);\n})();Example querystring: ?i=main&mode=front&sid=de8d49b78a85a322c4155015fdce22c4&enc=+Hello%20&emptyResult: urlParams = {\n    enc: \" Hello \",\n    i: \"main\",\n    mode: \"front\",\n    sid: \"de8d49b78a85a322c4155015fdce22c4\",\n    empty: \"\"\n}\n\nalert(urlParams[\"mode\"]);\n// -> \"front\"\n\nalert(\"empty\" in urlParams);\n// -> true\nThis could easily be improved upon to handle array-style query strings too.  An example of this is , but since array-style parameters aren't defined in  I won't pollute this answer with the source code. .Also, as pointed out in the comments, ; is a legal delimiter for key=value pairs.  It would require a more complicated regex to handle ; or &, which I think is unnecessary because it's rare that ; is used and I would say even more unlikely that both would be used.  If you need to support ; instead of &, just swap them in the regex.<script>var urlParams = <?php echo ($_GET, JSON_HEX_TAG);?>;</script>Much simpler!A new capability would be to retrieve repeated params as following myparam=1&myparam=2. There is not a , however, most of the current approaches follow the generation of an array.myparam = [\"1\", \"2\"]\nSo, this is the approach to manage it:let urlParams = {};\n(window.onpopstate = function () {\n    let match,\n        pl = /\\+/g,  // Regex for replacing addition symbol with a space\n        search = /([^&=]+)=?([^&]*)/g,\n        decode = function (s) {\n            return decodeURIComponent(s.replace(pl, \" \"));\n        },\n        query = window.location.search.substring(1);\n\n    while (match = search.exec(query)) {\n        if (decode(match[1]) in urlParams) {\n            if (!Array.isArray(urlParams[decode(match[1])])) {\n                urlParams[decode(match[1])] = [urlParams[decode(match[1])]];\n            }\n            urlParams[decode(match[1])].push(decode(match[2]));\n        } else {\n            urlParams[decode(match[1])] = decode(match[2]);\n        }\n    }\n})();\n", "getQueryStringParams = query => {\n    return query\n        ? (/^[?#]/.test(query) ? query.slice(1) : query)\n            .split('&')\n            .reduce((params, param) => {\n                    let [key, value] = param.split('=');\n                    params[key] = value ? decodeURIComponent(value.replace(/\\+/g, ' ')) : '';\n                    return params;\n                }, {}\n            )\n        : {}\n};\nvar qs = (function(a) {\n    if (a == \"\") return {};\n    var b = {};\n    for (var i = 0; i < a.length; ++i)\n    {\n        var p=a[i].split('=', 2);\n        if (p.length == 1)\n            b[p[0]] = \"\";\n        else\n            b[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n    }\n    return b;\n})(window.location.search.substr(1).split('&'));\nWith an URL like ?topic=123&name=query+string, the following will return:qs[\"topic\"];    // 123\nqs[\"name\"];     // query string\nqs[\"nothere\"];  // undefined (object)\nTearing Google's code I found the method they use: getUrlParametersfunction (b) {\n    var c = typeof b === \"undefined\";\n    if (a !== h && c) return a;\n    for (var d = {}, b = b || k[B][vb], e = b[p](\"?\"), f = b[p](\"#\"), b = (f === -1 ? b[Ya](e + 1) : [b[Ya](e + 1, f - e - 1), \"&\", b[Ya](f + 1)][K](\"\"))[z](\"&\"), e = i.dd ? ia : unescape, f = 0, g = b[w]; f < g; ++f) {\n        var l = b[f][p](\"=\");\n        if (l !== -1) {\n            var q = b[f][I](0, l),\n                l = b[f][I](l + 1),\n                l = l[Ca](/\\+/g, \" \");\n            try {\n                d[q] = e(l)\n            } catch (A) {}\n        }\n    }\n    c && (a = d);\n    return d\n}\nIt is obfuscated, but it is understandable. It does not work because some variables are undefined.They start to look for parameters on the url from ? and also from the hash #. Then for each parameter they split in the equal sign b[f][p](\"=\") (which looks like indexOf, they use the position of the char to get the key/value). Having it split they check whether the parameter has a value or not, if it has then they store the value of d, otherwise they just continue.In the end the object d is returned, handling escaping and the + sign. This object is just like mine, it has the same behavior.My method as a (function($) {\n    $.QueryString = (function(paramsArray) {\n        let params = {};\n\n        for (let i = 0; i < paramsArray.length; ++i)\n        {\n            let param = paramsArray[i]\n                .split('=', 2);\n            \n            if (param.length !== 2)\n                continue;\n            \n            params[param[0]] = decodeURIComponent(param[1].replace(/\\+/g, \" \"));\n        }\n            \n        return params;\n    })(window.location.search.substr(1).split('&'))\n})(jQuery);\nUsage//Get a param\n$.QueryString.param\n//-or-\n$.QueryString[\"param\"]\n//This outputs something like...\n//\"val\"\n\n//Get all params as object\n$.QueryString\n//This outputs something like...\n//Object { param: \"val\", param2: \"val\" }\n\n//Set a param (only in the $.QueryString object, doesn't affect the browser's querystring)\n$.QueryString.param = \"newvalue\"\n//This doesn't output anything, it just updates the $.QueryString object\n\n//Convert object into string suitable for url a querystring (Requires jQuery)\n$.param($.QueryString)\n//This outputs something like...\n//\"param=newvalue&param2=val\"\n\n//Update the url/querystring in the browser's location bar with the $.QueryString object\nhistory.replaceState({}, '', \"?\" + $.param($.QueryString));\n//-or-\nhistory.pushState({}, '', \"?\" + $.param($.QueryString));\nPreparation code: methods declarationvar qs = window.GetQueryString(query);\n\nvar search = qs[\"q\"];\nvar value = qs[\"value\"];\nvar undef = qs[\"undefinedstring\"];\nvar search = window.getParameterByName(\"q\");\nvar value = window.getParameterByName(\"value\");\nvar undef = window.getParameterByName(\"undefinedstring\");\n\n\n\n", "Improved version of :function getParameterByName(name) {\n    var match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search);\n    return match && decodeURIComponent(match[1].replace(/\\+/g, ' '));\n}\nFor more information on improvement see: ", "Firefox 44+, Opera 36+, Edge 17+, Safari 10.3+ and Chrome 49+ support the  API:\n\n\n\nThere is a google-suggested  for the stable versions of IE.It is not standardized by , but it is a living standard by .You can use it on location:let params = new URLSearchParams(location.search);\norlet params = (new URL(location)).searchParams;\nOr of course on any URL:let url = new URL('https://example.com?foo=1&bar=2');\nlet params = new URLSearchParams(url.search);\nYou can get params also using a shorthand .searchParams property on the URL object, like this:let params = new URL('https://example.com?foo=1&bar=2').searchParams;\nparams.get('foo'); // \"1\"\nparams.get('bar'); // \"2\" \nYou read/set parameters through the get(KEY), set(KEY, VALUE), append(KEY, VALUE) API. You can also iterate over all values for (let p of params) {}.A  and a  are available for auditing and testing.", "Just another recommendation. The plugin  allows to retrieve all parts of URL, including anchor, host, etc.It can be used with or without jQuery.Usage is very simple and cool:var url = $.url('http://allmarkedup.com/folder/dir/index.html?item=value'); // jQuery version\nvar url = purl('http://allmarkedup.com/folder/dir/index.html?item=value'); // plain JS version\nurl.attr('protocol'); // returns 'http'\nurl.attr('path'); // returns '/folder/dir/index.html'\nHowever, as of Nov 11, 2014, Purl is no longer maintained and the author recommends using  instead.  The jQuery plugin is different in that it focuses on elements - for usage with strings, just use URI directly, with or without jQuery.  Similar code would look as such, fuller docs :var url = new URI('http://allmarkedup.com/folder/dir/index.html?item=value'); // plain JS version\nurl.protocol(); // returns 'http'\nurl.path(); // returns '/folder/dir/index.html'\n", "A quick, , which handles  and .var qd = {};\nif (location.search) location.search.substr(1).split(\"&\").forEach(function(item) {var s = item.split(\"=\"), k = s[0], v = s[1] && decodeURIComponent(s[1]); (qd[k] = qd[k] || []).push(v)})\n\n//using ES6   (23 characters cooler)\nvar qd = {};\nif (location.search) location.search.substr(1).split`&`.forEach(item => {let [k,v] = item.split`=`; v = v && decodeURIComponent(v); (qd[k] = qd[k] || []).push(v)})\nvar qd = {};\nif (location.search) location.search.substr(1).split(\"&\").forEach(function(item) {\n    var s = item.split(\"=\"),\n        k = s[0],\n        v = s[1] && decodeURIComponent(s[1]); //  null-coalescing / short-circuit\n    //(k in qd) ? qd[k].push(v) : qd[k] = [v]\n    (qd[k] = qd[k] || []).push(v) // null-coalescing / short-circuit\n})\nWhat is all this code...\n\"?a=1&b=0&c=3&d&e&a=5&a=t%20e%20x%20t&e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst\u00e5le%26car%3Dsaab\"\n> qd\na: [\"1\", \"5\", \"t e x t\"]\nb: [\"0\"]\nc: [\"3\"]\nd: [undefined]\ne: [undefined, \"http://w3schools.com/my test.asp?name=st\u00e5le&car=saab\"]\n\n> qd.a[1]    // \"5\"\n> qd[\"a\"][1] // \"5\"\nlocation.(search|hash)var queryDict = {};\nlocation.search.substr(1).split(\"&\").forEach(function(item) {queryDict[item.split(\"=\")[0]] = item.split(\"=\")[1]})\n\n\n\n\"?a=1&b=0&c=3&d&e&a=5\"\n> queryDict\na: \"5\"\nb: \"0\"\nc: \"3\"\nd: undefined\ne: undefined\nSimple key check (item in dict) ? dict.item.push(val) : dict.item = [val]var qd = {};\nlocation.search.substr(1).split(\"&\").forEach(function(item) {(item.split(\"=\")[0] in qd) ? qd[item.split(\"=\")[0]].push(item.split(\"=\")[1]) : qd[item.split(\"=\")[0]] = [item.split(\"=\")[1]]})\n\n\nqd.key[index]qd[key][index]\n> qd\na: [\"1\", \"5\"]\nb: [\"0\"]\nc: [\"3\"]\nd: [undefined]\ne: [undefined]\nUse decodeURIComponent() for the second  splits.var qd = {};\nlocation.search.substr(1).split(\"&\").forEach(function(item) {var k = item.split(\"=\")[0], v = decodeURIComponent(item.split(\"=\")[1]); (k in qd) ? qd[k].push(v) : qd[k] = [v]})\n\"?a=1&b=0&c=3&d&e&a=5&a=t%20e%20x%20t&e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst\u00e5le%26car%3Dsaab\"\n> qd\na: [\"1\", \"5\", \"t e x t\"]\nb: [\"0\"]\nc: [\"3\"]\nd: [\"undefined\"]  // decodeURIComponent(undefined) returns \"undefined\" !!!*\ne: [\"undefined\", \"http://w3schools.com/my test.asp?name=st\u00e5le&car=saab\"]\n\n Please note, that decodeURIComponent(undefined) returns string \"undefined\". The solution lies in a simple usage of &&, which ensures that decodeURIComponent() is not called on undefined values. v = v && decodeURIComponent(v);\n\nIf the querystring is empty (location.search == \"\"), the result is somewhat misleading qd == {\"\": undefined}. It is suggested to check the querystring before launching the parsing function likeso:if (location.search) location.search.substr(1).split(\"&\").forEach(...)\n", "Roshambo on snipplr.com has a simple script to achieve this described in . With his script you also easily get to pull out just the parameters you want.Here's the gist:$.urlParam = function(name, url) {\n    if (!url) {\n     url = window.location.href;\n    }\n    var results = new RegExp('[\\\\?&]' + name + '=([^&#]*)').exec(url);\n    if (!results) { \n        return undefined;\n    }\n    return results[1] || undefined;\n}\nThen just get your parameters from the query string.So if the URL/query string was xyz.com/index.html?lang=de.Just call var langval = $.urlParam('lang');, and you've got it.UZBEKJON has a great blog post on this as well, .", "If you're using jQuery, you can use a library, such as ....jQuery BBQ provides a full .deparam() method, along with both hash state management, and fragment / query string parse and merge utility methods.Edit: Adding Deparam Example: var DeparamExample = function() {\r\n            var params = $.deparam.querystring();\r\n\r\n            //nameofparam is the name of a param from url\r\n            //code below will get param if ajax refresh with hash\r\n            if (typeof params.nameofparam == 'undefined') {\r\n                params = jQuery.deparam.fragment(window.location.href);\r\n            }\r\n            \r\n            if (typeof params.nameofparam != 'undefined') {\r\n                var paramValue = params.nameofparam.toString();\r\n                  \r\n            }\r\n        };If you want to just use plain JavaScript, you could use...var getParamValue = (function() {\n    var params;\n    var resetParams = function() {\n            var query = window.location.search;\n            var regex = /[?&;](.+?)=([^&;]+)/g;\n            var match;\n\n            params = {};\n\n            if (query) {\n                while (match = regex.exec(query)) {\n                    params[match[1]] = decodeURIComponent(match[2]);\n                }\n            }    \n        };\n\n    window.addEventListener\n    && window.addEventListener('popstate', resetParams);\n\n    resetParams();\n\n    return function(param) {\n        return params.hasOwnProperty(param) ? params[param] : null;\n    }\n\n})();\u200b\nBecause of the new HTML History API and specifically history.pushState() and history.replaceState(), the URL can change which will invalidate the cache of parameters and their values.This version will update its internal cache of parameters each time the history changes.", "Just use two :function get(n) {\n    var half = location.search.split(n + '=')[1];\n    return half !== undefined ? decodeURIComponent(half.split('&')[0]) : null;\n}\nI was reading all the previous and more complete answers. But I think that is the simplest and faster method. You can check in this jsPerf To solve the problem in Rup's comment, add a conditional split by changing the first line to the two below. But absolute accuracy means it's now slower than regexp (see ).function get(n) {\n    var half = location.search.split('&' + n + '=')[1];\n    if (!half) half = location.search.split('?' + n + '=')[1];\n    return half !== undefined ? decodeURIComponent(half.split('&')[0]) : null;\n}\nSo if you know you won't run into Rup's counter-case, this wins. Otherwise, regexp. if you have control of the querystring and can guarantee that a value you are trying to get will never contain any URL encoded\n  characters (having these in a value would be a bad idea) - you can use\n  the following slightly more simplified and readable version of the 1st option:    function getQueryStringValueByName(name) {\n        var queryStringFromStartOfValue = location.search.split(name + '=')[1];\n         return queryStringFromStartOfValue !== undefined ? queryStringFromStartOfValue.split('&')[0] : null;\n", "Here's my stab at making Andy E's excellent solution into a full fledged jQuery plugin:;(function ($) {\n    $.extend({      \n        getQueryString: function (name) {           \n            function parseParams() {\n                var params = {},\n                    e,\n                    a = /\\+/g,  // Regex for replacing addition symbol with a space\n                    r = /([^&=]+)=?([^&]*)/g,\n                    d = function (s) { return decodeURIComponent(s.replace(a, \" \")); },\n                    q = window.location.search.substring(1);\n\n                while (e = r.exec(q))\n                    params[d(e[1])] = d(e[2]);\n\n                return params;\n            }\n\n            if (!this.queryStringParams)\n                this.queryStringParams = parseParams(); \n\n            return this.queryStringParams[name];\n        }\n    });\n})(jQuery);\nThe syntax is:var someVar = $.getQueryString('myParam');\nBest of both worlds!", "If you're doing more URL manipulation than simply parsing the querystring, you may find  helpful. It is a library for manipulating URLs - and comes with all the bells and whistles. (Sorry for self-advertising here)to convert your querystring into a map:var data = URI('?foo=bar&bar=baz&foo=world').query(true);\ndata == {\n  \"foo\": [\"bar\", \"world\"],\n  \"bar\": \"baz\"\n}\n(URI.js also \"fixes\" bad querystrings like ?&foo&&bar=baz& to ?foo&bar=baz)", "I like . But I don't see any point of extending jQuery for that? There is no usage of jQuery functionality.On the other hand, I like the built-in function in Google Chrome: window.location.getParameter.So why not to use this? Okay, other browsers don't have. So let's create this function if it does not exist:if (!window.location.getParameter ) {\n  window.location.getParameter = function(key) {\n    function parseParams() {\n        var params = {},\n            e,\n            a = /\\+/g,  // Regex for replacing addition symbol with a space\n            r = /([^&=]+)=?([^&]*)/g,\n            d = function (s) { return decodeURIComponent(s.replace(a, \" \")); },\n            q = window.location.search.substring(1);\n\n        while (e = r.exec(q))\n            params[d(e[1])] = d(e[2]);\n\n        return params;\n    }\n\n    if (!this.queryStringParams)\n        this.queryStringParams = parseParams(); \n\n    return this.queryStringParams[key];\n  };\n}\nThis function is more or less from Ryan Phelan, but it is wrapped differently: clear name and no dependencies of other javascript libraries. .", "Keep it simple in plain JavaScript code:function qs(key) {\n    var vars = [], hash;\n    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');\n    for(var i = 0; i < hashes.length; i++)\n    {\n        hash = hashes[i].split('=');\n        vars.push(hash[0]);\n        vars[hash[0]] = hash[1];\n    }\n    return vars[key];\n}\nCall it from anywhere in the JavaScript code:var result = qs('someKey');\n", "Here is a fast way to get an object similar to the PHP  array:function get_query(){\n    var url = location.search;\n    var qs = url.substring(url.indexOf('?') + 1).split('&');\n    for(var i = 0, result = {}; i < qs.length; i++){\n        qs[i] = qs[i].split('=');\n        result[qs[i][0]] = decodeURIComponent(qs[i][1]);\n    }\n    return result;\n}\nUsage:var $_GET = get_query();\nFor the query string x=5&y&z=hello&x=6 this returns the object:{\n  x: \"6\",\n  y: undefined,\n  z: \"hello\"\n}\n", "These are all great answers, but I needed something a bit more robust, and thought you all might like to have what I created.It is a simple library method that does dissection and manipulation of URL parameters. The static method has the following sub methods that can be called on the subject URL:\n\n\n\n\n\n\n\n\n\n\nExample:URLParser(url).getParam('myparam1')\nvar url = \"http://www.test.com/folder/mypage.html?myparam1=1&myparam2=2#something\";\n\nfunction URLParser(u){\n    var path=\"\",query=\"\",hash=\"\",params;\n    if(u.indexOf(\"#\") > 0){\n        hash = u.substr(u.indexOf(\"#\") + 1);\n        u = u.substr(0 , u.indexOf(\"#\"));\n    }\n    if(u.indexOf(\"?\") > 0){\n        path = u.substr(0 , u.indexOf(\"?\"));\n        query = u.substr(u.indexOf(\"?\") + 1);\n        params= query.split('&');\n    }else\n        path = u;\n    return {\n        getHost: function(){\n            var hostexp = /\\/\\/([\\w.-]*)/;\n            var match = hostexp.exec(path);\n            if (match != null && match.length > 1)\n                return match[1];\n            return \"\";\n        },\n        getPath: function(){\n            var pathexp = /\\/\\/[\\w.-]*(?:\\/([^?]*))/;\n            var match = pathexp.exec(path);\n            if (match != null && match.length > 1)\n                return match[1];\n            return \"\";\n        },\n        getHash: function(){\n            return hash;\n        },\n        getParams: function(){\n            return params\n        },\n        getQuery: function(){\n            return query;\n        },\n        setHash: function(value){\n            if(query.length > 0)\n                query = \"?\" + query;\n            if(value.length > 0)\n                query = query + \"#\" + value;\n            return path + query;\n        },\n        setParam: function(name, value){\n            if(!params){\n                params= new Array();\n            }\n            params.push(name + '=' + value);\n            for (var i = 0; i < params.length; i++) {\n                if(query.length > 0)\n                    query += \"&\";\n                query += params[i];\n            }\n            if(query.length > 0)\n                query = \"?\" + query;\n            if(hash.length > 0)\n                query = query + \"#\" + hash;\n            return path + query;\n        },\n        getParam: function(name){\n            if(params){\n                for (var i = 0; i < params.length; i++) {\n                    var pair = params[i].split('=');\n                    if (decodeURIComponent(pair[0]) == name)\n                        return decodeURIComponent(pair[1]);\n                }\n            }\n            console.log('Query variable %s not found', name);\n        },\n        hasParam: function(name){\n            if(params){\n                for (var i = 0; i < params.length; i++) {\n                    var pair = params[i].split('=');\n                    if (decodeURIComponent(pair[0]) == name)\n                        return true;\n                }\n            }\n            console.log('Query variable %s not found', name);\n        },\n        removeParam: function(name){\n            query = \"\";\n            if(params){\n                var newparams = new Array();\n                for (var i = 0;i < params.length;i++) {\n                    var pair = params[i].split('=');\n                    if (decodeURIComponent(pair[0]) != name)\n                          newparams .push(params[i]);\n                }\n                params = newparams;\n                for (var i = 0; i < params.length; i++) {\n                    if(query.length > 0)\n                        query += \"&\";\n                    query += params[i];\n                }\n            }\n            if(query.length > 0)\n                query = \"?\" + query;\n            if(hash.length > 0)\n                query = query + \"#\" + hash;\n            return path + query;\n        },\n    }\n}\n\n\ndocument.write(\"Host: \" + URLParser(url).getHost() + '<br>');\ndocument.write(\"Path: \" + URLParser(url).getPath() + '<br>');\ndocument.write(\"Query: \" + URLParser(url).getQuery() + '<br>');\ndocument.write(\"Hash: \" + URLParser(url).getHash() + '<br>');\ndocument.write(\"Params Array: \" + URLParser(url).getParams() + '<br>');\ndocument.write(\"Param: \" + URLParser(url).getParam('myparam1') + '<br>');\ndocument.write(\"Has Param: \" + URLParser(url).hasParam('myparam1') + '<br>');\n\ndocument.write(url + '<br>');\n\n// Remove the first parameter\nurl = URLParser(url).removeParam('myparam1');\ndocument.write(url + ' - Remove the first parameter<br>');\n\n// Add a third parameter\nurl = URLParser(url).setParam('myparam3',3);\ndocument.write(url + ' - Add a third parameter<br>');\n\n// Remove the second parameter\nurl = URLParser(url).removeParam('myparam2');\ndocument.write(url + ' - Remove the second parameter<br>');\n\n// Add a hash\nurl = URLParser(url).setHash('newhash');\ndocument.write(url + ' - Set Hash<br>');\n\n// Remove the last parameter\nurl = URLParser(url).removeParam('myparam3');\ndocument.write(url + ' - Remove the last parameter<br>');\n\n// Remove a parameter that doesn't exist\nurl = URLParser(url).removeParam('myparam3');\ndocument.write(url + ' - Remove a parameter that doesn\\\"t exist<br>');\n", "From :function loadPageVar (sVar) {\n\u00a0\u00a0return unescape(window.location.search.replace(new RegExp(\"^(?:.*[&\\\\?]\" + escape(sVar).replace(/[\\.\\+\\*]/g, \"\\\\$&\") + \"(?:\\\\=([^&]*))?)?.*$\", \"i\"), \"$1\"));\n}\n\nalert(loadPageVar(\"name\"));\n", "Code golf:var a = location.search&&location.search.substr(1).replace(/\\+/gi,\" \").split(\"&\");\nfor (var i in a) {\n    var s = a[i].split(\"=\");\n    a[i]  = a[unescape(s[0])] = unescape(s[1]);\n}\nDisplay it!for (i in a) {\n    document.write(i + \":\" + a[i] + \"<br/>\");   \n};\nOn my Mac: test.htm?i=can&has=cheezburger displays0:can\n1:cheezburger\ni:can\nhas:cheezburger\n", "I use regular expressions a lot, but not for that.It seems easier and more efficient to me to read the query string once in my application, and build an object from all the key/value pairs like:var search = function() {\n  var s = window.location.search.substr(1),\n    p = s.split(/\\&/), l = p.length, kv, r = {};\n  if (l === 0) {return false;}\n  while (l--) {\n    kv = p[l].split(/\\=/);\n    r[kv[0]] = decodeURIComponent(kv[1] || '') || true;\n  }\n  return r;\n}();\nFor a URL like http://domain.com?param1=val1&param2=val2 you can get their value later in your code as search.param1 and search.param2.", "function GET() {\n        var data = [];\n        for(x = 0; x < arguments.length; ++x)\n            data.push(location.href.match(new RegExp(\"/\\?\".concat(arguments[x],\"=\",\"([^\\n&]*)\")))[1])\n                return data;\n    }\n\n\nexample:\ndata = GET(\"id\",\"name\",\"foo\");\nquery string : ?id=3&name=jet&foo=b\nreturns:\n    data[0] // 3\n    data[1] // jet\n    data[2] // b\nor\n    alert(GET(\"id\")[0]) // return 3\n", "Roshambo jQuery method wasn't taking care of decode URLJust added that capability also while adding in  the return statement return decodeURIComponent(results[1].replace(/\\+/g, \" \")) || 0;\nNow you can find the updated gist:$.urlParam = function(name){\nvar results = new RegExp('[\\\\?&]' + name + '=([^&#]*)').exec(window.location.href);\nif (!results) { return 0; }\nreturn decodeURIComponent(results[1].replace(/\\+/g, \" \")) || 0;\n}\n", "I like  (taken from jquery-howto.blogspot.co.uk):// get an array with all querystring values\n// example: var valor = getUrlVars()[\"valor\"];\nfunction getUrlVars() {\n    var vars = [], hash;\n    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');\n    for (var i = 0; i < hashes.length; i++) {\n        hash = hashes[i].split('=');\n        vars.push(hash[0]);\n        vars[hash[0]] = hash[1];\n    }\n    return vars;\n}\nWorks great for me.", "Here's my edit to  - with added ability to parse query strings with keys without values.var url = 'http://sb.com/reg/step1?param';\nvar qs = (function(a) {\n    if (a == \"\") return {};\n    var b = {};\n    for (var i = 0; i < a.length; ++i) {\n        var p=a[i].split('=', 2);\n        if (p[1]) p[1] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n        b[p[0]] = p[1];\n    }\n    return b;\n})((url.split('?'))[1].split('&'));\n The parameter for that function in the last line is different. It's just an example of how one can pass an arbitrary URL to it. You can use last line from Bruno's answer to parse the current URL.So what exactly changed? With url http://sb.com/reg/step1?param= results will be same. But with url http://sb.com/reg/step1?param Bruno's solution returns an object without keys, while mine returns an object with key param and undefined value.", "I needed an object from the query string, and I hate lots of code. It may not be the most robust in the universe, but it's just a few lines of code.var q = {};\nlocation.href.split('?')[1].split('&').forEach(function(i){\n    q[i.split('=')[0]]=i.split('=')[1];\n});\nA URL like this.htm?hello=world&foo=bar will create:{hello:'world', foo:'bar'}\n", "Here's an extended version of Andy E's linked \"Handle array-style query strings\"-version. Fixed a bug (?key=1&key[]=2&key[]=3; 1 is lost and replaced with [2,3]), made a few minor performance improvements (re-decoding of values, recalculating \"[\" position, etc.) and added a number of improvements (functionalized, support for ?key=1&key=2, support for ; delimiters). I left the variables annoyingly short, but added comments galore to make them readable (oh, and I reused v within the local functions, sorry if that is confusing ;).It will handle the following querystring...?test=Hello&person=neek&person[]=jeff&person[]=jim&person[extra]=john&test3&nocache=1398914891264...making it into an object that looks like...{\n    \"test\": \"Hello\",\n    \"person\": {\n        \"0\": \"neek\",\n        \"1\": \"jeff\",\n        \"2\": \"jim\",\n        \"length\": 3,\n        \"extra\": \"john\"\n    },\n    \"test3\": \"\",\n    \"nocache\": \"1398914891264\"\n}\nAs you can see above, this version handles some measure of \"malformed\" arrays, i.e. - person=neek&person[]=jeff&person[]=jim or person=neek&person=jeff&person=jim as the key is identifiable and valid (at least in dotNet's ):If the specified key already exists in the target NameValueCollection\n  instance, the specified value is added to the existing comma-separated\n  list of values in the form \"value1,value2,value3\".It seems  on repeated keys as there is no spec. In this case, multiple keys are stored as an (fake)array. But do note that I  process values based on commas into arrays.getQueryStringKey = function(key) {\n    return getQueryStringAsObject()[key];\n};\n\n\ngetQueryStringAsObject = function() {\n    var b, cv, e, k, ma, sk, v, r = {},\n        d = function (v) { return decodeURIComponent(v).replace(/\\+/g, \" \"); }, //# d(ecode) the v(alue)\n        q = window.location.search.substring(1), //# suggested: q = decodeURIComponent(window.location.search.substring(1)),\n        s = /([^&;=]+)=?([^&;]*)/g //# original regex that does not allow for ; as a delimiter:   /([^&=]+)=?([^&]*)/g\n    ;\n\n    //# ma(make array) out of the v(alue)\n    ma = function(v) {\n        //# If the passed v(alue) hasn't been setup as an object\n        if (typeof v != \"object\") {\n            //# Grab the cv(current value) then setup the v(alue) as an object\n            cv = v;\n            v = {};\n            v.length = 0;\n\n            //# If there was a cv(current value), .push it into the new v(alue)'s array\n            //#     NOTE: This may or may not be 100% logical to do... but it's better than loosing the original value\n            if (cv) { Array.prototype.push.call(v, cv); }\n        }\n        return v;\n    };\n\n    //# While we still have key-value e(ntries) from the q(uerystring) via the s(earch regex)...\n    while (e = s.exec(q)) { //# while((e = s.exec(q)) !== null) {\n        //# Collect the open b(racket) location (if any) then set the d(ecoded) v(alue) from the above split key-value e(ntry) \n        b = e[1].indexOf(\"[\");\n        v = d(e[2]);\n\n        //# As long as this is NOT a hash[]-style key-value e(ntry)\n        if (b < 0) { //# b == \"-1\"\n            //# d(ecode) the simple k(ey)\n            k = d(e[1]);\n\n            //# If the k(ey) already exists\n            if (r[k]) {\n                //# ma(make array) out of the k(ey) then .push the v(alue) into the k(ey)'s array in the r(eturn value)\n                r[k] = ma(r[k]);\n                Array.prototype.push.call(r[k], v);\n            }\n            //# Else this is a new k(ey), so just add the k(ey)/v(alue) into the r(eturn value)\n            else {\n                r[k] = v;\n            }\n        }\n        //# Else we've got ourselves a hash[]-style key-value e(ntry) \n        else {\n            //# Collect the d(ecoded) k(ey) and the d(ecoded) sk(sub-key) based on the b(racket) locations\n            k = d(e[1].slice(0, b));\n            sk = d(e[1].slice(b + 1, e[1].indexOf(\"]\", b)));\n\n            //# ma(make array) out of the k(ey) \n            r[k] = ma(r[k]);\n\n            //# If we have a sk(sub-key), plug the v(alue) into it\n            if (sk) { r[k][sk] = v; }\n            //# Else .push the v(alue) into the k(ey)'s array\n            else { Array.prototype.push.call(r[k], v); }\n        }\n    }\n\n    //# Return the r(eturn value)\n    return r;\n};\n", "This is a function I created a while back and I'm quite happy with. It is not case sensitive - which is handy. Also, if the requested QS doesn't exist, it just returns an empty string.I use a compressed version of this. I'm posting uncompressed for the novice types to better explain what's going on.I'm sure this could be optimized or done differently to work faster, but it's always worked great for what I need.Enjoy.function getQSP(sName, sURL) {\n    var theItmToRtn = \"\";\n    var theSrchStrg = location.search;\n    if (sURL) theSrchStrg = sURL;\n    var sOrig = theSrchStrg;\n    theSrchStrg = theSrchStrg.toUpperCase();\n    sName = sName.toUpperCase();\n    theSrchStrg = theSrchStrg.replace(\"?\", \"&\") theSrchStrg = theSrchStrg + \"&\";\n    var theSrchToken = \"&\" + sName + \"=\";\n    if (theSrchStrg.indexOf(theSrchToken) != -1) {\n        var theSrchTokenLth = theSrchToken.length;\n        var theSrchTokenLocStart = theSrchStrg.indexOf(theSrchToken) + theSrchTokenLth;\n        var theLocOfNextAndSign = theSrchStrg.indexOf(\"&\", theSrchTokenLocStart);\n        theItmToRtn = unescape(sOrig.substring(theSrchTokenLocStart, theLocOfNextAndSign));\n    }\n    return unescape(theItmToRtn);\n}\n", "We've just released , a project aimed at solving this problem once and for all.  It's traditionally been so difficult but now you can do:var name = Arg.get(\"name\");\nor getting the whole lot:var params = Arg.all();\nand if you care about the difference between ?query=true and #hash=true then you can use the Arg.query() and Arg.hash() methods.", "The problem with the top answer on that question is that it's not-supported parameters placed after #, but sometimes it's needed to get this value also.I modified the answer to let it parse a full query string with a hash sign also:var getQueryStringData = function(name) {\n    var result = null;\n    var regexS = \"[\\\\?&#]\" + name + \"=([^&#]*)\";\n    var regex = new RegExp(regexS);\n    var results = regex.exec('?' + window.location.href.split('?')[1]);\n    if (results != null) {\n        result = decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n    }\n    return result;\n};\n", "If you are using Browserify, you can use the url module from :var url = require('url');\n\nurl.parse('http://example.com/?bob=123', true).query;\n\n// returns { \"bob\": \"123\" }\nFurther reading:  You can use  interface, its quite widely adopted in almost all the new browser and if the code is going to run on an old browser you can use a . Here's a code example on how to use URL interface to get query parameters (aka search parameters)const url = new URL('http://example.com/?bob=123');\nurl.searchParams.get('bob'); \nYou can also use URLSearchParams for it, here's  to do it with URLSearchParams:var paramsString = \"q=URLUtils.searchParams&topic=api\";\nvar searchParams = new URLSearchParams(paramsString);\n\n//Iterate the search parameters.\nfor (let p of searchParams) {\n  console.log(p);\n}\n\nsearchParams.has(\"topic\") === true; // true\nsearchParams.get(\"topic\") === \"api\"; // true\nsearchParams.getAll(\"topic\"); // [\"api\"]\nsearchParams.get(\"foo\") === null; // true\nsearchParams.append(\"topic\", \"webdev\");\nsearchParams.toString(); // \"q=URLUtils.searchParams&topic=api&topic=webdev\"\nsearchParams.set(\"topic\", \"More webdev\");\nsearchParams.toString(); // \"q=URLUtils.searchParams&topic=More+webdev\"\nsearchParams.delete(\"topic\");\nsearchParams.toString(); // \"q=URLUtils.searchParams\"\n", "function GetQueryStringParams(sParam)\n{\n    var sPageURL = window.location.search.substring(1);\n    var sURLVariables = sPageURL.split('&');\n\n    for (var i = 0; i < sURLVariables.length; i++)\n    {\n        var sParameterName = sURLVariables[i].split('=');\n        if (sParameterName[0] == sParam)\n        {\n            return sParameterName[1];\n        }\n    }\n}\u200b\nAnd this is how you can use this function assuming the URL ishttp://dummy.com/?stringtext=jquery&stringword=jquerybyexamplevar tech = GetQueryStringParams('stringtext');\nvar blog = GetQueryStringParams('stringword');\n"]},
{"question": "What is object slicing?", "details": "Someone mentioned it in the IRC as the slicing problem.", "answers": ["Someone mentioned it in the IRC as the slicing problem.", "\"Slicing\" is where you assign an object of a derived class to an instance of a base class, thereby losing part of the information - some of it is \"sliced\" away.For example, class A {\n   int foo;\n};\n\nclass B : public A {\n   int bar;\n};\nSo an object of type B has two data members, foo and bar.Then if you were to write this:B b;\n\nA a = b;\nThen the information in b about member bar is lost in a.", "Most answers here fail to explain what the actual problem with slicing is. They only explain the benign cases of slicing, not the treacherous ones. Assume, like the other answers, that you're dealing with two classes A and B, where B derives (publicly) from A.In this situation, C++ lets you pass an instance of B to  A's assignment operator (and also to the copy constructor). This works because an instance of B can be converted to a const A&, which is what assignment operators and copy-constructors expect their arguments to be.B b;\nA a = b;\nNothing bad happens there - you asked for an instance of A which is a copy of B, and that's exactly what you get. Sure, a won't contain some of b's members, but how should it? It's an A, after all, not a B, so it hasn't even  about these members, let alone would be able to store them.B b1;\nB b2;\nA& a_ref = b2;\na_ref = b1;\n//b2 now contains a mixture of b1 and b2!\nYou might think that b2 will be a copy of b1 afterward. But, alas, it's ! If you inspect it, you'll discover that b2 is a Frankensteinian creature, made from some chunks of b1 (the chunks that B inherits from A), and some chunks of b2 (the chunks that only B contains). Ouch!What happened? Well, C++ by default doesn't treat assignment operators as virtual. Thus, the line a_ref = b1 will call the assignment operator of A, not that of B. This is because, for non-virtual functions, the  (formally: ) type (which is A&) determines which function is called, as opposed to the  (formally: ) type (which would be B, since a_ref references an instance of B). Now, A's assignment operator obviously knows only about the members declared in A, so it will copy only those, leaving the members added in B unchanged.Assigning only to parts of an object usually makes little sense, yet C++, unfortunately, provides no built-in way to forbid this. You can, however, roll your own. The first step is making the assignment operator . This will guarantee that it's always the  type's assignment operator which is called, not the  type's. The second step is to use dynamic_cast to verify that the assigned object has a compatible type. The third step is to do the actual assignment in a (protected!) member assign(), since B's assign() will probably want to use A's assign() to copy A's, members.class A {\npublic:\n  virtual A& operator= (const A& a) {\n    assign(a);\n    return *this;\n  }\n\nprotected:\n  void assign(const A& a) {\n    // copy members of A from a to this\n  }\n};\n\nclass B : public A {\npublic:\n  virtual B& operator= (const A& a) {\n    if (const B* b = dynamic_cast<const B*>(&a))\n      assign(*b);\n    else\n      throw bad_assignment();\n    return *this;\n  }\n\nprotected:\n  void assign(const B& b) {\n    A::assign(b); // Let A's assign() copy members of A from b to this\n    // copy members of B from b to this\n  }\n};\nNote that, for pure convenience, B's operator= covariantly overrides the return type, since it  that it's returning an instance of B.", "If You have a base class A and a derived class B, then You can do the following.void wantAnA(A myA)\n{\n   // work with myA\n}\n\nB derived;\n// work with the object \"derived\"\nwantAnA(derived);\nNow the method wantAnA needs a copy of derived. However, the object derived cannot be copied completely, as the class B could invent additional member variables which are not in its base class A.Therefore, to call wantAnA, the compiler will \"slice off\" all additional members of the derived class. The result might be an object you did not want to create, because\n\nAB\n", "These are all good answers. I would just like to add an execution example when passing objects by value vs by reference:#include <iostream>\n\nusing namespace std;\n\n// Base class\nclass A {\npublic:\n    A() {}\n    A(const A& a) {\n        cout << \"'A' copy constructor\" << endl;\n    }\n    virtual void run() const { cout << \"I am an 'A'\" << endl; }\n};\n\n// Derived class\nclass B: public A {\npublic:\n    B():A() {}\n    B(const B& a):A(a) {\n        cout << \"'B' copy constructor\" << endl;\n    }\n    virtual void run() const { cout << \"I am a 'B'\" << endl; }\n};\n\nvoid g(const A & a) {\n    a.run();\n}\n\nvoid h(const A a) {\n    a.run();\n}\n\nint main() {\n    cout << \"Call by reference\" << endl;\n    g(B());\n    cout << endl << \"Call by copy\" << endl;\n    h(B());\n}\nThe output is:Call by reference\nI am a 'B'\n\nCall by copy\n'A' copy constructor\nI am an 'A'\n", "Third match in google for \"C++ slicing\" gives me this Wikipedia article  and this (heated, but the first few posts define the problem) : So it's when you assign an object of a subclass to the super class. The superclass knows nothing of the additional information in the subclass, and hasn't got room to store it, so the additional information gets \"sliced off\".If those links don't give enough info for a \"good answer\" please edit your question to let us know what more you're looking for.", "The slicing problem is serious because it can result in memory corruption, and it is very difficult to guarantee a program does not suffer from it. To design it out of the language, classes that support inheritance should be accessible by reference only (not by value). The D programming language has this property.Consider class A, and class B derived from A. Memory corruption can happen if the A part has a pointer p, and a B instance that points p to B's additional data. Then, when the additional data gets sliced off, p is pointing to garbage.", "In C++, a derived class object can be assigned to a base class object, but the other way is not possible.class Base { int x, y; };\n\nclass Derived : public Base { int z, w; };\n\nint main() \n{\n    Derived d;\n    Base b = d; // Object Slicing,  z and w of d are sliced off\n}\nObject slicing happens when a derived class object is assigned to a base class object, additional attributes of a derived class object are sliced off to form the base class object.", "So ... Why is losing the derived information bad? ... because the author of the derived class may have changed the representation such that slicing off the extra information changes the value being represented by the object.  This can happen if the derived class if used to cache a representation that is more efficient for certain operations, but expensive to transform back to the base representation.Also thought someone should also mention what you should do to avoid slicing...\nGet a copy of C++ Coding Standards, 101 rules guidlines, and best practices.  Dealing with slicing is #54.It suggests a somewhat sophisticated pattern to fully deal with the issue:  have a protected copy constructor, a protected pure virtual DoClone, and a public Clone with an assert which will tell you if a (further) derived class failed to implement DoClone correctly.  (The Clone method makes a proper deep copy of the polymorphic object.)You can also mark the copy constructor on the base explicit which allows for explicit slicing if it is desired.", "The slicing problem in C++ arises from the value semantics of its objects, which remained mostly due to compatibility with C structs. You need to use explicit reference or pointer syntax to achieve \"normal\" object behavior found in most other languages that do objects, i.e., objects are always passed around by reference.The short answers is that you slice the object by assigning a derived object to a base object , i.e. the remaining object is only a part of the derived object. In order to preserve value semantics, slicing is a reasonable behavior and has its relatively rare uses, which doesn't exist in most other languages. Some people consider it a feature of C++, while many considered it one of the quirks/misfeatures of C++.", "If D is a derived class of the base class B, then you can assign an object of type Derived to a variable (or parameter) of type Base. class Pet\n{\n public:\n    string name;\n};\nclass Dog : public Pet\n{\npublic:\n    string breed;\n};\n\nint main()\n{   \n    Dog dog;\n    Pet pet;\n\n    dog.name = \"Tommy\";\n    dog.breed = \"Kangal Dog\";\n    pet = dog;\n    cout << pet.breed; //ERROR\nAlthough the above assignment is allowed, the value that is assigned to the variable pet loses its breed field. This is called the .To defeat the problem, we use pointers to dynamic variables.Pet *ptrP;\nDog *ptrD;\nptrD = new Dog;         \nptrD->name = \"Tommy\";\nptrD->breed = \"Kangal Dog\";\nptrP = ptrD;\ncout << ((Dog *)ptrP)->breed; \nIn this case, none of the data members or member functions of the dynamic variable\nbeing pointed to by ptrD (descendant class object) will be lost. In addition,  if you need to use functions, the function must be a virtual function.", "It seems to me, that slicing isn't so much a problem other than when your own classes and program are poorly architected/designed.If I pass a subclass object in as a parameter to a method, which takes a parameter of type superclass, I should certainly be aware of that and know the internally, the called method will be working with the superclass (aka baseclass) object only.It seems to me only the unreasonable expectation that providing a subclass where a baseclass is requested, would somehow result in subclass specific results, would cause slicing to be a problem.  Its either poor design in the use of the method or a poor subclass implementation.  I'm guessing its usually the result of sacrificing good OOP design in favor of expediency or performance gains.", "OK, I'll give it a try after reading many posts explaining object slicing but not how it becomes problematic. The vicious scenario that can result in memory corruption is the following:\n\n\n\n", "Slicing means that the data added by a subclass are discarded when an object of the subclass is passed or returned by value or from a function expecting a base class object.    \nConsider the following class declaration:           class baseclass\n          {\n                 ...\n                 baseclass & operator =(const baseclass&);\n                 baseclass(const baseclass&);\n          }\n          void function( )\n          {\n                baseclass obj1=m;\n                obj1=m;\n          }\nAs baseclass copy functions don't know anything about the derived only the base part of the derived is copied. This is commonly referred to as slicing. ", "class A \n{ \n    int x; \n};  \n\nclass B \n{ \n    B( ) : x(1), c('a') { } \n    int x; \n    char c; \n};  \n\nint main( ) \n{ \n    A a; \n    B b; \n    a = b;     // b.c == 'a' is \"sliced\" off\n    return 0; \n}\n", "I see all the answers mention when object slicing happens when data members are sliced. Here I give an example that the methods are not overridden:class A{\npublic:\n    virtual void Say(){\n        std::cout<<\"I am A\"<<std::endl;\n    }\n};\n\nclass B: public A{\npublic:\n    void Say() override{\n        std::cout<<\"I am B\"<<std::endl;\n    }\n};\n\nint main(){\n   B b;\n   A a1;\n   A a2=b;\n\n   b.Say(); // I am B\n   a1.Say(); // I am A\n   a2.Say(); // I am A   why???\n}\nB (object b) is derived from A (object a1 and a2). b and a1, as we expect, call their member function. But from polymorphism viewpoint we don\u2019t expect a2, which is assigned by b, to not be overridden. Basically, a2 only saves A-class part of b and that is object slicing in C++.To solve this problem, a reference or pointer should be used A& a2=b;\n a2.Say(); // I am B\norA* a2 = &b;\na2->Say(); // I am B\nFor more details see ", "when a derived class object is assigned to a base class object, additional attributes of a derived class object are sliced off (discard)  form the base class object.class Base { \nint x;\n };\n\nclass Derived : public Base { \n int z; \n };\n\n int main() \n{\nDerived d;\nBase b = d; // Object Slicing,  z of d is sliced off\n}\n", "When a Derived class Object is assigned to Base class Object, all the members of derived class object is copied to base class object except the members which are not present in the base class. These members are Sliced away by the compiler.\nThis is called Object Slicing. #include<bits/stdc++.h>\nusing namespace std;\nclass Base\n{\n    public:\n        int a;\n        int b;\n        int c;\n        Base()\n        {\n            a=10;\n            b=20;\n            c=30;\n        }\n};\nclass Derived : public Base\n{\n    public:\n        int d;\n        int e;\n        Derived()\n        {\n            d=40;\n            e=50;\n        }\n};\nint main()\n{\n    Derived d;\n    cout<<d.a<<\"\\n\";\n    cout<<d.b<<\"\\n\";\n    cout<<d.c<<\"\\n\";\n    cout<<d.d<<\"\\n\";\n    cout<<d.e<<\"\\n\";\n\n\n    Base b = d;\n    cout<<b.a<<\"\\n\";\n    cout<<b.b<<\"\\n\";\n    cout<<b.c<<\"\\n\";\n    cout<<b.d<<\"\\n\";\n    cout<<b.e<<\"\\n\";\n    return 0;\n}\n[Error] 'class Base' has no member named 'd'\n[Error] 'class Base' has no member named 'e'\n", "I just ran across the slicing problem and promptly landed here. So let me add my two cents to this.Let's have an example from \"production code\" (or something that comes kind of close):Let's say we have something that dispatches actions. A control center UI for example.\nThis UI needs to get a list of things that are currently able to be dispatched. So we define a class that contains the dispatch-information. Let's call it Action. So an Action has some member variables. For simplicity we just have 2, being a std::string name and a std::function<void()> f. Then it has an void activate() which just executes the f member.So the UI gets a std::vector<Action> supplied. Imagine some functions like:void push_back(Action toAdd);\nNow we have established how it looks from the UI's perspective. No problem so far. But some other guy who works on this project suddenly decides that there are specialized actions that need more information in the Action object. For what reason ever. That could also be solved with lambda captures.  This example is not taken 1-1 from the code.So the guy derives from Action to add his own flavour.\nHe passes an instance of his home-brewed class to the push_back but then the program goes haywire.So what happened?\nAs you  have guessed: the object has been sliced.The extra information from the instance has been lost, and f is now prone to undefined behaviour.I hope this example brings light about for those people who can't really imagine things when talking about As and Bs being derived in some manner."]},
{"question": "SQL select only rows with max value on a column [duplicate]", "details": "I have this table for documents (simplified version here):+------+-------+--------------------------------------+\n| id   | rev   | content                              |\n+------+-------+--------------------------------------+\n| 1    | 1     | ...                                  |\n| 2    | 1     | ...                                  |\n| 1    | 2     | ...                                  |\n| 1    | 3     | ...                                  |\n+------+-------+--------------------------------------+\nHow do I select one row per id and only the greatest rev?\nWith the above data, the result should contain two rows: [1, 3, ...] and [2, 1, ..]. I'm using .Currently I use checks in the while loop to detect and over-write old revs from the resultset. But is this the only method to achieve the result? Isn't there a  solution?\nAs the answers suggest, there  a SQL solution, and . \nI noticed after adding the above , the rate at which the question is upvoted has surpassed the upvote rate of the answers. That has not been the intention! The fiddle is based on the answers, especially the accepted answer.", "answers": ["I have this table for documents (simplified version here):+------+-------+--------------------------------------+\n| id   | rev   | content                              |\n+------+-------+--------------------------------------+\n| 1    | 1     | ...                                  |\n| 2    | 1     | ...                                  |\n| 1    | 2     | ...                                  |\n| 1    | 3     | ...                                  |\n+------+-------+--------------------------------------+\nHow do I select one row per id and only the greatest rev?\nWith the above data, the result should contain two rows: [1, 3, ...] and [2, 1, ..]. I'm using .Currently I use checks in the while loop to detect and over-write old revs from the resultset. But is this the only method to achieve the result? Isn't there a  solution?\nAs the answers suggest, there  a SQL solution, and . \nI noticed after adding the above , the rate at which the question is upvoted has surpassed the upvote rate of the answers. That has not been the intention! The fiddle is based on the answers, especially the accepted answer.", "All you need is a GROUP BY clause with the MAX aggregate function:SELECT id, MAX(rev)\nFROM YourTable\nGROUP BY id\nI just noticed you need the content column as well.This is a very common question in SQL: find the whole data for the row with some max value in a column per some group identifier. I heard that a lot during my career. Actually, it was one the questions I answered in my current job's technical interview. It is, actually, so common that StackOverflow community has created a single tag just to deal with questions like that: .Basically, you have two approaches to solve that problem:group-identifier, max-value-in-groupIn this approach, you first find the group-identifier, max-value-in-group (already solved above) in a sub-query. Then you join your table to the sub-query with equality on both group-identifier and max-value-in-group:SELECT a.id, a.rev, a.contents\nFROM YourTable a\nINNER JOIN (\n    SELECT id, MAX(rev) rev\n    FROM YourTable\n    GROUP BY id\n) b ON a.id = b.id AND a.rev = b.rev\nIn this approach, you left join the table with itself. Equality goes in the group-identifier. Then, 2 smart moves: NULLLEFT JOINNULLSo you end up with:SELECT a.*\nFROM YourTable a\nLEFT OUTER JOIN YourTable b\n    ON a.id = b.id AND a.rev < b.rev\nWHERE b.id IS NULL;\nBoth approaches bring the exact same result. If you have two rows with max-value-in-group for group-identifier, both rows will be in the result in both approaches.Both approaches are SQL ANSI compatible, thus, will work with your favorite RDBMS, regardless of its \"flavor\".Both approaches are also performance friendly, however your mileage may vary (RDBMS, DB Structure, Indexes, etc.). So when you pick one approach over the other, . And make sure you pick the one which make most of sense to you.", "My preference is to use as little code as possible...You can do it using IN\ntry this:SELECT * \nFROM t1 WHERE (id,rev) IN \n( SELECT id, MAX(rev)\n  FROM t1\n  GROUP BY id\n)\nto my mind it is less complicated... easier to read and maintain.", "I am flabbergasted that no answer offered SQL window function solution:SELECT a.id, a.rev, a.contents\n  FROM (SELECT id, rev, contents,\n               ROW_NUMBER() OVER (PARTITION BY id ORDER BY rev DESC) rank\n          FROM YourTable) a\n WHERE a.rank = 1 \nAdded in SQL standard ANSI/ISO Standard SQL:2003  and later extended with ANSI/ISO Standard SQL:2008, window (or windowing) functions are available with all major vendors now. There are more types of rank functions available to deal with a tie issue: RANK, DENSE_RANK, PERSENT_RANK.", "Yet another solution is to use a correlated subquery:select yt.id, yt.rev, yt.contents\n    from YourTable yt\n    where rev = \n        (select max(rev) from YourTable st where yt.id=st.id)\nHaving an index on (id,rev) renders the subquery almost as a simple lookup...Following are comparisons to the solutions in @AdrianCarneiro's answer (subquery, leftjoin), based on MySQL measurements with InnoDB table of ~1million records, group size being: 1-3.While for full table scans subquery/leftjoin/correlated timings relate to each other as 6/8/9, when it comes to direct lookups or batch (id in (1,2,3)), subquery is much slower then the others (Due to rerunning the subquery). However I couldnt differentiate between leftjoin and correlated solutions in speed.One final note, as leftjoin creates n*(n+1)/2 joins in groups, its performance can be heavily affected by the size of groups...", "I can't vouch for the performance, but here's a trick inspired by the limitations of Microsoft Excel.  It has some good features\n\n\nIt is a little bit ugly and requires that you know something about the range of valid values of the  column.  Let us assume that we know the  column is a number between 0.00 and 999 including decimals but that there will only ever be two digits to the right of the decimal point (e.g. 34.17 would be a valid value).The gist of the thing is that you create a single synthetic column by string concatenating/packing the primary comparison field along with the data you want.  In this way, you can force SQL's MAX() aggregate function to return all of the data (because it has been packed into a single column).  Then you have to unpack the data.Here's how it looks with the above example, written in SQLSELECT id, \n       CAST(SUBSTRING(max(packed_col) FROM 2 FOR 6) AS float) as max_rev,\n       SUBSTRING(max(packed_col) FROM 11) AS content_for_max_rev \nFROM  (SELECT id, \n       CAST(1000 + rev + .001 as CHAR) || '---' || CAST(content AS char) AS packed_col\n       FROM yourtable\n      ) \nGROUP BY id\nThe packing begins by forcing the  column to be a number of known character length regardless of the value of  so that for example\n\n\n\nIf you do it right, string comparison of two numbers should yield the same \"max\" as numeric comparison of the two numbers and it's easy to convert back to the original number using the substring function (which is available in one form or another pretty much everywhere).", "Newer versions of MySQL come with ONLY_FULL_GROUP_BY enabled by default, and many of the solutions here will  in testing with this condition.Even so, we can simply select DISTINCT , MAX(  ), ( *somethirdfield ), etc., and have no worries understanding the result or how the query works :SELECT DISTINCT t1.id, MAX(t1.rev), MAX(t2.content)\nFROM Table1 AS t1\nJOIN Table1 AS t2 ON t2.id = t1.id AND t2.rev = (\n    SELECT MAX(rev) FROM Table1 t3 WHERE t3.id = t1.id\n)\nGROUP BY t1.id;\n\nSELECT DISTINCT Table1.id, max(Table1.rev), max(Table2.content)DISTINCTMAX()MAX()\nFROM Employee\nJOIN Table1 AS Table2 ON Table2.rev = Table1.rev\nGROUP BY Table1.id\nNote that since \"content\" was \"...\" in OP's question, there's no way to test that this works.  So, I changed that to \"..a\", \"..b\", so, we can actually now see that the results are correct:id  max(Table1.rev) max(Table2.content)\n1   3   ..d\n2   1   ..b\n  DISTINCT(), MAX(), etc., all make wonderful use of MySQL indices.  This will be faster.  Or, it will be much faster, if you have indexing, and you compare it to a query that looks at all rows.With ONLY_FULL_GROUP_BY disabled, we can use still use GROUP BY, but then we are only using it on the Salary, and not the id:SELECT *\nFROM\n    (SELECT *\n    FROM Employee\n    ORDER BY Salary DESC)\nAS employeesub\nGROUP BY employeesub.Salary;\n\nSELECT *\nFROM Employee\n(SELECT *...)\nGROUP BY employeesub.Salary\nNote the : \"Each row in a table has its own unique key.\"  This would mean that, in the question's example, id would  unique, and in that case, we can just do :SELECT *\nFROM Employee\nWHERE Employee.id = 12345\nORDER BY Employee.Salary DESC\nLIMIT 1\nHopefully this is a solution that solves the problem and helps everyone better understand what's happening in the DB.", "Something like this?SELECT yourtable.id, rev, content\nFROM yourtable\nINNER JOIN (\n    SELECT id, max(rev) as maxrev\n    FROM yourtable\n    GROUP BY id\n) AS child ON (yourtable.id = child.id) AND (yourtable.rev = maxrev)\n", "Another manner to do the job is using MAX() analytic function in OVER PARTITION clauseSELECT t.*\n  FROM\n    (\n    SELECT id\n          ,rev\n          ,contents\n          ,MAX(rev) OVER (PARTITION BY id) as max_rev\n      FROM YourTable\n    ) t\n  WHERE t.rev = t.max_rev \nThe other ROW_NUMBER() OVER PARTITION solution already documented in this post isSELECT t.*\n  FROM\n    (\n    SELECT id\n          ,rev\n          ,contents\n          ,ROW_NUMBER() OVER (PARTITION BY id ORDER BY rev DESC) rank\n      FROM YourTable\n    ) t\n  WHERE t.rank = 1 \nThis 2 SELECT work well on Oracle 10g.MAX() solution runs certainly FASTER that ROW_NUMBER() solution because MAX() complexity is O(n) while ROW_NUMBER() complexity is at minimum O(n.log(n)) where n represent the number of records in table !", "I like to use a NOT EXIST-based solution for this problem:SELECT \n  id, \n  rev\n  -- you can select other columns here\nFROM YourTable t\nWHERE NOT EXISTS (\n   SELECT * FROM YourTable t WHERE t.id = id AND rev > t.rev\n)\nThis will select all records with max value within the group and allows you to select other columns.", "SELECT *\nFROM Employee\nwhere Employee.Salary in (select max(salary) from Employee group by Employe_id)\nORDER BY Employee.Salary\n", "A third solution I hardly ever see mentioned is MySQL specific and looks like this:SELECT id, MAX(rev) AS rev\n , 0+SUBSTRING_INDEX(GROUP_CONCAT(numeric_content ORDER BY rev DESC), ',', 1) AS numeric_content\nFROM t1\nGROUP BY id\nYes it looks awful (converting to string and back etc.) but in my experience it's usually faster than the other solutions. Maybe that just for my use cases, but I have used it on tables with millions of records and many unique ids. Maybe it's because MySQL is pretty bad at optimizing the other solutions (at least in the 5.0 days when I came up with this solution).One important thing is that GROUP_CONCAT has a maximum length for the string it can build up. You probably want to raise this limit by setting the group_concat_max_len variable. And keep in mind that this will be a limit on scaling if you have a large number of rows.Anyway, the above doesn't directly work if your content field is already text. In that case you probably want to use a different separator, like \\0 maybe. You'll also run into the group_concat_max_len limit quicker.", "I think, You want this?select * from docs where (id, rev) IN (select id, max(rev) as rev from docs group by id order by id)  \nSQL Fiddle :\n", ", but for other people finding this question and using SQL, another way to resolve the  problem is using Cross Apply in MS SQLWITH DocIds AS (SELECT DISTINCT id FROM docs)\n\nSELECT d2.id, d2.rev, d2.content\nFROM DocIds d1\nCROSS APPLY (\n  SELECT Top 1 * FROM docs d\n  WHERE d.id = d1.id\n  ORDER BY rev DESC\n) d2\n", "Since this is most popular question with regard to this problem, I'll re-post another answer to it here as well:It looks like there is simpler way to do this (but ):select *\nfrom (select * from mytable order by id, rev desc ) x\ngroup by id\n in  for providing such a concise and elegant answer to this problem. though this solution works for many people it may not be stable in the long run, since MySQL doesn't guarantee that GROUP BY statement will return meaningful values for columns not in GROUP BY list. So use this solution at your own risk!", "I would use this:select t.*\nfrom test as t\njoin\n   (select max(rev) as rev\n    from test\n    group by id) as o\non o.rev = t.rev\nSubquery SELECT is not too eficient maybe, but in JOIN clause seems to be usable. I'm not an expert in optimizing queries, but I've tried at MySQL, PostgreSQL, FireBird and it does work very good.You can use this schema in multiple joins and with WHERE clause. It is my working example (solving identical to yours problem with table \"firmy\"):select *\nfrom platnosci as p\njoin firmy as f\non p.id_rel_firmy = f.id_rel\njoin (select max(id_obj) as id_obj\n      from firmy\n      group by id_rel) as o\non o.id_obj = f.id_obj and p.od > '2014-03-01'\nIt is asked on tables having teens thusands of records, and it takes less then 0,01 second on really not too strong machine.I wouldn't use IN clause (as it is mentioned somewhere above). IN is given to use with short lists of constans, and not as to be the query filter built on subquery. It is because subquery in IN is performed for every scanned record which can made query taking very loooong time.", "If you have many fields in select statement and you want latest  value for all of those fields through optimized code:select * from\n(select * from table_name\norder by id,rev desc) temp\ngroup by id \n", "How about this:SELECT all_fields.*  \nFROM (SELECT id, MAX(rev) FROM yourtable GROUP BY id) AS max_recs  \nLEFT OUTER JOIN yourtable AS all_fields \nON max_recs.id = all_fields.id\n", "This solution makes only one selection from YourTable, therefore it's faster. It works only for MySQL and SQLite(for SQLite remove DESC) according to test on sqlfiddle.com. Maybe it can be tweaked to work on other languages which I am not familiar with.SELECT *\nFROM ( SELECT *\n       FROM ( SELECT 1 as id, 1 as rev, 'content1' as content\n              UNION\n              SELECT 2, 1, 'content2'\n              UNION\n              SELECT 1, 2, 'content3'\n              UNION\n              SELECT 1, 3, 'content4'\n            ) as YourTable\n       ORDER BY id, rev DESC\n   ) as YourTable\nGROUP BY id\n", "Here is a nice way of doing thatUse following code :with temp as  ( \nselect count(field1) as summ , field1\nfrom table_name\ngroup by field1 )\nselect * from temp where summ = (select max(summ) from temp)\n", "I like to do this by ranking the records by some column. In this case, rank rev values grouped by id. Those with higher rev will have lower rankings. So highest rev will have ranking of 1.select id, rev, content\nfrom\n (select\n    @rowNum := if(@prevValue = id, @rowNum+1, 1) as row_num,\n    id, rev, content,\n    @prevValue := id\n  from\n   (select id, rev, content from YOURTABLE order by id asc, rev desc) TEMP,\n   (select @rowNum := 1 from DUAL) X,\n   (select @prevValue := -1 from DUAL) Y) TEMP\nwhere row_num = 1;\nNot sure if introducing variables makes the whole thing slower. But at least I'm not querying YOURTABLE twice.", "Sorted the rev field in reverse order and then grouped by id which gave the first row of each grouping which is the one with the highest rev value.SELECT * FROM (SELECT * FROM table1 ORDER BY id, rev DESC) X GROUP BY X.id;\nTested in  with the following dataCREATE TABLE table1\n    (`id` int, `rev` int, `content` varchar(11));\n\nINSERT INTO table1\n    (`id`, `rev`, `content`)\nVALUES\n    (1, 1, 'One-One'),\n    (1, 2, 'One-Two'),\n    (2, 1, 'Two-One'),\n    (2, 2, 'Two-Two'),\n    (3, 2, 'Three-Two'),\n    (3, 1, 'Three-One'),\n    (3, 3, 'Three-Three')\n;\nThis gave the following result in MySql 5.5 and 5.6 id  rev content\n1   2   One-Two\n2   2   Two-Two\n3   3   Three-Two\n", "here is another solution hope it will help someone    Select a.id , a.rev, a.content from Table1 a\ninner join \n(SELECT id, max(rev) rev FROM Table1 GROUP BY id) x on x.id =a.id and x.rev =a.rev\n", "None of these answers have worked for me.This is what worked for me.with score as (select max(score_up) from history)\nselect history.* from score, history where history.score_up = score.max\n", "Here's another solution to retrieving the records only with a field that has the maximum value for that field. This works for SQL400 which is the platform I work on. In this example, the records with the maximum value in field FIELD5 will be retrieved by the following SQL statement.SELECT A.KEYFIELD1, A.KEYFIELD2, A.FIELD3, A.FIELD4, A.FIELD5\n  FROM MYFILE A\n WHERE RRN(A) IN\n   (SELECT RRN(B) \n      FROM MYFILE B\n     WHERE B.KEYFIELD1 = A.KEYFIELD1 AND B.KEYFIELD2 = A.KEYFIELD2\n     ORDER BY B.FIELD5 DESC\n     FETCH FIRST ROW ONLY)\n", "This is not pure SQL. This will use the SQLAlchemy ORM.I came here looking for SQLAlchemy help, so I will duplicate Adrian Carneiro's answer with the python/SQLAlchemy version, specifically the outer join part.This query answers the question of:     This allows me to duplicate the record, update it, increment its version number, and have the copy of the old version in such a way that I can show change over time.MyTableAlias = aliased(MyTable)\nnewest_records = appdb.session.query(MyTable).select_from(join(\n    MyTable, \n    MyTableAlias, \n    onclause=and_(\n        MyTable.id == MyTableAlias.id,\n        MyTable.version_int < MyTableAlias.version_int\n    ),\n    isouter=True\n    )\n).filter(\n    MyTableAlias.id  == None,\n).all()\nTested on a PostgreSQL database.", "I used the below to solve a problem of my own. I first created a temp table and inserted the max rev value per unique id.CREATE TABLE #temp1\n(\n    id varchar(20)\n    , rev int\n)\nINSERT INTO #temp1\nSELECT a.id, MAX(a.rev) as rev\nFROM \n    (\n        SELECT id, content, SUM(rev) as rev\n        FROM YourTable\n        GROUP BY id, content\n    ) as a \nGROUP BY a.id\nORDER BY a.id\nI then joined these max values (#temp1) to all of the possible id/content combinations. By doing this, I naturally filter out the non-maximum id/content combinations, and am left with the only max rev values for each.SELECT a.id, a.rev, content\nFROM #temp1 as a\nLEFT JOIN\n    (\n        SELECT id, content, SUM(rev) as rev\n        FROM YourTable\n        GROUP BY id, content\n    ) as b on a.id = b.id and a.rev = b.rev\nGROUP BY a.id, a.rev, b.content\nORDER BY a.id\n", "You can make the select without a join when you combine the rev and id into one maxRevId value for MAX() and then split it back to original values:SELECT maxRevId & ((1 << 32) - 1) as id, maxRevId >> 32 AS rev\nFROM (SELECT MAX(((rev << 32) | id)) AS maxRevId\n      FROM YourTable\n      GROUP BY id) x;\nThis is especially fast when there is a complex join instead of a single table. With the traditional approaches the complex join would be done twice.The above combination is simple with bit functions when rev and id are INT UNSIGNED (32 bit) and combined value fits to BIGINT UNSIGNED (64 bit). When the id & rev are larger than 32-bit values or made of multiple columns, you need combine the value into e.g. a binary value with suitable padding for MAX()."]},
{"question": "Reference: What is variable scope, which variables are accessible from where and what are \u201cundefined variable\u201d errors?", "details": "Note: This is a reference question for dealing with variable scope in PHP. Please close any of the many questions fitting this pattern as a duplicate of this one.What is \"variable scope\" in PHP? Are variables from one .php file accessible in another? Why do I sometimes get  errors?", "answers": ["Note: This is a reference question for dealing with variable scope in PHP. Please close any of the many questions fitting this pattern as a duplicate of this one.What is \"variable scope\" in PHP? Are variables from one .php file accessible in another? Why do I sometimes get  errors?", "Variables have a limited \"scope\", or \"places from which they are accessible\". Just because you wrote $foo = 'bar'; once  in your application doesn't mean you can refer to $foo from  else inside the application. The variable $foo has a certain scope within which it is valid and only code in the same scope has access to the variable.Very simple: PHP has . That's the only kind of scope separator that exists in PHP. Variables inside a function are only available inside that function. Variables outside of functions are available anywhere outside of functions, but not inside any function. This means there's one special scope in PHP: the  scope. Any variable declared outside of any function is within this global scope.<?php\n\n$foo = 'bar';\n\nfunction myFunc() {\n    $baz = 42;\n}\n$foo is in the  scope, $baz is in a  scope inside myFunc. Only code inside myFunc has access to $baz. Only code  myFunc has access to $foo. Neither has access to the other:<?php\n\n$foo = 'bar';\n\nfunction myFunc() {\n    $baz = 42;\n\n    echo $foo;  // doesn't work\n    echo $baz;  // works\n}\n\necho $foo;  // works\necho $baz;  // doesn't work\nFile boundaries do  scope:<?php\n\n$foo = 'bar';\n<?php\n\ninclude 'a.php';\n\necho $foo;  // works!\nThe same rules apply to included code as applies to any other code: only functions separate scope. For the purpose of scope, you may think of including files like copy and pasting code:<?php\n\nfunction myFunc() {\n    include 'a.php';\n\n    echo $foo;  // works\n}\n\nmyFunc();\n\necho $foo;  // doesn't work!\nIn the above example, a.php was included inside myFunc, any variables inside a.php only have local function scope. Just because they  to be in the global scope in a.php doesn't necessarily mean they are, it actually depends on which context that code is included/executed in.Every new function declaration introduces a new scope, it's that simple.function foo() {\n    $foo = 'bar';\n\n    $bar = function () {\n        // no access to $foo\n        $baz = 'baz';\n    };\n\n    // no access to $baz\n}\n$foo = 'foo';\n\nclass Bar {\n\n    public function baz() {\n        // no access to $foo\n        $baz = 'baz';\n    }\n\n}\n\n// no access to $baz\nDealing with scoping issues may seem annoying, but  If every variable you declare would be available from everywhere else inside your application, you'd be stepping all over your variables with no real way to track what changes what. There are only so many sensible names you can give to your variables, you probably want to use the variable \"$name\" in more than one place. If you could only have this unique variable name once in your app, you'd have to resort to really complicated naming schemes to make sure your variables are unique and that you're not changing the wrong variable from the wrong piece of code.Observe:function foo() {\n    echo $bar;\n}\nIf there was no scope, what would the above function do? Where does $bar come from? What state does it have? Is it even initialized? Do you have to check every time? This is not maintainable. Which brings us to...function foo($bar) {\n    echo $bar;\n    return 42;\n}\nThe variable $bar is explicitly coming into this scope as function argument. Just looking at this function it's clear where the values it works with originate from. It then explicitly  a value. The caller has the confidence to know what variables the function will work with and where its return values come from:$baz   = 'baz';\n$blarg = foo($baz);\n$foo = 'bar';\n\n$baz = function () use ($foo) {\n    echo $foo;\n};\n\n$baz();\nThe anonymous function explicitly includes $foo from its surrounding scope. Note that this is not the same as  scope.globalAs said before, the global scope is somewhat special, and functions can explicitly import variables from it:$foo = 'bar';\n\nfunction baz() {\n    global $foo;\n    echo $foo;\n    $foo = 'baz';\n}\nThis function uses and modifies the global variable $foo.  All the caller of this function sees is this:baz(); // outputs \"bar\"\nunset($foo);\nbaz(); // no output, WTF?!\nbaz(); // outputs \"baz\", WTF?!?!!\nThere's no indication that this function has any , yet it does. This very easily becomes a tangled mess as some functions keep modifying  some global state. You want functions to be , acting only on their inputs and returning defined output, however many times you call them.You should avoid using the global scope in any way as much as possible; most certainly you should not be \"pulling\" variables out of the global scope into a local scope.", "Although variables defined inside of a function's scope can not be accessed from the outside that does not mean you can not use their values after that function completes. PHP has a well known static keyword that is widely used in object-oriented PHP for defining static methods and properties but one should keep in mind that static may also be used inside functions to define static variables.Static variable differs from ordinary variable defined in function's scope in case that it does not loose value when program execution leaves this scope. Let's consider the following example of using static variables:function countSheep($num) {\n static $counter = 0;\n $counter += $num;\n echo \"$counter sheep jumped over fence\";\n}\n\ncountSheep(1);\ncountSheep(2);\ncountSheep(3);\nResult:1 sheep jumped over fence\n3 sheep jumped over fence\n6 sheep jumped over fence\nIf we'd defined $counter without static then each time echoed value would be the same as $num parameter passed to the function. Using static allows to build this simple counter without additional workaround.Static variable exists only in a local function scope. It can not be\n    accessed outside of the function it has been defined in. So you may \n    be sure that it will keep its value unchanged until the next call to\n    that function.Static variable may only be defined as a scalar or as a scalar \n    expression (since PHP 5.6). Assigning other values to it inevitably \n    leads to a failure at least at the moment this article was written.\nNevertheless you are able to do so just on the next line of your code:function countSheep($num) {\n  static $counter = 0;\n  $counter += sqrt($num);//imagine we need to take root of our sheep each time\n  echo \"$counter sheep jumped over fence\";\n}\nResult:2 sheep jumped over fence\n5 sheep jumped over fence\n9 sheep jumped over fence\nStatic function is kinda 'shared' between methods of objects of the\n    same class. It is easy to understand by viewing the following example:class SomeClass {\n  public function foo() {\n    static $x = 0;\n    echo ++$x;\n  }\n}\n\n$object1 = new SomeClass;\n$object2 = new SomeClass;\n\n$object1->foo(); // 1\n$object2->foo(); // 2 oops, $object2 uses the same static $x as $object1\n$object1->foo(); // 3 now $object1 increments $x\n$object2->foo(); // 4 and now his twin brother\nThis only works with objects of the same class. If objects are from different classes (even extending one another) behavior of static vars will be as expected.Another way to keep values between function calls is to use closures. Closures were introduced in PHP 5.3. In two words they allow you to limit access to some set of variables within a function scope to another anonymous function that will be the only way to access them. Being in closure variables may imitate (more or less successfully) OOP concepts like 'class constants' (if they were passed in closure by value) or 'private properties' (if passed by reference) in structured programming.The latter actually allows to use closures instead of static variables. What to use is always up to developer to decide but it should be mentioned that static variables are definitely useful when working with recursions and deserve to be noticed by devs.", "I won't post a complete answer to the question, as the existing ones and the  do a great job of explaining most of this. But one subject that was missed was that of , including the commonly used $_POST, $_GET, $_SESSION, etc. These variables are arrays that are always available, in any scope, without a global declaration.For example, this function will print out the name of the user running the PHP script. The variable is available to the function without any problem.<?php\nfunction test() {\n    echo $_ENV[\"user\"];\n}\nThe general rule of \"globals are bad\" is typically amended in PHP to \"globals are bad but superglobals are alright,\" as long as one is not misusing them. (All these variables are writable, so they could be used to avoid dependency injection if you were really terrible.)These variables are not guaranteed to be present; an administrator can disable some or all of them using the variables_order in php.ini, but this is not common behaviour.A list of current superglobals:\n$GLOBALS\n$_SERVER\n$_GET\n$_POSTapplication/x-www-form-urlencodedmultipart/form-data\n$_FILESmultipart/form-data\n$_COOKIE\n$_SESSION\n$_REQUEST$_GET$_POST$_COOKIESrequest_orderphp.ini\n$_ENV\n"]},
{"question": "Undefined behavior and sequence points", "details": "What are \"sequence points\"?What is the relation between undefined behaviour and sequence points?I often use funny and convoluted expressions like a[++i] = i;, to make myself feel better. Why should I stop using them?If you've read this, be sure to visit the follow-up question .", "answers": ["What are \"sequence points\"?What is the relation between undefined behaviour and sequence points?I often use funny and convoluted expressions like a[++i] = i;, to make myself feel better. Why should I stop using them?If you've read this, be sure to visit the follow-up question .", "This answer is for the older versions of the C++ standard.  The C++11 and C++14 versions of the standard do not formally contain 'sequence points'; operations are 'sequenced before' or 'unsequenced' or 'indeterminately sequenced' instead.  The net effect is essentially the same, but the terminology is different. : Okay. This answer is a bit long. So have patience while reading it. If you already know these things, reading them again won't make you crazy.  : An elementary knowledge of  The Standard says At  certain specified points in the execution sequence called , all  of previous evaluations \n  shall be complete and no  of subsequent evaluations shall have taken place. (\u00a71.9/7)Evaluation  of  an  expression produces something and if in addition there is a change in the state of the execution environment it is said that the expression (its evaluation) has some side effect(s).For example:int x = y++; //where y is also an int\nIn addition to the initialization operation the value of y gets changed due to the side effect of ++ operator. So far so good. Moving on to sequence points. An alternation definition of seq-points given by the comp.lang.c author Steve Summit:Sequence point is a point in time at which the dust has settled and all side effects which have been seen so far are guaranteed to be complete.Those are:\nat the end of the evaluation of full expression (\u00a71.9/16) (A full-expression is an expression that is not a subexpression of another expression.)Example :int a = 5; // ; is a sequence point here\n\nin the evaluation of each of the following expressions after the evaluation of the first expression (\u00a71.9/18) \na && b (\u00a75.14)\na || b (\u00a75.15)\na ? b : c (\u00a75.16)\na , b (\u00a75.18)func(a,a++),aa++a\n\nat a function call (whether or not the function is inline), after the evaluation of all function arguments (if any) which \ntakes place before execution of any expressions or statements in the function body (\u00a71.9/17).\nThe Standard defines Undefined Behaviour in Section \u00a71.3.12 asbehavior, such as might arise upon use of an erroneous program construct or erroneous data, for which this International Standard imposes .Undefined  behavior  may  also  be  expected  when  this\n  International Standard omits the description of any explicit definition of behavior.In short, undefined behaviour means  can happen from daemons flying out of your nose to  your girlfriend getting pregnant.Before I get into that you must know the difference(s) between .You must also know that the order of evaluation of operands of individual operators and subexpressions of individual expressions, and the order in which side effects take place, is unspecified.For example:int x = 5, y = 6;\n\nint z = x++ + y++; //it is unspecified whether x++ or y++ will be evaluated first.\nAnother example .Now the Standard in \u00a75/4 says\n\nWhat does it mean?Informally it means that between two sequence points a variable must not be modified more than once.\nIn an expression statement, the next sequence point is usually at the terminating semicolon, and the previous sequence point is at the end of the previous statement. An expression may also contain intermediate sequence points.From the above sentence the following expressions invoke Undefined Behaviour:i++ * ++i;   // UB, i is modified more than once btw two SPs\ni = ++i;     // UB, same as above\n++i = 2;     // UB, same as above\ni = ++i + 1; // UB, same as above\n++++++i;     // UB, parsed as (++(++(++i)))\n\ni = (i, ++i, ++i); // UB, there's no SP between `++i` (right most) and assignment to `i` (`i` is modified more than once btw two SPs)\nBut the following expressions are fine:i = (i, ++i, 1) + 1; // well defined (AFAIK)\ni = (++i, i++, i);   // well defined \nint j = i;\nj = (++i, i++, j*i); // well defined\n\n\nWhat does it mean? It means if an object is written to within a full expression, any and all accesses to it within the same expression . For example in i = i + 1 all the access of i (in L.H.S and in R.H.S) are  of the value to be written. So it is fine.This rule effectively constrains legal expressions to those in which the accesses demonstrably precede the modification.Example 1:std::printf(\"%d %d\", i,++i); // invokes Undefined Behaviour because of Rule no 2\nExample 2:a[i] = i++ // or a[++i] = i or a[i++] = ++i etc\nis disallowed because one of the accesses of i (the one in a[i]) has nothing to do with the value which ends up being stored in i (which happens over in i++), and so there's no good way to define--either for our understanding or the compiler's--whether the access should take place before or after the incremented value is stored. So the behaviour is undefined.Example 3 :int x = i + i++ ;// Similar to above\n ", ". : An elementary knowledge of Relations (Mathematics). This is very true.  have been replaced by  and  (and  and )  in C++11. is a relation which is: \n\n\nbetween evaluations executed by a single  and induces a Formally it means given any two evaluations A and B, if A is  B, then the execution of A  the execution of B. If A is not sequenced before B and B is not sequenced before A, then A and B are  .Evaluations A and B are  when either A is sequenced before B or B is sequenced before A, but it is unspecified which.\n\"<\"PasymmetrictransitiveabcP \nasymmetrytransitivityIn C++11, evaluation of an expression (or a sub-expression) in general includes: \n (including determining the identity of an object for  and fetching a value previously assigned to an object for ) and\ninitiation of .\nNow  (\u00a71.9/14) says:Every value computation and side effect associated with a full-expression is  every value computation and side effect associated with the .\nTrivial example: int x;\n x = 10;\n ++x;Value computation and side effect associated with ++x is sequenced after the value computation and side effect of x = 10; \n Right.In (\u00a71.9/15) it has been mentioned that Except where noted, evaluations of operands of individual operators and of subexpressions of individual expressions are .For example :int main()\n{\n     int num = 19 ;\n     num = (num << 3) + (num >> 3);\n} \n+<<>>(\u00a71.9/15)\n  The value computations of the operands of an\n  operator are sequenced before the value computation of the result of the operator.That means in x + y the value computation of x and y are sequenced before the value computation of (x + y).More importantly(\u00a71.9/15) If a side effect on a scalar object is unsequenced relative to either(a)  or (b) the behaviour is .Examples:int i = 5, v[10] = { };\nvoid  f(int,  int);\ni = i++ * ++i;  // Undefined Behaviouri = ++i + i++;  // Undefined Behaviouri = ++i + ++i;  // Undefined Behaviouri = v[i++];     // Undefined Behaviouri = v[++i]:     // Well-defined Behaviori = i++ + 1;    // Undefined Behaviouri = ++i + 1;    // Well-defined Behaviour++++i;          // Well-defined Behaviourf(i = -1, i = -1); // Undefined Behaviour (see below)When calling a function (whether or not the function is inline), every value computation and side effect associated with any argument expression, or with the postfix expression designating the called function, is sequenced before execution of every expression or statement in the body of the called function. [ .  \u2014 ]Expressions (5), (7) and (8) do not invoke undefined behaviour. Check out the following answers for a more detailed explanation.\n\n\n : If you find any flaw in the post please leave a comment. Power-users (With rep >20000) please do not hesitate to edit the post for correcting typos and other mistakes.", " (N4659) includes a proposal \nwhich defines a stricter order of expression evaluation.In particular, the :....In all cases, the assignment is sequenced after the value\n  computation of the right and left operands, and before the value computation of the assignment expression.\n  together with the following clarificationAn expression  is said to be sequenced before an expression  if every\n  value computation and every side effect associated with the expression  is sequenced before every value\n  computation and every side effect associated with the expression .make several cases of previously undefined behavior valid, including the one in question:a[++i] = i;\nHowever several other similar cases still lead to undefined behavior.In N4140:i = i++ + 1; // the behavior is undefined\nBut in N4659i = i++ + 1; // the value of i is incremented\ni = i++ + i; // the behavior is undefined\nOf course, using a C++17 compliant compiler does not necessarily mean that one should start writing such expressions.", "I am guessing there is a fundamental reason for the change, it isn't merely cosmetic to make the old interpretation clearer: that reason is concurrency. Unspecified order of elaboration is merely selection of one of several possible serial orderings, this is quite different to before and after orderings, because if there is no specified ordering, concurrent evaluation is possible: not so with the old rules. For example in:f (a,b)\npreviously either a then b, or, b then a. Now, a and b can be evaluated with instructions interleaved or even on different cores. ", "In C99(ISO/IEC 9899:TC3) which seems absent from this discussion thus far the following steteents are made regarding order of evaluaiton.[...]the order of evaluation of subexpressions and the order in which\n  side effects take place are both unspecified. (Section 6.5 pp 67)The order of evaluation of the operands is unspecified. If an attempt\n  is made to modify the result of an assignment operator or to access it\n  after the next sequence point, the behavior[sic] is undefined.(Section\n  6.5.16 pp 91)"]},
{"question": "How to make a flat list out of list of lists?", "details": "I wonder whether there is a shortcut to make a simple list out of list of lists in Python.I can do that in a for loop, but maybe there is some cool \"one-liner\"? I tried it with reduce(), but I get an error.l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\nreduce(lambda x, y: x.extend(y), l)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 1, in <lambda>\nAttributeError: 'NoneType' object has no attribute 'extend'\n", "answers": ["I wonder whether there is a shortcut to make a simple list out of list of lists in Python.I can do that in a for loop, but maybe there is some cool \"one-liner\"? I tried it with reduce(), but I get an error.l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\nreduce(lambda x, y: x.extend(y), l)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 1, in <lambda>\nAttributeError: 'NoneType' object has no attribute 'extend'\n", "Given a list of lists t,flat_list = [item for sublist in t for item in sublist]which means:flat_list = []\nfor sublist in t:\n    for item in sublist:\n        flat_list.append(item)\nis faster than the shortcuts posted so far. (t is the list to flatten.)Here is the corresponding function:flatten = lambda t: [item for sublist in t for item in sublist]\nAs evidence, you can use the timeit module in the standard library:$ python -mtimeit -s't=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in t for item in sublist]'\n10000 loops, best of 3: 143 usec per loop\n$ python -mtimeit -s't=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(t, [])'\n1000 loops, best of 3: 969 usec per loop\n$ python -mtimeit -s't=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,t)'\n1000 loops, best of 3: 1.1 msec per loop\nExplanation: the shortcuts based on + (including the implied use in sum) are, of necessity, O(T**2) when there are T sublists -- as the intermediate result list keeps getting longer, at each step a new intermediate result list object gets allocated, and all the items in the previous intermediate result must be copied over (as well as a few new ones added at the end). So, for simplicity and without actual loss of generality, say you have T sublists of k items each: the first k items are copied back and forth T-1 times, the second k items T-2 times, and so on; total number of copies is k times the sum of x for x from 1 to T excluded, i.e., k * (T**2)/2.The list comprehension just generates one list, once, and copies each item over (from its original place of residence to the result list) also exactly once.", "You can use itertools.chain():import itertools\nlist2d = [[1,2,3], [4,5,6], [7], [8,9]]\nmerged = list(itertools.chain(*list2d))\nOr you can use itertools.chain.from_iterable() which doesn't require unpacking the list with the *:import itertools\nlist2d = [[1,2,3], [4,5,6], [7], [8,9]]\nmerged = list(itertools.chain.from_iterable(list2d))\n", ": This is inefficient. But fun, because  are awesome. It's not appropriate for production Python code.>>> sum(l, [])\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nThis just sums the elements of iterable passed in the first argument, treating second argument as the initial value of the sum (if not given, 0 is used instead and this case will give you an error).Because you are summing nested lists, you actually get [1,3]+[2,4] as a result of sum([[1,3],[2,4]],[]), which is equal to [1,3,2,4].Note that only works on lists of lists. For lists of lists of lists, you'll need another solution.", "I tested most suggested solutions with  (a pet project of mine, essentially a wrapper around timeit), and foundimport functools\nimport operator\nfunctools.reduce(operator.iconcat, a, [])\nto be the fastest solution, both when many small lists and few long lists are concatenated. (operator.iadd is equally fast.)Code to reproduce the plot:import functools\nimport itertools\nimport numpy\nimport operator\nimport perfplot\n\n\ndef forfor(a):\n    return [item for sublist in a for item in sublist]\n\n\ndef sum_brackets(a):\n    return sum(a, [])\n\n\ndef functools_reduce(a):\n    return functools.reduce(operator.concat, a)\n\n\ndef functools_reduce_iconcat(a):\n    return functools.reduce(operator.iconcat, a, [])\n\n\ndef itertools_chain(a):\n    return list(itertools.chain.from_iterable(a))\n\n\ndef numpy_flat(a):\n    return list(numpy.array(a).flat)\n\n\ndef numpy_concatenate(a):\n    return list(numpy.concatenate(a))\n\n\nperfplot.show(\n    setup=lambda n: [list(range(10))] * n,\n    # setup=lambda n: [list(range(n))] * 10,\n    kernels=[\n        forfor,\n        sum_brackets,\n        functools_reduce,\n        functools_reduce_iconcat,\n        itertools_chain,\n        numpy_flat,\n        numpy_concatenate,\n    ],\n    n_range=[2 ** k for k in range(16)],\n    xlabel=\"num lists (of length 10)\",\n    # xlabel=\"len lists (10 lists total)\"\n)\n", "from functools import reduce #python 3\n\n>>> l = [[1,2,3],[4,5,6], [7], [8,9]]\n>>> reduce(lambda x,y: x+y,l)\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nThe extend() method in your example modifies x instead of returning a useful value (which reduce() expects).A faster way to do the reduce version would be>>> import operator\n>>> l = [[1,2,3],[4,5,6], [7], [8,9]]\n>>> reduce(operator.concat, l)\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n", ">>> from django.contrib.admin.utils import flatten\n>>> l = [[1,2,3], [4,5], [6]]\n>>> flatten(l)\n>>> [1, 2, 3, 4, 5, 6]\n...:>>> from pandas.core.common import flatten\n>>> list(flatten(l))\n...:>>> import itertools\n>>> flatten = itertools.chain.from_iterable\n>>> list(flatten(l))\n...>>> from matplotlib.cbook import flatten\n>>> list(flatten(l))\n...:>>> from unipath.path import flatten\n>>> list(flatten(l))\n...:>>> from setuptools.namespaces import flatten\n>>> list(flatten(l))\n", "Here is a general approach that applies to , ,  lists and  containers.#from typing import Iterable \nfrom collections import Iterable                            # < py38\n\n\ndef flatten(items):\n    \"\"\"Yield items from any nested iterable; see Reference.\"\"\"\n    for x in items:\n        if isinstance(x, Iterable) and not isinstance(x, (str, bytes)):\n            for sub_x in flatten(x):\n                yield sub_x\n        else:\n            yield x\n: \nyield from flatten(x)for sub_x in flatten(x): yield sub_x\ncollection.abctyping\nlst = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\nlist(flatten(lst))                                         # nested lists\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nmixed = [[1, [2]], (3, 4, {5, 6}, 7), 8, \"9\"]              # numbers, strs, nested & mixed\nlist(flatten(mixed))\n# [1, 2, 3, 4, 5, 6, 7, 8, '9']\n\n\n\n", "If you want to flatten a data-structure where you don't know how deep it's nested you could use iteration_utilities.deepflatten>>> from iteration_utilities import deepflatten\n\n>>> l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\n>>> list(deepflatten(l, depth=1))\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n>>> l = [[1, 2, 3], [4, [5, 6]], 7, [8, 9]]\n>>> list(deepflatten(l))\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nIt's a generator so you need to cast the result to a list or explicitly iterate over it.To flatten only one level and if each of the items is itself iterable you can also use iteration_utilities.flatten which itself is just a thin wrapper around itertools.chain.from_iterable:>>> from iteration_utilities import flatten\n>>> l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\n>>> list(flatten(l))\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nJust to add some timings (based on Nico Schl\u00f6mer answer that didn't include the function presented in this answer):It's a log-log plot to accommodate for the huge range of values spanned. For qualitative reasoning: Lower is better.The results show that if the iterable contains only a few inner iterables then sum will be fastest, however for long iterables only the itertools.chain.from_iterable, iteration_utilities.deepflatten or the nested comprehension have reasonable performance with itertools.chain.from_iterable being the fastest (as already noticed by Nico Schl\u00f6mer).from itertools import chain\nfrom functools import reduce\nfrom collections import Iterable  # or from collections.abc import Iterable\nimport operator\nfrom iteration_utilities import deepflatten\n\ndef nested_list_comprehension(lsts):\n    return [item for sublist in lsts for item in sublist]\n\ndef itertools_chain_from_iterable(lsts):\n    return list(chain.from_iterable(lsts))\n\ndef pythons_sum(lsts):\n    return sum(lsts, [])\n\ndef reduce_add(lsts):\n    return reduce(lambda x, y: x + y, lsts)\n\ndef pylangs_flatten(lsts):\n    return list(flatten(lsts))\n\ndef flatten(items):\n    \"\"\"Yield items from any nested iterable; see REF.\"\"\"\n    for x in items:\n        if isinstance(x, Iterable) and not isinstance(x, (str, bytes)):\n            yield from flatten(x)\n        else:\n            yield x\n\ndef reduce_concat(lsts):\n    return reduce(operator.concat, lsts)\n\ndef iteration_utilities_deepflatten(lsts):\n    return list(deepflatten(lsts, depth=1))\n\n\nfrom simple_benchmark import benchmark\n\nb = benchmark(\n    [nested_list_comprehension, itertools_chain_from_iterable, pythons_sum, reduce_add,\n     pylangs_flatten, reduce_concat, iteration_utilities_deepflatten],\n    arguments={2**i: [[0]*5]*(2**i) for i in range(1, 13)},\n    argument_name='number of inner lists'\n)\n\nb.plot()\n", " >>> timeit.Timer(\n        '[item for sublist in l for item in sublist]',\n        'l=[[1, 2, 3], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]] * 10000'\n    ).timeit(100)\n2.0440959930419922\nThe sum version is still running for more than a minute and it hasn't done processing yet!For medium lists:>>> timeit.Timer(\n        '[item for sublist in l for item in sublist]',\n        'l=[[1, 2, 3], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]] * 10'\n    ).timeit()\n20.126545906066895\n>>> timeit.Timer(\n        'reduce(lambda x,y: x+y,l)',\n        'l=[[1, 2, 3], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]] * 10'\n    ).timeit()\n22.242258071899414\n>>> timeit.Timer(\n        'sum(l, [])',\n        'l=[[1, 2, 3], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]] * 10'\n    ).timeit()\n16.449732065200806\nUsing small lists and timeit: number=1000000>>> timeit.Timer(\n        '[item for sublist in l for item in sublist]',\n        'l=[[1, 2, 3], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]]'\n    ).timeit()\n2.4598159790039062\n>>> timeit.Timer(\n        'reduce(lambda x,y: x+y,l)',\n        'l=[[1, 2, 3], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]]'\n    ).timeit()\n1.5289170742034912\n>>> timeit.Timer(\n        'sum(l, [])',\n        'l=[[1, 2, 3], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]]'\n    ).timeit()\n1.0598428249359131\n", "There seems to be a confusion with operator.add! When you add two lists together, the correct term for that is concat, not add. operator.concat is what you need to use.If you're thinking functional, it is as easy as this::>>> from functools import reduce\n>>> list2d = ((1, 2, 3), (4, 5, 6), (7,), (8, 9))\n>>> reduce(operator.concat, list2d)\n(1, 2, 3, 4, 5, 6, 7, 8, 9)\nYou see reduce respects the sequence type, so when you supply a tuple, you get back a tuple. Let's try with a list::>>> list2d = [[1, 2, 3],[4, 5, 6], [7], [8, 9]]\n>>> reduce(operator.concat, list2d)\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nAha, you get back a list.How about performance::>>> list2d = [[1, 2, 3],[4, 5, 6], [7], [8, 9]]\n>>> %timeit list(itertools.chain.from_iterable(list2d))\n1000000 loops, best of 3: 1.36 \u00b5s per loop\nfrom_iterable is pretty fast! But it's no comparison to reduce with concat.>>> list2d = ((1, 2, 3),(4, 5, 6), (7,), (8, 9))\n>>> %timeit reduce(operator.concat, list2d)\n1000000 loops, best of 3: 492 ns per loop\n", "Why do you use extend?reduce(lambda x, y: x+y, l)\nThis should work fine.", "Consider installing the more_itertools package.> pip install more_itertools\nIt ships with an implementation for flatten (, from the ):import more_itertools\n\n\nlst = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\nlist(more_itertools.flatten(lst))\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\nflattenAs of version 2.4, you can flatten more complicated, nested iterables with more_itertools.collapse (, contributed by  abarnet).lst = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\nlist(more_itertools.collapse(lst)) \n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nlst = [[1, 2, 3], [[4, 5, 6]], [[[7]]], 8, 9]              # complex nesting\nlist(more_itertools.collapse(lst))\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\n", "The reason your function didn't work is because the  extends an array in-place and doesn't return it. You can still return x from lambda, using something like this:reduce(lambda x,y: x.extend(y) or x, l)\nNote: extend is more efficient than + on lists.", "def flatten(l, a):\n    for i in l:\n        if isinstance(i, list):\n            flatten(i, a)\n        else:\n            a.append(i)\n    return a\n\nprint(flatten([[[1, [1,1, [3, [4,5,]]]], 2, 3], [4, 5],6], []))\n\n# [1, 1, 1, 3, 4, 5, 2, 3, 4, 5, 6]\n", "Recursive versionx = [1,2,[3,4],[5,[6,[7]]],8,9,[10]]\n\ndef flatten_list(k):\n    result = list()\n    for i in k:\n        if isinstance(i,list):\n\n            #The isinstance() function checks if the object (first argument) is an \n            #instance or subclass of classinfo class (second argument)\n\n            result.extend(flatten_list(i)) #Recursive call\n        else:\n            result.append(i)\n    return result\n\nflatten_list(x)\n#result = [1,2,3,4,5,6,7,8,9,10]\n", "A bad feature of Anil's function above is that it requires the user to always manually specify the second argument to be an empty list []. This should instead be a default. Due to the way Python objects work, these should be set inside the function, not in the arguments.Here's a working function:def list_flatten(l, a=None):\n    #check a\n    if a is None:\n        #initialize with empty list\n        a = []\n\n    for i in l:\n        if isinstance(i, list):\n            list_flatten(i, a)\n        else:\n            a.append(i)\n    return a\nTesting:In [2]: lst = [1, 2, [3], [[4]],[5,[6]]]\n\nIn [3]: lst\nOut[3]: [1, 2, [3], [[4]], [5, [6]]]\n\nIn [11]: list_flatten(lst)\nOut[11]: [1, 2, 3, 4, 5, 6]\n", "matplotlib.cbook.flatten() will work for nested lists even if they nest more deeply than the example.import matplotlib\nl = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\nprint(list(matplotlib.cbook.flatten(l)))\nl2 = [[1, 2, 3], [4, 5, 6], [7], [8, [9, 10, [11, 12, [13]]]]]\nprint list(matplotlib.cbook.flatten(l2))\nResult:[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nThis is 18x faster than underscore._.flatten:Average time over 1000 trials of matplotlib.cbook.flatten: 2.55e-05 sec\nAverage time over 1000 trials of underscore._.flatten: 4.63e-04 sec\n(time for underscore._)/(time for matplotlib.cbook) = 18.1233394636\n", "The accepted answer did not work for me when dealing with text-based lists of variable lengths. Here is an alternate approach that did work for me.l = ['aaa', 'bb', 'cccccc', ['xx', 'yyyyyyy']]\nflat_list = [item for sublist in l for item in sublist]\nprint(flat_list)\n['a', 'a', 'a', 'b', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'xx', 'yyyyyyy']\nflat_list = []\n_ = [flat_list.extend(item) if isinstance(item, list) else flat_list.append(item) for item in l if item]\nprint(flat_list)\n['aaa', 'bb', 'cccccc', 'xx', 'yyyyyyy']\n", "Following seem simplest to me:>>> import numpy as np\n>>> l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\n>>> print (np.concatenate(l))\n[1 2 3 4 5 6 7 8 9]\n", "One can also use NumPy's :import numpy as np\nlist(np.array(l).flat)\nEdit 11/02/2016: Only works when sublists have identical dimensions.", "You can use numpy :\nflat_list = list(np.concatenate(list_of_list))", "from nltk import flatten\n\nl = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\nflatten(l)\nThe advantage of this solution over most others here is that if you have a list like:l = [1, [2, 3], [4, 5, 6], [7], [8, 9]]\nwhile most other solutions throw an error this solution handles them.", "If you are willing to give up a tiny amount of speed for a cleaner look, then you could use numpy.concatenate().tolist() or numpy.concatenate().ravel().tolist():import numpy\n\nl = [[1, 2, 3], [4, 5, 6], [7], [8, 9]] * 99\n\n%timeit numpy.concatenate(l).ravel().tolist()\n1000 loops, best of 3: 313 \u00b5s per loop\n\n%timeit numpy.concatenate(l).tolist()\n1000 loops, best of 3: 312 \u00b5s per loop\n\n%timeit [item for sublist in l for item in sublist]\n1000 loops, best of 3: 31.5 \u00b5s per loop\nYou can find out more here in the docs  and ", "Fastest solution I have found (for large list anyway):import numpy as np\n#turn list into an array and flatten()\nnp.array(l).flatten()\nDone! You can of course turn it back into a list by executing list(l)", "Simple code for underscore.py package fanfrom underscore import _\n_.flatten([[1, 2, 3], [4, 5, 6], [7], [8, 9]])\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\nIt solves all flatten problems (none list item or complex nesting)from underscore import _\n# 1 is none list item\n# [2, [3]] is complex nesting\n_.flatten([1, [2, [3]], [4, 5, 6], [7], [8, 9]])\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\nYou can install underscore.py with pippip install underscore.py\n", "def flatten(alist):\n    if alist == []:\n        return []\n    elif type(alist) is not list:\n        return [alist]\n    else:\n        return flatten(alist[0]) + flatten(alist[1:])\n", "This may not be the most efficient way but I thought to put a one-liner (actually a two-liner). Both versions will work on arbitrary hierarchy nested lists, and exploits language features (Python3.5) and recursion.def make_list_flat (l):\n    flist = []\n    flist.extend ([l]) if (type (l) is not list) else [flist.extend (make_list_flat (e)) for e in l]\n    return flist\n\na = [[1, 2], [[[[3, 4, 5], 6]]], 7, [8, [9, [10, 11], 12, [13, 14, [15, [[16, 17], 18]]]]]]\nflist = make_list_flat(a)\nprint (flist)\nThe output is[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\nThis works in a depth first manner. The recursion goes down until it finds a non-list element, then extends the local variable flist and then rolls back it to the parent. Whenever flist is returned, it is extended to the parent's flist in the list comprehension. Therefore, at the root, a flat list is returned.The above one creates several local lists and returns them which are used to extend the parent's list. I think the way around for this may be creating a gloabl flist, like below.a = [[1, 2], [[[[3, 4, 5], 6]]], 7, [8, [9, [10, 11], 12, [13, 14, [15, [[16, 17], 18]]]]]]\nflist = []\ndef make_list_flat (l):\n    flist.extend ([l]) if (type (l) is not list) else [make_list_flat (e) for e in l]\n\nmake_list_flat(a)\nprint (flist)\nThe output is again[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\nAlthough I am not sure at this time about the efficiency.", ": Below applies to Python 3.3+ because it uses yield_from.  six is also a third-party package, though it is stable.  Alternately, you could use sys.version.In the case of obj = [[1, 2,], [3, 4], [5, 6]], all of the solutions here are good, including list comprehension and itertools.chain.from_iterable.However, consider this slightly more complex case:>>> obj = [[1, 2, 3], [4, 5], 6, 'abc', [7], [8, [9, 10]]]\nThere are several problems here:\n6\n'abc'str\n[8, [9, 10]]chain.from_iterable\nYou can remedy this as follows:>>> from collections import Iterable\n>>> from six import string_types\n\n>>> def flatten(obj):\n...     for i in obj:\n...         if isinstance(i, Iterable) and not isinstance(i, string_types):\n...             yield from flatten(i)\n...         else:\n...             yield i\n\n\n>>> list(flatten(obj))\n[1, 2, 3, 4, 5, 6, 'abc', 7, 8, 9, 10]\nHere, you check that the sub-element (1) is iterable with Iterable, an ABC from itertools, but also want to ensure that (2) the element is  \"string-like.\"", "flat_list = []\nfor i in list_of_list:\n    flat_list+=i\nThis Code also works fine as it just extend the list all the way. Although it is much similar but only have one for loop. So It have less complexity than adding 2 for loops.", "you can use list extend method, it shows to be the fastest:flat_list = []\nfor sublist in l:\n    flat_list.extend(sublist)\nperformance:import functools\nimport itertools\nimport numpy\nimport operator\nimport perfplot\n\n\n\ndef functools_reduce_iconcat(a):\n    return functools.reduce(operator.iconcat, a, [])\n\n\ndef itertools_chain(a):\n    return list(itertools.chain.from_iterable(a))\n\n\ndef numpy_flat(a):\n    return list(numpy.array(a).flat)\n\n\ndef extend(a):\n    n = []\n\n    list(map(n.extend, a))\n\n    return n \n\n\nperfplot.show(\n    setup=lambda n: [list(range(10))] * n,\n    kernels=[\n        functools_reduce_iconcat, extend,itertools_chain, numpy_flat\n        ],\n    n_range=[2**k for k in range(16)],\n    xlabel='num lists',\n    )\n\n"]},
{"question": "Learning Regular Expressions [closed]", "details": "I don't really understand regular expressions.  Can you explain them to me in an easy-to-follow manner?  If there are any online tools or books, could you also link to them?", "answers": ["I don't really understand regular expressions.  Can you explain them to me in an easy-to-follow manner?  If there are any online tools or books, could you also link to them?", "The most important part is the concepts. Once you understand how the building blocks work, differences in syntax amount to little more than mild dialects. A layer on top of your regular expression engine's syntax is the syntax of the programming language you're using. Languages such as Perl remove most of this complication, but you'll have to keep in mind other considerations if you're using regular expressions in a C program.If you think of regular expressions as building blocks that you can mix and match as you please, it helps you learn how to write and debug your own patterns but also how to understand patterns written by others.Conceptually, the simplest regular expressions are literal characters. The pattern N matches the character 'N'.Regular expressions next to each other match sequences. For example, the pattern Nick matches the sequence 'N' followed by 'i' followed by 'c' followed by 'k'.If you've ever used grep on Unix\u2014even if only to search for ordinary looking strings\u2014you've already been using regular expressions! (The re in grep refers to regular expressions.)Adding just a little complexity, you can match either 'Nick' or 'nick' with the pattern [Nn]ick. The part in square brackets is a , which means it matches exactly one of the enclosed characters. You can also use ranges in character classes, so [a-c] matches either 'a' or 'b' or 'c'.The pattern . is special: rather than matching a literal dot only, it matches  character. It's the same conceptually as the really big character class [-.?+%$A-Za-z0-9...].Think of character classes as menus: pick just one.Using . can save you lots of typing, and there are other shortcuts for common patterns. Say you want to match a digit: one way to write that is [0-9]. Digits are a frequent match target, so you could instead use the shortcut \\d. Others are \\s (whitespace) and \\w (word characters: alphanumerics or underscore).The uppercased variants are their complements, so \\S matches any -whitespace character, for example.From there, you can repeat parts of your pattern with . For example, the pattern ab?c matches 'abc' or 'ac' because the ? quantifier makes the subpattern it modifies optional. Other quantifiers are\n*\n+\n{n}\n{n,}\n{n,m}\nPutting some of these blocks together, the pattern [Nn]*ick matches all of\n\n\n\n\n\n\n\nThe first match demonstrates an important lesson: * Any pattern can match zero times.A few other useful examples:\n[0-9]+\\d+\n\\d{4}-\\d{2}-\\d{2}\nA quantifier modifies the pattern to its immediate left. You might expect 0abc+0 to match '0abc0', '0abcabc0', and so forth, but the pattern  to the left of the plus quantifier is c. This means 0abc+0 matches '0abc0', '0abcc0', '0abccc0', and so on.To match one or more sequences of 'abc' with zeros on the ends, use 0(abc)+0. The parentheses denote a subpattern that can be quantified as a unit. It's also common for regular expression engines to save or \"capture\" the portion of the input text that matches a parenthesized group. Extracting bits this way is much more flexible and less error-prone than counting indices and substr.Earlier, we saw one way to match either 'Nick' or 'nick'. Another is with alternation as in Nick|nick. Remember that alternation includes everything to its left and everything to its right. Use grouping parentheses to limit the scope of |, , (Nick|nick).For another example, you could equivalently write [a-c] as a|b|c, but this is likely to be suboptimal because many implementations assume alternatives will have lengths greater than 1.Although some characters match themselves, others have special meanings. The pattern \\d+ doesn't match backslash followed by lowercase D followed by a plus sign: to get that, we'd use \\\\d\\+. A backslash removes the special meaning from the following character.Regular expression quantifiers are greedy. This means they match as much text as they possibly can while allowing the entire pattern to match successfully.For example, say the input is\"Hello,\" she said, \"How are you?\"You might expect \".+\" to match only 'Hello,' and will then be surprised when you see that it matched from 'Hello' all the way through 'you?'.To switch from greedy to what you might think of as cautious, add an extra ? to the quantifier. Now you understand how \\((.+?)\\), the example from your question works. It matches the sequence of a literal left-parenthesis, followed by one or more characters, and terminated by a right-parenthesis.If your input is '(123) (456)', then the first capture will be '123'. Non-greedy quantifiers want to allow the rest of the pattern to start matching as soon as possible.(As to your confusion, I don't know of any regular-expression dialect where ((.+?)) would do the same thing. I suspect something got lost in transmission somewhere along the way.)Use the special pattern ^ to match only at the beginning of your input and $ to match only at the end. Making \"bookends\" with your patterns where you say, \"I know what's at the front and back, but give me everything between\" is a useful technique.Say you want to match comments of the form-- This is a comment --you'd write ^--\\s+(.+)\\s+--$.Regular expressions are recursive, so now that you understand these basic rules, you can combine them however you like.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n The statement above that . matches any character is a simplification for pedagogical purposes that is not strictly true. Dot matches any character except newline, \"\\n\", but in practice you rarely expect a pattern such as .+ to cross a newline boundary. Perl regexes have a /s and Java Pattern.DOTALL, for example, to make . match any character at all. For languages that don't have such a feature, you can use something like [\\s\\S] to match \"any whitespace or any non-whitespace\", in other words anything."]},
{"question": "How do I get PHP errors to display?", "details": "I have checked my PHP ini file (php.ini) and display_errors is set and also error reporting is E_ALL. I have restarted my Apache webserver.I have even put these lines at the top of my script, and it doesn't even catch simple parse errors. For example, I declare variables with a \"$\" and I don't close statements\";\". But all my scripts show a blank page on these errors, but I want to actually see the  in my browser output. error_reporting(E_ALL);\nini_set('display_errors', 1);\nWhat is left to do?", "answers": ["I have checked my PHP ini file (php.ini) and display_errors is set and also error reporting is E_ALL. I have restarted my Apache webserver.I have even put these lines at the top of my script, and it doesn't even catch simple parse errors. For example, I declare variables with a \"$\" and I don't close statements\";\". But all my scripts show a blank page on these errors, but I want to actually see the  in my browser output. error_reporting(E_ALL);\nini_set('display_errors', 1);\nWhat is left to do?", "This always works for me:ini_set('display_errors', '1');\nini_set('display_startup_errors', '1');\nerror_reporting(E_ALL);\nHowever, this doesn't make PHP to show parse errors - the only way to show those errors is to modify your php.ini with this line:display_errors = on\n(if you don't have access to php.ini, then putting this line in .htaccess might work too):php_flag display_errors 1\n", "You can't catch parse errors when enabling error output at runtime, because it parses the file before actually executing anything (and since it encounters an error during this, it won't execute anything). You'll need to change the actual server configuration so that display_errors is on and the approriate error_reporting level is used. If you don't have access to php.ini, you may be able to use .htaccess or similar, depending on the server. may provide additional info.", "Inside your :display_errors = on\nThen restart your web server.", "To display all errors you need to:index.phperror_reporting(E_ALL);\nini_set('display_errors', '1');\ndisplay_errors = Onphp.iniOtherwise, it can't even run those 2 lines!You can check for syntax errors in your script by running (at the command line):php -l index.php\nIf you  the script from another PHP script then it  display syntax errors in the  script.  For example:index.phperror_reporting(E_ALL);\nini_set('display_errors', '1');\n\n// Any syntax errors here will result in a blank screen in the browser\n\ninclude 'my_script.php';\nmy_script.phpadjfkj // This syntax error will be displayed in the browser\n", "Some web hosting providers allow you to change PHP parameters in the .htaccess file.You can add the following line:php_value display_errors 1\nI had the same issue as yours and this solution fixed it.", "You might find all of the settings for \"error reporting\" or \"display errors\" do not appear to work in PHP\u00a07. That is because error handling has changed. Try this instead:try{\n     // Your code\n} \ncatch(Error $e) {\n    $trace = $e->getTrace();\n    echo $e->getMessage().' in '.$e->getFile().' on line '.$e->getLine().' called from '.$trace[0]['file'].' on line '.$trace[0]['line'];\n}\nOr, to catch exceptions and errors in one go (this is not backward compatible with PHP\u00a05):try{\n     // Your code\n} \ncatch(Throwable $e) {\n    $trace = $e->getTrace();\n    echo $e->getMessage().' in '.$e->getFile().' on line '.$e->getLine().' called from '.$trace[0]['file'].' on line '.$trace[0]['line'];\n}\n", "This will work:<?php\n     error_reporting(E_ALL);\n     ini_set('display_errors', 1);    \n?>\n", "Use:ini_set('display_errors', 1);\nini_set('display_startup_errors', 1);\nerror_reporting(E_ALL);\nThis is the best way to write it, but a syntax error gives blank output, so use the console to check for syntax errors. The best way to debug PHP code is to use the console; run the following:php -l phpfilename.php\n", "Set this in your  file:ini_set('display_errors', 1);\nini_set('display_startup_errors', 1);\nerror_reporting(E_ALL);\n", "Create a file called  in the folder where your PHP file resides.Inside php.ini add the following code (I am giving an simple error showing code):display_errors = on\n\ndisplay_startup_errors = on\n", "If, despite following all of the above answers (or you can't edit your php.ini file), you still can't get an error message, try making a new PHP file that enables error reporting and then include the problem file. eg:error_reporting(E_ALL);\nini_set('display_errors', 1);\nrequire_once('problem_file.php');\nDespite having everything set properly in my php.ini file, this was the only way I could catch a namespace error. My exact scenario was://file1.php\nnamespace a\\b;\nclass x {\n    ...\n}\n\n//file2.php\nnamespace c\\d;\nuse c\\d\\x; //Dies because it's not sure which 'x' class to use\nclass x {\n    ...\n}\n", "I would usually go with the following code in my plain PHP projects.if(!defined('ENVIRONMENT')){\n    define('ENVIRONMENT', 'DEVELOPMENT');\n}\n\n$base_url = null;\n\nif (defined('ENVIRONMENT'))\n{\n    switch (ENVIRONMENT)\n    {\n        case 'DEVELOPMENT':\n            $base_url = 'http://localhost/product/';\n            ini_set('display_errors', 1);\n            ini_set('display_startup_errors', 1);\n            error_reporting(E_ALL|E_STRICT);\n            break;\n\n        case 'PRODUCTION':\n            $base_url = 'Production URL'; /* https://google.com */\n            error_reporting(0);\n            /* Mechanism to log errors */\n            break;\n\n        default:\n            exit('The application environment is not set correctly.');\n    }\n}\n", "If you somehow find yourself in a situation where you can't modifiy the setting via php.ini or .htaccess you're out of luck for displaying errors when your PHP scripts contain parse errors. You'd then have to resolve to  like this:find . -name '*.php' -type f -print0 | xargs -0 -n1 -P8 php -l | grep -v \"No syntax errors\"\nIf your host is so locked down that it does not allow changing the value via php.ini or .htaccess, it may also disallow changing the value via ini_set. You can check that with the following PHP script:<?php\nif( !ini_set( 'display_errors', 1 ) ) {\n  echo \"display_errors cannot be set.\";\n} else {\n  echo \"changing display_errors via script is possible.\";\n}\n", "As we are now running PHP 7, answers given here are not correct any more. The only one still OK is , as he talks about PHP\u00a07.On the other side, rather than trying to catch errors with a try/catch you can use a trick: use include.Here three pieces of code:File: tst1.php<?php\n    error_reporting(E_ALL);\n    ini_set('display_errors', 'On');\n    // Missing \" and ;\n    echo \"Testing\n?>\nRunning this in PHP\u00a07 will show nothing.Now, try this:File: tst2.php<?php\n    error_reporting(E_ALL);\n    ini_set('display_errors', 'On');\n    include (\"tst3.php\");\n?>\nFile: tst3.php<?php\n    // Missing \" and ;\n    echo \"Testing\n?>\nNow run tst2 which sets the error reporting, and then include tst3. You will see:Parse error: syntax error, unexpected end of file, expecting variable (T_VARIABLE) or ${ (T_DOLLAR_OPEN_CURLY_BRACES) or {$ (T_CURLY_OPEN) in tst3.php on line 4", "You can do something like below:Set the below parameters in your main index file:    ini_set('display_errors', 1);\n    ini_set('display_startup_errors', 1);\nThen based on your requirement you can choose which you want to show:For  errors, warnings and notices:    error_reporting(E_ALL); OR error_reporting(-1);\nFor  errors:    error_reporting(E_ERROR);\nFor  warnings:    error_reporting(E_WARNING);\nFor  notices:    error_reporting(E_NOTICE);\nFor more information, check .", "You can add your own custom error handler, which can provide extra debug information. Furthermore, you can set it up to send you the information via email.function ERR_HANDLER($errno, $errstr, $errfile, $errline){\n    $msg = \"<b>Something bad happened.</b> [$errno] $errstr <br><br>\n    <b>File:</b> $errfile <br>\n    <b>Line:</b> $errline <br>\n    <pre>\".json_encode(debug_backtrace(), JSON_PRETTY_PRINT).\"</pre> <br>\";\n\n    echo $msg;\n\n    return false;\n}\n\nfunction EXC_HANDLER($exception){\n    ERR_HANDLER(0, $exception->getMessage(), $exception->getFile(), $exception->getLine());\n}\n\nfunction shutDownFunction() {\n    $error = error_get_last();\n    if ($error[\"type\"] == 1) {\n        ERR_HANDLER($error[\"type\"], $error[\"message\"], $error[\"file\"], $error[\"line\"]);\n    }\n}\n\nset_error_handler (\"ERR_HANDLER\", E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED);\nregister_shutdown_function(\"shutdownFunction\");\nset_exception_handler(\"EXC_HANDLER\");\n", "This code on top should work:error_reporting(E_ALL);\nHowever, try to edit the code on the phone in the file:error_reporting =on\n", "The best/easy/fast solution that you can use if it's a quick debugging, is to surround your code with catching exceptions. That's what I'm doing when I want to check something fast in production.try {\n    // Page code\n}\ncatch (Exception $e) {\n    echo 'Caught exception: ',  $e->getMessage(), \"\\n\";\n}\n", "    <?php\n    // Turn off error reporting\n    error_reporting(0);\n\n    // Report runtime errors\n    error_reporting(E_ERROR | E_WARNING | E_PARSE);\n\n    // Report all errors\n    error_reporting(E_ALL);\n\n    // Same as error_reporting(E_ALL);\n    ini_set(\"error_reporting\", E_ALL);\n\n    // Report all errors except E_NOTICE\n    error_reporting(E_ALL & ~E_NOTICE);\n    ?>\nWhile your site is live, the php.ini file should have display_errors disabled for security reasons. However, for the development environment, display_errors can be enabled for troubleshooting. ", "Just write:error_reporting(-1);\n", "You can do this by changing the  php.ini file and add the following display_errors = on\ndisplay_startup_errors = on\nOR you can also use the following code as this always works for meini_set('display_errors', 1);\nini_set('display_startup_errors', 1);\nerror_reporting(E_ALL);\n", "If you have  installed you can override every setting by setting:xdebug.force_display_errors = 1;\nxdebug.force_error_reporting = -1;\nforce_display_errorsType: int, Default value: 0, Introduced in Xdebug >= 2.3 If this\n  setting is set to 1 then errors will always be displayed, no matter\n  what the setting of PHP's display_errors is.force_error_reportingType: int, Default value: 0, Introduced in Xdebug >= 2.3\n  This setting is a bitmask, like error_reporting. This bitmask will be logically ORed with the bitmask represented by error_reporting to dermine which errors should be displayed. This setting can only be made in php.ini and allows you to force certain errors from being shown no matter what an application does with ini_set().", "You might want to use this code:ini_set('display_errors', 1);\nini_set('display_startup_errors', 1);\nerror_reporting(E_ALL);\n", "Report all errors except E_NOTICEerror_reporting(E_ALL & ~E_NOTICE);\nDisplay all PHP errors error_reporting(E_ALL);  or ini_set('error_reporting', E_ALL);\nTurn off all error reportingerror_reporting(0);\n", "If it is on the command line, you can run php with -ddisplay_errors=1 to override the setting in php.ini:php -ddisplay_errors=1 script.php\n", "In Unix , it's very practical to redirect :./script 2> errors.log\nThen from another shell, for live changes:tail -f errors.log\nor simplywatch cat errors.log\n", "display_errors = on;\nphp_flag display_errors 1\nini_set('display_errors', 1);\nini_set('display_startup_errors', 1);\nerror_reporting(E_ALL);\n"]},
{"question": "Are 'Arrow Functions' and 'Functions' equivalent / interchangeable?", "details": "Arrow functions in ES2015 provide a more concise syntax. \n\n\nExamples:Constructor functionfunction User(name) {\n  this.name = name;\n}\n\n// vs\n\nconst User = name => {\n  this.name = name;\n};\nPrototype methodsUser.prototype.getName = function() {\n  return this.name;\n};\n\n// vs\n\nUser.prototype.getName = () => this.name;\nObject (literal) methodsconst obj = {\n  getName: function() {\n    // ...\n  }\n};\n\n// vs\n\nconst obj = {\n  getName: () => {\n    // ...\n  }\n};\nCallbackssetTimeout(function() {\n  // ...\n}, 500);\n\n// vs\n\nsetTimeout(() => {\n  // ...\n}, 500);\nVariadic functionsfunction sum() {\n  let args = [].slice.call(arguments);\n  // ...\n}\n\n// vs\nconst sum = (...args) => {\n  // ...\n};\n", "answers": ["Arrow functions in ES2015 provide a more concise syntax. \n\n\nExamples:Constructor functionfunction User(name) {\n  this.name = name;\n}\n\n// vs\n\nconst User = name => {\n  this.name = name;\n};\nPrototype methodsUser.prototype.getName = function() {\n  return this.name;\n};\n\n// vs\n\nUser.prototype.getName = () => this.name;\nObject (literal) methodsconst obj = {\n  getName: function() {\n    // ...\n  }\n};\n\n// vs\n\nconst obj = {\n  getName: () => {\n    // ...\n  }\n};\nCallbackssetTimeout(function() {\n  // ...\n}, 500);\n\n// vs\n\nsetTimeout(() => {\n  // ...\n}, 500);\nVariadic functionsfunction sum() {\n  let args = [].slice.call(arguments);\n  // ...\n}\n\n// vs\nconst sum = (...args) => {\n  // ...\n};\n", "  Arrow functions and function declarations / expressions are not equivalent and cannot be replaced blindly.\nIf the function you want to replace does  use this, arguments and is not called with new, then yes.As so often: . Arrow functions have different behavior than function declarations / expressions, so let's have a look at the differences first:thisargumentsArrow functions don't have their own this or arguments binding. Instead, those identifiers are resolved in the lexical scope like any other variable. That means that inside an arrow function, this and arguments refer to the values of this and arguments in the environment the arrow function is  in (i.e. \"outside\" the arrow function):// Example using a function expression\nfunction createObject() {\n  console.log('Inside `createObject`:', this.foo);\n  return {\n    foo: 42,\n    bar: function() {\n      console.log('Inside `bar`:', this.foo);\n    },\n  };\n}\n\ncreateObject.call({foo: 21}).bar(); // override `this` inside createObject// Example using a arrow function\nfunction createObject() {\n  console.log('Inside `createObject`:', this.foo);\n  return {\n    foo: 42,\n    bar: () => console.log('Inside `bar`:', this.foo),\n  };\n}\n\ncreateObject.call({foo: 21}).bar(); // override `this` inside createObjectIn the function expression case, this refers to the object that was created inside the createObject. In the arrow function case, this refers to this of createObject itself.This makes arrow functions useful if you need to access the this of the current environment:// currently common pattern\nvar that = this;\ngetData(function(data) {\n  that.data = data;\n});\n\n// better alternative with arrow functions\ngetData(data => {\n  this.data = data;\n});\n that this also means that is  possible to set an arrow function's this with .bind or .call.If you are not very familiar with this, consider reading\n\n\nnewES2015 distinguishes between functions that are able and functions that are able. If a function is constructable, it can be called with  new, i.e. new User(). If a function is callable, it can be called without new (i.e. normal function call).Functions created through function declarations / expressions are both constructable and callable.\nArrow functions (and methods) are only callable.\nclass constructors are only constructable.If you are trying to call a non-callable function or to construct a non-constructable function, you will get a runtime error.Knowing this, we can state the following.Replaceable:\nthisarguments\n.bind(this)\n replaceable:\n\nthis\narguments\nLets have a closer look at this using your examples:This won't work because arrow functions cannot be called with new. Keep using a function declaration / expression or use class.Most likely not, because prototype methods usually use this to access the instance. If they don't use this, then you can replace it. However, if you primarily care for concise syntax, use class with its concise method syntax:class User {\n  constructor(name) {\n    this.name = name;\n  }\n  \n  getName() {\n    return this.name;\n  }\n}\nSimilarly for methods in an object literal. If the method wants to reference the object itself via this, keep using function expressions,  or use the new method syntax:const obj = {\n  getName() {\n    // ...\n  },\n};\nIt depends. You should definitely replace it if you are aliasing the outer this or are using .bind(this):// old\nsetTimeout(function() {\n  // ...\n}.bind(this), 500);\n\n// new\nsetTimeout(() => {\n  // ...\n}, 500);\n If the code which calls the callback explicitly sets this to a specific value, as is often the case with event handlers, especially with jQuery, and the callback uses this (or arguments), you  use an arrow function!Since arrow functions don't have their own arguments, you cannot simply replace them with an arrow  function. However, ES2015 introduces an alternative to using arguments: the .// old\nfunction sum() {\n  let args = [].slice.call(arguments);\n  // ...\n}\n\n// new\nconst sum = (...args) => {\n  // ...\n};\nRelated question:\n\n\n\n\nFurther resources:\n\n\n", "Arrow functions => best ES6 feature so far. They are a tremendously\npowerful addition to ES6, that I use constantly.Wait, you can't use arrow function everywhere in your code, its not going to work in all cases like this where arrow functions are not usable. Without a doubt, the arrow function is a great addition it brings code simplicity.But you can\u2019t use an arrow function when a dynamic context is required: defining methods, create objects with constructors, get the target from this when handling events.thisIt uses \u201clexical scoping\u201d to figure out what the value of \u201cthis\u201d\nshould be. In simple word lexical scoping it uses \u201cthis\u201d from the\ninside the function\u2019s body.argumentsArrow functions don\u2019t have an arguments object. But the same\nfunctionality can be achieved using rest parameters.let sum = (...args) => args.reduce((x, y) => x + y, 0)\nsum(3, 3, 1) // output - 7\n` newArrow functions can't be construtors because they do not have a prototype property.mapreduceforEach", "To use arrow functions with function.prototype.call, I made a helper function on the object prototype:  // Using\n  // @func = function() {use this here} or This => {use This here}\n  using(func) {\n    return func.call(this, this);\n  }\n  var obj = {f:3, a:2}\n  .using(This => This.f + This.a) // 5\nYou don't NEED a helper. You could do:var obj = {f:3, a:2}\n(This => This.f + This.a).call(undefined, obj); // 5\n"]},
{"question": "What is the difference between single-quoted and double-quoted strings in PHP?", "details": "I'm a little confused why I see some code in PHP with string placed in single quotes and sometimes in double quotes.I just know in .NET, or the C language, if it is in a single quote, that means it is a character, not a string.", "answers": ["I'm a little confused why I see some code in PHP with string placed in single quotes and sometimes in double quotes.I just know in .NET, or the C language, if it is in a single quote, that means it is a character, not a string.", " can be specified not just in  ways, but in  ways.\\'\\\\$typeecho \"The $types are\"$typesecho \"The {$type}s are\"<<<<<<<<<'EOT'\nSingle quotes inside of single quotes and double quotes inside of double quotes must be escaped:$string = 'He said \"What\\'s up?\"';\n$string = \"He said \\\"What's up?\\\"\";\n\nI would not put too much weight on single quotes being faster than double quotes. They probably are faster in certain situations. Here's an article  (Useless Optimizations toward the bottom, section C). Also, this  has a single vs double quote comparison. Most of the comparisons are the same. There is one comparison where double quotes are slower than single quotes.", "Things get evaluated in double quotes but not in single:$s = \"dollars\";\necho 'This costs a lot of $s.'; // This costs a lot of $s.\necho \"This costs a lot of $s.\"; // This costs a lot of dollars.\n", "'The simplest way to specify a string is to enclose it in single quotes. Single quote is generally faster, and everything quoted inside treated as plain string.echo 'Start with a simple string';\necho 'String\\'s apostrophe';\necho 'String with a php variable'.$name;\n\"Use double quotes in PHP to avoid having to use the period to separate code (Note: Use curly braces {} to include variables if you do not want to use concatenation (.) operator) in string.echo \"Start with a simple string\";\necho \"String's apostrophe\";\necho \"String with a php variable {$name}\";\nYes. It is slightly faster to use single quotes.PHP won't use additional processing to interpret what is inside the single quote. when you use double quotes PHP has to parse to check if there are any variables within the string.", "A single-quoted string does not have variables within it interpreted.  A double-quoted string does.Also, a double-quoted string can contain apostrophes without backslashes, while a single-quoted string can contain unescaped quotation marks.The single-quoted strings are faster at runtime because they do not need to be parsed.", "In PHP, both 'my name' and \"my name\" are string. You can read more about it .Thing you should know are$a = 'name';\n$b = \"my $a\"; == 'my name'\n$c = 'my $a'; != 'my name'\nIn PHP, people use single quote to define a constant string, like 'a', 'my name', 'abc xyz', while using double quote to define a string contain identifier like \"a $b $c $d\".And other thing is, echo 'my name';\nis faster thanecho \"my name\";\nbutecho 'my ' . $a;\nis slower thanecho \"my $a\";\nThis is true for other used of string.", "<?php\n\n    $fname = \"David\";\n\n    // Single quotes\n    echo 'My name is $fname.'; // My name is $fname.\n\n    // Double quotes\n    echo \"My name is $fname.\"; // My name is David.\n\n    // Curly braces to isolate the name of the variable\n    echo \"My name is {$fname}.\"; // My name is David.\n\n    // Example of heredoc\n    echo $foo = <<<abc\n    My name is {$fname}\n    abc;\n\n        // Example of nowdoc\n        echo <<< 'abc'\n        My name is \"$name\".\n        Now, I am printing some\n    abc;\n\n?>\n", "In PHP, single quote text is considered as string value and double quote text will parse the variables by replacing and processing their value.$test = \"variable\";\necho \"Hello Mr $test\"; // the output would be: Hello Mr variable\necho 'Hello Mr $test'; // the output would be: Hello Mr $test\nHere, double quote parse the value and single quote is considered as string value (without parsing the $test variable.)", "Both kinds of enclosed characters are strings.  One type of quote is conveniently used to enclose the other type of quote.  \"'\"  and '\"'.   The biggest difference between the types of quotes is that enclosed identifier references are substituted for inside double quotes, but not inside single quotes.", "The difference between using single quotes and double quotes in php is that if we use single quotes in echo statement then it is treated as a string. ... but if we enter variable name within double quotes then it will output the value of that variable along with the string.", "Some might say that I'm a little off-topic, but here it is anyway:You don't necessarily have to choose because of your string's content between:\nalert(\"It's \\\"game\\\" time.\"); or alert('It\\'s \"game\" time.');If you're familiar with the use of the english quotation marks, and the correct character for the apostrophe, you can use either double or single quotes, because it won't matter anymore:\nalert(\"It\u2019s \u201cgame\u201d time.\"); and alert('It\u2019s \u201cgame\u201d time.');Of course you can also add variables if needed. Just don't forget that they get evaluated only when in double quotes!", " It is very important to note that the line with the closing identifier of  must contain no other characters, except a . That means especially that the identifier may not be , and there may not be any  or  before or after the semicolon.   $str = <<<EOD\nExample of string\nspanning multiple lines\nusing heredoc syntax.\nEOD;\n", "Here some possibilities of single and double quotes with variable$world = \"world\";\n\n\"Hello '.$world.' \";\n\n'hello \".$world.\"';\n"]},
{"question": "How does the SQL injection from the \u201cBobby Tables\u201d XKCD comic work?", "details": "Just looking at:\nWhat does this SQL do:Robert'); DROP TABLE STUDENTS; --\nI know both ' and -- are for comments, but doesn't the word DROP get commented as well since it is part of the same line?", "answers": ["Just looking at:\nWhat does this SQL do:Robert'); DROP TABLE STUDENTS; --\nI know both ' and -- are for comments, but doesn't the word DROP get commented as well since it is part of the same line?", "The original code in the school's program probably looks something likeq = \"INSERT INTO Students VALUES ('\" + FNMName.Text + \"', '\" + LName.Text + \"')\";\nThis is the naive way to add text input into a query, and is , as you will see.After the values from the first name, middle name textbox  (which is Robert'); DROP TABLE STUDENTS; --) and the last name textbox  (let's call it Derper) are concatenated with the rest of the query, the result is now actually  separated by the  (semicolon).  The second query has been  into the first.  When the code executes this query against the database, it will look like thisINSERT INTO Students VALUES ('Robert'); DROP TABLE Students; --', 'Derper')\nwhich, in plain English, roughly translates to the two queries:Add a new record to the Students table with a Name value of 'Robert'andDelete the Students tableEverything past the second query is :  --', 'Derper')The ' in the student's name is not a comment, it's the closing .  Since the student's name is a string, it's needed syntactically to complete the hypothetical query.  Injection attacks only work .", "Let's say the name was used in a variable, $Name.   You then run this :INSERT INTO Students VALUES ( '$Name' )\nThe code is mistakenly placing anything the user supplied as the variable.You wanted the  to be:INSERT INTO Students VALUES ( '` )But a clever user can supply whatever they want:INSERT INTO Students VALUES ( '' ) What you get is:INSERT INTO Students VALUES ( 'Robert' );  DROP TABLE STUDENTS; --' )\nThe -- only comments the remainder of the line.", "As everyone else has pointed out already, the '); closes the original statement and then a second statement follows. Most frameworks, including languages like PHP, have default security settings by now that don't allow multiple statements in one SQL string. In PHP, for example, you can only run multiple statements in one SQL string by using the mysqli_multi_query function.You can, however, manipulate an existing SQL statement via SQL injection without having to add a second statement. Let's say you have a login system which checks a username and a password with this simple select:$query=\"SELECT * FROM users WHERE username='\" . $_REQUEST['user'] . \"' and (password='\".$_REQUEST['pass'].\"')\";\n$result=mysql_query($query);\nIf you provide peter as the username and secret as the password, the resulting SQL string would look like this:SELECT * FROM users WHERE username='peter' and (password='secret')\nEverything's fine. Now imagine you provide this string as the password:' OR '1'='1\nThen the resulting SQL string would be this:SELECT * FROM users WHERE username='peter' and (password='' OR '1'='1')\nThat would enable you to log in to any account without knowing the password. So you don't need to be able to use two statements in order to use SQL injection, although you can do more destructive things if you are able to supply multiple statements.", "No, ' isn't a comment in SQL, but a delimiter.Mom supposed the database programmer made a request looking like:INSERT INTO 'students' ('first_name', 'last_name') VALUES ('$firstName', '$lastName');\n(for example) to add the new student, where the $xxx variable contents was taken directly out of an HTML form, without checking format nor escaping special characters.So if $firstName contains Robert'); DROP TABLE students; -- the database program will execute the following request directly on the DB: INSERT INTO 'students' ('first_name', 'last_name') VALUES ('Robert'); DROP TABLE students; --', 'XKCD');\nie. it will terminate early the insert statement, execute whatever malicious code the cracker wants, then comment out whatever remainder of code there might be.Mmm, I am too slow, I see already 8 answers before mine in the orange band... :-) A popular topic, it seems.", "()To make it clear what's happening, let's try this with a simple table containing only the name field and add a single row:Let's assume the application uses the following SQL to insert data into the table:Replace foobar with the actual name of the student. A normal insert operation would look like this:When we query the table, we get this:What happens when we insert Little Bobby Tables's name into the table?The SQL injection here is the result of the name of the student terminating the statement and including a separate DROP TABLE command; the two dashes at the end of the input are intended to comment out any leftover code that would otherwise cause an error. The last line of the output confirms that the database server has dropped the table.It's important to notice that during the INSERT operation the application isn't checking the input for any special characters, and is therefore allowing arbitrary input to be entered into the SQL command. This means that a malicious user can insert, into a field normally intended for user input, special symbols such as quotes along with arbitrary SQL code to cause the database system to execute it, hence .The result?SQL injection is the database equivalent of a remote  vulnerability in an operating system or application.  The potential impact of a successful SQL injection attack cannot be underestimated--depending on the database system and application configuration, it can be used by an attacker to cause data loss (as in this case), gain unauthorized access to data, or even execute arbitrary code on the host machine itself.As noted by the XKCD comic, one way of protecting against SQL injection attacks is to sanitize database inputs, such as by escaping special characters, so that they cannot modify the underlying SQL command and therefore cannot cause execution of arbitrary SQL code.  If you use parameterized queries, such as by using SqlParameter in ADO.NET, the input will, at minimum, be automatically sanitized to guard against SQL injection.However, sanitizing inputs at the application level may not stop more advanced SQL injection techniques. For example, mysql_real_escape_string. For added protection, many database systems support . If properly implemented in the backend, prepared statements can make SQL injection impossible by treating data inputs as semantically separate from the rest of the command.", "Say you naively wrote a student creation method like this:void createStudent(String name) {\n    database.execute(\"INSERT INTO students (name) VALUES ('\" + name + \"')\");\n}\nAnd someone enters the name Robert'); DROP TABLE STUDENTS; --What gets run on the database is this query:INSERT INTO students (name) VALUES ('Robert'); DROP TABLE STUDENTS --')\nThe semicolon ends the insert command and starts another; the -- comments out the rest of the line. The DROP TABLE command is executed...This is why bind parameters are a good thing.", "A single quote is the start and end of a string. A semicolon is the end of a statement. So if they were doing a select like this:Select *\nFrom Students\nWhere (Name = '<NameGetsInsertedHere>')\nThe SQL would become:Select *\nFrom Students\nWhere (Name = 'Robert'); DROP TABLE STUDENTS; --')\n--             ^-------------------------------^\nOn some systems, the select would get ran first followed by the drop statement! The message is: DONT EMBED VALUES INTO YOUR SQL. Instead use parameters!", "The '); ends the query, it doesn't start a comment. Then it drops the students table and comments the rest of the query that was supposed to be executed.", "The writer of the database probably did a sql = \"SELECT * FROM STUDENTS WHERE (STUDENT_NAME = '\" + student_name + \"') AND other stuff\";\nexecute(sql);\nIf student_name is the one given, that does the selection with the name \"Robert\" and then drops the table.  The \"-- \" part changes the rest of the given query into a comment.", "In this case, ' is not a comment character.  It's used to delimit string literals.  The comic artist is banking on the idea that the school in question has dynamic sql somewhere that looks something like this:$sql = \"INSERT INTO `Students` (FirstName, LastName) VALUES ('\" . $fname . \"', '\" . $lname . \"')\";\nSo now the ' character ends the string literal before the programmer was expecting it.  Combined with the ; character to end the statement, an attacker can now add whatever sql they want.  The -- comment at the end is to make sure any remaining sql in the original statement does not prevent the query from compiling on the server.FWIW, I also think the comic in question has an important detail wrong: if you're thinking about  your database inputs, as the comic suggests, you're still doing it wrong. Instead, you should think in terms of  your database inputs, and the correct way to do this is via parameterized queries.", "The ' character in SQL is used  for string constants. In this case it is used for ending the string constant and not for comment.", "This is how it works:\nLets suppose the administrator is looking for records of student  Robert'); DROP TABLE STUDENTS; --\nSince the admin account has high privileges deleting the table from this account is possible.The code to retrieve user name from request isNow the query would be something like this (to search the student table)String query=\"Select * from student where username='\"+student_name+\"'\";\n\nstatement.executeQuery(query); //Rest of the code follows\nThe resultant query becomesSelect * from student where username='Robert'); DROP TABLE STUDENTS; --\nSince the user input is not sanitized, The above query has is manipulated into 2 partsSelect * from student where username='Robert'); \n\nDROP TABLE STUDENTS; --\nThe double dash (--) will just comment out remaining part of the query. This is dangerous as it can nullify password authentication, if presentThe first one will do the normal search. The second one will drop the table student if the account has sufficient privileges (Generally the school admin account will run such query and will have the privileges talked about above).", "No one pointed this out before so through I might alert some of you. Mostly we will try to patch forms input. But this is not the only place where you can get attacked with SQL injection. You can do very simple attack with URL which send data through GET request;\nConsider the fallowing example:<a href=\"/show?id=1\">show something</a>\nYour url would look \nNow someone could try something like this http://yoursite.com/show?id=1;TRUNCATE table_name\nTry to replace table_name with the real table name. If he get your table name right they would empty your table! Your query would look something like this...\"SELECT * FROM page WHERE id = 4;TRUNCATE page\"\n<?php\n...\n$id = $_GET['id'];\n\n$pdo = new PDO($database_dsn, $database_user, $database_pass);\n$query = \"SELECT * FROM page WHERE id = {$id}\";\n$stmt = $pdo->query($query);\n$data = $stmt->fetch(); \n/************* You have lost your data!!! :( *************/\n...\n<?php\n...\n$id = $_GET['id'];\n\n$query = 'SELECT * FROM page WHERE id = :idVal';\n$stmt = $pdo->prepare($query);\n$stmt->bindParam('idVal', $id, PDO::PARAM_INT);\n$stmt->execute();\n$data = $stmt->fetch();\n/************* Your data is safe! :) *************/\n...\n"]},
{"question": "Why should I not #include <bits/stdc++.h>?", "details": "I posted a question with my code whose only #include directive was the following:#include <bits/stdc++.h>\nMy teacher told me to do this, but in the comments section I was informed that I shouldn't.Why?", "answers": ["I posted a question with my code whose only #include directive was the following:#include <bits/stdc++.h>\nMy teacher told me to do this, but in the comments section I was informed that I shouldn't.Why?", "Including <bits/stdc++.h> appears to be an increasingly common thing to see on Stack Overflow, perhaps something newly added to a national curriculum in the current academic year.I imagine the advantages are vaguely given thus:\n#include\n\nUnfortunately, this is a lazy hack, naming a GCC internal header directly instead of individual standard headers like <string>, <iostream> and <vector>. It ruins portability and fosters terrible habits.The disadvantages include:\n\n\n\n\nMore information:\n\n\nExample of why Quora is bad:\n\n", "Why? Because it is used as if it was supposed to be a C++ standard header, but no standard mentions it. So your code is non-portable by construction. You won't find any documentation for it on . So it might as well not exist. It's a figment of someone's imagination :)I have discovered - to my horror and disbelief - that there is a well-known tutorial site where . The world is mad. That's the proof.Please stop using this header. Forget about it. Don't propagate this insanity. If you're unwilling to understand why doing this is , take my word for it. I'm not OK being treated as a figure of authority on anything at all, and I'm probably full of it half the time, but I'll make an exception in this one case only. I claim that I know what I'm talking about here. Take me on my word. I implore you.P.S. I can well imagine the abominable \"teaching standard\" where this wicked idea might have taken place, and the circumstances that led to it. Just because there seemed to be a practical need for it doesn't make it acceptable - not even in retrospect.P.P.S. No, there was no practical need for it. There aren't that many C++ standard headers, and they are well documented. If you teach, you're doing your students a disservice by adding such \"magic\". Producing programmers with a magical mindset is the last thing we want. If you need to offer students a subset of C++ to make their life easier, just produce a handout with the short list of headers applicable to the course you teach, and with concise documentation for the library constructs you expect the students to use.", "There's a Stack Exchange site called . The  on that site fit this definition of : a toy, problem, or other contrivance designed to amuse by presenting difficulties to be solved by ingenuity or patient effort.They are designed to amuse, and not in the way that a working programmer might be amused by a real-world problem encountered in their daily work. is \"a type of recreational computer programming competition in which participants strive to achieve the shortest possible source code that implements a certain algorithm.\" In the answers on the PP&CG site, you'll see people specify the number of bytes in their answers. When they find a way to shave off a few bytes, they'll strike out the original number and record the new one.As you might expect, code golfing rewards extreme programming language abuse. One-letter variable names. No whitespace. Creative use of library functions. Undocumented features. Nonstandard programming practices. Appalling hacks.If a programmer submitted a pull request at work containing golf-style code, it would be rejected. Their co-workers would laugh at them. Their manager would drop by their desk for a chat. Even so, programmers amuse themselves by submitting answers to PP&CG.What does this have to do with stdc++.h? As others have pointed out, using it is lazy. It's non-portable, so you don't know if it will work on your compiler or the next version of your compiler. It fosters bad habits. It's non-standard, so your program's behavior may differ from what you expect. It may increase compile time and executable size.These are all valid and correct objections. So why would anyone use this monstrosity?It turns out that some people like  without the . They get together and compete at events like ACM-ICPC, Google Code Jam, and Facebook Hacker Cup, or on sites like Topcoder and Codeforces. Their rank is based on program correctness, execution speed, and how fast they submit a solution. To maximize execution speed, many participants use C++. To maximize coding speed, some of them use stdc++.h.Is this is a good idea? Let's check the list of disadvantages. Portability? It doesn't matter since these coding events use a specific compiler version that contestants know in advance. Standards compliance? Not relevant for a block of code whose useful life is less than one hour. Compile time and executable size? These aren't part of the contest's scoring rubric.So we're left with bad habits. This is a valid objection. By using this header file, contestants are avoiding the chance to learn which standard header file defines the functionality they're using in their program. When they're writing real-world code (and not using stdc++.h) they'll have to spend time looking up this information, which means they'll be less productive. That's the downside of practicing with stdc++.h.This raises the question of why it's worth taking part in competitive programming at all if it encourages bad habits like using stdc++.h and violating other coding standards. One answer is that people do it for the same reason they post programs on PP&CG: some programmers find it enjoyable to use their coding skills in a game-like context.So the question of whether to use stdc++.h comes down to whether the coding speed benefits in a programming contest outweigh the bad habits that one might develop by using it.This question asks: \"Why should I not #include <bits/stdc++.h>?\" I realize that it was asked and answered to make a point, and the accepted answer is intended to be the One True Answer to this question. But the question isn't \"Why should I not #include <bits/stdc++.h> in production code?\" Therefore, I think it's reasonable to consider other scenarios where the answer may be different.", "From N4606, Working Draft, Standard for Programming Language C++ :17.6.1.2 Headers [headers]Each element of the C++ standard library is declared or defined (as appropriate) in a header.The C++ standard library provides 61 C++ library headers, as shown in Table 14.Table 14 \u2014 C++ library headers<algorithm> <future> <numeric> <strstream>\n<any> <initializer_list> <optional> <system_error>\n<array> <iomanip> <ostream> <thread>\n<atomic> <ios> <queue> <tuple>\n<bitset> <iosfwd> <random> <type_traits>\n<chrono> <iostream> <ratio> <typeindex>\n<codecvt> <istream> <regex> <typeinfo>\n<complex> <iterator> <scoped_allocator> <unordered_map>\n<condition_variable> <limits> <set> <unordered_set>\n<deque> <list> <shared_mutex> <utility>\n<exception> <locale> <sstream> <valarray>\n<execution> <map> <stack> <variant>\n<filesystem> <memory> <stdexcept> <vector>\n<forward_list> <memory_resorce> <streambuf>\n<fstream> <mutex> <string>\n<functional> <new> <string_view>\nThere's no <bits/stdc++.h> there. This is not surprising, since <bits/...> headers are  implementation detail, and usually carry a warning:*  This is an internal header file, included by other library headers.\n*  Do not attempt to use it directly. \n<bits/stdc++.h> also carries a warning:*  This is an implementation file for a precompiled header.\n", "The reason we do not use:#include <bits/stdc++.h>\nis because of effiency.\nLet me make an analogy:\nFor those of you who know Java:\nIf you asked your instructor if the following was a good idea, unless they are a bad instructor they would say no:import java.*.*\nThe #include... thing does the same thing basically... That's not the only reason not to use it, but it is one of the major reasons not to use it.\nFor a real life analogy:\nImagine you had a library and you wanted to borrow a couple of books from the library, would you relocate the entire library next to your house?? It would be expensive and ineffiecient. If you only need 5 books, well then only take out 5... Not the whole library.....#include <bits/stdc++.h>\nLooks convienent to the program look I only need to type one include statement and it works, same thing with moving a whole library, look I only need to move one whole library instead of 5 books, one by one. Looks convienent to you that is, for the person who actually has to do the moving?? Not so much, and guess what in C++ the person doing the moving will be your computer... The computer will not enjoy moving the entire library for every source file you write :)....."]},
{"question": "What are the rules about using an underscore in a C++ identifier?", "details": "It's common in C++ to name member variables with some kind of prefix to denote the fact that they're member variables, rather than local variables or parameters. If you've come from an MFC background, you'll probably use m_foo. I've also seen myFoo occasionally.C# (or possibly just .NET) seems to recommend using just an underscore, as in _foo. Is this allowed by the C++ standard?", "answers": ["It's common in C++ to name member variables with some kind of prefix to denote the fact that they're member variables, rather than local variables or parameters. If you've come from an MFC background, you'll probably use m_foo. I've also seen myFoo occasionally.C# (or possibly just .NET) seems to recommend using just an underscore, as in _foo. Is this allowed by the C++ standard?", "The rules (which did not change in C++11):\n\n\n\n\n\n\n\nstd\nFrom the 2003 C++ Standard:Certain sets of names and function signatures are always reserved to the implementation:\n  __\n  \n   Such names are also reserved in namespace ::std (17.4.3.1). Because C++ is based on the C standard (1.1/2, C++03) and C99 is a normative reference (1.2/1, C++03) these also apply, from the 1999 C Standard:Each header declares or defines all identifiers listed in its associated subclause, and\n  optionally declares or defines identifiers listed in its associated future library directions subclause and identifiers which are always reserved either for any use or for use as file scope identifiers.\n  \n  \n  \n  \n  \n  No other identifiers are reserved. If the program declares or defines an identifier in a\n  context in which it is reserved (other than as allowed by 7.1.4), or defines a reserved\n  identifier as a macro name, the behavior is undefined.If the program removes (with #undef) any macro definition of an identifier in the first\n  group listed above, the behavior is undefined. The list of reserved identifiers with external linkage includes errno, math_errhandling, setjmp, and va_end.Other restrictions might apply. For example, the POSIX standard reserves a lot of identifiers that are likely to show up in normal code:\nE\n\n\nisto\n\n\nLC_\n\n\nfl\n\n\nSIG\n\n\nSIG_\n\n\nstrmemwcs\n\n\nPRISCNX\n\n\n_t\n\n\nWhile using these names for your own purposes right now might not cause a problem, they do raise the possibility of conflict with future versions of that standard.Personally I just don't start identifiers with underscores. New addition to my rule: Don't use double underscores anywhere, which is easy as I rarely use underscore.After doing research on this article I no longer end my identifiers with _t\nas this is reserved by the POSIX standard.The rule about any identifier ending with _t surprised me a lot. I think that is a POSIX standard (not sure yet) looking for clarification and official chapter and verse. This is from the , listing reserved names.CesarB provided the following link to the  reserved symbols and notes 'that many other reserved prefixes and suffixes ... can be found there'.  The\n reserved symbols are defined here.  The restrictions are somewhat more nuanced than those above.", "The rules to avoid collision of names are both in the C++ standard (see Stroustrup book) and mentioned by C++ gurus (Sutter, etc.).Because I did not want to deal with cases, and wanted a simple rule, I have designed a  one that is both simple and correct:\n\n\nOf course, putting your code in an unique namespace helps to avoid collision, too (but won't protect against evil macros)(I use macros because they are the more code-polluting of C/C++ symbols, but it could be anything from variable name to class name)#define _WRONG\n#define __WRONG_AGAIN\n#define RIGHT_\n#define WRONG__WRONG\n#define RIGHT_RIGHT\n#define RIGHT_x_RIGHT\nFrom the  file (I expect the final standard text to be similar):Certain sets of names and function signatures are always reserved to the implementation:\u2014 Each name that contains a double underscore _ _ or begins with an underscore followed by an uppercase letter (2.12) is reserved to the implementation for any use.\u2014 Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.But also:Literal suffix identifiers that do not start with an underscore are reserved for future standardization.This last clause is confusing, unless you consider that a name starting with one underscore and followed by a lowercase letter would be Ok if  defined in the global namespace...", "From :Use of two sequential underscore characters ( __ ) at the beginning of an identifier, or a single leading underscore followed by a capital letter, is reserved for C++ implementations in all scopes. You should avoid using one leading underscore followed by a lowercase letter for names with file scope because of possible conflicts with current or future reserved identifiers.This means that you can use a single underscore as a member variable prefix, as long as it's followed by a lower-case letter.This is apparently taken from section 17.4.3.1.2 of the C++ standard, but I can't find an original source for the full standard online.See also .", "As for the other part of the question, it's common to put the underscore at the  of the variable name to not clash with anything internal.I do this even inside classes and namespaces because I then only have to remember one rule (compared to \"at the end of the name in global scope, and the beginning of the name everywhere else\").", "Yes, underscores may be used anywhere in an identifier. I believe the rules are: any of a-z, A-Z, _ in the first character and those +0-9 for the following characters.Underscore prefixes are common in C code -- a single underscore means \"private\", and double underscores are usually reserved for use by the compiler."]},
{"question": "Should I avoid the use of set(Preferred|Maximum|Minimum)Size methods in Java Swing?", "details": "Several times I've been criticized for having suggested the use of the following methods:on Swing components. I don't see any alternative to their use when I want to define proportions between displayed components. I have been told this:With layouts the answer is always the same: use a suitable\n  LayoutManagerI have searched the web a little bit, but I haven't found any comprehensive analysis of the subject. So I have the following questions:", "answers": ["Several times I've been criticized for having suggested the use of the following methods:on Swing components. I don't see any alternative to their use when I want to define proportions between displayed components. I have been told this:With layouts the answer is always the same: use a suitable\n  LayoutManagerI have searched the web a little bit, but I haven't found any comprehensive analysis of the subject. So I have the following questions:", "Should I completely avoid the use of those methods?Yes for application code.The methods have been defined for a reason. So when should I use them? In which context? For what purposes?I don't know, personally I think of it as an API design accident. Slightly forced by compound components having special ideas about child sizes. \"Slightly\", because they should have implemented their needs with a custom LayoutManager.What exactly are the negative consequences of using those methods? (I can only think adding portability between systems with different screen resolution.)Some (incomplete, and unfortunately the links are broken due to migration of SwingLabs to java.net) technical reasons are for instance mentioned in the  or in the  @bendicott found in his/her comment to . Socially, posing tons of work onto your unfortunate fellow who has to maintain the code and has to track down a broken layout.I don't think any LayoutManager can exactly satisfy all desired layout needs. Do I really need to implement a new LayoutManager for every little variation on my layout?Yes, there are LayoutManagers powerful enough to satisfy a very good approximation to \"all layout needs\". The big three are JGoodies FormLayout, MigLayout, DesignGridLayout. So no, in practice, you rarely write LayoutManagers except for simple highly specialized environments.If the answer to 4 is \"yes\", won't this lead to a proliferation of LayoutManager classes which will become difficult to maintain? (The answer to 4 is \"no\".)In a situation where I need to define proportions between children of a Component (for example, child 1 should use 10% of space, child 2 40%, child 3 50%), is it possible to achieve that without implementing a custom LayoutManager?Any of the Big-Three can, can't even GridBag (never bothered to really master, too much trouble for too little power).", "A few heuristics:\nDon't use set[Preferred|Maximum|Minimum]Size() when you really mean to override get[Preferred|Maximum|Minimum]Size(), as might be done in creating your own component, shown .\nDon't use set[Preferred|Maximum|Minimum]Size() when you could rely on a component's carefully overridden getPreferred|Maximum|Minimum]Size, as shown  and below.\nDo use set[Preferred|Maximum|Minimum]Size() to derive post-validate() geometry, as shown below and .\nIf a component has no preferred size, e.g. JDesktopPane, you may have to size the container, but any such choice is arbitrary. A comment may help clarify the intent.\nConsider alternate or custom layouts when you find that you would have to loop through many components to obtain derived sizes, as mentioned in these .\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.GridLayout;\nimport java.awt.KeyboardFocusManager;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JComponent;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextField;\nimport javax.swing.SwingUtilities;\n\n/**\n * @see https://stackoverflow.com/questions/7229226\n * @see https://stackoverflow.com/questions/7228843\n */\npublic class DesignTest {\n\n    private List<JTextField> list = new ArrayList<JTextField>();\n    private JPanel panel = new JPanel();\n    private JScrollPane sp = new JScrollPane(panel);\n\n    public static void main(String args[]) {\n        EventQueue.invokeLater(new Runnable() {\n\n            @Override\n            public void run() {\n                DesignTest id = new DesignTest();\n                id.create(\"My Project\");\n            }\n        });\n    }\n\n    private void addField(String name) {\n        JTextField jtf = new JTextField(16);\n        panel.add(new JLabel(name, JLabel.LEFT));\n        panel.add(jtf);\n        list.add(jtf);\n    }\n\n    private void create(String strProjectName) {\n        panel.setLayout(new GridLayout(0, 1));\n        addField(\"First Name:\");\n        addField(\"Last Name:\");\n        addField(\"Address:\");\n        addField(\"City:\");\n        addField(\"Zip Code:\");\n        addField(\"Phone:\");\n        addField(\"Email Id:\");\n        KeyboardFocusManager.getCurrentKeyboardFocusManager()\n            .addPropertyChangeListener(\"permanentFocusOwner\",\n            new FocusDrivenScroller(panel));\n        // Show half the fields\n        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n        sp.validate();\n        Dimension d = sp.getPreferredSize();\n        d.setSize(d.width, d.height / 2);\n        sp.setPreferredSize(d);\n\n        JInternalFrame internaFrame = new JInternalFrame();\n        internaFrame.add(sp);\n        internaFrame.pack();\n        internaFrame.setVisible(true);\n\n        JDesktopPane desktopPane = new JDesktopPane();\n        desktopPane.add(internaFrame);\n\n        JFrame frmtest = new JFrame();\n        frmtest.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frmtest.add(desktopPane);\n        frmtest.pack();\n        // User's preference should be read from java.util.prefs.Preferences\n        frmtest.setSize(400, 300);\n        frmtest.setLocationRelativeTo(null);\n        frmtest.setVisible(true);\n        list.get(0).requestFocusInWindow();\n    }\n\n    private static class FocusDrivenScroller implements PropertyChangeListener {\n\n        private JComponent parent;\n\n        public FocusDrivenScroller(JComponent parent) {\n            this.parent = parent;\n        }\n\n        @Override\n        public void propertyChange(PropertyChangeEvent evt) {\n            Component focused = (Component) evt.getNewValue();\n            if (focused != null\n                && SwingUtilities.isDescendingFrom(focused, parent)) {\n                parent.scrollRectToVisible(focused.getBounds());\n            }\n        }\n    }\n}\n", "Should I completely avoid the use of those methods?No, there is no formal evidence to suggest calling or overriding these methods is not allowed. In fact, Oracle says these methods are used for giving size hints: .They may also be overridden (which is the best practice for Swing) when  a Swing component (rather than calling the method on the custom component instance)Most importantly no matter how you specify your component's size, be sure that your component's container uses a layout manager that respects the requested size of the component. The methods have been defined for a reason. So when should I use them?\n  In which context? For what purposes?When you need to provide customized size hints to the containers Layout manager so that the component will be laid out wellWhat exactly are the negative consequences of using those methods? (I\n  can only think to add portability between systems with different\n  screen resolution).\nMany layout managers do not pay attention to a component's requested maximum size. However, BoxLayout and SpringLayout do. Furthermore, GroupLayout provides the ability to set the minimum, preferred or maximum size explicitly, without touching the component.\nMake sure that you really need to set the component's exact size. Each Swing component has a different preferred size, depending on the font it uses and the look and feel. Thus having a set size might produce varied  of the UI on different Systems\nsometimes problems can be encountered with GridBagLayout and text fields, wherein if the size of the container is smaller than the preferred size, the minimum size gets used, which can cause text fields to shrink quite substantially.\nJFrame does not enforce overriden getMinimumSize() only calling setMinimumSize(..) on its works\nI don't think any LayoutManager can exactly satisfy all desired layout\n  needs. Do I really need to implement a new LayoutManager for every\n  little variation on my layout?If by implementing you mean using then yes. Not one LayoutManger can handle everything, each LayoutManager has its pros and cons thus each can be used together to produce the final layout.\n\n", "There are a lot of good answers here but I want to add a little more about the reasons  you should normally avoid these (the question just came up again in a duplicate topic):With few exceptions, if you are using these methods you are probably fine-tuning your GUI to look good on a specific look-and-feel (and with your system-specific settings, e.g. your preferred desktop font, etc.). The methods themselves aren't inherently evil, but the typical reasons for using them . As soon as you start tuning pixel positions and sizes in a layout you run the risk of your GUI breaking (or at minimum, looking bad), on other platforms.As an example of this, try changing your application's default look-and-feel. Even just with the options available on your platform, you may be surprised at how poorly the results can be rendered.So, in the name of keeping your GUI functional and nice-looking on all platforms (remember, one of the major benefits of Java is its cross-platformness), you should rely on layout managers, etc., to automatically adjust the sizes of your components so that it renders correctly outside of your specific development environment.All that said, you can certainly conceive of situations where these methods are justified. Again, they aren't inherently evil, but their usage is normally a  red flag indicating potential GUI issues. Just make sure you are aware of the high potential for complications if/when you use them, and always try and think if there is another look-and-feel-independent solution to your problems -- more often than not you will find that these methods are not necessary.By the way, if you find yourself getting frustrated with standard layout managers, there are a lot of good free, open-source third-party ones, for example FormLayout, or MigLayout. Some GUI builders even have built-in support for third-party layout managers -- Eclipse's WindowBuilder GUI editor, for example, ships with support for FormLayout and MigLayout.", "If you are having trouble with layouts in Java Swing, then I can highly recommend the JGoodies FormLayout provided freely as part of the Forms freeware library by Karsten Lentzsch .This very popular layout manager is extremely flexible, allowing for very polished Java UIs to be developed.You'll find Karsten's documentation in , and some rather good documentation from eclipse .", "These methods are poorly understood by most people. You should absolutely not ignore these methods. It is up to the layout manager if they honor these methods. This page has a table that shows which layout managers honor which of those methods:I have been writing Swing code for 8+ years and the layout managers included in the JDK have always served my needs. I have never needed a 3rd party layout manager to achieve my layouts.I will say that you shouldn't try to give the layout manager hints with these methods until you are sure you need them. Do your layout without giving any sizing hints (i.e. let the layout manager do its job) and then you can make minor corrections if you need to.", "In a situation where I need to define proportions between children of a Component (child 1 should use 10% of space, child2 40% ,child3 50%), is it possible to achieve that without implementing a custom layout manager?Maybe GridBagLayout would satisfy your needs. Besides that, there's a ton of layout managers on the web, and I bet there's one that fits your requirements.", "I am seeing it differenty than the accepted answer.Never avoid! They're there to express the size constraints of your components to the layout manager. You can avoid using them if you're not using any layout manager and try to manage the visual layout on your own.Unfortunately, Swing is not coming with reasonable default dimensions. However, instead of setting the dimensions of a component, it is better OOP to descend your own component with reasonable defaults. (In that case you call setXXX in your descendant class.) Alternatively, you can override the getXXX methods for the same effect.Always. When you create a component, set its realistic min/preferred/max size according to the use of that component. For example, if you have a JTextField for entering country symbols such as UK, its preferred size shall be as wide to fit two chars (with the current font, etc.) but probably it is meaningless to let it grow any bigger. After all, country symbols are two chars.\nAs opposite, if you have a JTextField for entering e.g. a customer name, it can have a preferred size for like the pixel size for 20 chars, but can grow to bigger if the layout is resized, so set the maximum size to more. At the same time, having a 0px wide JTextField is pointless, so set a realistic minimum size (I would say the pixel size of 2 chars).(I can only think adding portability between systems with different screen resolution).No negative consequences. These are hints for the layout manager.Do I really need to implement a new LayoutManager for every little variation on my layout ?No, definitely not. The usual approach is to cascade different basic layoutmanagers such as horizontal and vertical layout.For example, the layout below:<pre>\n+--------------+--------+\n| ###JTABLE### | [Add]  | \n| ...data...   |[Remove]|\n| ...data...   |        |\n| ...data...   |        |\n+--------------+--------+\n</pre>\nis having two parts. The left and right parts are a horizontal layout. The right part is a JPanel added to the horizontal layout, and this JPanel is having a vertical layout which lays out the buttons vertically.Of course, this can grow tricky with a real life layout. Therefore grid-based layout managers such as MigLayout are much better if you're about to develop anything serious.No, you definitely shall not develop layout managers, unless you need something very special.between children of a Component (eg, child1 should use 10% of space, child2 40% ,child3 50%), is it possible to achieve that without implementing a custom LayoutManager?Basically, once the preferred sizes are set right, you may not want to do anything in percentage. Simply, because percentages are pointless (e.g. it is pointless to have a JTextField 10% of the window size - since one can shrink the window so that JTextField becomes 0px wide, or can expand the window so that the JTextField is across two displays on a multi-display setup).But, may times you may use the percentages to control sizes of bigger building blocks of your gui (panels, for example).You can use JSplitPane where you can pre-set the ratio of the two sides. Or, you can use MigLayout which allows you to set such constraints in percentage, pixels, and other units.", "\nI wouldn't say \"avoid\" them. I'd say that if you think you need them, you're probably doing something wrong. Component sizes are determined in context. For example, Text component sizes are determined by the number of rows and columns you specify, combined with the font you may have chosen. Your button and label size will be the size of the graphic, if you set one, or the space needed to display the text you set. Each component has a natural size, and the layout managers will use those to lay everything out without you needing to specify sizes. The main exception is the JScrollPane, which has a size independent of whatever it contains. For those, I will sometimes call setSize(), and let that size determine the initial window size, by calling JFrame.pack(). Usually, I will let the window size determine the JScrollPane size. The user will determine the size of the window. Many layout managers ignore the sizes you set anyway, so they often don't do much good.\nI believe they were added to provide hints to the layout managers. They may have been written for historical reasons, because layout managers were new, and people didn't fully trust them. I know a few developers who avoided layout managers and placed everything manually, just because they didn't want to bother with learning a new paradigm. It's a terrible idea.\nThey're ineffective, and they produce bad layouts, with objects getting squeezed or stretched to non-natural sizes. And the layouts will be brittle. Changes to the window size will sometimes break the layout and put things in the wrong places. You shouldn't \"implement\" a new LayoutManager. You should instantiate existing ones. I often use several layout managers in a single window. Each JPanel will have its own layout manager. Some people balk at nested layouts, because they're hard to maintain. When I use them, I give each one its own creation method to make it easier to see what each one does. But I never \"implement\" a layout manager. I just instantiate them. \nIf you're implementing new layout manager classes for slight variations in layout, you're using them wrong. If you're just implementing new layout managers, you're probably doing something wrong. The only time I've extended a LayoutManager class, it was to add a zoom slider to a JScrollPane.\nThe JSplitPane has a way of specifying the percentage each component should get. The divider is movable by default, but you can turn that off if you want. I don't use that feature much. I usually have some components that take up a set size, and the rest of the space is taken up by a scroll pane. The scroll pane size will adjust with the window size. If you have two scroll panes side by side, you can put them in a JSplitPane and specify the percentage of new space given to each one as the user expands and contracts the windows."]},
{"question": "Convert one date format into another in PHP", "details": "Is there a simple way to convert one date format into another date format in PHP?I have this:$old_date = date('y-m-d-h-i-s');            // works\n\n$middle = strtotime($old_date);             // returns bool(false)\n\n$new_date = date('Y-m-d H:i:s', $middle);   // returns 1970-01-01 00:00:00\nBut I'd of course like it to return a current date rather than the crack 'o dawn. What am I doing wrong?", "answers": ["Is there a simple way to convert one date format into another date format in PHP?I have this:$old_date = date('y-m-d-h-i-s');            // works\n\n$middle = strtotime($old_date);             // returns bool(false)\n\n$new_date = date('Y-m-d H:i:s', $middle);   // returns 1970-01-01 00:00:00\nBut I'd of course like it to return a current date rather than the crack 'o dawn. What am I doing wrong?", "The second parameter to date() needs to be a proper timestamp (seconds since January 1, 1970). You are passing a string, which date() can't recognize.You can use  to convert a date string into a timestamp. However, even strtotime() doesn't recognize the y-m-d-h-i-s format.Use DateTime::createFromFormat. It allows you to specify an exact mask - using the date() syntax - to parse incoming string dates with.You will have to parse the elements (year, month, day, hour, minute, second) manually using substr() and hand the results to  that will build you a timestamp. But that's a lot of work! I recommend using a different format that strftime() can understand. strftime() understands   date input short of the next time joe will slip on the ice. for example, this works:$old_date = date('l, F d y h:i:s');              // returns Saturday, January 30 10 02:06:34\n$old_date_timestamp = strtotime($old_date);\n$new_date = date('Y-m-d H:i:s', $old_date_timestamp);   \n", "The easiest way to do this is$myDateTime = DateTime::createFromFormat('Y-m-d', $dateString);\n$newDateString = $myDateTime->format('m/d/Y');\nYou are first giving it the format $dateString is in. Then you are telling it the format you want $newDateString to be in.This also avoids the use of strtotime, which can be hard to work with at times.If you are not transforming from one date format to another, but just want the current date (or datetime) in a specific format then it's even easier:$now = new DateTime();\n$timestring = $now->format('Y-m-d h:i:s');\nThis other question also refers to the same topic: .", "The simplist way to convert one date format into another is to use strtotime() with date(). strtotime() will convert the date into a . That Unix Timestamp can then be passed to date() to convert it to the new format. $timestamp = strtotime('2008-07-01T22:35:17.02');\n$new_date_format = date('Y-m-d H:i:s', $timestamp);\nOr as a one-liner:   $new_date_format = date('Y-m-d H:i:s', strtotime('2008-07-01T22:35:17.02'));\nKeep in mind that strtotime() requires the date to be in a . Failure to provide a valid format will result in strtotime() returning false which will cause your date to be 1969-12-31.DateTime()As of PHP 5.2, PHP offered the DateTime() class which offers us more powerful tools for working with dates (and time). We can rewrite the above code using DateTime() as so:$date = new DateTime('2008-07-01T22:35:17.02');\n$new_date_format = $date->format('Y-m-d H:i:s');\ndate() takes a Unix timeatamp as its second parameter and returns a formatted date for you:$new_date_format = date('Y-m-d H:i:s', '1234567890');\nDateTime() works with Unix timestamps by adding an @ before the timestamp:$date = new DateTime('@1234567890');\n$new_date_format = $date->format('Y-m-d H:i:s');\nIf the timestamp you have is in milliseconds (it may end in 000 and/or the timestamp is thirteen characters long) you will need to convert it to seconds before you can can convert it to another format. There's two ways to do this:\nsubstr()\nTrimming the last three digits can be acheived several ways, but using substr() is the easiest:$timestamp = substr('1234567899000', -3);\n\n\nYou can also convert the timestamp into seconds by dividing by 1000. Because the timestamp is too large for 32 bit systems to do math on you will need to use the  library to do the math as strings:$timestamp = bcdiv('1234567899000', '1000');\nTo get a Unix Timestamp you can use strtotime() which returns a Unix Timestamp:$timestamp = strtotime('1973-04-18');\nWith DateTime() you can use DateTime::getTimestamp()$date = new DateTime('2008-07-01T22:35:17.02');\n$timestamp = $date->getTimestamp();\nIf you're running PHP 5.2 you can use the U formatting option instead:$date = new DateTime('2008-07-01T22:35:17.02');\n$timestamp = $date->format('U');\n    Unfortunately not all dates that a developer has to work with are in a standard format. Fortunately PHP 5.3 provided us with a solution for that. DateTime::createFromFormat() allows us to tell PHP what format a date string is in so it can be successfully parsed into a DateTime object for further manipulation.$date = DateTime::createFromFormat('F-d-Y h:i A', 'April-18-1973 9:48 AM');\n$new_date_format = $date->format('Y-m-d H:i:s');\nIn PHP 5.4 we gained the ability to do class member access on instantiation has been added which allows us to turn our DateTime() code into a one-liner:$new_date_format = (new DateTime('2008-07-01T22:35:17.02'))->format('Y-m-d H:i:s');\n\n$new_date_format = DateTime::createFromFormat('F-d-Y h:i A', 'April-18-1973 9:48 AM')->format('Y-m-d H:i:s');\n", "Try this:$old_date = date('y-m-d-h-i-s');\n$new_date = date('Y-m-d H:i:s', strtotime($old_date));\n", "To convert $date from dd-mm-yyyy hh:mm:ss to a proper MySQL datetime\nI go like this:$date = DateTime::createFromFormat('d-m-Y H:i:s',$date)->format('Y-m-d H:i:s');\n", "The following is an easy method to convert dates to different formats.// Create a new DateTime object\n$date = DateTime::createFromFormat('Y-m-d', '2016-03-25');\n\n// Output the date in different formats\necho $date->format('Y-m-d').\"\\n\";\necho $date->format('d-m-Y').\"\\n\";\necho $date->format('m-d-Y').\"\\n\";\n", "$old_date = date('y-m-d-h-i-s');       // works\nyou are doing wrong here, this should be$old_date = date('y-m-d h:i:s');       // works\nseparator of time is ':'I think this will help...$old_date = date('y-m-d-h-i-s');              // works\n\npreg_match_all('/(\\d+)-(\\d+)-(\\d+)-(\\d+)-(\\d+)-(\\d+)/', $old_date, $out, PREG_SET_ORDER);\n$out = $out[0];\n$time = mktime($out[4], $out[5], $out[6], $out[2], $out[3], $out[1]);\n\n$new_date = date('Y-m-d H:i:s', $time); \nOR$old_date = date('y-m-d-h-i-s');              // works\n\n$out = explode('-', $old_date);\n$time = mktime($out[3], $out[4], $out[5], $out[1], $out[2], $out[0]);\n\n$new_date = date('Y-m-d H:i:s', $time); \n", "This native way will help to convert any inputted format to the desired format.$formatInput = 'd-m-Y'; //Give any format here, this would be converted into your format\n$dateInput = '01-02-2018'; //date in above format\n\n$formatOut = 'Y-m-d'; // Your format\n$dateOut = DateTime::createFromFormat($formatInput, $dateInput)->format($formatOut);\n", "You need to convert the $old_date back into a timestamp, as the  requires a timestamp as its second argument.", "strtotime will work that out. the dates are just not the same and all in us-format.<?php\n$e1 = strtotime(\"2013-07-22T12:00:03Z\");\necho date('y.m.d H:i', $e1);\necho \"2013-07-22T12:00:03Z\";\n\n$e2 = strtotime(\"2013-07-23T18:18:15Z\");\necho date ('y.m.d H:i', $e2);\necho \"2013-07-23T18:18:15Z\";\n\n$e1 = strtotime(\"2013-07-21T23:57:04Z\");\necho date ('y.m.d H:i', $e2);\necho \"2013-07-21T23:57:04Z\";\n?>\n", "This solved for me,$old = '18-04-2018';\n$new = date('Y-m-d', strtotime($old));\necho $new;\nOutput : 2018-04-18", "Try this:$tempDate = explode('-','03-23-15');\n$date = '20'.$tempDate[2].'-'.$tempDate[0].'-'.$tempDate[1];\n", "This is the other way you can convert date format <?php\n$pastDate = \"Tuesday 11th October, 2016\";\n$pastDate = str_replace(\",\",\"\",$pastDate);\n\n$date = new DateTime($pastDate);\n$new_date_format = $date->format('Y-m-d');\n\necho $new_date_format.' 23:59:59'; ?>\n", "Just using strings, for me is a good solution, less problems with mysql. Detects the current format and changes it if necessary, this solution is only for spanish/french format and english format, without use php datetime function.class dateTranslator {\n\n public static function translate($date, $lang) {\n      $divider = '';\n\n      if (empty($date)){\n           return null;   \n      }\n      if (strpos($date, '-') !== false) {\n           $divider = '-';\n      } else if (strpos($date, '/') !== false) {\n           $divider = '/';\n      }\n      //spanish format DD/MM/YYYY hh:mm\n      if (strcmp($lang, 'es') == 0) {\n\n           $type = explode($divider, $date)[0];\n           if (strlen($type) == 4) {\n                $date = self::reverseDate($date,$divider);\n           } \n           if (strcmp($divider, '-') == 0) {\n                $date = str_replace(\"-\", \"/\", $date);\n           }\n      //english format YYYY-MM-DD hh:mm\n      } else {\n\n           $type = explode($divider, $date)[0];\n           if (strlen($type) == 2) {\n\n                $date = self::reverseDate($date,$divider);\n           } \n           if (strcmp($divider, '/') == 0) {\n                $date = str_replace(\"/\", \"-\", $date);\n\n           }   \n      }\n      return $date;\n }\n\n public static function reverseDate($date) {\n      $date2 = explode(' ', $date);\n      if (count($date2) == 2) {\n           $date = implode(\"-\", array_reverse(preg_split(\"/\\D/\", $date2[0]))) . ' ' . $date2[1];\n      } else {\n           $date = implode(\"-\", array_reverse(preg_split(\"/\\D/\", $date)));\n      }\n\n      return $date;\n }\ndateTranslator::translate($date, 'en')\n", "I know this is old, but, in running into a vendor that inconsistently uses 5 different date formats in their APIs (and test servers with a variety of PHP versions from the 5's through the latest 7's), I decided to write a universal converter that works with a myriad of PHP versions. This converter will take virtually any input, including any standard datetime format (including with or without milliseconds)  any Epoch Time representation (including with or without milliseconds) and convert it to virtually any other format. To call it:$TheDateTimeIWant=convertAnyDateTome_toMyDateTime([thedateIhave],[theformatIwant]);\nSending null for the format will make the function return the datetime in Epoch/Unix Time. Otherwise, send any format string that date() supports, as well as with \".u\" for milliseconds (I handle milliseconds as well, even though date() returns zeros).Here's the code:        <?php   \n        function convertAnyDateTime_toMyDateTime($dttm,$dtFormat)\n        {\n            if (!isset($dttm))\n            {\n                return \"\";\n            }\n            $timepieces = array();\n            if (is_numeric($dttm))\n            {\n                $rettime=$dttm;\n            }\n            else\n            {\n                $rettime=strtotime($dttm);\n                if (strpos($dttm,\".\")>0 and strpos($dttm,\"-\",strpos($dttm,\".\"))>0)\n                {\n                    $rettime=$rettime.substr($dttm,strpos($dttm,\".\"),strpos($dttm,\"-\",strpos($dttm,\".\"))-strpos($dttm,\".\"));\n                    $timepieces[1]=\"\";\n                }\n                else if (strpos($dttm,\".\")>0 and strpos($dttm,\"-\",strpos($dttm,\".\"))==0)\n                {               \n                    preg_match('/([0-9]+)([^0-9]+)/',substr($dttm,strpos($dttm,\".\")).\" \",$timepieces);\n                    $rettime=$rettime.\".\".$timepieces[1];\n                }\n            }\n\n            if (isset($dtFormat))\n            {\n                // RETURN as ANY date format sent\n                if (strpos($dtFormat,\".u\")>0)       // Deal with milliseconds\n                {\n                    $rettime=date($dtFormat,$rettime);              \n                    $rettime=substr($rettime,0,strripos($rettime,\".\")+1).$timepieces[1];                \n                }\n                else                                // NO milliseconds wanted\n                {\n                    $rettime=date($dtFormat,$rettime);\n                }\n            }\n            else\n            {\n                // RETURN Epoch Time (do nothing, we already built Epoch Time)          \n            }\n            return $rettime;    \n        }\n    ?>\nHere's some sample calls - you will note it also handles any time zone data (though as noted above, any non GMT time is returned in your time zone).         $utctime1=\"2018-10-30T06:10:11.2185007-07:00\";\n        $utctime2=\"2018-10-30T06:10:11.2185007\";\n        $utctime3=\"2018-10-30T06:10:11.2185007 PDT\";\n        $utctime4=\"2018-10-30T13:10:11.2185007Z\";\n        $utctime5=\"2018-10-30T13:10:11Z\";\n        $dttm=\"10/30/2018 09:10:11 AM EST\";\n\n        echo \"<pre>\";\n        echo \"<b>Epoch Time to a standard format</b><br>\";\n        echo \"<br>Epoch Tm: 1540905011    to STD DateTime     ----RESULT: \".convertAnyDateTime_toMyDateTime(\"1540905011\",\"Y-m-d H:i:s\").\"<hr>\";\n        echo \"<br>Epoch Tm: 1540905011          to UTC        ----RESULT: \".convertAnyDateTime_toMyDateTime(\"1540905011\",\"c\");\n        echo \"<br>Epoch Tm: 1540905011.2185007  to UTC        ----RESULT: \".convertAnyDateTime_toMyDateTime(\"1540905011.2185007\",\"c\").\"<hr>\";\n        echo \"<b>Returned as Epoch Time (the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.)\";\n        echo \"</b><br>\";\n        echo \"<br>UTCTime1: \".$utctime1.\" ----RESULT: \".convertAnyDateTime_toMyDateTime($utctime1,null);\n        echo \"<br>UTCTime2: \".$utctime2.\"       ----RESULT: \".convertAnyDateTime_toMyDateTime($utctime2,null);\n        echo \"<br>UTCTime3: \".$utctime3.\"   ----RESULT: \".convertAnyDateTime_toMyDateTime($utctime3,null);\n        echo \"<br>UTCTime4: \".$utctime4.\"      ----RESULT: \".convertAnyDateTime_toMyDateTime($utctime4,null);\n        echo \"<br>UTCTime5: \".$utctime5.\"              ----RESULT: \".convertAnyDateTime_toMyDateTime($utctime5,null);\n        echo \"<br>NO MILIS: \".$dttm.\"        ----RESULT: \".convertAnyDateTime_toMyDateTime($dttm,null);\n        echo \"<hr>\";\n        echo \"<hr>\";\n        echo \"<b>Returned as whatever datetime format one desires</b>\";\n        echo \"<br>UTCTime1: \".$utctime1.\" ----RESULT: \".convertAnyDateTime_toMyDateTime($utctime1,\"Y-m-d H:i:s\").\"              Y-m-d H:i:s\";\n        echo \"<br>UTCTime2: \".$utctime2.\"       ----RESULT: \".convertAnyDateTime_toMyDateTime($utctime2,\"Y-m-d H:i:s.u\").\"      Y-m-d H:i:s.u\";\n        echo \"<br>UTCTime3: \".$utctime3.\"   ----RESULT: \".convertAnyDateTime_toMyDateTime($utctime3,\"Y-m-d H:i:s.u\").\"      Y-m-d H:i:s.u\";\n        echo \"<p><b>Returned as ISO8601</b>\";\n        echo \"<br>UTCTime3: \".$utctime3.\"   ----RESULT: \".convertAnyDateTime_toMyDateTime($utctime3,\"c\").\"        ISO8601\";\n        echo \"</pre>\";\nHere's the output:Epoch Tm: 1540905011                        ----RESULT: 2018-10-30 09:10:11\n\nEpoch Tm: 1540905011          to UTC        ----RESULT: 2018-10-30T09:10:11-04:00\nEpoch Tm: 1540905011.2185007  to UTC        ----RESULT: 2018-10-30T09:10:11-04:00\nReturned as Epoch Time (the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.)\n\nUTCTime1: 2018-10-30T06:10:11.2185007-07:00 ----RESULT: 1540905011.2185007\nUTCTime2: 2018-10-30T06:10:11.2185007       ----RESULT: 1540894211.2185007\nUTCTime3: 2018-10-30T06:10:11.2185007 PDT   ----RESULT: 1540905011.2185007\nUTCTime4: 2018-10-30T13:10:11.2185007Z      ----RESULT: 1540905011.2185007\nUTCTime5: 2018-10-30T13:10:11Z              ----RESULT: 1540905011\nNO MILIS: 10/30/2018 09:10:11 AM EST        ----RESULT: 1540908611\nReturned as whatever datetime format one desires\nUTCTime1: 2018-10-30T06:10:11.2185007-07:00 ----RESULT: 2018-10-30 09:10:11              Y-m-d H:i:s\nUTCTime2: 2018-10-30T06:10:11.2185007       ----RESULT: 2018-10-30 06:10:11.2185007      Y-m-d H:i:s.u\nUTCTime3: 2018-10-30T06:10:11.2185007 PDT   ----RESULT: 2018-10-30 09:10:11.2185007      Y-m-d H:i:s.u\nReturned as ISO8601\nUTCTime3: 2018-10-30T06:10:11.2185007 PDT   ----RESULT: 2018-10-30T09:10:11-04:00        ISO8601\nThe only thing not in this version is the ability to select the time zone you want the returned datetime to be in. Originally, I wrote this to change any datetime to Epoch Time, so, I didn't need time zone support. It's trivial to add though. ", "Easiest and simplest way to change date format in phpIn PHP any date can be converted into the required date format using different scenarios for example to change any date format into Day, Date Month Year$newdate = date(\"D, d M Y\", strtotime($date));\nIt will show date in the following very well formatMon, 16 Nov 2020And if you have time as well in your existing date format for example if you have datetime format of SQL 2020-11-11 22:00:00 you can convert this into the required date format using the following$newdateformat = date(\"D, d M Y H:i:s\", strtotime($oldateformat));\nIt will show date in following well looking formatSun, 15 Nov 2020 16:26:00"]},
{"question": "How to parse JSON in Java", "details": "I have the following JSON text. How can I parse it to get the values of pageName, pagePic, post_id, etc.?{\n   \"pageInfo\": {\n         \"pageName\": \"abc\",\n         \"pagePic\": \"http://example.com/content.jpg\"\n    },\n    \"posts\": [\n         {\n              \"post_id\": \"123456789012_123456789012\",\n              \"actor_id\": \"1234567890\",\n              \"picOfPersonWhoPosted\": \"http://example.com/photo.jpg\",\n              \"nameOfPersonWhoPosted\": \"Jane Doe\",\n              \"message\": \"Sounds cool. Can't wait to see it!\",\n              \"likesCount\": \"2\",\n              \"comments\": [],\n              \"timeOfPost\": \"1234567890\"\n         }\n    ]\n}\n", "answers": ["I have the following JSON text. How can I parse it to get the values of pageName, pagePic, post_id, etc.?{\n   \"pageInfo\": {\n         \"pageName\": \"abc\",\n         \"pagePic\": \"http://example.com/content.jpg\"\n    },\n    \"posts\": [\n         {\n              \"post_id\": \"123456789012_123456789012\",\n              \"actor_id\": \"1234567890\",\n              \"picOfPersonWhoPosted\": \"http://example.com/photo.jpg\",\n              \"nameOfPersonWhoPosted\": \"Jane Doe\",\n              \"message\": \"Sounds cool. Can't wait to see it!\",\n              \"likesCount\": \"2\",\n              \"comments\": [],\n              \"timeOfPost\": \"1234567890\"\n         }\n    ]\n}\n", "The  library is easy to use. Example code below:import org.json.*;\n\nString jsonString = ... ; //assign your JSON String here\nJSONObject obj = new JSONObject(jsonString);\nString pageName = obj.getJSONObject(\"pageInfo\").getString(\"pageName\");\n\nJSONArray arr = obj.getJSONArray(\"posts\");\nfor (int i = 0; i < arr.length(); i++)\n{\n    String post_id = arr.getJSONObject(i).getString(\"post_id\");\n    ......\n}\nYou may find more examples from: Downloadable jar:  ", "For the sake of the example lets assume you have a class Person with just a name.private class Person {\n    public String name;\n\n    public Person(String name) {\n        this.name = name;\n    }\n}\nMy personal favourite as to the great JSON serialisation / de-serialisation of objects.Gson g = new Gson();\n\nPerson person = g.fromJson(\"{\\\"name\\\": \\\"John\\\"}\", Person.class);\nSystem.out.println(person.name); //John\n\nSystem.out.println(g.toJson(person)); // {\"name\":\"John\"}\nIf you want to get a single attribute out you can do it easily with the Google library as well:JsonObject jsonObject = new JsonParser().parse(\"{\\\"name\\\": \\\"John\\\"}\").getAsJsonObject();\n\nSystem.out.println(jsonObject.get(\"name\").getAsString()); //John\nIf you don't need object de-serialisation but to simply get an attribute, you can try org.json ()JSONObject obj = new JSONObject(\"{\\\"name\\\": \\\"John\\\"}\");\n\nSystem.out.println(obj.getString(\"name\")); //John\nObjectMapper mapper = new ObjectMapper();\nPerson user = mapper.readValue(\"{\\\"name\\\": \\\"John\\\"}\", Person.class);\n\nSystem.out.println(user.name); //John\n", "If one wants to create Java object from JSON and vice versa, use GSON or JACKSON third party jars etc.//from object to JSON \nGson gson = new Gson();\ngson.toJson(yourObject);\n\n// from JSON to object \nyourObject o = gson.fromJson(JSONString,yourObject.class);\nBut if one just want to parse a JSON string and get some values, (OR create a JSON string from scratch to send over wire) just use JaveEE jar which contains JsonReader, JsonArray, JsonObject etc. You may want to download the implementation of that spec like javax.json. With these two jars I am able to parse the json and use the values.  These APIs actually follow the DOM/SAX parsing model of XML.       Response response = request.get(); // REST call \n    JsonReader jsonReader = Json.createReader(new StringReader(response.readEntity(String.class)));\n    JsonArray jsonArray = jsonReader.readArray();\n    ListIterator l = jsonArray.listIterator();\n    while ( l.hasNext() ) {\n          JsonObject j = (JsonObject)l.next();\n          JsonObject ciAttr = j.getJsonObject(\"ciAttributes\");\n", " is very straightforward, flexible, very fast and customizable. Try itFeatures:\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt can be used like this:JsonParserFactory factory=JsonParserFactory.getInstance();\nJSONParser parser=factory.newJsonParser();\nMap jsonMap=parser.parseJson(jsonString);\n", "You could use .Using this library you only need to create a model with the same JSON structure. Then the model is automatically filled in. You have to call your variables as your JSON keys, or use @SerializedName if you want to use different names.From your example:{\n    \"pageInfo\": {\n        \"pageName\": \"abc\",\n        \"pagePic\": \"http://example.com/content.jpg\"\n    }\n    \"posts\": [\n        {\n            \"post_id\": \"123456789012_123456789012\",\n            \"actor_id\": \"1234567890\",\n            \"picOfPersonWhoPosted\": \"http://example.com/photo.jpg\",\n            \"nameOfPersonWhoPosted\": \"Jane Doe\",\n            \"message\": \"Sounds cool. Can't wait to see it!\",\n            \"likesCount\": \"2\",\n            \"comments\": [],\n            \"timeOfPost\": \"1234567890\"\n        }\n    ]\n}\nclass MyModel {\n\n    private PageInfo pageInfo;\n    private ArrayList<Post> posts = new ArrayList<>();\n}\n\nclass PageInfo {\n\n    private String pageName;\n    private String pagePic;\n}\n\nclass Post {\n\n    private String post_id;\n\n    @SerializedName(\"actor_id\") // <- example SerializedName\n    private String actorId;\n\n    private String picOfPersonWhoPosted;\n    private String nameOfPersonWhoPosted;\n    private String message;\n    private String likesCount;\n    private ArrayList<String> comments;\n    private String timeOfPost;\n}\nNow you can parse using Gson library:MyModel model = gson.fromJson(jsonString, MyModel.class);\nRemember to import the library in the app Gradle fileimplementation 'com.google.code.gson:gson:2.8.6' // or earlier versions\nYou can generate model from JSON automatically using online tools like .", "Almost all the answers given requires a full deserialization of the JSON into a Java object before accessing the value in the property of interest. Another alternative, which does not go this route is to use  which is like XPath for JSON and allows traversing of JSON objects.It is a specification and the good folks at JayWay have created a Java implementation for the specification which you can find here: So basically to use it, add it to your project, eg:<dependency>\n    <groupId>com.jayway.jsonpath</groupId>\n    <artifactId>json-path</artifactId>\n    <version>${version}</version>\n</dependency>\nand to use:String pageName = JsonPath.read(yourJsonString, \"$.pageInfo.pageName\");\nString pagePic = JsonPath.read(yourJsonString, \"$.pageInfo.pagePic\");\nString post_id = JsonPath.read(yourJsonString, \"$.pagePosts[0].post_id\");\netc...Check the JsonPath specification page for more information on the other ways to transverse JSON.", "You can use  libraries, for binding JSON String into  () instances. POJO is simply a class with only private fields and public getter/setter methods. Jackson is going to traverse the methods (using ), and maps the JSON object into the POJO instance as the field names of the class fits to the field names of the JSON object.In your JSON object, which is actually a  object, the main object consists o two sub-objects. So, our POJO classes should have the same hierarchy. I'll call the whole JSON Object as  object.  object consist of a  object, and a  object array.So we have to create three different POJO classes;\n\n\n\nThe only package I've used is Jackson ObjectMapper, what we do is binding data;com.fasterxml.jackson.databind.ObjectMapper\nThe required dependencies, the jar files is listed below;\n\n\n\nHere is the required code;package com.levo.jsonex.model;\n\npublic class Page {\n\n    private PageInfo pageInfo;\n    private Post[] posts;\n\n    public PageInfo getPageInfo() {\n        return pageInfo;\n    }\n\n    public void setPageInfo(PageInfo pageInfo) {\n        this.pageInfo = pageInfo;\n    }\n\n    public Post[] getPosts() {\n        return posts;\n    }\n\n    public void setPosts(Post[] posts) {\n        this.posts = posts;\n    }\n\n}\npackage com.levo.jsonex.model;\n\npublic class PageInfo {\n\n    private String pageName;\n    private String pagePic;\n\n    public String getPageName() {\n        return pageName;\n    }\n\n    public void setPageName(String pageName) {\n        this.pageName = pageName;\n    }\n\n    public String getPagePic() {\n        return pagePic;\n    }\n\n    public void setPagePic(String pagePic) {\n        this.pagePic = pagePic;\n    }\n\n}\npackage com.levo.jsonex.model;\n\npublic class Post {\n\n    private String post_id;\n    private String actor_id;\n    private String picOfPersonWhoPosted;\n    private String nameOfPersonWhoPosted;\n    private String message;\n    private int likesCount;\n    private String[] comments;\n    private int timeOfPost;\n\n    public String getPost_id() {\n        return post_id;\n    }\n\n    public void setPost_id(String post_id) {\n        this.post_id = post_id;\n    }\n\n    public String getActor_id() {\n        return actor_id;\n    }\n\n    public void setActor_id(String actor_id) {\n        this.actor_id = actor_id;\n    }\n\n    public String getPicOfPersonWhoPosted() {\n        return picOfPersonWhoPosted;\n    }\n\n    public void setPicOfPersonWhoPosted(String picOfPersonWhoPosted) {\n        this.picOfPersonWhoPosted = picOfPersonWhoPosted;\n    }\n\n    public String getNameOfPersonWhoPosted() {\n        return nameOfPersonWhoPosted;\n    }\n\n    public void setNameOfPersonWhoPosted(String nameOfPersonWhoPosted) {\n        this.nameOfPersonWhoPosted = nameOfPersonWhoPosted;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public int getLikesCount() {\n        return likesCount;\n    }\n\n    public void setLikesCount(int likesCount) {\n        this.likesCount = likesCount;\n    }\n\n    public String[] getComments() {\n        return comments;\n    }\n\n    public void setComments(String[] comments) {\n        this.comments = comments;\n    }\n\n    public int getTimeOfPost() {\n        return timeOfPost;\n    }\n\n    public void setTimeOfPost(int timeOfPost) {\n        this.timeOfPost = timeOfPost;\n    }\n\n}\nI've just copied your JSON sample into this file and put it under the project folder.{\n   \"pageInfo\": {\n         \"pageName\": \"abc\",\n         \"pagePic\": \"http://example.com/content.jpg\"\n    },\n    \"posts\": [\n         {\n              \"post_id\": \"123456789012_123456789012\",\n              \"actor_id\": \"1234567890\",\n              \"picOfPersonWhoPosted\": \"http://example.com/photo.jpg\",\n              \"nameOfPersonWhoPosted\": \"Jane Doe\",\n              \"message\": \"Sounds cool. Can't wait to see it!\",\n              \"likesCount\": \"2\",\n              \"comments\": [],\n              \"timeOfPost\": \"1234567890\"\n         }\n    ]\n}\npackage com.levo.jsonex;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Arrays;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.levo.jsonex.model.Page;\nimport com.levo.jsonex.model.PageInfo;\nimport com.levo.jsonex.model.Post;\n\npublic class JSONDemo {\n\n    public static void main(String[] args) {\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        try {\n            Page page = objectMapper.readValue(new File(\"sampleJSONFile.json\"), Page.class);\n\n            printParsedObject(page);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    private static void printParsedObject(Page page) {\n        printPageInfo(page.getPageInfo());\n        System.out.println();\n        printPosts(page.getPosts());\n    }\n\n    private static void printPageInfo(PageInfo pageInfo) {\n        System.out.println(\"Page Info;\");\n        System.out.println(\"**********\");\n        System.out.println(\"\\tPage Name : \" + pageInfo.getPageName());\n        System.out.println(\"\\tPage Pic  : \" + pageInfo.getPagePic());\n    }\n\n    private static void printPosts(Post[] posts) {\n        System.out.println(\"Page Posts;\");\n        System.out.println(\"**********\");\n        for(Post post : posts) {\n            printPost(post);\n        }\n    }\n\n    private static void printPost(Post post) {\n        System.out.println(\"\\tPost Id                   : \" + post.getPost_id());\n        System.out.println(\"\\tActor Id                  : \" + post.getActor_id());\n        System.out.println(\"\\tPic Of Person Who Posted  : \" + post.getPicOfPersonWhoPosted());\n        System.out.println(\"\\tName Of Person Who Posted : \" + post.getNameOfPersonWhoPosted());\n        System.out.println(\"\\tMessage                   : \" + post.getMessage());\n        System.out.println(\"\\tLikes Count               : \" + post.getLikesCount());\n        System.out.println(\"\\tComments                  : \" + Arrays.toString(post.getComments()));\n        System.out.println(\"\\tTime Of Post              : \" + post.getTimeOfPost());\n    }\n\n}\nPage Info;\n****(*****\n    Page Name : abc\n    Page Pic  : http://example.com/content.jpg\nPage Posts;\n**********\n    Post Id                   : 123456789012_123456789012\n    Actor Id                  : 1234567890\n    Pic Of Person Who Posted  : http://example.com/photo.jpg\n    Name Of Person Who Posted : Jane Doe\n    Message                   : Sounds cool. Can't wait to see it!\n    Likes Count               : 2\n    Comments                  : []\n    Time Of Post              : 1234567890\n", "Use  which is very fast and easy to use.\nYou can parse from String obj and Stream.Sample data:{\n  \"order\": 4711,\n  \"items\": [\n    {\n      \"name\": \"NE555 Timer IC\",\n      \"cat-id\": \"645723\",\n      \"quantity\": 10,\n    },\n    {\n      \"name\": \"LM358N OpAmp IC\",\n      \"cat-id\": \"764525\",\n      \"quantity\": 2\n    }\n  ]\n}\nParsing:JsonObject object = Json.parse(input).asObject();\nint orders = object.get(\"order\").asInt();\nJsonArray items = object.get(\"items\").asArray();\nCreating JSON:JsonObject user = Json.object().add(\"name\", \"Sakib\").add(\"age\", 23);\nMaven:<dependency>\n  <groupId>com.eclipsesource.minimal-json</groupId>\n  <artifactId>minimal-json</artifactId>\n  <version>0.9.4</version>\n</dependency>\n", "I believe the best practice should be to go through the official  which are still work in progress.", "Since nobody mentioned it yet, here is a beginning of a solution using  (JavaScript runtime part of Java 8, but deprecated in Java 11).private static final String EXTRACTOR_SCRIPT =\n    \"var fun = function(raw) { \" +\n    \"var json = JSON.parse(raw); \" +\n    \"return [json.pageInfo.pageName, json.pageInfo.pagePic, json.posts[0].post_id];};\";\n\npublic void run() throws ScriptException, NoSuchMethodException {\n    ScriptEngine engine = new ScriptEngineManager().getEngineByName(\"nashorn\");\n    engine.eval(EXTRACTOR_SCRIPT);\n    Invocable invocable = (Invocable) engine;\n    JSObject result = (JSObject) invocable.invokeFunction(\"fun\", JSON);\n    result.values().forEach(e -> System.out.println(e));\n}\nI wrote JSON content containing three arrays of respectively 20, 20 and 100 elements. I only want to get the 100 elements from the third array. I use the following JavaScript function to parse and get my entries.var fun = function(raw) {JSON.parse(raw).entries};\nRunning the call a million times using  takes 7.5~7.8 seconds(JSObject) invocable.invokeFunction(\"fun\", json);\n takes 20~21 secondsnew JSONObject(JSON).getJSONArray(\"entries\");\n takes 6.5~7 secondsmapper.readValue(JSON, Entries.class).getEntries();\nIn this case Jackson performs better than Nashorn, which performs much better than org.json.\nNashorn API is harder to use than org.json's or Jackson's. Depending on your requirements Jackson and Nashorn both can be viable solutions.", "The below example shows how to read the text in the question, represented as the \"jsonText\" variable.  This solution uses the Java EE7  API (which is mentioned in some of the other answers).  The reason I've added it as a separate answer is that the following code shows how to  access some of the values shown in the question.  An  would be required to make this code run.  The full package for each of the classes required was included as I didn't want to declare \"import\" statements.javax.json.JsonReader jr = \n    javax.json.Json.createReader(new StringReader(jsonText));\njavax.json.JsonObject jo = jr.readObject();\n\n//Read the page info.\njavax.json.JsonObject pageInfo = jo.getJsonObject(\"pageInfo\");\nSystem.out.println(pageInfo.getString(\"pageName\"));\n\n//Read the posts.\njavax.json.JsonArray posts = jo.getJsonArray(\"posts\");\n//Read the first post.\njavax.json.JsonObject post = posts.getJsonObject(0);\n//Read the post_id field.\nString postId = post.getString(\"post_id\");\nNow, before anyone goes and downvotes this answer because it doesn't use GSON, org.json, Jackson, or any of the other 3rd party frameworks available, it's an example of \"required code\" per the question to parse the provided text.  I am well aware that  and as such the  should be treated the same as any other 3rd party JSON handling implementation.", "This blew my mind with how easy it was. You can just pass a String holding your JSON to the constructor of a JSONObject in the default org.json package. JSONArray rootOfPage =  new JSONArray(JSONString);\nDone. .\nThis works with JSONObjects as well. After that, you can just look through your hierarchy of Objects using the get() methods on your objects.", "There are many JSON libraries available in Java.The most notorious ones are: Jackson, GSON, Genson, FastJson and org.json.There are typically three things one should look at for choosing any library:Specifically for JSON libraries (and any serialization/deserialization libs), databinding is also usually of interest as it removes the need of writing boiler-plate code to pack/unpack the data.For 1, see this benchmark:  I did using  which compares (jackson, gson, genson, fastjson, org.json, jsonp) performance of serializers and deserializers using stream and databind APIs.\nFor 2, you can find numerous examples on the Internet. The benchmark above can also be used as a source of examples...Quick takeaway of the benchmark:  performs 5 to 6 times better than org.json and more than twice better than GSON.For your particular example, the following code decodes your json with jackson:public class MyObj {\n\n    private PageInfo pageInfo;\n    private List<Post> posts;\n\n    static final class PageInfo {\n        private String pageName;\n        private String pagePic;\n    }\n\n    static final class Post {\n        private String post_id;\n        @JsonProperty(\"actor_id\");\n        private String actorId;\n        @JsonProperty(\"picOfPersonWhoPosted\")\n        private String pictureOfPoster;\n        @JsonProperty(\"nameOfPersonWhoPosted\")\n        private String nameOfPoster;\n        private String likesCount;\n        private List<String> comments;\n        private String timeOfPost;\n    }\n\n    private static final ObjectMapper JACKSON = new ObjectMapper();\n    public static void main(String[] args) throws IOException {\n        MyObj o = JACKSON.readValue(args[0], MyObj.class); // assumes args[0] contains your json payload provided in your question.\n    }\n}\nLet me know if you have any questions.", "In addition to other answers, I recomend this online opensource service  for quick generating Java classes from json or json schema for GSON, Jackson 1.x or Jackson 2.x. For example, if you have:{\n   \"pageInfo\": {\n         \"pageName\": \"abc\",\n         \"pagePic\": \"http://example.com/content.jpg\"\n    }\n    \"posts\": [\n         {\n              \"post_id\": \"123456789012_123456789012\",\n              \"actor_id\": 1234567890,\n              \"picOfPersonWhoPosted\": \"http://example.com/photo.jpg\",\n              \"nameOfPersonWhoPosted\": \"Jane Doe\",\n              \"message\": \"Sounds cool. Can't wait to see it!\",\n              \"likesCount\": 2,\n              \"comments\": [],\n              \"timeOfPost\": 1234567890\n         }\n    ]\n}\nThe  for GSON generated:@Generated(\"org.jsonschema2pojo\")\npublic class Container {\n    @SerializedName(\"pageInfo\")\n    @Expose\n    public PageInfo pageInfo;\n    @SerializedName(\"posts\")\n    @Expose\n    public List<Post> posts = new ArrayList<Post>();\n}\n\n@Generated(\"org.jsonschema2pojo\")\npublic class PageInfo {\n    @SerializedName(\"pageName\")\n    @Expose\n    public String pageName;\n    @SerializedName(\"pagePic\")\n    @Expose\n    public String pagePic;\n}\n\n@Generated(\"org.jsonschema2pojo\")\npublic class Post {\n    @SerializedName(\"post_id\")\n    @Expose\n    public String postId;\n    @SerializedName(\"actor_id\")\n    @Expose\n    public long actorId;\n    @SerializedName(\"picOfPersonWhoPosted\")\n    @Expose\n    public String picOfPersonWhoPosted;\n    @SerializedName(\"nameOfPersonWhoPosted\")\n    @Expose\n    public String nameOfPersonWhoPosted;\n    @SerializedName(\"message\")\n    @Expose\n    public String message;\n    @SerializedName(\"likesCount\")\n    @Expose\n    public long likesCount;\n    @SerializedName(\"comments\")\n    @Expose\n    public List<Object> comments = new ArrayList<Object>();\n    @SerializedName(\"timeOfPost\")\n    @Expose\n    public long timeOfPost;\n}\n", "If you have some Java class(say Message) representing the JSON string(jsonString), you can use   JSON library with:Message message= new ObjectMapper().readValue(jsonString, Message.class);\nand from message object you can fetch any of its attribute.", " is easy to learn and implement, what we need to know are following two methods\n \u2013 Convert Java object to JSON format\n \u2013 Convert JSON into Java object\n`import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport com.google.gson.Gson;\n\npublic class GsonExample {\n    public static void main(String[] args) {\n\n    Gson gson = new Gson();\n\n    try {\n\n        BufferedReader br = new BufferedReader(\n            new FileReader(\"c:\\\\file.json\"));\n\n        //convert the json string back to object\n        DataObject obj = gson.fromJson(br, DataObject.class);\n\n        System.out.println(obj);\n\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    }\n}\n`", "There are many open source libraries present to parse JSON content to an object or just to read JSON values. Your requirement is just to read values and parsing it to custom object. So org.json library is enough in your case.Use org.json library to parse it and create JsonObject:JSONObject jsonObj = new JSONObject(<jsonStr>);\nNow, use this object to get your values:String id = jsonObj.getString(\"pageInfo\");\nYou can see a complete example here:", "Please do something like this:JSONParser jsonParser = new JSONParser();\nJSONObject obj = (JSONObject) jsonParser.parse(contentString);\nString product = (String) jsonObject.get(\"productId\");\n", "You can use the Gson Library to parse the JSON string.Gson gson = new Gson();\nJsonObject jsonObject = gson.fromJson(jsonAsString, JsonObject.class);\n\nString pageName = jsonObject.getAsJsonObject(\"pageInfo\").get(\"pageName\").getAsString();\nString pagePic = jsonObject.getAsJsonObject(\"pageInfo\").get(\"pagePic\").getAsString();\nString postId = jsonObject.getAsJsonArray(\"posts\").get(0).getAsJsonObject().get(\"post_id\").getAsString();\nYou can also loop through the \"posts\" array as so:JsonArray posts = jsonObject.getAsJsonArray(\"posts\");\nfor (JsonElement post : posts) {\n  String postId = post.getAsJsonObject().get(\"post_id\").getAsString();\n  //do something\n}\n", "Read the following blog post, .This post is a little bit old, but still I want to answer you question.Step 1: Create a POJO class of your data.Step 2: Now create a object using JSON.Employee employee = null;\nObjectMapper mapper = new ObjectMapper();\ntry {\n    employee =  mapper.readValue(newFile(\"/home/sumit/employee.json\"), Employee.class);\n} \ncatch(JsonGenerationException e) {\n    e.printStackTrace();\n}\nFor further reference you can refer to the following .", "{\n   \"pageInfo\": {\n         \"pageName\": \"abc\",\n         \"pagePic\": \"http://example.com/content.jpg\"\n    },\n    \"posts\": [\n         {\n              \"post_id\": \"123456789012_123456789012\",\n              \"actor_id\": \"1234567890\",\n              \"picOfPersonWhoPosted\": \"http://example.com/photo.jpg\",\n              \"nameOfPersonWhoPosted\": \"Jane Doe\",\n              \"message\": \"Sounds cool. Can't wait to see it!\",\n              \"likesCount\": \"2\",\n              \"comments\": [],\n              \"timeOfPost\": \"1234567890\"\n         }\n    ]\n}\n\nJava code :\n\nJSONObject obj = new JSONObject(responsejsonobj);\nString pageName = obj.getJSONObject(\"pageInfo\").getString(\"pageName\");\n\nJSONArray arr = obj.getJSONArray(\"posts\");\nfor (int i = 0; i < arr.length(); i++)\n{\n    String post_id = arr.getJSONObject(i).getString(\"post_id\");\n    ......etc\n}\n", "Top answers on this page use too simple examples like object with one property (e.g. {name: value}). I think that still simple but real life example can help someone. So this is the JSON returned by Google Translate API: {\n  \"data\": \n     {\n        \"translations\": \n          [\n            {\n              \"translatedText\": \"Arbeit\"\n             }\n          ]\n     }\n}\nI want to retrieve the value of \"translatedText\" attribute e.g. \"Arbeit\" using Google's Gson.Two possible approaches: Retrieve just one needed attributeString json  = callToTranslateApi(\"work\", \"de\");\nJsonObject jsonObject = new JsonParser().parse(json).getAsJsonObject();\nreturn jsonObject.get(\"data\").getAsJsonObject()\n        .get(\"translations\").getAsJsonArray()\n        .get(0).getAsJsonObject()\n        .get(\"translatedText\").getAsString();\nCreate Java object from JSONclass ApiResponse {\n    Data data;      \n    class Data {\n        Translation[] translations;         \n        class Translation {\n            String translatedText;\n        }\n     }\n }\n... Gson g = new Gson();\n String json =callToTranslateApi(\"work\", \"de\");\n ApiResponse response = g.fromJson(json, ApiResponse.class);\n return response.data.translations[0].translatedText;\n", "First you need to select an  to do that.The  provides portable APIs to parse, generate, transform, and query JSON using object model and streaming APIs. The  is here:  Here you can find a  of JSR 353:And ... I found this article as well:If you go for Jackson, here is a good article about conversion between JSON to/from Java using Jackson: Hope it helps!", "You can use . Below is a GitHub link with source code, pom details and good documentation.Please follow the below steps.: Add the jayway JSON path dependency in your class path using Maven or download the JAR file and manually add it.<dependency>\n            <groupId>com.jayway.jsonpath</groupId>\n            <artifactId>json-path</artifactId>\n            <version>2.2.0</version>\n</dependency>\n: Please save your input JSON as a file for this example. In my case I saved your JSON as sampleJson.txt. Note you missed a comma between pageInfo and posts.: Read the JSON contents from the above file using bufferedReader and save it as String.BufferedReader br = new BufferedReader(new FileReader(\"D:\\\\sampleJson.txt\"));\n\n        StringBuilder sb = new StringBuilder();\n        String line = br.readLine();\n\n        while (line != null) {\n            sb.append(line);\n            sb.append(System.lineSeparator());\n            line = br.readLine();\n        }\n        br.close();\n        String jsonInput = sb.toString();\n: Parse your JSON string using jayway JSON parser.Object document = Configuration.defaultConfiguration().jsonProvider().parse(jsonInput);\n: Read the details like below.String pageName = JsonPath.read(document, \"$.pageInfo.pageName\");\nString pagePic = JsonPath.read(document, \"$.pageInfo.pagePic\");\nString post_id = JsonPath.read(document, \"$.posts[0].post_id\");\n\nSystem.out.println(\"$.pageInfo.pageName \" + pageName);\nSystem.out.println(\"$.pageInfo.pagePic \" + pagePic);\nSystem.out.println(\"$.posts[0].post_id \" + post_id);\n:$.pageInfo.pageName = abc\n$.pageInfo.pagePic = http://example.com/content.jpg\n$.posts[0].post_id  = 123456789012_123456789012\n", "{\n   \"pageInfo\": {\n         \"pageName\": \"abc\",\n         \"pagePic\": \"http://example.com/content.jpg\"\n    }\n}\nclass PageInfo {\n\n    private String pageName;\n    private String pagePic;\n\n    // Getters and setters\n}\n    PageInfo pageInfo = JsonPath.parse(jsonString).read(\"$.pageInfo\", PageInfo.class);\n<dependency>\n    <groupId>com.jayway.jsonpath</groupId>\n    <artifactId>json-path</artifactId>\n    <version>2.2.0</version>\n</dependency>\n", "One can use  to create  model classes representing structure of  files and use them to access various elements in the  tree. Unlike other solutions this one  and is thus suitable for environments where reflection is impossible or comes with significant overhead.There is a  showing the usage. First of all it defines the structure:@Model(className=\"RepositoryInfo\", properties = {\n    @Property(name = \"id\", type = int.class),\n    @Property(name = \"name\", type = String.class),\n    @Property(name = \"owner\", type = Owner.class),\n    @Property(name = \"private\", type = boolean.class),\n})\nfinal class RepositoryCntrl {\n    @Model(className = \"Owner\", properties = {\n        @Property(name = \"login\", type = String.class)\n    })\n    static final class OwnerCntrl {\n    }\n}\nand then it uses the generated RepositoryInfo and Owner classes to parse the provided input stream and pick certain information up while doing that:List<RepositoryInfo> repositories = new ArrayList<>();\ntry (InputStream is = initializeStream(args)) {\n    Models.parse(CONTEXT, RepositoryInfo.class, is, repositories);\n}\n\nSystem.err.println(\"there is \" + repositories.size() + \" repositories\");\nrepositories.stream().filter((repo) -> repo != null).forEach((repo) -> {\n    System.err.println(\"repository \" + repo.getName() + \n        \" is owned by \" + repo.getOwner().getLogin()\n    );\n})\nThat is it! In addition to that here is a  showing similar example together with asynchronous network communication.", "jsoniter (jsoniterator) is a relatively new and simple json library, designed to be simple and fast. All you need to do to deserialize json data isJsonIterator.deserialize(jsonData, int[].class);\nwhere jsonData is a string of json data.Check out the \nfor more information.", "If you have maven project then add below dependency  or normal project add json-simple jar.<dependency>\n    <groupId>org.json</groupId>\n    <artifactId>json</artifactId>\n    <version>20180813</version>\n</dependency>\nWrite below java code for convert JSON string to JSON array.JSONArray ja = new JSONArray(String jsonString);\n", "We can use the JSONObject class to convert a JSON string to a JSON object,\nand to iterate over the JSON object. Use the following code.JSONObject jObj = new JSONObject(contents.trim());\nIterator<?> keys = jObj.keys();\n\nwhile( keys.hasNext() ) {\n  String key = (String)keys.next();\n  if ( jObj.get(key) instanceof JSONObject ) {           \n    System.out.println(jObj.getString(String key));\n  }\n}\n", "You can use  stream parsing library for parsing complex json and XML document. DSM parse data only once and not load all data into memory. Let's say we have  class to deserialize given json data.Page classpublic class Page {\n    private String pageName;\n    private String pageImage;\n    private List<Sting> postIds;\n\n    // getter/setter\n\n}\nCreate a yaml Mapping file.result:\n  type: object     # result is array\n  path: /posts\n  fields:\n    pageName:\n        path: /pageInfo/pageName\n    pageImage:\n        path: /pageInfo/pagePic\n    postIds:\n      path: post_id\n      type: array\nUse DSM to extract fields.DSM dsm=new DSMBuilder(new File(\"path-to-yaml-config.yaml\")).create(Page.class);\nPage page= (Page)dsm.toObject(new path-to-json-data.json\");\n variable serialized to json:{\n  \"pageName\" : \"abc\",\n  \"pageImage\" : \"http://example.com/content.jpg\",\n  \"postIds\" : [ \"123456789012_123456789012\" ]\n}\n"]},
{"question": "How can I avoid Java code in JSP files, using JSP 2?", "details": "I'm new to Java EE and I know that something like the following three lines<%= x+1 %>\n<%= request.getParameter(\"name\") %>\n<%! counter++; %>\nis an old school way of coding and in JSP version 2 there exists a method to avoid Java code in JSP files. What are the alternative JSP 2 lines, and what is this technique called?", "answers": ["I'm new to Java EE and I know that something like the following three lines<%= x+1 %>\n<%= request.getParameter(\"name\") %>\n<%! counter++; %>\nis an old school way of coding and in JSP version 2 there exists a method to avoid Java code in JSP files. What are the alternative JSP 2 lines, and what is this technique called?", "The use of  (those <% %> things) in  is indeed highly discouraged since the birth of  (like ) and  (, those ${} things) way back in 2001.The major disadvantages of  are: Oracle itself also recommends in the  to avoid use of  whenever the same functionality is possible by (tag) classes. Here are several cites of relevance:From JSP 1.2 Specification, it is highly recommended that the JSP Standard Tag Library  (JSTL) be used in your web application to help  in your pages. Pages that use JSTL are, in general, easier to read and maintain. ...Where possible,  whenever tag libraries provide equivalent functionality. This makes pages easier to read and maintain, helps to separate business logic from presentation logic, and will make your pages easier to evolve into JSP 2.0-style pages (JSP 2.0 Specification supports but de-emphasizes the use of scriptlets)....In the spirit of adopting the model-view-controller (MVC) design pattern to reduce coupling between the presentation tier from the business logic,  for writing business logic. Rather, JSP scriptlets are used if necessary to transform data (also called \"value objects\") returned from processing the client's requests into a proper client-ready format. Even then, this would be better done with a front controller servlet or a custom tag.\nIf you want to invoke the  Java code on  request, less-or-more regardless of the requested page, e.g. checking if a user is logged in, then implement a  and write code accordingly in doFilter() method. E.g.:public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException {\n    if (((HttpServletRequest) request).getSession().getAttribute(\"user\") == null) {\n        ((HttpServletResponse) response).sendRedirect(\"login\"); // Not logged in, redirect to login page.\n    } else {\n        chain.doFilter(request, response); // Logged in, just continue request.\n    }\n}\nWhen mapped on an appropriate <url-pattern> covering the JSP pages of interest, then you don't need to copypaste the same piece of code overall JSP pages.\nIf you want to invoke some Java code to  a request, e.g. preloading some list from a database to display in some table, if necessary based on some query parameters, then implement a  and write code accordingly in doGet() method. E.g.:protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    try {\n        List<Product> products = productService.list(); // Obtain all products.\n        request.setAttribute(\"products\", products); // Store products in request scope.\n        request.getRequestDispatcher(\"/WEB-INF/products.jsp\").forward(request, response); // Forward to JSP page to display them in a HTML table.\n    } catch (SQLException e) {\n        throw new ServletException(\"Retrieving products failed!\", e);\n    }\n}\nThis way dealing with exceptions is easier. The DB is not accessed in the midst of JSP rendering, but far before the JSP is been displayed. You still have the possibility to change the response whenever the DB access throws an exception. In the above example, the default error 500 page will be displayed which you can anyway customize by an <error-page> in web.xml.\nIf you want to invoke some Java code to  a request, e.g. processing a form submit, then implement a  and write code accordingly in doPost() method. E.g.:protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    String username = request.getParameter(\"username\");\n    String password = request.getParameter(\"password\");\n    User user = userService.find(username, password);\n\n    if (user != null) {\n        request.getSession().setAttribute(\"user\", user); // Login user.\n        response.sendRedirect(\"home\"); // Redirect to home page.\n    } else {\n        request.setAttribute(\"message\", \"Unknown username/password. Please retry.\"); // Store error message in request scope.\n        request.getRequestDispatcher(\"/WEB-INF/login.jsp\").forward(request, response); // Forward to JSP page to redisplay login form with error.\n    }\n}\nThis way dealing with different result page destinations is easier: redisplaying the form with validation errors in case of an error (in this particular example you can redisplay it using ${message} in ), or just taking to the desired target page in case of success.\nIf you want to invoke some Java code to  the execution plan and/or the destination of the request and the response, then implement a  according to the . E.g.:protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    try {\n        Action action = ActionFactory.getAction(request);\n        String view = action.execute(request, response);\n\n        if (view.equals(request.getPathInfo().substring(1)) {\n            request.getRequestDispatcher(\"/WEB-INF/\" + view + \".jsp\").forward(request, response);\n        } else {\n            response.sendRedirect(view);\n        }\n    } catch (Exception e) {\n        throw new ServletException(\"Executing action failed.\", e);\n    }\n}\nOr just adopt an MVC framework like , , , etc so that you end up with just a JSP/Facelets page and a JavaBean class without the need for a custom servlet.\nIf you want to invoke some Java code to  inside a JSP page, then you need to grab an (existing) flow control taglib like . E.g. displaying List<Product> in a table:<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n...\n<table>\n    <c:forEach items=\"${products}\" var=\"product\">\n        <tr>\n            <td>${product.name}</td>\n            <td>${product.description}</td>\n            <td>${product.price}</td>\n        </tr>\n    </c:forEach>\n</table>\nWith XML-style tags which fit nicely among all that HTML, the code is better readable (and thus better maintainable) than a bunch of scriptlets with various opening and closing braces (). An easy aid is to configure your web application to throw an exception whenever  are still been used by adding the following piece to web.xml:<jsp-config>\n    <jsp-property-group>\n        <url-pattern>*.jsp</url-pattern>\n        <scripting-invalid>true</scripting-invalid>\n    </jsp-property-group>\n</jsp-config>\nIn , the successor of JSP, which is part of the Java EE provided MVC framework , it is already  possible to use . This way you're automatically forced to do things \"the right way\".\nIf you want to invoke some Java code to  \"backend\" data inside a JSP page, then you need to use EL (Expression Language), those ${} things. E.g. redisplaying submitted input values:<input type=\"text\" name=\"foo\" value=\"${param.foo}\" />\nThe ${param.foo} displays the outcome of request.getParameter(\"foo\").\nIf you want to invoke some  Java code directly in the JSP page (typically public static methods), then you need to define them as EL functions. There's a standard  in JSTL, but . Here's an example how JSTL fn:escapeXml is useful to prevent  .<%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %>\n...\n<input type=\"text\" name=\"foo\" value=\"${fn:escapeXml(param.foo)}\" />\nNote that the XSS sensitivity is in no way specifically related to Java/JSP/JSTL/EL/whatever, this problem needs to be taken into account in  web application you develop. The problem of  is that it provides no way of builtin preventions, at least not using the standard Java API. JSP's successor Facelets has already implicit HTML escaping, so you don't need to worry about XSS holes in Facelets.\n\n\n\n\n\n\n", "As  is discussing, you can and always should disable scriptlets in your web.xml web application descriptor.I would always do that in order to prevent any developer adding scriptlets, especially in bigger companies where you will lose overview sooner or later. The web.xml settings look like this:<jsp-config>\n  <jsp-property-group>\n    <url-pattern>*.jsp</url-pattern>\n     <scripting-invalid>true</scripting-invalid>\n  </jsp-property-group>\n</jsp-config>\n", " offers tags for conditionals, loops, sets, gets, etc. For example:<c:if test=\"${someAttribute == 'something'}\">\n   ...\n</c:if>\nJSTL works with request attributes - they are most often set in the request by a Servlet, which  to the JSP.", "I'm not sure if I get this correct.You should read something about MVC.  &  are the two most common solutions.", "You can use JSTL tags together with EL expressions to avoid intermixing Java and HTML code:<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\" %>\n<html>\n    <head>\n    </head>\n    <body>\n\n        <c:out value=\"${x + 1}\" />\n        <c:out value=\"${param.name}\" />\n        // and so on\n\n    </body>\n</html>\n", "There are also component-based frameworks, such as , that generate a lot of the HTML for you.The tags that end up in the HTML are extremely basic and there is virtually no logic that gets mixed in. The result is almost empty-like HTML pages with typical HTML elements. The downside is that there are a lot of components in the  API to learn and some things can be difficult to achieve under those constraints.", "In the MVC architectural pattern, JSPs represent the view layer. Embedding Java code in JSPs is considered a bad practice.You can use , , and  with JSP as a \"template engine\".The data provider to those tags  that you are dealing with.  2 and  as an implementation for the MVC pattern uses  \"very interesting technique to expose Beans properties to JSP\".", "Experience has shown that JSP's have some shortcomings, one of them being hard to avoid mixing markup with actual code.If you can, then consider using a specialized technology for what you need to do.  In Java EE 6 there is JSF 2.0, which provides a lot of nice features including gluing Java beans together with JSF pages through the #{bean.method(argument)} approach.", "If you simply want to avoid the drawbacks of Java coding in JSP you can do so even with scriplets. Just follow some discipline to have minimal Java in JSP and almost no calculation and logic in the JSP page.<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<% // Instantiate a JSP controller\nMyController clr = new MyController(request, response);\n\n// Process action, if any\nclr.process(request);\n\n// Process page forwarding, if necessary\n\n// Do all variable assignment here\nString showMe = clr.getShowMe();%>\n\n<html>\n    <head>\n    </head>\n    <body>\n        <form name=\"frm1\">\n            <p><%= showMe %>\n            <p><% for(String str : clr.listOfStrings()) { %>\n            <p><%= str %><% } %>\n\n            // And so on   \n        </form>\n    </body>\n</html>\n", "Note that EL is  (runtime exceptions and refactoring).Wicket may be evil too (performance and toilsome for small applications or simple view tier).This must be added to the web application's web.xml<taglib>\n    <taglib-uri>/java2s</taglib-uri>\n    <taglib-location>/WEB-INF/java2s.tld</taglib-location>\n</taglib>\nCreate file  in the <!DOCTYPE taglib\n  PUBLIC \"-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN\"\n   \"http://java.sun.com/dtd/web-jsptaglibrary_1_2.dtd\">\n\n<!-- A tab library descriptor -->\n<taglib xmlns=\"http://java.sun.com/JSP/TagLibraryDescriptor\">\n    <tlib-version>1.0</tlib-version>\n    <jsp-version>1.2</jsp-version>\n    <short-name>Java2s Simple Tags</short-name>\n\n    <!-- This tag manipulates its body content by converting it to upper case\n    -->\n    <tag>\n        <name>bodyContentTag</name>\n        <tag-class>com.java2s.BodyContentTag</tag-class>\n        <body-content>JSP</body-content>\n        <attribute>\n          <name>howMany</name>\n        </attribute>\n    </tag>\n</taglib>\nCompile the following code into package com.java2s;\n\nimport java.io.IOException;\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.tagext.BodyContent;\nimport javax.servlet.jsp.tagext.BodyTagSupport;\n\npublic class BodyContentTag extends BodyTagSupport{\n    private int iterations, howMany;\n\n    public void setHowMany(int i){\n        this.howMany = i;\n    }\n\n    public void setBodyContent(BodyContent bc){\n        super.setBodyContent(bc);\n        System.out.println(\"BodyContent = '\" + bc.getString() + \"'\");\n    }\n\n    public int doAfterBody(){\n        try{\n            BodyContent bodyContent = super.getBodyContent();\n            String bodyString  = bodyContent.getString();\n            JspWriter out = bodyContent.getEnclosingWriter();\n\n            if ( iterations % 2 == 0 )\n                out.print(bodyString.toLowerCase());\n            else\n                out.print(bodyString.toUpperCase());\n\n            iterations++;\n            bodyContent.clear(); // empty buffer for next evaluation\n        }\n        catch (IOException e) {\n            System.out.println(\"Error in BodyContentTag.doAfterBody()\" + e.getMessage());\n            e.printStackTrace();\n        } // End of catch\n\n        int retValue = SKIP_BODY;\n\n        if ( iterations < howMany )\n            retValue = EVAL_BODY_AGAIN;\n\n        return retValue;\n    }\n}\nStart the server and load the bodyContent.jsp file in the browser:<%@ taglib uri=\"/java2s\" prefix=\"java2s\" %>\n<html>\n    <head>\n        <title>A custom tag: body content</title>\n    </head>\n    <body>\n        This page uses a custom tag manipulates its body content.Here is its output:\n        <ol>\n            <java2s:bodyContentTag howMany=\"3\">\n            <li>java2s.com</li>\n            </java2s:bodyContentTag>\n        </ol>\n    </body>\n</html>\n", " is also an alternative which completely separates Java from HTML, so a designer and programmer can work together and on different sets of code with little understanding of each other.Look at Wicket.", "You raised a good question and although you got good answers, I would suggest that you get rid of JSP. It is outdated technology which eventually will die. Use a modern approach, like template engines. You will have very clear separation of business and presentation layers, and certainly no Java code in templates, so you can generate templates directly from web presentation editing software, in most cases leveraging WYSIWYG.And certainly stay away of filters and pre and post processing, otherwise you may deal with support/debugging difficulties since you always do not know where the variable gets the value.", "No matter how much you try to avoid, when you work with other developers, some of them will still prefer scriptlet and then insert the evil code into the project. Therefore, setting up the project at the first sign is very important if you really want to reduce the scriptlet code. There are several techniques to get over this (including several frameworks that other mentioned). However, if you prefer the pure JSP way, then use the JSTL tag file. The nice thing about this is you can also set up master pages for your project, so the other pages can inherit the master pages<%@tag description=\"Overall Page template\" pageEncoding=\"UTF-8\"%>\n\n<%@attribute name=\"title\" fragment=\"true\" %>\n\n<html>\n  <head>\n    <title>  \n       <jsp:invoke fragment=\"title\"></jsp:invoke>\n    </title>\n\n  </head>\n  <body>\n    <div id=\"page-header\">\n       ....\n    </div>\n    <div id=\"page-body\">\n      <jsp:doBody/>\n    </div>\n    <div id=\"page-footer\">\n      .....\n    </div>\n  </body>\n</html>\nOn this mater page, I created a fragment called \"title\", so that in the child page, I could insert more codes into this place of the master page. Also, the tag <jsp:doBody/> will be replaced by the content of the child page <%@ taglib prefix=\"t\" tagdir=\"/WEB-INF/tags\" %>\n\n<t:base>\n    <jsp:attribute name=\"title\"> \n        <bean:message key=\"hello.world\" />\n    </jsp:attribute>\n\n    <jsp:body>\n    [Put your content of the child here]\n    </jsp:body>   \n</t:base>\n<t:base> is used to specify the master page you want to use (which is base.tag at this moment). All the content inside the tag <jsp:body> here will replace the <jsp:doBody/> on your master page. Your child page can also include any tag lib and you can use it normally like the other mentioned. However, if you use any scriptlet code here (<%= request.getParameter(\"name\") %> ...) and try to run this page, you will get a JasperException because  Scripting elements ( &lt;%!, &lt;jsp:declaration, &lt;%=, &lt;jsp:expression, &lt;%, &lt;jsp:scriptlet ) are disallowed here. Therefore, there is no way other people can include the evil code into the jsp fileYou can easily call the child.jsp file from your controller. This also works nice with the struts framework", "In order to avoid Java code in JSP files, Java now provides tag libraries, like JSTL.Also, Java has come up with  into which you can write all programming structures in the form of tags.", "Use JSTL tag libraries in JSP. That will work perfectly.", "Just use the JSTL tag and EL expression.", ", I suggest GWT. Theoretically, you can avoid all the JavaScript and HTML elements, because Google Toolkit transforms all the client and shared code to JavaScript. You won't have problem with them, so you have a webservice without coding in any other languages. You can even use some default CSS from somewhere as it is given by extensions (smartGWT or ). You don't need to learn dozens of annotations.Of course, if you want, you can hack yourself into the depths of the code and inject JavaScript and enrich your HTML page, but really you can avoid it if you want, and the result will be good as it was written in any other frameworks. I it's say worth a try, and the basic GWT is well-documented.And of course many fellow programmers hereby described or recommended several other solutions. GWT is for people who really don't want to deal with the web part or to minimize it.", "A neat idea from the Python world is ; TAL was introduced by Zope (therefore a.k.a. \"Zope Page Templates\", ZPT) and is a standard, with implementations in PHP, XSLT and Java as well (I have used the Python/Zope and PHP incarnations). In this class of templating languages, one of the above examples could look like this:<table>\n    <tr tal:repeat=\"product products\">\n        <td tal:content=\"product/name\">Example product</td>\n        <td tal:content=\"product/description\">A nice description</td>\n        <td tal:content=\"product/price\">1.23</td>\n    </tr>\n</table>\nThe code looks like ordinary HTML (or XHTML) plus some special attributes in an XML namespace; it can be viewed with a browser and safely be tweaked by a designer.There is support for macros and for  as well:<h1 i18n:translate=\"\">Our special offers</h1>\n<table>\n    <tr tal:repeat=\"product products\">\n        <td tal:content=\"product/name\"\n            i18n:translate=\"\">Example product</td>\n        <td tal:content=\"product/description\"\n            i18n:translate=\"\">A nice description</td>\n        <td tal:content=\"product/price\">1.23</td>\n    </tr>\n</table>\nIf translations of the content are available, they are used.I don't know very much about the , though.", "Using scriptlets in JSPs is not a good practice.Instead, you can use:Please refer to: ", "Sure, replace <%! counter++; %> by an event producer-consumer architecture, where the business layer is notified about the need to increment the counter, it reacts accordingly, and notifies the presenters so that they update the views. A number of database transactions are involved, since in future we will need to know the new and old value of the counter, who has incremented it and with what purpose in mind. Obviously serialization is involved, since the layers are entirely decoupled. You will be able to increment your counter over RMI, IIOP, SOAP. But only HTML is required, which you don't implement, since it is such a mundane case. Your new goal is to reach 250 increments a second on your new shiny E7, 64GB RAM server.I have more than 20 years in programming, most of the projects fail before the sextet: Reusability Replaceability OO-ability Debuggability Testability Maintainability is even needed. Other projects, run by people who only cared about functionality, were extremely successful.  Also, stiff object structure, implemented too early in the project, makes the code unable to be adapted to the drastic changes in the specifications (aka agile).So I consider as procrastination the activity of defining \"layers\" or redundant data structures either early in the project or when not specifically required. \u00a0", ".JSP was initially created for the purpose of the decoupling the business logic and the design logic, following the MVC pattern. So JSP is technically all Java code during runtime.But to answer the question,  are usually used for applying logic (removing Java code) to JSP pages.", "You can use tab library tags like  in addition to Expression Language (). But EL does not work well with JSP. So it's is probably better to drop JSP completely and use . is the first non JSP page declaration language designed for  which provided a simpler and more powerful programming model to JSF developers as compare to JSP. It resolves different issues occurs in JSP for web applications development.", "If we use the following things in a Java web application, Java code can be eliminated from the foreground of the JSP file.Use the MVC architecture for a web applicationUse JSP Tagsa. Standard Tagsb. Custom Tags", "Using Scriptlets is a very old way and  recommended. If you want directly output something in your JSP pages, just use   along with .There are also other options, such as using a templating engine such as Velocity, Freemarker, Thymeleaf, etc. But using plain JSP with EL and JSTL serves my purpose most of the time and it also seems the simplest for a beginner.Also, take note that it is not a best practice to do business logic in the view layer. You should perform your business logic in the  layer,\nand pass the output result to your views through a .", "Use a Backbone.js or AngularJS-like JavaScript framework for UI design\nand fetch the data using a REST API. This will remove the Java dependency from the UI completely.", "Nothing of that is used anymore, my friend. My advice is to decouple the view (CSS, HTML, JavaScript, etc.) from the server.In my case, I do my systems handling the view with Angular and any data needed is brought from the server using REST services.Believe me, this will change the way you design.", "JSP 2.0 has a feature called , and you can write tags without external Java code and tld. You need to create a .tag file and put it in WEB-INF\\tags. You can even create a directory structure to package your tags.For example:/WEB-INF/tags/html/label.tag\n\n<%@tag description=\"Rensders a label with required css class\" pageEncoding=\"UTF-8\"%>\n<%@attribute name=\"name\" required=\"true\" description=\"The label\"%>\n\n<label class=\"control-label control-default\"  id=\"${name}Label\">${name}</label>\nUse it like<%@ taglib prefix=\"h\" tagdir=\"/WEB-INF/tags/html\"%>\n<h:label  name=\"customer name\" />\nAlso, you can read the tag body easily:/WEB-INF/tags/html/bold.tag\n<%@tag description=\"Bold tag\" pageEncoding=\"UTF-8\"%>\n<b>\n  <jsp:doBody/>\n</b>\nUse it:<%@ taglib prefix=\"h\" tagdir=\"/WEB-INF/tags/bold\"%>\n<h:bold>Make me bold</h:bold>\nThe samples are very simple, but you can do lots of complicated tasks here. Please consider you can use other tags (for example: JSTL which has controlling tags like if/forEcah/chosen text manipulation like format/contains/uppercase or even SQL tags select/update), pass all kind parameters, for example Hashmap, access session, request, ... in your tag file too. are so easy developed as you did not need to restart the server when changing them, like JSP files. This makes them easy for development.Even if you use a framework like Struts 2, which have lots of good tags, you may find that having your own tags can reduce your code a lot. You can pass your tag parameters to struts and this way customize your framework tag.You can use tags not only to avoid Java, but also minimize your HTML codes. I myself try to review HTML code and build tags a lot as soon as I see code duplicates start in my pages.(Even if you end up using Java in your JSP code, which I hope not, you can encapsulate that code in a tag.)", "The good thing about this approach is that your code is also HTML like\n  code!", "As many answers says, use JSTL or create your own custom tags.  is a good explanation about creating custom tags.", "By using JSTL tags together with EL expressions, you can avoid this. Put the following things in your JSP page:<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\" %>\n"]},
{"question": "How to validate an email address using a regular expression?", "details": "Over the years I have slowly developed a  that validates MOST email addresses correctly, assuming they don't use an IP address as the server part.I use it in several PHP programs, and it works most of the time.  However, from time to time I get contacted by someone that is having trouble with a site that uses it, and I end up having to make some adjustment (most recently I realized that I wasn't allowing 4-character TLDs).I've seen several solutions that use functions that use several shorter expressions, but I'd rather have one long complex expression in a simple function instead of several short expression in a more complex function.", "answers": ["Over the years I have slowly developed a  that validates MOST email addresses correctly, assuming they don't use an IP address as the server part.I use it in several PHP programs, and it works most of the time.  However, from time to time I get contacted by someone that is having trouble with a site that uses it, and I end up having to make some adjustment (most recently I realized that I wasn't allowing 4-character TLDs).I've seen several solutions that use functions that use several shorter expressions, but I'd rather have one long complex expression in a simple function instead of several short expression in a more complex function.", "The  is inefficient and obscure because of its length.  Fortunately, RFC 822 was superseded twice and the current specification for email addresses is .  RFC 5322 leads to a regex that can be understood if studied for a few minutes and is efficient enough for actual use.One RFC 5322 compliant regex can be found at the top of the page at  but uses the IP address pattern that is floating around the internet with a bug that allows 00 for any of the unsigned byte decimal values in a dot-delimited address, which is illegal.  The rest of it appears to be consistent with the RFC 5322 grammar and passes several tests using grep -Po, including cases domain names, IP addresses, bad ones, and account names with and without quotes.Correcting the 00 bug in the IP pattern, we obtain a working and fairly fast regex.  (Scrape the rendered version, not the markdown, for actual code.)(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])or:(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\nHere is  of  for above regexp which is more clear than regexp itself\nThe more sophisticated patterns in Perl and PCRE (regex library used e.g. in PHP) can . Python and C# can do that too, but they use a different syntax from those first two. However, if you are forced to use one of the many less powerful pattern-matching languages, then it\u2019s best to use a real parser.It's also important to understand that validating it per the RFC tells you absolutely nothing about whether that address actually exists at the supplied domain, or whether the person entering the address is its true owner. People sign others up to mailing lists this way all the time. Fixing that requires a fancier kind of validation that involves sending that address a message that includes a confirmation token meant to be entered on the same web page as was the address. Confirmation tokens are the only way to know you got the address of the person entering it. This is why most mailing lists now use that mechanism to confirm sign-ups. After all, anybody can put down president@whitehouse.gov, and that will even parse as legal, but it isn't likely to be the person at the other end.For PHP, you should  use the pattern given in  from which I quote:There is some danger that common usage and widespread sloppy coding will establish a de facto standard for e-mail addresses that is more restrictive than the recorded formal standard.That is no better than all the other non-RFC patterns. It isn\u2019t even smart enough to handle even , let alone RFC 5322. , however, is.If you want to get fancy and pedantic, . A regular expression can only act as a rudimentary filter. The problem with regular expressions is that telling someone that their perfectly valid e-mail address is invalid (a false positive) because your regular expression can't handle it is just rude and impolite from the user's perspective. A state engine for the purpose can both validate and even correct e-mail addresses that would otherwise be considered invalid as it disassembles the e-mail address according to each RFC. This allows for a potentially more pleasing experience, likeThe specified e-mail address 'myemail@address,com' is invalid. Did you mean 'myemail@address.com'?See also , including the comments. Or .", "You should not use regular expressions to validate email addresses.Instead, use the  class, like this:try {\n    address = new MailAddress(address).Address;\n} catch(FormatException) {\n    // address is invalid\n}\nThe MailAddress class uses a BNF parser to validate the address in full accordance with RFC822.If you plan to use the MailAddress to validate the e-mail address, be aware that this approach accepts the display name part of the e-mail address as well, and that may not be exactly what you want to achieve. For example, it accepts these strings as valid e-mail addresses:\n\n\n\n\nIn some of these cases, only the last part of the strings is parsed as the address; the rest before that is the display name. To get a plain e-mail address without any display name, you can check the normalized address against your original string.bool isValid = false;\n\ntry\n{\n    MailAddress address = new MailAddress(emailAddress);\n    isValid = (address.Address == emailAddress);\n    // or\n    // isValid = string.IsNullOrEmpty(address.DisplayName);\n}\ncatch (FormatException)\n{\n    // address is invalid\n}\nFurthermore, an address having a dot at the end, like user@company. is accepted by MailAddress as well.If you really want to use a regex, :        ", "This question is asked a lot, but I think you should step back and ask yourself  you want to validate email adresses syntactically? What is the benefit really?\n\n\nIf you want to validate that an email is correct, you have no choice than to send an confirmation email and have the user reply to that. In many cases you will  to send a confirmation mail anyway for security reasons or for ethical reasons (so you cannot e.g. sign someone up to a service against their will).", "It all depends on how accurate you want to be.  For my purposes, where I'm just trying to keep out things like bob @ aol.com (spaces in emails) or steve (no domain at all) or mary@aolcom (no period before .com), I use/^\\S+@\\S+\\.\\S+$/\nSure, it will match things that aren't valid email addresses, but it's a matter of getting common simple errors.There are any number of changes that can be made to that regex (and some are in the comments for this answer), but it's simple, and easy to understand, and is a fine first attempt.", "It depends on what you mean by best:\nIf you're talking about catching every valid email address use the following:(?:(?:\\r\\n)?[ \\t])*(?:(?:(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t]\n)+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\n\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(\n?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \n\\t]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\0\n31]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\\n](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+\n(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:\n(?:\\r\\n)?[ \\t])*))*|(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z\n|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)\n?[ \\t])*)*\\<(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\\nr\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[\n \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)\n?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t]\n)*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[\n \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*\n)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t]\n)+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)\n*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+\n|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\n\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\n\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t\n]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031\n]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](\n?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?\n:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?\n:\\r\\n)?[ \\t])*))*\\>(?:(?:\\r\\n)?[ \\t])*)|(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?\n:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?\n[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)*:(?:(?:\\r\\n)?[ \\t])*(?:(?:(?:[^()<>@,;:\\\\\".\\[\\] \n\\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\n\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>\n@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"\n(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t]\n)*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\n\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?\n:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\n\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:[^()<>@,;:\\\\\".\\[\\] \\000-\n\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(\n?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)*\\<(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()<>@,;\n:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([\n^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\"\n.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\\n]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\\n[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\\nr\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \n\\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]\n|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()<>@,;:\\\\\".\\[\\] \\0\n00-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\\n.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,\n;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?\n:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*\n(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\n\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[\n^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]\n]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\>(?:(?:\\r\\n)?[ \\t])*)(?:,\\s*(\n?:(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\n\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(\n?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\n\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t\n])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t\n])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?\n:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\n\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:\n[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\\n]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)*\\<(?:(?:\\r\\n)\n?[ \\t])*(?:@(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"\n()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)\n?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>\n@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[\n \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,\n;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t]\n)*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\n\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?\n(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\n\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\n\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\n\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])\n*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])\n+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\\n.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z\n|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\>(?:(\n?:\\r\\n)?[ \\t])*))*)?;\\s*)\n()\nIf you're looking for something simpler but that will catch most valid email addresses try something like: \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\nEDIT:\nFrom the link:This regular expression will only validate addresses that have had any comments stripped and replaced with whitespace (this is done by the module).", "[UPDATED] I've collated everything I know about email address validation here: , which now not only validates but also diagnoses problems with email addresses. I agree with many of the comments here that validation is only part of the answer; see my essay at .is_email() remains, as far as I know, the only validator that will tell you definitively whether a given string is a valid email address or not. I've upload a new version at I collated test cases from Cal Henderson, Dave Child, Phil Haack, Doug Lovell, RFC5322 and RFC 3696. 275 test addresses in all. I ran all these tests against all the free validators I could find.I'll try to keep this page up-to-date as people enhance their validators. Thanks to Cal, Michael, Dave, Paul and Phil for their help and co-operation in compiling these tests and constructive criticism of .People should be aware of the  in particular. Three of the canonical examples are in fact invalid addresses. And the maximum length of an address is 254 or 256 characters,  320.", "Per :^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\nContext:A  is a string that matches the ABNF production [\u2026]./^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n", "It\u2019s easy in Perl 5.10 or newer:/(?(DEFINE)\n   (?<address>         (?&mailbox) | (?&group))\n   (?<mailbox>         (?&name_addr) | (?&addr_spec))\n   (?<name_addr>       (?&display_name)? (?&angle_addr))\n   (?<angle_addr>      (?&CFWS)? < (?&addr_spec) > (?&CFWS)?)\n   (?<group>           (?&display_name) : (?:(?&mailbox_list) | (?&CFWS))? ;\n                                          (?&CFWS)?)\n   (?<display_name>    (?&phrase))\n   (?<mailbox_list>    (?&mailbox) (?: , (?&mailbox))*)\n\n   (?<addr_spec>       (?&local_part) \\@ (?&domain))\n   (?<local_part>      (?&dot_atom) | (?&quoted_string))\n   (?<domain>          (?&dot_atom) | (?&domain_literal))\n   (?<domain_literal>  (?&CFWS)? \\[ (?: (?&FWS)? (?&dcontent))* (?&FWS)?\n                                 \\] (?&CFWS)?)\n   (?<dcontent>        (?&dtext) | (?&quoted_pair))\n   (?<dtext>           (?&NO_WS_CTL) | [\\x21-\\x5a\\x5e-\\x7e])\n\n   (?<atext>           (?&ALPHA) | (?&DIGIT) | [!#\\$%&'*+-/=?^_`{|}~])\n   (?<atom>            (?&CFWS)? (?&atext)+ (?&CFWS)?)\n   (?<dot_atom>        (?&CFWS)? (?&dot_atom_text) (?&CFWS)?)\n   (?<dot_atom_text>   (?&atext)+ (?: \\. (?&atext)+)*)\n\n   (?<text>            [\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])\n   (?<quoted_pair>     \\\\ (?&text))\n\n   (?<qtext>           (?&NO_WS_CTL) | [\\x21\\x23-\\x5b\\x5d-\\x7e])\n   (?<qcontent>        (?&qtext) | (?&quoted_pair))\n   (?<quoted_string>   (?&CFWS)? (?&DQUOTE) (?:(?&FWS)? (?&qcontent))*\n                        (?&FWS)? (?&DQUOTE) (?&CFWS)?)\n\n   (?<word>            (?&atom) | (?&quoted_string))\n   (?<phrase>          (?&word)+)\n\n   # Folding white space\n   (?<FWS>             (?: (?&WSP)* (?&CRLF))? (?&WSP)+)\n   (?<ctext>           (?&NO_WS_CTL) | [\\x21-\\x27\\x2a-\\x5b\\x5d-\\x7e])\n   (?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment))\n   (?<comment>         \\( (?: (?&FWS)? (?&ccontent))* (?&FWS)? \\) )\n   (?<CFWS>            (?: (?&FWS)? (?&comment))*\n                       (?: (?:(?&FWS)? (?&comment)) | (?&FWS)))\n\n   # No whitespace control\n   (?<NO_WS_CTL>       [\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f])\n\n   (?<ALPHA>           [A-Za-z])\n   (?<DIGIT>           [0-9])\n   (?<CRLF>            \\x0d \\x0a)\n   (?<DQUOTE>          \")\n   (?<WSP>             [\\x20\\x09])\n )\n\n (?&address)/x\n", "I use^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\nWhich is the one used in ASP.NET by the RegularExpressionValidator.", "Don't know about best, but  is at least correct, as long as the addresses have their comments stripped and replaced with whitespace.Seriously. You should use an already written library for validating emails. The best way is probably to just send a verification e-mail to that address.", "Use the following regex for input validation:([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\")@[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)+Addresses matched by this regex:\n\n\nThe second constraint is a restriction on RFC 5321/5322.Using a regular expression that recognizes email addresses could be useful in various situations: for example to scan for email addresses in a document, to validate user input, or as an integrity constraint on a data repository.It should however be noted that if you want to find out if the address actually refers to an existing mailbox, there's no substitute for sending a message to the address. If you only want to check if an address is grammatically correct then you could use a regular expression, but note that \"\"@[] is a grammatically correct email address that certainly doesn't refer to an existing mailbox.The syntax of email addresses has been defined in various , most notably  and . RFC 822 should be seen as the \"original\" standard and RFC 5322 as the latest standard. The syntax defined in RFC 822 is the most lenient and subsequent standards have restricted the syntax further and further, where newer systems or services should recognize obsolete syntax, but never produce it.In this answer I\u2019ll take \u201cemail address\u201d to mean addr-spec as defined in the RFCs (i.e. jdoe@example.org, but not \"John Doe\"<jdoe@example.org>, nor some-group:jdoe@example.org,mrx@exampel.org;).There's one problem with translating the RFC syntaxes into regexes: the syntaxes are not regular! This is because they allow for optional comments in email addresses that can be infinitely nested, while infinite nesting can't be described by a regular expression. To scan for or validate addresses containing comments you need a parser or more powerful expressions. (Note that languages like Perl have constructs to describe context free grammars in a regex-like way.) In this answer I'll disregard comments and only consider proper regular expressions.The RFCs define syntaxes for email messages, not for email addresses as such. Addresses may appear in various header fields and this is where they are primarily defined. When they appear in header fields addresses may contain (between lexical tokens) whitespace, comments and even linebreaks. Semantically this has no significance however. By removing this whitespace, etc. from an address you get a semantically equivalent . Thus, the canonical representation of first. last (comment) @   [3.5.7.9] is first.last@[3.5.7.9].Different syntaxes should be used for different purposes. If you want to scan for email addresses in a (possibly very old) document it may be a good idea to use the syntax as defined in RFC 822. On the other hand, if you want to validate user input you may want to use the syntax as defined in RFC 5322, probably only accepting canonical representations. You should decide which syntax applies to your specific case.I use POSIX \"extended\" regular expressions in this answer, assuming an ASCII compatible character set.I arrived at the following regular expression. I invite everyone to try and break it. If you find any false positives or false negatives, please post them in a comment and I'll try to fix the expression as soon as possible.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*\")(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*\"))*@([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*])(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*]))*I believe it's fully complient with RFC 822 including the . It only recognizes email addresses in their canonical form. For a regex that recognizes (folding) whitespace see the derivation below.The derivation shows how I arrived at the expression. I list all the relevant grammar rules from the RFC exactly as they appear, followed by the corresponding regex. Where an erratum has been published I give a separate expression for the corrected grammar rule (marked \"erratum\") and use the updated version as a subexpression in subsequent regular expressions.As stated in paragraph 3.1.4. of RFC 822 optional linear white space may be inserted between lexical tokens. Where applicable I've expanded the expressions to accommodate this rule and marked the result with \"opt-lwsp\".CHAR        =  <any ASCII character>\n            =~ .\n\nCTL         =  <any ASCII control character and DEL>\n            =~ [\\x00-\\x1F\\x7F]\n\nCR          =  <ASCII CR, carriage return>\n            =~ \\r\n\nLF          =  <ASCII LF, linefeed>\n            =~ \\n\n\nSPACE       =  <ASCII SP, space>\n            =~  \n\nHTAB        =  <ASCII HT, horizontal-tab>\n            =~ \\t\n\n<\">         =  <ASCII quote mark>\n            =~ \"\n\nCRLF        =  CR LF\n            =~ \\r\\n\n\nLWSP-char   =  SPACE / HTAB\n            =~ [ \\t]\n\nlinear-white-space =  1*([CRLF] LWSP-char)\n                   =~ ((\\r\\n)?[ \\t])+\n\nspecials    =  \"(\" / \")\" / \"<\" / \">\" / \"@\" /  \",\" / \";\" / \":\" / \"\\\" / <\"> /  \".\" / \"[\" / \"]\"\n            =~ [][()<>@,;:\\\\\".]\n\nquoted-pair =  \"\\\" CHAR\n            =~ \\\\.\n\nqtext       =  <any CHAR excepting <\">, \"\\\" & CR, and including linear-white-space>\n            =~ [^\"\\\\\\r]|((\\r\\n)?[ \\t])+\n\ndtext       =  <any CHAR excluding \"[\", \"]\", \"\\\" & CR, & including linear-white-space>\n            =~ [^][\\\\\\r]|((\\r\\n)?[ \\t])+\n\nquoted-string  =  <\"> *(qtext|quoted-pair) <\">\n               =~ \"([^\"\\\\\\r]|((\\r\\n)?[ \\t])|\\\\.)*\"\n(erratum)      =~ \"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\"\n\ndomain-literal =  \"[\" *(dtext|quoted-pair) \"]\"\n               =~ \\[([^][\\\\\\r]|((\\r\\n)?[ \\t])|\\\\.)*]\n(erratum)      =~ \\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]\n\natom        =  1*<any CHAR except specials, SPACE and CTLs>\n            =~ [^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+\n\nword        =  atom / quoted-string\n            =~ [^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\"\n\ndomain-ref  =  atom\n\nsub-domain  =  domain-ref / domain-literal\n            =~ [^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]\n\nlocal-part  =  word *(\".\" word)\n            =~ ([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\")(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\"))*\n(opt-lwsp)  =~ ([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\")(((\\r\\n)?[ \\t])*\\.((\\r\\n)?[ \\t])*([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\"))*\n\ndomain      =  sub-domain *(\".\" sub-domain)\n            =~ ([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*])(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]))*\n(opt-lwsp)  =~ ([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*])(((\\r\\n)?[ \\t])*\\.((\\r\\n)?[ \\t])*([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]))*\n\naddr-spec   =  local-part \"@\" domain\n            =~ ([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\")(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\"))*@([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*])(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]))*\n(opt-lwsp)  =~ ([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\")((\\r\\n)?[ \\t])*(\\.((\\r\\n)?[ \\t])*([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\")((\\r\\n)?[ \\t])*)*@((\\r\\n)?[ \\t])*([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*])(((\\r\\n)?[ \\t])*\\.((\\r\\n)?[ \\t])*([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]))*\n(canonical) =~ ([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*\")(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*\"))*@([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*])(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*]))*\nI arrived at the following regular expression. I invite everyone to try and break it. If you find any false positives or false negatives, please post them in a comment and I'll try to fix the expression as soon as possible.([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\")@([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\\[[\\t -Z^-~]*])I believe it's fully complient with RFC 5322 including the . It only recognizes email addresses in their canonical form. For a regex that recognizes (folding) whitespace see the derivation below.The derivation shows how I arrived at the expression. I list all the relevant grammar rules from the RFC exactly as they appear, followed by the corresponding regex. For rules that include semantically irrelevant (folding) whitespace, I give a separate regex marked \"(normalized)\" that doesn't accept this whitespace.I ignored all the \"obs-\" rules from the RFC. This means that the regexes only match email addresses that are strictly RFC 5322 compliant. If you have to match \"old\" addresses (as the looser grammar including the \"obs-\" rules does), you can use one of the RFC 822 regexes from the previous paragraph.VCHAR           =   %x21-7E\n                =~  [!-~]\n\nALPHA           =   %x41-5A / %x61-7A\n                =~  [A-Za-z]\n\nDIGIT           =   %x30-39\n                =~  [0-9]\n\nHTAB            =   %x09\n                =~  \\t\n\nCR              =   %x0D\n                =~  \\r\n\nLF              =   %x0A\n                =~  \\n\n\nSP              =   %x20\n                =~  \n\nDQUOTE          =   %x22\n                =~  \"\n\nCRLF            =   CR LF\n                =~  \\r\\n\n\nWSP             =   SP / HTAB\n                =~  [\\t ]\n\nquoted-pair     =   \"\\\" (VCHAR / WSP)\n                =~  \\\\[\\t -~]\n\nFWS             =   ([*WSP CRLF] 1*WSP)\n                =~  ([\\t ]*\\r\\n)?[\\t ]+\n\nctext           =   %d33-39 / %d42-91 / %d93-126\n                =~  []!-'*-[^-~]\n\n(\"comment\" is left out in the regex)\nccontent        =   ctext / quoted-pair / comment\n                =~  []!-'*-[^-~]|(\\\\[\\t -~])\n\n(not regular)\ncomment         =   \"(\" *([FWS] ccontent) [FWS] \")\"\n\n(is equivalent to FWS when leaving out comments)\nCFWS            =   (1*([FWS] comment) [FWS]) / FWS\n                =~  ([\\t ]*\\r\\n)?[\\t ]+\n\natext           =   ALPHA / DIGIT / \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \"/\" / \"=\" / \"?\" / \"^\" / \"_\" / \"`\" / \"{\" / \"|\" / \"}\" / \"~\"\n                =~  [-!#-'*+/-9=?A-Z^-~]\n\ndot-atom-text   =   1*atext *(\".\" 1*atext)\n                =~  [-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*\n\ndot-atom        =   [CFWS] dot-atom-text [CFWS]\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?[-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  [-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*\n\nqtext           =   %d33 / %d35-91 / %d93-126\n                =~  []!#-[^-~]\n\nqcontent        =   qtext / quoted-pair\n                =~  []!#-[^-~]|(\\\\[\\t -~])\n\n(erratum)\nquoted-string   =   [CFWS] DQUOTE ((1*([FWS] qcontent) [FWS]) / FWS) DQUOTE [CFWS]\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?\"(((([\\t ]*\\r\\n)?[\\t ]+)?([]!#-[^-~]|(\\\\[\\t -~])))+(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?)\"(([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  \"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\"\n\ndtext           =   %d33-90 / %d94-126\n                =~  [!-Z^-~]\n\ndomain-literal  =   [CFWS] \"[\" *([FWS] dtext) [FWS] \"]\" [CFWS]\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?\\[((([\\t ]*\\r\\n)?[\\t ]+)?[!-Z^-~])*(([\\t ]*\\r\\n)?[\\t ]+)?](([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  \\[[\\t -Z^-~]*]\n\nlocal-part      =   dot-atom / quoted-string\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?[-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?\"(((([\\t ]*\\r\\n)?[\\t ]+)?([]!#-[^-~]|(\\\\[\\t -~])))+(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?)\"(([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  [-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\"\n\ndomain          =   dot-atom / domain-literal\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?[-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?\\[((([\\t ]*\\r\\n)?[\\t ]+)?[!-Z^-~])*(([\\t ]*\\r\\n)?[\\t ]+)?](([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  [-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\\[[\\t -Z^-~]*]\n\naddr-spec       =   local-part \"@\" domain\n                =~  ((([\\t ]*\\r\\n)?[\\t ]+)?[-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?\"(((([\\t ]*\\r\\n)?[\\t ]+)?([]!#-[^-~]|(\\\\[\\t -~])))+(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?)\"(([\\t ]*\\r\\n)?[\\t ]+)?)@((([\\t ]*\\r\\n)?[\\t ]+)?[-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?\\[((([\\t ]*\\r\\n)?[\\t ]+)?[!-Z^-~])*(([\\t ]*\\r\\n)?[\\t ]+)?](([\\t ]*\\r\\n)?[\\t ]+)?)\n(normalized)    =~  ([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\")@([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\\[[\\t -Z^-~]*])\nNote that some sources (notably ) claim that RFC 5322 is too strict on the local part (i.e. the part before the @-sign). This is because \"..\", \"a..b\" and \"a.\" are  valid dot-atoms, while they may be used as mailbox names. The RFC, however,  allow for local parts like these, except that they have to be quoted. So instead of a..b@example.net you should write \"a..b\"@example.net, which is semantically equivalent.SMTP (as defined in ) further restricts the set of valid email addresses (or actually: mailbox names). It seems reasonable to impose this stricter grammar, so that the matched email address can actually be used to send an email.RFC 5321 basically leaves alone the \"local\" part (i.e. the part before the @-sign), but is stricter on the domain part (i.e. the part after the @-sign). It allows only host names in place of dot-atoms and address literals in place of domain literals.The grammar presented in RFC 5321 is too lenient when it comes to both host names and IP addresses. I took the liberty of \"correcting\" the rules in question, using  and  as guidelines. Here's the resulting regex.([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\")@([0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)*|\\[((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|IPv6:((((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)|(?!IPv6:)[0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+)])Note that depending on the use case you may not want to allow for a \"General-address-literal\" in your regex. Also note that I used a negative lookahead (?!IPv6:) in the final regex to prevent the \"General-address-literal\" part to match malformed IPv6 addresses. Some regex processors don't support negative lookahead. Remove the substring |(?!IPv6:)[0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+ from the regex if you want to take the whole \"General-address-literal\" part out.Here's the derivation:Let-dig         =   ALPHA / DIGIT\n                =~  [0-9A-Za-z]\n\nLdh-str         =   *( ALPHA / DIGIT / \"-\" ) Let-dig\n                =~  [0-9A-Za-z-]*[0-9A-Za-z]\n\n(regex is updated to make sure sub-domains are max. 63 charactes long - RFC 1034 section 3.5)\nsub-domain      =   Let-dig [Ldh-str]\n                =~  [0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?\n\nDomain          =   sub-domain *(\".\" sub-domain)\n                =~  [0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)*\n\nSnum            =   1*3DIGIT\n                =~  [0-9]{1,3}\n\n(suggested replacement for \"Snum\")\nip4-octet       =   DIGIT / %x31-39 DIGIT / \"1\" 2DIGIT / \"2\" %x30-34 DIGIT / \"25\" %x30-35\n                =~  25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9]\n\nIPv4-address-literal    =   Snum 3(\".\"  Snum)\n                        =~  [0-9]{1,3}(\\.[0-9]{1,3}){3}\n\n(suggested replacement for \"IPv4-address-literal\")\nip4-address     =   ip4-octet 3(\".\" ip4-octet)\n                =~  (25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}\n\n(suggested replacement for \"IPv6-hex\")\nip6-h16         =   \"0\" / ( (%x49-57 / %x65-70 /%x97-102) 0*3(%x48-57 / %x65-70 /%x97-102) )\n                =~  0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}\n\n(not from RFC)\nls32            =   ip6-h16 \":\" ip6-h16 / ip4-address\n                =~  (0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}\n\n(suggested replacement of \"IPv6-addr\")\nip6-address     =                                      6(ip6-h16 \":\") ls32\n                    /                             \"::\" 5(ip6-h16 \":\") ls32\n                    / [                 ip6-h16 ] \"::\" 4(ip6-h16 \":\") ls32\n                    / [ *1(ip6-h16 \":\") ip6-h16 ] \"::\" 3(ip6-h16 \":\") ls32\n                    / [ *2(ip6-h16 \":\") ip6-h16 ] \"::\" 2(ip6-h16 \":\") ls32\n                    / [ *3(ip6-h16 \":\") ip6-h16 ] \"::\"   ip6-h16 \":\"  ls32\n                    / [ *4(ip6-h16 \":\") ip6-h16 ] \"::\"                ls32\n                    / [ *5(ip6-h16 \":\") ip6-h16 ] \"::\"   ip6-h16\n                    / [ *6(ip6-h16 \":\") ip6-h16 ] \"::\"\n                =~  (((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::\n\nIPv6-address-literal    =   \"IPv6:\" ip6-address\n                        =~  IPv6:((((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)\n\nStandardized-tag        =   Ldh-str\n                        =~  [0-9A-Za-z-]*[0-9A-Za-z]\n\ndcontent        =   %d33-90 / %d94-126\n                =~  [!-Z^-~]\n\nGeneral-address-literal =   Standardized-tag \":\" 1*dcontent\n                        =~  [0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+\n\naddress-literal =   \"[\" ( IPv4-address-literal / IPv6-address-literal / General-address-literal ) \"]\"\n                =~  \\[((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|IPv6:((((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)|(?!IPv6:)[0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+)]\n\nMailbox         =   Local-part \"@\" ( Domain / address-literal )\n                =~  ([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\")@([0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)*|\\[((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|IPv6:((((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)|(?!IPv6:)[0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+)])\nA common use case is user input validation, for example on an html form. In that case it's usually reasonable to preclude address-literals and to require at least two labels in the hostname. Taking the improved RFC 5321 regex from the previous section as a basis, the resulting expression would be:([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\")@[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)+I do not recommend restricting the local part further, e.g. by precluding quoted strings, since we don't know what kind of mailbox names some hosts allow (like \"a..b\"@example.net or even \"a b\"@example.net).I also do not recommend explicitly validating against a list of literal top-level domains or even imposing length-constraints (remember how \".museum\" invalidated [a-z]{2,4}), but if you must:([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\")@([0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?\\.)*(net|org|com|info|)Make sure to keep your regex up-to-date if you decide to go down the path of explicit top-level domain validation.When only accepting host names in the domain part (after the @-sign), the regexes above accept only labels with at most 63 characters, as they should. However, they don't enforce the fact that the entire host name must be at most 253 characters long (including the dots). Although this constraint is strictly speaking still regular, it's not feasible to make a regex that incorporates this rule.Another consideration, especially when using the regexes for input validation, is feedback to the user. If a user enters an incorrect address, it would be nice to give a little more feedback than a simple \"syntactically incorrect address\". With \"vanilla\" regexes this is not possible.These two considerations could be addressed by parsing the address. The extra length constraint on host names could in some cases also be addressed by using an extra regex that checks it, and matching the address against both expressions.None of the regexes in this answer are optimized for performance. If performance is an issue, you should see if (and how) the regex of your choice can be optimized.", "The email addresses I want to validate are going to be used by an ASP.NET web application using the System.Net.Mail namespace to send emails to a list of people.So, rather than using some very complex regular expression, I just try to create a MailAddress instance from the address. The MailAddress constructor will throw an exception if the address is not formed properly. This way, I know I can at least get the email out of the door. Of course this is server-side validation, but at a minimum you need that anyway.protected void emailValidator_ServerValidate(object source, ServerValidateEventArgs args)\n{\n    try\n    {\n        var a = new MailAddress(txtEmail.Text);\n    }\n    catch (Exception ex)\n    {\n        args.IsValid = false;\n        emailValidator.ErrorMessage = \"email: \" + ex.Message;\n    }\n}\n", "There are plenty examples of this out on the net (and I think even one that fully validates the RFC - but it's tens/hundreds of lines long if memory serves). People tend to get carried away validating this sort of thing. Why not just check it has an @ and at least one . and meets some simple minimum length. It's trivial to enter a fake email and still match any valid regex anyway. I would guess that false positives are better than false negatives.", "While deciding which characters are allowed, please remember your apostrophed and hyphenated friends. I have no control over the fact that my company generates my email address using my name from the HR system. That includes the apostrophe in my last name. I can't tell you how many times I have been blocked from interacting with a website by the fact that my email address is \"invalid\". ", "This regex is from Perl's  library. I believe it to be the most accurate, it matches all 822. And, it is based on the regular expression in the O'Reilly book:Regular expression built using Jeffrey Friedl's example in\n   ().$RFC822PAT = <<'EOF';\n[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\\nxff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xf\nf\\n\\015()]*)*\\)[\\040\\t]*)*(?:(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\x\nff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\"[^\\\\\\x80-\\xff\\n\\015\n\"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015\"]*)*\")[\\040\\t]*(?:\\([^\\\\\\x80-\\\nxff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80\n-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*\n)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\n\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\\nx80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x8\n0-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\"[^\\\\\\x80-\\xff\\n\n\\015\"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015\"]*)*\")[\\040\\t]*(?:\\([^\\\\\\x\n80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\n\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\n\\t]*)*)*@[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([\n^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\n\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\\nx80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\n\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()\n]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\\nx80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\04\n0\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\\nn\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\\n015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?!\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\\n]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\\nx80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\01\n5()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*|(?:[^(\\040)<>@,;:\".\n\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]\n)|\"[^\\\\\\x80-\\xff\\n\\015\"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015\"]*)*\")[^\n()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]*(?:(?:\\([^\\\\\\x80-\\xff\\n\\0\n15()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][\n^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)|\"[^\\\\\\x80-\\xff\\\nn\\015\"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015\"]*)*\")[^()<>@,;:\".\\\\\\[\\]\\\nx80-\\xff\\000-\\010\\012-\\037]*)*<[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?\n:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\n\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:@[\\040\\t]*\n(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015\n()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()\n]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\0\n40)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\\n[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\\nxff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*\n)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80\n-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x\n80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t\n]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\n\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])\n*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x\n80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80\n-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*(?:,[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015(\n)]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\n\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*@[\\040\\t\n]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\0\n15()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015\n()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\n\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\n\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80\n-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()\n]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x\n80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\n\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\n\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\n\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff\n])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\n\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x\n80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*)*:[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015\n()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\n\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)?(?:[^\n(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\n\\037\\x80-\\xff])|\"[^\\\\\\x80-\\xff\\n\\015\"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\\nn\\015\"]*)*\")[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\n\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))\n[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\n\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\x\nff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(\n?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\\n000-\\037\\x80-\\xff])|\"[^\\\\\\x80-\\xff\\n\\015\"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\\nxff\\n\\015\"]*)*\")[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\x\nff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)\n*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*@[\\040\\t]*(?:\\([^\\\\\\x80-\\x\nff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\n\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)\n*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\\n]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\]\n)[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\n\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\x\nff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(\n?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80\n-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<\n>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x8\n0-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\n\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]\n*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)\n*\\)[\\040\\t]*)*)*>)\nEOF\n", "As you're writing in PHP I'd advice you to use the PHP build-in validation for emails.filter_var($value, FILTER_VALIDATE_EMAIL)\nIf you're running a php-version lower than 5.3.6 please be aware of this issue: If you want more information how this buid-in validation works, see here: ", " (Flickr) wrote an article called  and shows how to do proper RFC (2)822-compliant Email Address parsing.  You can also get the source code in , python and ruby which is .", "I never bother creating with my own regular expression, because chances are that someone else has already come up with a better version.  I always use  to find one to my liking.", "There is not one which is really usable.\nI discuss some issues in my , it is discussed also in In short, don't expect a single, usable regex to do a proper job. And the best regex will validate the syntax, not the validity of an e-mail (jhohn@example.com is correct but it will probably bounce...).", "One simple regular expression which would at least not reject any valid email address would be checking for something, followed by an @ sign and then something followed by a period and at least 2 somethings. It won't reject anything, but after reviewing the spec I can't find any email that would be valid and rejected.email =~ /.+@[^@]+\\.[^@]{2,}$/", "You could use the one employed by the jQuery Validation plugin:/^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i\n", "For the most comprehensive evaluation of the best regular expression for validating an email address please see this link; \"\"Here is the current top expression for reference purposes:/^([\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$/i\n", "Not to mention that non-Latin (Chinese, Arabic, Greek, Hebrew, Cyrillic and so on) domain names are to be allowed in the . Everyone has to change the email regex used, because those characters are surely not to be covered by [a-z]/i nor \\w. They will all fail.After all, the  way to validate the email address is still to actually  an email to the address in question to validate the address. If the email address is part of user authentication (register/login/etc), then you can perfectly combine it with the user activation system. I.e. send an email with a link with an unique activation key to the specified email address and only allow login when the user has activated the newly created account using the link in the email.If the purpose of the regex is just to quickly inform the user in the UI that the specified email address doesn't look like in the right format, best is still to check if it matches basically the following regex:^([^.@]+)(\\.[^.@]+)*@([^.@]+\\.)+([^.@]+)$\nSimple as that. Why on earth would you care about the characters used in the name and domain? It's the client's responsibility to enter a valid email address, not the server's. Even when the client enters a  valid email address like aa@bb.cc, this does not guarantee that it's a legit email address. No one regex can cover that.", "The  a simple regex for validating email addresses:/^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\nThis intentionally doesn't comply with . This requirement is a  of , which defines a syntax for e-mail addresses that is simultaneously too strict (before the @ character), too vague (after the @ character), and too lax (allowing comments, whitespace characters, and quoted strings in manners unfamiliar to most users) to be of practical use here.The total length could also be limited to 254 characters, per .", "For a vivid demonstration, the following monster is pretty good but still does not correctly recognize all syntactically valid email addresses: it recognizes nested comments up to four levels deep.This is a job for a parser, but even if an address is syntactically valid, it still may not be deliverable. Sometimes you have to resort to the hillbilly method of \"Hey, y'all, watch ee-us!\"// derivative of work with the following copyright and license:\n// Copyright (c) 2004 Casey West.  All rights reserved.\n// This module is free software; you can redistribute it and/or\n// modify it under the same terms as Perl itself.\n\n// see http://search.cpan.org/~cwest/Email-Address-1.80/\n\nprivate static string gibberish = @\"\n(?-xism:(?:(?-xism:(?-xism:(?-xism:(?-xism:(?-xism:(?-xism:\\\ns*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\n\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))\n|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+\n|\\s+)*[^\\x00-\\x1F\\x7F()<>\\[\\]:;@\\,.<DQ>\\s]+(?-xism:(?-xism:\\\ns*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\n\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))\n|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+\n|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(\n?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?\n:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x\n0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*<DQ>(?-xism:(?-xism:[\n^\\\\<DQ>])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D])))+<DQ>(?-xism:(?-xi\nsm:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xis\nm:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\\n]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\\ns*)+|\\s+)*))+)?(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?\n-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\n\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[\n^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*<(?-xism:(?-xi\nsm:(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^(\n)\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(\n?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))\n|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*(?-xism:[^\\x00-\\x1F\\x7F()<\n>\\[\\]:;@\\,.<DQ>\\s]+(?:\\.[^\\x00-\\x1F\\x7F()<>\\[\\]:;@\\,.<DQ>\\s]\n+)*)(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))\n|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:\n(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s\n*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((?\n:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x\n0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xi\nsm:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*\n<DQ>(?-xism:(?-xism:[^\\\\<DQ>])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]\n)))+<DQ>(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\\n]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-x\nism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+\n)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*))\\@(?-xism:(?-xism:(?-xism:(\n?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?\n-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^\n()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s\n*\\)\\s*)+|\\s+)*(?-xism:[^\\x00-\\x1F\\x7F()<>\\[\\]:;@\\,.<DQ>\\s]+(\n?:\\.[^\\x00-\\x1F\\x7F()<>\\[\\]:;@\\,.<DQ>\\s]+)*)(?-xism:(?-xism:\n\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[\n^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+)\n)|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)\n+|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:\n(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((\n?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\\nx0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*\\[(?:\\s*(?-xism:(?-x\nism:[^\\[\\]\\\\])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D])))+)*\\s*\\](?-xi\nsm:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\n\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(\n?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+\n)*\\s*\\)\\s*)+|\\s+)*)))>(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-\nxism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\\ns*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\n\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*))|(?-xism:(?-x\nism:(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^\n()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*\n(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D])\n)|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*(?-xism:[^\\x00-\\x1F\\x7F()\n<>\\[\\]:;@\\,.<DQ>\\s]+(?:\\.[^\\x00-\\x1F\\x7F()<>\\[\\]:;@\\,.<DQ>\\s\n]+)*)(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+)\n)|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism\n:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\\ns*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((\n?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\\nx0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-x\nism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)\n*<DQ>(?-xism:(?-xism:[^\\\\<DQ>])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D\n])))+<DQ>(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\n\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-\nxism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)\n+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*))\\@(?-xism:(?-xism:(?-xism:\n(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(\n?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[\n^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\\ns*\\)\\s*)+|\\s+)*(?-xism:[^\\x00-\\x1F\\x7F()<>\\[\\]:;@\\,.<DQ>\\s]+\n(?:\\.[^\\x00-\\x1F\\x7F()<>\\[\\]:;@\\,.<DQ>\\s]+)*)(?-xism:(?-xism\n:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:\n[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+\n))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*\n)+|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism\n:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\(\n(?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\n\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*\\[(?:\\s*(?-xism:(?-\nxism:[^\\[\\]\\\\])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D])))+)*\\s*\\](?-x\nism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism\n:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:\n(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))\n+)*\\s*\\)\\s*)+|\\s+)*))))(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?\n>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\n\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0\nD]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)*)\"\n  .Replace(\"<DQ>\", \"\\\"\")\n  .Replace(\"\\t\", \"\")\n  .Replace(\" \", \"\")\n  .Replace(\"\\r\", \"\")\n  .Replace(\"\\n\", \"\");\n\nprivate static Regex mailbox =\n  new Regex(gibberish, RegexOptions.ExplicitCapture); \n", "According to official standard  valid email regex is (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\nif you want to use it in Java its really very easyimport java.util.regex.*;\n\nclass regexSample \n{\n   public static void main(String args[]) \n   {\n      //Input the string for validation\n      String email = \"xyz@hotmail.com\";\n\n      //Set the email pattern string\n      Pattern p = Pattern.compile(\" (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"\n              +\"(?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21\\\\x23-\\\\x5b\\\\x5d-\\\\x7f]|\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])*\\\")\"\n                     + \"@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21-\\\\x5a\\\\x53-\\\\x7f]|\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])+)\\\\]\");\n\n      //Match the given string with the pattern\n      Matcher m = p.matcher(email);\n\n      //check whether match is found \n      boolean matchFound = m.matches();\n\n      if (matchFound)\n        System.out.println(\"Valid Email Id.\");\n      else\n        System.out.println(\"Invalid Email Id.\");\n   }\n}\n", "Here's the PHP I use. I've choosen this solution in the spirit of \"false positives are better than false negatives\" as declared by another commenter here AND with regards to keeping your response time up and server load down ... there's really no need to waste server resources with a regular expression when this will weed out most simple user error. You can always follow this up by sending a test email if you want.function validateEmail($email) {\n  return (bool) stripos($email,'@');\n}\n", "RFC 5322 standard:Allows dot-atom local-part, quoted-string local-part, obsolete (mixed dot-atom and quoted-string) local-part, domain name domain, (IPv4, IPv6, and IPv4-mapped IPv6 address) domain literal domain, and (nested) CFWS.'/^(?!(?>(?1)\"?(?>\\\\\\[ -~]|[^\"])\"?(?1)){255,})(?!(?>(?1)\"?(?>\\\\\\[ -~]|[^\"])\"?(?1)){65,}@)((?>(?>(?>((?>(?>(?>\\x0D\\x0A)?[\\t ])+|(?>[\\t ]*\\x0D\\x0A)?[\\t ]+)?)(\\((?>(?2)(?>[\\x01-\\x08\\x0B\\x0C\\x0E-\\'*-\\[\\]-\\x7F]|\\\\\\[\\x00-\\x7F]|(?3)))*(?2)\\)))+(?2))|(?2))?)([!#-\\'*+\\/-9=?^-~-]+|\"(?>(?2)(?>[\\x01-\\x08\\x0B\\x0C\\x0E-!#-\\[\\]-\\x7F]|\\\\\\[\\x00-\\x7F]))*(?2)\")(?>(?1)\\.(?1)(?4))*(?1)@(?!(?1)[a-z0-9-]{64,})(?1)(?>([a-z0-9](?>[a-z0-9-]*[a-z0-9])?)(?>(?1)\\.(?!(?1)[a-z0-9-]{64,})(?1)(?5)){0,126}|\\[(?:(?>IPv6:(?>([a-f0-9]{1,4})(?>:(?6)){7}|(?!(?:.*[a-f0-9][:\\]]){8,})((?6)(?>:(?6)){0,6})?::(?7)?))|(?>(?>IPv6:(?>(?6)(?>:(?6)){5}:|(?!(?:.*[a-f0-9]:){6,})(?8)?::(?>((?6)(?>:(?6)){0,4}):)?))?(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(?>\\.(?9)){3}))\\])(?1)$/isD'\nRFC 5321 standard:Allows dot-atom local-part, quoted-string local-part, domain name domain, and (IPv4, IPv6, and IPv4-mapped IPv6 address) domain literal domain.'/^(?!(?>\"?(?>\\\\\\[ -~]|[^\"])\"?){255,})(?!\"?(?>\\\\\\[ -~]|[^\"]){65,}\"?@)(?>([!#-\\'*+\\/-9=?^-~-]+)(?>\\.(?1))*|\"(?>[ !#-\\[\\]-~]|\\\\\\[ -~])*\")@(?!.*[^.]{64,})(?>([a-z0-9](?>[a-z0-9-]*[a-z0-9])?)(?>\\.(?2)){0,126}|\\[(?:(?>IPv6:(?>([a-f0-9]{1,4})(?>:(?3)){7}|(?!(?:.*[a-f0-9][:\\]]){8,})((?3)(?>:(?3)){0,6})?::(?4)?))|(?>(?>IPv6:(?>(?3)(?>:(?3)){5}:|(?!(?:.*[a-f0-9]:){6,})(?5)?::(?>((?3)(?>:(?3)){0,4}):)?))?(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(?>\\.(?6)){3}))\\])$/iD'\nBasic:Allows dot-atom local-part and domain name domain (requiring at least two domain name labels with the TLD limited to 2-6 alphabetic characters).\"/^(?!.{255,})(?!.{65,}@)([!#-'*+\\/-9=?^-~-]+)(?>\\.(?1))*@(?!.*[^.]{64,})(?>[a-z0-9](?>[a-z0-9-]*[a-z0-9])?\\.){1,126}[a-z]{2,6}$/iD\"\n", "I've been using this touched up version of your regex for a while and it hasn't left me with too many surprises. . It does validate Jean+Fran\u00e7ois@anydomain.museum and \u8bd5@\u4f8b\u5b50.\u6d4b\u8bd5.\u0645\u062b\u0627\u0644.\u0622\u0632\u0645\u0627\u06cc\u0634\u06cc but not weird abuse of those non alphanumeric characters .+@you.com. (?!^[.+&'_-]*@.*$)(^[_\\w\\d+&'-]+(\\.[_\\w\\d+&'-]*)*@[\\w\\d-]+(\\.[\\w\\d-]+)*\\.(([\\d]{1,3})|([\\w]{2,}))$)\nIt does support IP addresses you@192.168.1.1 but I haven't refined it enough to deal with bogus IP ranges such as 999.999.999.1.asdf@asdf.asdf I know acrosman has abandoned his regex but this flavour lives on.", "If you are fine with accepting empty values (which is not invalid email) and are running PHP 5.2+, I would suggest:static public function checkEmail($email, $ignore_empty = false) {\n        if($ignore_empty && (is_null($email) || $email == ''))\n                return true;\n        return filter_var($email, FILTER_VALIDATE_EMAIL);\n    }\n"]},
{"question": "How can I get useful error messages in PHP?", "details": "Quite often I will try and run a PHP script and just get a blank screen back. No error message; just an empty screen. The cause might have been a simple syntax error (wrong bracket, missing semicolon), or a failed function call, or something else entirely.It is very difficult to figure out what went wrong. I end up commenting out code, entering \"echo\" statements everywhere, etc. trying to narrow down the problem. But there surely must be a better way, right?Is there a way to get PHP to produce a useful error message, like Java does?", "answers": ["Quite often I will try and run a PHP script and just get a blank screen back. No error message; just an empty screen. The cause might have been a simple syntax error (wrong bracket, missing semicolon), or a failed function call, or something else entirely.It is very difficult to figure out what went wrong. I end up commenting out code, entering \"echo\" statements everywhere, etc. trying to narrow down the problem. But there surely must be a better way, right?Is there a way to get PHP to produce a useful error message, like Java does?", "For syntax errors, you need to enable error display in the php.ini. By default these are turned off because you don't want a \"customer\" seeing the error messages.  in the PHP documentation for information on the 2 directives: error_reporting and display_errors. display_errors is probably the one you want to change. If you can't modify the php.ini, you can also add the following lines to an .htaccess file:php_flag  display_errors        on\nphp_value error_reporting       2039\nYou may want to consider using the value of E_ALL (as mentioned by Gumbo) for your version of PHP for error_reporting to get all of the errors. 3 other items: (1) You can check the error log file as it will have all of the errors (unless logging has been disabled). (2) Adding the following 2 lines will help you debug errors that are not syntax errors:error_reporting(-1);\nini_set('display_errors', 'On');\n(3) Another option is to use an editor that checks for errors when you type, such as . PhpEd also comes with a debugger which can provide more detailed information. (The PhpEd debugger is very similar to xdebug and integrates directly into the editor so you use 1 program to do everything.)Cartman's  is also very good: ", "The following enables all errors:ini_set('display_startup_errors', 1);\nini_set('display_errors', 1);\nerror_reporting(-1);\nAlso see the following links\n\n\n\n", "The following code should display all errors:<?php\n\n// ----------------------------------------------------------------------------------------------------\n// - Display Errors\n// ----------------------------------------------------------------------------------------------------\nini_set('display_errors', 'On');\nini_set('html_errors', 0);\n\n// ----------------------------------------------------------------------------------------------------\n// - Error Reporting\n// ----------------------------------------------------------------------------------------------------\nerror_reporting(-1);\n\n// ----------------------------------------------------------------------------------------------------\n// - Shutdown Handler\n// ----------------------------------------------------------------------------------------------------\nfunction ShutdownHandler()\n{\n    if(@is_array($error = @error_get_last()))\n    {\n        return(@call_user_func_array('ErrorHandler', $error));\n    };\n\n    return(TRUE);\n};\n\nregister_shutdown_function('ShutdownHandler');\n\n// ----------------------------------------------------------------------------------------------------\n// - Error Handler\n// ----------------------------------------------------------------------------------------------------\nfunction ErrorHandler($type, $message, $file, $line)\n{\n    $_ERRORS = Array(\n        0x0001 => 'E_ERROR',\n        0x0002 => 'E_WARNING',\n        0x0004 => 'E_PARSE',\n        0x0008 => 'E_NOTICE',\n        0x0010 => 'E_CORE_ERROR',\n        0x0020 => 'E_CORE_WARNING',\n        0x0040 => 'E_COMPILE_ERROR',\n        0x0080 => 'E_COMPILE_WARNING',\n        0x0100 => 'E_USER_ERROR',\n        0x0200 => 'E_USER_WARNING',\n        0x0400 => 'E_USER_NOTICE',\n        0x0800 => 'E_STRICT',\n        0x1000 => 'E_RECOVERABLE_ERROR',\n        0x2000 => 'E_DEPRECATED',\n        0x4000 => 'E_USER_DEPRECATED'\n    );\n\n    if(!@is_string($name = @array_search($type, @array_flip($_ERRORS))))\n    {\n        $name = 'E_UNKNOWN';\n    };\n\n    return(print(@sprintf(\"%s Error in file \\xBB%s\\xAB at line %d: %s\\n\", $name, @basename($file), $line, $message)));\n};\n\n$old_error_handler = set_error_handler(\"ErrorHandler\");\n\n// other php code\n\n?>\nThe only way to generate a blank page with this code is when you have a error in the shutdown handler. I copied and pasted this from my own cms without testing it, but I am sure it works.", "You can include the following lines in the file you want to debug:error_reporting(E_ALL);\nini_set('display_errors', '1');\nThis overrides the default settings in php.ini, which just make PHP report the errors to the log.", "Errors and warnings usually appear in ....\\logs\\php_error.log or ....\\logs\\apache_error.log depending on your php.ini settings.Also useful errors are often directed to the browser, but as they are not valid html they are not displayed.So \"tail -f\" your log files and when you get a blank screen use IEs \"view\" -> \"source\" menu options to view the raw output.", "2 entries in  dictate the output of errors:display_errorserror_reportingIn , display_errors is usually set to Off (Which is a good thing, because error display in production sites is generally not desirable!).However, in , it should be set to On, so that errors get displayed. !error_reporting (as of PHP 5.3) is set by default to E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED (meaning, everything is shown except for notices, strict standards and deprecation notices). When in doubt, set it to E_ALL to display  the errors. !That's a shame. Usually shared hosts do not allow the alteration of their php.ini file, and so, that option is sadly unavailable. But fear not! We have !In the desired script, we can alter the php.ini entries in runtime! Meaning, it'll run when the script runs! Sweet!(E_ALL);\n(\"display_errors\", \"On\");These two lines will do the same effect as altering the php.ini entries as above! Awesome!That means that the script hadn't even run! That usually happens when you have a syntax error!With syntax errors, the script doesn't even get to runtime. It fails at , meaning that it'll use the values in php.ini, which if you hadn't changed, may not allow the display of errors.In addition, PHP by default logs errors. In shared hosting, it may be in a dedicated folder or on the same folder as the offending script.If you have access to php.ini, you can find it under the error_log entry.", "I'm always using this syntax at the very top of the php script.ini_set('error_reporting', E_ALL);\nini_set('display_errors', 'On');  //On or Off\n", "There is a really useful extension called \"\" that will make your reports much nicer as well.", "For quick, hands-on troubleshooting I normally suggest here on SO:error_reporting(~0); ini_set('display_errors', 1);\nto be put at the beginning of the script that is under trouble-shooting. This is not perfect, the perfect variant is that you also enable that in the php.ini and that you log the errors in PHP to catch syntax and startup errors.The settings outlined here display all errors, notices and warnings, including strict ones, regardless which PHP version.Next things to consider:\n\nSee as well:\n\n\nerror_reporting()\ndisplay_errors\n", "It is possible to register an hook to make the last error or warning visible.function shutdown(){\n  var_dump(error_get_last());\n}\n\nregister_shutdown_function('shutdown');\nadding this code to the beginning of you index.php will help you debug the problems.", "If you are super cool, you might try:$test_server = $_SERVER['SERVER_NAME'] == \"127.0.0.1\" || $_SERVER['SERVER_NAME'] == \"localhost\" || substr($_SERVER['SERVER_NAME'],0,3) == \"192\";\n\nini_set('display_errors',$test_server);\nerror_reporting(E_ALL|E_STRICT);\nThis will only display errors when you are running locally. It also gives you the test_server variable to use in other places where appropriate.Any errors that happen before the script runs won't be caught, but for 99% of errors that I make, that's not an issue.", "On the top of the page choose a parameter error_reporting(E_ERROR | E_WARNING | E_PARSE);\n", "It's important to recognize that a syntax error or parse error happens during the  or  step, which means that PHP will bail before it's even had a chance to execute any of your code. So if you are modifying PHP's display_errors configuration during runtime, (this includes anything from using ini_set in your code to using .htaccess, which is a runtime configuration file) then only the default  are in play.To avoid a WSOD you want to make sure that your  has display_errors on and error_reporting set to -1 (). Don't hardcode the constant value of E_ALL, because that value is subject to change between different versions of PHP.Loaded configuration is either your loaded php.ini file or your apache.conf or httpd.conf or virtualhost file. Those files are only read once during the startup stage (when you first start apache httpd or php-fpm, for example) and only overridden by runtime configuration changes. Making sure that display_errors = 1 and error_reporting = -1 in your loaded configuration file ensures that you will never see a  regardless of syntax or parse error that occur before a runtime change like ini_set('display_errors', 1); or error_reporting(E_ALL); can take place.To locate your loaded configuration file(s) just create a new PHP file with only the following code...<?php\nphpinfo();\nThen point your browser there and look at  and , which are usually at the top of your phpinfo() and will include the absolute path to all your loaded configuration files.If you see (none) instead of the file, that means you don't have a php.ini in . So you can  and copy that to your configuration file path as php.ini then make sure your php user has sufficient permissions to read from that file. You'll need to restart httpd or php-fpm to load it in. Remember, this is the  php.ini file that comes bundled with the PHP source. So please don't use it in production!This really is the best way to avoid a WSOD in development. Anyone suggesting that you put ini_set('display_errors', 1); or error_reporting(E_ALL); at the top of your PHP script or using .htaccess like you did here, is not going to help you avoid a WSOD when a syntax or parse error occurs (like in your case here) if your loaded configuration file has display_errors turned off.Many people (and stock installations of PHP) will use a production-ini file that has display_errors turned off by default, which typically results in this same frustration you've experienced here. Because PHP already has it turned off when it starts up, then encounters a syntax or parse error, and bails with nothing to output. You expect that your ini_set('display_errors',1); at the top of your PHP script should have avoided that, but it won't matter if PHP can't parse your code because it will never have reached the runtime.", "To persist this and make it confortale, you can edit your php.ini file. It is usually stored in /etc/php.ini or /etc/php/php.ini, but more local php.ini's may overwrite it, depending on your hosting provider's setup guidelines. Check a phpinfo() file for Loaded Configuration File at the top, to be sure which one gets loaded last.Search for display_errors in that file. There should be only 3 instances, of which 2 are commented.Change the uncommented line to:display_errors = stdout\n", "Dunno if it will help, but here is a piece of my standard config file for php projects.  I tend not to depend too much on the apache configs even on my own server.I never have the disappearing error problem, so perhaps something here will give you an idea./*\nAPPLICATION_LIVE will be used in process to tell if we are in a development or production environment.  It's generally set as early as possible (often the first code to run), before any config, url routing, etc.\n*/\n\nif ( preg_match( \"%^(www.)?livedomain.com$%\", $_SERVER[\"HTTP_HOST\"]) ) {\n    define('APPLICATION_LIVE', true);\n} elseif ( preg_match( \"%^(www.)?devdomain.net$%\", $_SERVER[\"HTTP_HOST\"]) ) {\n    define('APPLICATION_LIVE', false);\n} else {\n    die(\"INVALID HOST REQUEST (\".$_SERVER[\"HTTP_HOST\"].\")\");\n    // Log or take other appropriate action.\n}\n\n\n/*\n--------------------------------------------------------------------\nDEFAULT ERROR HANDLING\n--------------------------------------------------------------------\nDefault error logging.  Some of these may be changed later based on APPLICATION_LIVE.\n*/\nerror_reporting(E_ALL & ~E_STRICT);\nini_set ( \"display_errors\", \"0\");\nini_set ( \"display_startup_errors\", \"0\");\nini_set ( \"log_errors\", 1);\nini_set ( \"log_errors_max_len\", 0);\nini_set ( \"error_log\", APPLICATION_ROOT.\"logs/php_error_log.txt\");\nini_set ( \"display_errors\", \"0\");\nini_set ( \"display_startup_errors\", \"0\");\n\nif ( ! APPLICATION_LIVE ) {\n    // A few changes to error handling for development.\n    // We will want errors to be visible during development.\n    ini_set ( \"display_errors\", \"1\");\n    ini_set ( \"display_startup_errors\", \"1\");\n    ini_set ( \"html_errors\", \"1\");\n    ini_set ( \"docref_root\", \"http://www.php.net/\");\n    ini_set ( \"error_prepend_string\", \"<div style='color:red; font-family:verdana; border:1px solid red; padding:5px;'>\");\n    ini_set ( \"error_append_string\", \"</div>\");\n}\n", "error_reporting(E_ALL | E_STRICT);\nini_set('display_errors', 1);\nini_set('html_errors', 1);\nIn addition, you can get more detailed information with .", "I recommend  for better visualization of errors and exceptions in PHP:", "ini_set('display_errors', 1);\nini_set('display_startup_errors', 1);\nerror_reporting(E_ALL);\n", "error_reporting(E_ALL | E_STRICT);\nAnd turn on display errors in php.ini", "You can register your own  in PHP. Dumping all errors to a file might help you in these obscure cases, for example. Note that your function will get called, no matter what your current  is set to. Very basic example:function dump_error_to_file($errno, $errstr) {\n    file_put_contents('/tmp/php-errors', date('Y-m-d H:i:s - ') . $errstr, FILE_APPEND);\n}\nset_error_handler('dump_error_to_file');\n", "The two key lines you need to get useful errors out of PHP are:ini_set('display_errors',1);\n error_reporting(E_ALL);\nAs pointed out by other contributors, these are switched off by default for security reasons. As a useful tip - when you're setting up your site it's handy to do a switch for your different environments so that these errors are ON by default in your local and development environments. This can be achieved with the following code (ideally in your index.php or config file so this is active from the start):switch($_SERVER['SERVER_NAME'])\n{\n    // local\n    case 'yourdomain.dev':\n    // dev\n    case 'dev.yourdomain.com':\n        ini_set('display_errors',1);\n        error_reporting(E_ALL);\n    break;\n    //live\n    case 'yourdomain.com':\n        //...\n    break;\n}\n", " can be useful as well.", "open your php.ini, \nmake sure it's set to:display_errors = On\nrestart your server.", "You might also want to try PHPStorm as your code editor.  It will find many PHP and other syntax errors right as you are typing in the editor. ", "if you are a ubuntu user then goto your terminal and run this commandsudo tail -50f /var/log/apache2/error.log\nwhere it will display recent 50 errors. \nThere is a error file error.log for apache2 which logs all the errors.", "To turn on full error reporting, add this to your script:error_reporting(E_ALL);\nThis causes even minimal warnings to show up. And, just in case:ini_set('display_errors', '1');\nWill force the display of errors. This should be turned off in production servers, but not when you're developing.", "The \u201cERRORS\u201d are the most useful things for the developers to know their mistakes and resolved them  to make the system working perfect.PHP provides some of better ways to know the developers why and where their piece of code is getting the errors, so by knowing those errors developers can make their code better in many ways.Best ways to write following two lines on the top of script to get all errors messages:error_reporting(E_ALL);\nini_set(\"display_errors\", 1);\nAnother way to use debugger tools like  in your IDE.", "You can enable full error reporting (including notices and strict messages). Some people find this too verbose, but it's worth a try. Set error_reporting to E_ALL | E_STRICT in your php.ini.error_reporting = E_ALL | E_STRICT\nE_STRICT will notify you about deprecated functions and give you recommendations about the best methods to do certain tasks.If you don't want notices, but you find other message types helpful, try excluding notices:error_reporting = (E_ALL | E_STRICT) & ~E_NOTICE\nAlso make sure that display_errors is enabled in php.ini. If your PHP version is older than 5.2.4, set it to On:display_errors = \"On\"\nIf your version is 5.2.4 or newer, use:display_errors = \"stderr\"\n", "Aside from error_reporting and the display_errors ini setting, you can get SYNTAX errors from your web server's log files. When I'm developing PHP I load my development system's web server logs into my editor. Whenever I test a page and get a blank screen, the log file goes stale and my editor asks if I want to reload it. When I do, I jump to the bottom and there is the syntax error. For example:[Sun Apr 19 19:09:11 2009] [error] [client 127.0.0.1] PHP Parse error:  syntax error, unexpected T_ENCAPSED_AND_WHITESPACE, expecting T_STRING or T_VARIABLE or T_NUM_STRING in D:\\\\webroot\\\\test\\\\test.php on line 9\n", "For those who use nginx and have a white screen even for file with <?php echo 123;. In my case I didn't have this required option for PHP in nginx config file:fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\nThis option wasn't in fastcgi_params file, so PHP didn't work and there wasn't any errors in logs."]},
{"question": "Reference \u2014 What does this symbol mean in PHP?", "details": "This is a collection of questions that come up every now and then about syntax in PHP. This is also a Community Wiki, so everyone is invited to participate in maintaining this list.It used to be hard to find questions about operators and other syntax tokens.\u00b9\nThe main idea is to have links to existing questions on Stack Overflow, so it's easier for us to reference them, not to copy over content from the PHP Manual.Note: Since January 2013, Stack Overflow . Just surround the search terms by quotes, e.g. [php] \"==\" vs \"===\"If you have been pointed here by someone because you have asked such a question, please find the particular syntax below. The linked pages to the  along with the linked questions will likely answer your question then. If so, you are encouraged to upvote the answer. This list is not meant as a substitute to the help others provided.If your particular token is not listed below, you might find it in the .&  or \n\n\n\n\n\n\n\n\n\n\n\n\n=& \n\n\n\n\n&= \n\n\n&& \n\n\n\n\n% \n\n\n!! \n\n@ \n\n\n\n\n\n?: \n\n\n\n\n??  (since PHP 7)\n\n?string\n?int\n?array\n?bool\n?float  (since PHP 7.1)\n\n: , \n\n\n:: \n\n\n\n\n\n\n\\ \n\n\n-> \n\n\n\n\n\n=> \n\n\n\n^ \n\n\n>> \n\n<< \n\n<<< \n\n\n\n\n\n= \n\n== \n\n\n\n\n=== \n\n\n\n\n!== \n\n\n!= \n\n\n\n\n<> \n\n\n\n\n<=>  (since PHP 7.0)\n\n| \n\n\n|| \n\n\n\n\n~ \n\n+ , \n\n+= and -= \n\n\n++ and -- \n\n\n.= \n\n\n. \n\n\n, \n\n, \n\n$$ \n\n\n\n` \n\n<?= \n\n\n\n[]  (short syntax since PHP 5.4)\n\n\n\n\n\n<? \n\n...  (since PHP 5.6)**  (since PHP 5.6)# \n\n:? \n\n?->  (since PHP 8.0)\n\n", "answers": ["This is a collection of questions that come up every now and then about syntax in PHP. This is also a Community Wiki, so everyone is invited to participate in maintaining this list.It used to be hard to find questions about operators and other syntax tokens.\u00b9\nThe main idea is to have links to existing questions on Stack Overflow, so it's easier for us to reference them, not to copy over content from the PHP Manual.Note: Since January 2013, Stack Overflow . Just surround the search terms by quotes, e.g. [php] \"==\" vs \"===\"If you have been pointed here by someone because you have asked such a question, please find the particular syntax below. The linked pages to the  along with the linked questions will likely answer your question then. If so, you are encouraged to upvote the answer. This list is not meant as a substitute to the help others provided.If your particular token is not listed below, you might find it in the .&  or \n\n\n\n\n\n\n\n\n\n\n\n\n=& \n\n\n\n\n&= \n\n\n&& \n\n\n\n\n% \n\n\n!! \n\n@ \n\n\n\n\n\n?: \n\n\n\n\n??  (since PHP 7)\n\n?string\n?int\n?array\n?bool\n?float  (since PHP 7.1)\n\n: , \n\n\n:: \n\n\n\n\n\n\n\\ \n\n\n-> \n\n\n\n\n\n=> \n\n\n\n^ \n\n\n>> \n\n<< \n\n<<< \n\n\n\n\n\n= \n\n== \n\n\n\n\n=== \n\n\n\n\n!== \n\n\n!= \n\n\n\n\n<> \n\n\n\n\n<=>  (since PHP 7.0)\n\n| \n\n\n|| \n\n\n\n\n~ \n\n+ , \n\n+= and -= \n\n\n++ and -- \n\n\n.= \n\n\n. \n\n\n, \n\n, \n\n$$ \n\n\n\n` \n\n<?= \n\n\n\n[]  (short syntax since PHP 5.4)\n\n\n\n\n$var = []\n<? \n\n...  (since PHP 5.6)**  (since PHP 5.6)# \n\n:? \n\n?->  (since PHP 8.0)\n\n", "++ increment operator-- decrement operatorExample    Name              Effect\n---------------------------------------------------------------------\n++$a       Pre-increment     Increments $a by one, then returns $a.\n$a++       Post-increment    Returns $a, then increments $a by one.\n--$a       Pre-decrement     Decrements $a by one, then returns $a.\n$a--       Post-decrement    Returns $a, then decrements $a by one.\nThese can go before or after the variable.If put before the variable, the increment/decrement operation is done to the variable  then the result is returned. If put after the variable, the variable is  returned, then the increment/decrement operation is done.For example:$apples = 10;\nfor ($i = 0; $i < 10; ++$i) {\n    echo 'I have ' . $apples-- . \" apples. I just ate one.\\n\";\n}\nIn the case above ++$i is used, since it is faster. $i++ would have the same results.Pre-increment is a little bit faster because it really increments the variable and after that 'returns' the result. Post-increment creates a special variable, copies there the value of the first variable and only after the first variable is used, replaces its value with second's.However, you must use $apples--, since first, you want to display the current number of apples, and  you want to subtract one from it.You can also increment letters in PHP:$i = \"a\";\nwhile ($i < \"c\") {\n    echo $i++;\n}\nOnce z is reached aa is next, and so on.Note that character variables can be incremented but not decremented and even so only plain ASCII characters (a-z and A-Z) are supported.\n\n", "What is a bit? A bit is a representation of 1 or 0. Basically OFF(0) and ON(1)What is a byte? A byte is made up of 8 bits and the highest value of a byte is 255, which would mean every bit is set. We will look at why a byte's maximum value is 255.-------------------------------------------\n|      1 Byte ( 8 bits )                  |\n-------------------------------------------\n|Place Value | 128| 64| 32| 16| 8| 4| 2| 1|     \n-------------------------------------------\nThis representation of 1 Byte1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 = 255 (1 Byte) &$a =  9;\n$b = 10;\necho $a & $b;\nThis would output the number 8. Why? Well let's see using our table example.-------------------------------------------\n|      1 Byte ( 8 bits )                  |\n-------------------------------------------\n|Place Value | 128| 64| 32| 16| 8| 4| 2| 1|     \n-------------------------------------------\n|      $a    |   0|  0|  0|  0| 1| 0| 0| 1|    \n-------------------------------------------\n|      $b    |   0|  0|  0|  0| 1| 0| 1| 0|\n------------------------------------------- \n|      &     |   0|  0|  0|  0| 1| 0| 0| 0|\n------------------------------------------- \nSo you can see from the table the only bit they share together is the 8 bit.$a =  36;\n$b = 103;\necho $a & $b; // This would output the number 36.\n$a = 00100100\n$b = 01100111\nThe two shared bits are 32 and 4, which when added together return 36.|$a =  9;\n$b = 10;\necho $a | $b;\nThis would output the number 11. Why?-------------------------------------------\n|      1 Byte ( 8 bits )                  |\n-------------------------------------------\n|Place Value | 128| 64| 32| 16| 8| 4| 2| 1|     \n-------------------------------------------\n|      $a    |   0|  0|  0|  0| 1| 0| 0| 1|    \n-------------------------------------------\n|      $b    |   0|  0|  0|  0| 1| 0| 1| 0|\n------------------------------------------- \n|      |     |   0|  0|  0|  0| 1| 0| 1| 1|\n-------------------------------------------\nYou will notice that we have 3 bits set, in the 8, 2, and 1 columns. Add those up: 8+2+1=11.", "<=>The  <=> is the latest comparison operator added in PHP 7. It is a  binary operator with the same precedence as equality operators (==, !=, ===, !==). This operator allows for simpler three-way comparison between left-hand and right-hand operands.The operator results in an integer expression of:\n0\n0\n0\ne.g.1 <=> 1; // 0\n1 <=> 2; // -1\n2 <=> 1; // 1\nA good practical application of using this operator would be in comparison type callbacks that are expected to return a zero, negative, or positive integer based on a three-way comparison between two values. The comparison function passed to usort is one such example.$arr = [4,2,1,3];\n\nusort($arr, function ($a, $b) {\n    if ($a < $b) {\n        return -1;\n    } elseif ($a > $b) {\n        return 1;\n    } else {\n        return 0;\n    }\n});\n$arr = [4,2,1,3];\n\nusort($arr, function ($a, $b) {\n    return $a <=> $b;\n});\n", "_   The underscore character '_' as in _() is an alias to the gettext() function.", "Syntax    Name             Description\n\nx == y    Equality         True if x and y have the same key/value pairs\nx != y    Inequality       True if x is not equal to y\nx === y   Identity         True if x and y have the same key/value pairs\n                            in the same order and of the same types\nx !== y   Non-identity     True if x is not identical to y\n++ x      Pre-increment    Increments x by one, then returns x\nx ++      Post-increment   Returns x, then increments x by one\n-- x      Pre-decrement    Decrements x by one, then returns x\nx --      Post-decrement   Returns x, then decrements x by one\nx and y   And              True if both x and y are true x=6 y=3\n                           (x < 10 and y > 1) returns true \nx && y    And              True if both x and y are true x=6 y=3\n                           (x < 10 && y > 1) returns true\nx or y     Or              True if any of x or y are true x=6 y=3\n                           (x < 10 or y > 10) returns true \nx || y     Or              True if any of x or y are true x=6 y=3\n                           (x < 3 || y > 1) returns true\na . b     Concatenation    Concatenate two strings: \"Hi\" . \"Ha\"\n", ": Although these are not just symbols but important part of this token family. There are eight magical constants that change depending on where they are used.__LINE__: The current line number of the file.__FILE__: The full path and filename of the file. If used inside an include, the name of the included file is returned. Since PHP 4.0.2, __FILE__ always contains an absolute path with symlinks resolved whereas in older versions it contained relative path under some circumstances.__DIR__: The directory of the file. If used inside an include, the directory of the included file is returned. This is equivalent to dirname(__FILE__). This directory name does not have a trailing slash unless it is the root directory. (Added in PHP 5.3.0.)__FUNCTION__: The function name. (Added in PHP 4.3.0) As of PHP 5 this constant returns the function name as it was declared (case-sensitive). In PHP 4 its value is always lowercased.__CLASS__: The class name. (Added in PHP 4.3.0) As of PHP 5 this constant returns the class name as it was declared (case-sensitive). In PHP 4 its value is always lowercased. The class name includes the namespace it was declared in (e.g. Foo\\Bar). Note that as of PHP 5.4 __CLASS__ works also in traits. When used in a trait method, __CLASS__ is the name of the class the trait is used in.__TRAIT__: The trait name. (Added in PHP 5.4.0) As of PHP 5.4 this constant returns the trait as it was declared (case-sensitive). The trait name includes the namespace it was declared in (e.g. Foo\\Bar).__METHOD__: The class method name. (Added in PHP 5.0.0) The method name is returned as it was declared (case-sensitive).__NAMESPACE__: The name of the current namespace (case-sensitive). This constant is defined in compile-time (Added in PHP 5.3.0).", "instanceof is used to determine whether a PHP variable is an instantiated object of a certain class.<?php\nclass mclass { }\nclass sclass { }\n$a = new mclass;\nvar_dump($a instanceof mclass);\nvar_dump($a instanceof sclass);\nThe above example will output:bool(true)\nbool(false)\n Above Example $a is a object of the mclass so use only a mclass data not instance of with the sclass<?php \nclass pclass { } \nclass childclass extends pclass { } \n$a = new childclass; \nvar_dump($a instanceof childclass); \nvar_dump($a instanceof pclass);\nThe above example will output:bool(true)\nbool(true)\n<?php \nclass cloneable { } \n$a = new cloneable;\n$b = clone $a; \nvar_dump($a instanceof cloneable); \nvar_dump($b instanceof cloneable);\nThe above example will output:bool(true)\nbool(true)\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nand operator and or operator have lower precedence than assignment operator =.This means that $a = true and false; is equivalent to ($a = true) and false.In most cases you will probably want to use && and ||, which behave in a way known from languages like C, Java or JavaScript.", "<=><=>Integers, Floats, Strings, Arrays & objects for Three-way comparison of variables.// Integers\necho 10 <=> 10; // 0\necho 10 <=> 20; // -1\necho 20 <=> 10; // 1\n\n// Floats\necho 1.5 <=> 1.5; // 0\necho 1.5 <=> 2.5; // -1\necho 2.5 <=> 1.5; // 1\n\n// Strings\necho \"a\" <=> \"a\"; // 0\necho \"a\" <=> \"b\"; // -1\necho \"b\" <=> \"a\"; // 1\n// Comparison is case-sensitive\necho \"B\" <=> \"a\"; // -1\n\necho \"a\" <=> \"aa\"; // -1\necho \"zz\" <=> \"aa\"; // 1\n\n// Arrays\necho [] <=> []; // 0\necho [1, 2, 3] <=> [1, 2, 3]; // 0\necho [1, 2, 3] <=> []; // 1\necho [1, 2, 3] <=> [1, 2, 1]; // 1\necho [1, 2, 3] <=> [1, 2, 4]; // -1\n\n// Objects\n$a = (object) [\"a\" => \"b\"]; \n$b = (object) [\"a\" => \"b\"]; \necho $a <=> $b; // 0\n\n$a = (object) [\"a\" => \"b\"]; \n$b = (object) [\"a\" => \"c\"]; \necho $a <=> $b; // -1\n\n$a = (object) [\"a\" => \"c\"]; \n$b = (object) [\"a\" => \"b\"]; \necho $a <=> $b; // 1\n\n// only values are compared\n$a = (object) [\"a\" => \"b\"]; \n$b = (object) [\"b\" => \"b\"]; \necho $a <=> $b; // 1\n", "{} Curly braces\n\n\n\nAnd some words about last post$x[4] = 'd'; // it works\n$x{4} = 'd'; // it works\n\n$echo $x[4]; // it works\n$echo $x{4}; // it works\n\n$x[] = 'e'; // it works\n$x{} = 'e'; // does not work\n\n$x = [1, 2]; // it works\n$x = {1, 2}; // does not work\n\necho \"${x[4]}\"; // it works\necho \"${x{4}}\"; // does not work\n\necho \"{$x[4]}\"; // it works\necho \"{$x{4}}\"; // it works\n", "This operator has been added in PHP 7.0 for the common case of needing to use a ternary operator in conjunction with isset(). It returns its first operand if it exists and is not NULL; otherwise it returns its second operand.<?php\n// Fetches the value of $_GET['user'] and returns 'nobody'\n// if it does not exist.\n$username = $_GET['user'] ?? 'nobody';\n// This is equivalent to:\n$username = isset($_GET['user']) ? $_GET['user'] : 'nobody';\n\n// Coalescing can be chained: this will return the first\n// defined value out of $_GET['user'], $_POST['user'], and\n// 'nobody'.\n$username = $_GET['user'] ?? $_POST['user'] ?? 'nobody';\n?>\n", "\nPHP Strings can be specified in four ways not just two ways: $string = 'This is my string'; // print This is my string\n $str = 'string';\n\n$string = \"This is my $str\"; // print This is my string\n $string = <<<EOD\nThis is my string\nEOD; // print This is my string\n $string = <<<'END_OF_STRING'\n    This is my string \nEND_OF_STRING; // print This is my string\n", "What does => mean?=> Is the symbol we humans decided to use to separate \"Key\" => \"Value\" pairs in Associative Arrays.To understand this, we have to know what Associative Arrays are. The first thing that comes up when a conventional programmer thinks of an array () would be something similar to:$myArray1 = array(2016, \"hello\", 33);//option 1\n\n$myArray2 = [2016, \"hello\", 33];//option 2\n\n$myArray3 = [];//option 3\n$myArray3[] = 2016; \n$myArray3[] = \"hello\"; \n$myArray3[] = 33;\nWhere as, if we wanted to call the array in some later part of the code, we could do:echo $myArray1[1];// output: hello\necho $myArray2[1];// output: hello\necho $myArray3[1];// output: hello\nSo far so good. However, as humans, we might find it hard to remember that index [0] of the array is the value of the  2016, index [1] of the array is a , and index [2] of the array is a simple . The alternative we would then have is to use what is called an . An Associative array has a few differences from a \n().Differences ():\nDurring the declaration of an Associative Array, you don't only include the value of what you want to put in the array, but you also put the index value (called the key) which you want to use when calling the array in later parts of the code. The following syntax is used during it's declaration: \"key\" => \"value\".\nWhen using the Associative Array, the key value would then be placed inside the index of the array to retrieve the desired value.\nFor instance:    $myArray1 = array( \n        \"Year\" => 2016, \n        \"Greetings\" => \"hello\", \n        \"Integer_value\" => 33);//option 1\n\n    $myArray2 = [ \n        \"Year\" =>  2016, \n        \"Greetings\" => \"hello\", \n        \"Integer_value\" => 33];//option 2\n\n    $myArray3 = [];//option 3\n    $myArray3[\"Year\"] = 2016; \n    $myArray3[\"Greetings\"] = \"hello\"; \n    $myArray3[\"Integer_value\"] = 33;\nAnd now, to receive the same output as before, the key value would be used in the arrays index:echo $myArray1[\"Greetings\"];// output: hello\necho $myArray2[\"Greetings\"];// output: hello\necho $myArray3[\"Greetings\"];// output: hello\nSo from the above example, it is pretty easy to see that the => symbol is used to express the relationship of an Associative Array between each of the key and value pairs in an array  the initiation of the values within the array.", ":What does \"&\" mean here in PHP?Makes life more easier once we get used to it..(check example below carefully) usually checks bits that are set in both $a and $b are set.have you even noticed how these calls works?   error_reporting(E_ERROR | E_WARNING | E_PARSE);\n    error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);\n    error_reporting(E_ALL & ~E_NOTICE);\n    error_reporting(E_ALL);\nSo behind all above is game of bitwise operator and bits.One usefull case of these is easy configurations like give below, so a single integer field can store thousands of combos for you. Most people have already read the docs but didn't reliase the real world use case of these bitwise operators.<?php\n\nclass Config {\n\n    // our constants must be 1,2,4,8,16,32,64 ....so on\n    const TYPE_CAT=1;\n    const TYPE_DOG=2;\n    const TYPE_LION=4;\n    const TYPE_RAT=8;\n    const TYPE_BIRD=16;\n    const TYPE_ALL=31;\n\n    private $config;\n\n    public function __construct($config){\n        $this->config=$config;\n\n        if($this->is(Config::TYPE_CAT)){\n            echo 'cat ';\n        }\n        if($this->is(Config::TYPE_DOG)){\n            echo 'dog ';\n        }\n        if($this->is(Config::TYPE_RAT)){\n            echo 'rat ';\n        }\n        if($this->is(Config::TYPE_LION)){\n            echo 'lion ';\n        }\n        if($this->is(Config::TYPE_BIRD)){\n            echo 'bird ';\n        }\n        echo \"\\n\";\n    }\n\n    private function is($value){\n        return $this->config & $value;\n    }\n}\n\nnew Config(Config::TYPE_ALL);\n// cat dog rat lion bird\nnew Config(Config::TYPE_BIRD);\n//bird\nnew Config(Config::TYPE_BIRD | Config::TYPE_DOG);\n//dog bird\nnew Config(Config::TYPE_ALL & ~Config::TYPE_DOG & ~Config::TYPE_CAT);\n//rat lion bird\n", "==  is used for check equality  considering variable === is used for check equality for  the variable  and $a = 5if ($a == 5)  - will evaluate to trueif ($a == '5') - will evaluate to true, because while comparing this both value PHP internally convert that string value into integer and then compare both valuesif ($a === 5) - will evaluate to trueif ($a === '5') - will evaluate to false, because value is 5, but this value 5 is not an integer.", "Not the catchiest name for an operator, but PHP 7 brings in the rather handy null coalesce so I thought I'd share an example.In PHP 5, we already have a ternary operator, which tests a value, and then returns the second element if that returns true and the third if it doesn't:echo $count ? $count : 10; // outputs 10\nThere is also a shorthand for that which allows you to skip the second element if it's the same as the first one: echo $count ?: 10; // also outputs 10In PHP 7 we additionally get the ?? operator which rather than indicating extreme confusion which is how I would usually use two question marks together instead allows us to chain together a string of values. Reading from left to right, the first value which exists and is not null is the value that will be returned.// $a is not set\n$b = 16;\n\necho $a ?? 2; // outputs 2\necho $a ?? $b ?? 7; // outputs 16\nThis construct is useful for giving priority to one or more values coming perhaps from user input or existing configuration, and safely falling back on a given default if that configuration is missing. It's kind of a small feature but it's one that I know I'll be using as soon as my applications upgrade to PHP 7.", "PHP 7 adds support for return type declarations. Similarly to argument type declarations, return type declarations specify the type of value that will be returned from a function. The same types are available for return type declarations as are available for argument type declarations.Strict typing also has an effect on return type declarations. In the default weak mode, returned values will be coerced to the correct type if they are not already of that type. In strong mode, the returned value must be of the correct type, otherwise, a TypeError will be thrown.<?php\nfunction get_item(): ?string {\n    if (isset($_GET['item'])) {\n        return $_GET['item'];\n    } else {\n        return null;\n    }\n}\n?>\n", "PHP has an operator \"...\" (Three dots) which is referred as Splat Operator. It is used to pass arbitrary number of parameters in a function and this type of function is called Variadic Functions. Let\u2019s take examples to use of \"...\" (Three dots).Example 1:<?php\nfunction calculateNumbers(...$params){\n    $total = 0;\n    foreach($params as $v){\n        $total = $total + $v;\n    }\n    return $total;\n}\n\necho calculateNumbers(10, 20, 30, 40, 50);\n\n//Output 150\n?>\nEach arguments of calculateNumbers() function pass through $params as an array when use \"\u2026 \".There are many different ways to use \"\u2026 \"  operator. Below some examples:Example 2:<?php\nfunction calculateNumbers($no1, $no2, $no3, $no4, $no5){\n    $total = $no1 + $no2 + $no3 + $no4 + $no5;\n    return $total;\n}\n\n$numbers = array(10, 20, 30, 40, 50);\necho calculateNumbers(...$numbers);\n\n//Output 150\n?>\nExample 3:<?php\nfunction calculateNumbers(...$params){\n    $total = 0;\n    foreach($params as $v){\n        $total = $total + $v;\n    }\n    return $total;\n}\n$no1 = 70;\n$numbers = array(10, 20, 30, 40, 50);\necho calculateNumbers($no1, ...$numbers);\n\n//Output 220\n?>\nExample 4:<?php\nfunction calculateNumbers(...$params){\n    $total = 0;\n    foreach($params as $v){\n        $total = $total + $v;\n    }\n    return $total;\n}\n\n$numbers1 = array(10, 20, 30, 40, 50);\n$numbers2 = array(100, 200, 300, 400, 500);\necho calculateNumbers(...$numbers1, ...$numbers2);\n\n//Output 1650\n\n?>\n", "It's the NullSafe Operator, it returns null in case you try to invoke functions or get values from null. Nullsafe operator can be chained and can be used both on the methods and properties.$objDrive = null;\n$drive = $objDrive?->func?->getDriver()?->value; //return null\n$drive = $objDrive->func->getDriver()->value; // Error: Trying to get property 'func' of non-object\nNullsafe operator doesn't work with array keys:$drive['admin']?->getDriver()?->value //Warning: Trying to access array offset on value of type null\n\n$drive = [];\n$drive['admin']?->getAddress()?->value //Warning: Undefined array key \"admin\"\n", "In PHP8 it's been accepted this new operator,  you can find the documentation . ?-> it's the NullSafe Operator, it returns null in case you try to invoke functions or get values from null...Examples:<?php\n$obj = null;\n$obj = $obj?->attr; //return null\n$obj = ?->funct(); // return null\n$obj = $objDrive->attr; // Error: Trying to get property 'attr' of non-object\n?>\n"]},
{"question": "Why are these constructs using pre and post-increment undefined behavior?", "details": "#include <stdio.h>\n\nint main(void)\n{\n   int i = 0;\n   i = i++ + ++i;\n   printf(\"%d\\n\", i); // 3\n\n   i = 1;\n   i = (i++);\n   printf(\"%d\\n\", i); // 2 Should be 1, no ?\n\n   volatile int u = 0;\n   u = u++ + ++u;\n   printf(\"%d\\n\", u); // 1\n\n   u = 1;\n   u = (u++);\n   printf(\"%d\\n\", u); // 2 Should also be one, no ?\n\n   register int v = 0;\n   v = v++ + ++v;\n   printf(\"%d\\n\", v); // 3 (Should be the same as u ?)\n\n   int w = 0;\n   printf(\"%d %d\\n\", ++w, w); // shouldn't this print 1 1\n\n   int x[2] = { 5, 8 }, y = 0;\n   x[y] = y ++;\n   printf(\"%d %d\\n\", x[0], x[1]); // shouldn't this print 0 8? or 5 0?\n}\n", "answers": ["#include <stdio.h>\n\nint main(void)\n{\n   int i = 0;\n   i = i++ + ++i;\n   printf(\"%d\\n\", i); // 3\n\n   i = 1;\n   i = (i++);\n   printf(\"%d\\n\", i); // 2 Should be 1, no ?\n\n   volatile int u = 0;\n   u = u++ + ++u;\n   printf(\"%d\\n\", u); // 1\n\n   u = 1;\n   u = (u++);\n   printf(\"%d\\n\", u); // 2 Should also be one, no ?\n\n   register int v = 0;\n   v = v++ + ++v;\n   printf(\"%d\\n\", v); // 3 (Should be the same as u ?)\n\n   int w = 0;\n   printf(\"%d %d\\n\", ++w, w); // shouldn't this print 1 1\n\n   int x[2] = { 5, 8 }, y = 0;\n   x[y] = y ++;\n   printf(\"%d %d\\n\", x[0], x[1]); // shouldn't this print 0 8? or 5 0?\n}\n", "C has the concept of undefined behavior, i.e. some language constructs are syntactically valid but you can't predict the behavior when the code is run.As far as I know, the standard doesn't explicitly say  the concept of undefined behavior exists. In my mind, it's simply because the language designers wanted there to be some leeway in the semantics, instead of i.e. requiring that all implementations handle integer overflow in the exact same way, which would very likely impose serious performance costs, they just left the behavior undefined so that if you write code that causes integer overflow, anything can happen.So, with that in mind, why are these \"issues\"? The language clearly says that certain things lead to . There is no problem, there is no \"should\" involved. If the undefined behavior changes when one of the involved variables is declared volatile, that doesn't prove or change anything. It is ; you cannot reason about the behavior.Your most interesting-looking example, the one withu = (u++);\nis a text-book example of undefined behavior (see Wikipedia's entry on ).", "Just compile and disassemble your line of code, if you are so inclined to know how exactly it is you get what you are getting.This is what I get on my machine, together with what I think is going on:$ cat evil.c\nvoid evil(){\n  int i = 0;\n  i+= i++ + ++i;\n}\n$ gcc evil.c -c -o evil.bin\n$ gdb evil.bin\n(gdb) disassemble evil\nDump of assembler code for function evil:\n   0x00000000 <+0>:   push   %ebp\n   0x00000001 <+1>:   mov    %esp,%ebp\n   0x00000003 <+3>:   sub    $0x10,%esp\n   0x00000006 <+6>:   movl   $0x0,-0x4(%ebp)  // i = 0   i = 0\n   0x0000000d <+13>:  addl   $0x1,-0x4(%ebp)  // i++     i = 1\n   0x00000011 <+17>:  mov    -0x4(%ebp),%eax  // j = i   i = 1  j = 1\n   0x00000014 <+20>:  add    %eax,%eax        // j += j  i = 1  j = 2\n   0x00000016 <+22>:  add    %eax,-0x4(%ebp)  // i += j  i = 3\n   0x00000019 <+25>:  addl   $0x1,-0x4(%ebp)  // i++     i = 4\n   0x0000001d <+29>:  leave  \n   0x0000001e <+30>:  ret\nEnd of assembler dump.\n(I... suppose that the 0x00000014 instruction was some kind of compiler optimization?)", "I think the relevant parts of the C99 standard are 6.5 Expressions, \u00a72Between the previous and next sequence point an object shall have its stored value\n  modified at most once by the evaluation of an expression. Furthermore, the prior value\n  shall be read only to determine the value to be stored.and 6.5.16 Assignment operators, \u00a74:The order of evaluation of the operands is unspecified. If an attempt is made to modify\n  the result of an assignment operator or to access it after the next sequence point, the\n  behavior is undefined. ", "Most of the answers here quoted from C standard emphasizing that the behavior of these constructs are undefined. To understand , let's understand these terms first in the light of C11 standard: (5.1.2.3)Given any two evaluations A and B, if A is sequenced before B, then the execution of A shall precede the execution of B.If A is not sequenced before or after B, then A and B are unsequenced.Evaluations can be one of two things:\n\n\nThe presence of a sequence point between the evaluation of expressions A and B implies that every  and  associated with A is sequenced before every  and  associated with B.Now coming to the question, for the expressions likeint i = 1;\ni = i++;\nstandard says that: either  or a value computation using the value of the same scalar object, . [...]Therefore, the above expression invokes UB because two side effects on the same object i is unsequenced relative to each other. That means it is not sequenced whether the side effect by assignment to i will be done before or after the side effect by ++.\nDepending on whether assignment occurs before or after the increment, different results will be produced and that's the one of the case of .Lets rename the i at left of assignment be il and at the right of assignment (in the expression i++) be ir, then the expression be likeil = ir++     // Note that suffix l and r are used for the sake of clarity.\n              // Both il and ir represents the same object.  \n regarding Postfix ++ operator is that:++. The increment can happen as early as the compiler likes .It means the expression il = ir++ could be evaluated either astemp = ir;      // i = 1\nir = ir + 1;    // i = 2   side effect by ++ before assignment\nil = temp;      // i = 1   result is 1  \nortemp = ir;      // i = 1\nil = temp;      // i = 1   side effect by assignment before ++\nir = ir + 1;    // i = 2   result is 2  \nresulting in two different results 1 and 2 which depends on the sequence of side effects by assignment and ++ and hence invokes UB.", "The behavior can't really be explained because it invokes both  and , so we can not make any general predictions about this code, although if you read  work such as  and  sometimes you can make good guesses in very specific cases with a specific compiler and environment but please don't do that anywhere near production.So moving on to , in  section6.5 paragraph  says():The grouping of operators and operands is indicated by the syntax.74) Except as specified\n  later (for the function-call (), &&, ||, ?:, and comma operators), So when we have a line like this:i = i++ + ++i;\nwe do not know whether i++ or ++i will be evaluated first. This is mainly to give the compiler .We also have  here as well since the program is modifying variables(i, u, etc..) more than once between . From draft standard section 6.5 paragraph (): by the evaluation of an expression. Furthermore, .it cites the following code examples as being undefined:i = ++i + 1;\na[i++] = i; \nIn all these examples the code is attempting to modify an object more than once in the same sequence point, which will end with the ; in each one of these cases:i = i++ + ++i;\n^   ^       ^\n\ni = (i++);\n^    ^\n\nu = u++ + ++u;\n^   ^       ^\n\nu = (u++);\n^    ^\n\nv = v++ + ++v;\n^   ^       ^\n is defined in the  in section 3.4.4 as:use of an unspecified value, or other behavior where this International Standard provides\n  two or more possibilities and imposes no further requirements on which is chosen in any\n  instanceand  is defined in section 3.4.3 as:behavior, upon use of a nonportable or erroneous program construct or of erroneous data,\n  for which this International Standard imposes no requirementsand notes that:Possible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving during translation or program execution in a documented manner characteristic of the environment (with or without the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message).", "Another way of answering this, rather than getting bogged down in arcane details of sequence points and undefined behavior, is simply to ask,  The first fragment asked about, i = i++ + ++i, is pretty clearly insane in my book.  No one would ever write it in a real program, it's not obvious what it does, there's no conceivable algorithm someone could have been trying to code that would have resulted in this particular contrived sequence of operations.  And since it's not obvious to you and me what it's supposed to do, it's fine in my book if the compiler can't figure out what it's supposed to do, either.The second fragment, i = i++, is a little easier to understand.  Someone is clearly trying to increment i, and assign the result back to i.  But there are a couple ways of doing this in C.  The most basic way to add 1 to i, and assign the result back to i, is the same in almost any programming language:i = i + 1\nC, of course, has a handy shortcut:i++\nThis means, \"add 1 to i, and assign the result back to i\".  So if we construct a hodgepodge of the two, by writingi = i++\nwhat we're really saying is \"add 1 to i, and assign the result back to i, and assign the result back to i\".  We're confused, so it doesn't bother me too much if the compiler gets confused, too.Realistically, the only time these crazy expressions get written is when people are using them as artificial examples of how ++ is supposed to work.  And of course it is important to understand how ++ works.  But one practical rule for using ++ is, \"If it's not obvious what an expression using ++ means, don't write it.\"We used to spend countless hours on comp.lang.c discussing expressions like these and  they're undefined.  Two of my longer answers, that try to really explain why, are archived on the web:\n\n\nSee also  and the rest of the questions in  of the .", "Often this question is linked as a duplicate of questions related to code likeprintf(\"%d %d\\n\", i, i++);\nor printf(\"%d %d\\n\", ++i, i++);\nor similar variants.While this is also  as stated already, there are subtle differences when printf() is involved when comparing to a statement such as:x = i++ + i++;\nIn the following statement:printf(\"%d %d\\n\", ++i, i++);\nthe  of arguments in printf() is . That means, expressions i++ and ++i could be evaluated in any order.  has some relevant descriptions on this:The order in which the function designator, arguments, and\n  subexpressions within the arguments are evaluated in a function call\n  (6.5.2.2).Use of an unspecified value, or other behavior where this\n  International Standard provides two or more possibilities and imposes\n  no further requirements on which is chosen in any instance.EXAMPLE An example of unspecified behavior is the order in which the\n  arguments to a function are evaluated.The  itself is NOT an issue. Consider this example:printf(\"%d %d\\n\", ++x, y++);\nThis too has  because the order of evaluation of ++x and y++ is unspecified. But it's perfectly legal and valid statement. There's  undefined behaviour in this statement. Because the modifications (++x and y++) are done to  objects.What renders the following statement printf(\"%d %d\\n\", ++i, i++);\nas  is the fact that these two expressions modify the  object i without an intervening .Another detail is that the  involved in the printf() call is a , not the .This is an important distinction because the  does introduce a  between the evaluation of their operands, which makes the following legal:int i = 5;\nint j;\n\nj = (++i, i++);  // No undefined behaviour here because the comma operator \n                 // introduces a sequence point between '++i' and 'i++'\n\nprintf(\"i=%d j=%d\\n\",i, j); // prints: i=7 j=6\nThe comma operator evaluates its operands left-to-right and yields only the value of the last operand. So in j = (++i, i++);, ++i increments i to 6 and i++ yields old value of i (6) which is assigned to j. Then i becomes 7 due to post-increment.So if the  in the function call were to be a comma operator then printf(\"%d %d\\n\", ++i, i++);\nwill not be a problem. But it invokes  because the  here is a .For those who are new to  would benefit from reading   to understand the concept and many other variants of undefined behaviour in C.This post:  is also relevant.", "While it is unlikely that any compilers and processors would actually do so, it would be legal, under the C standard, for the compiler to implement \"i++\" with the sequence:In a single operation, read `i` and lock it to prevent access until further notice\nCompute (1+read_value)\nIn a single operation, unlock `i` and store the computed value\nWhile I don't think any processors support the hardware to allow such a thing to be done efficiently, one can easily imagine situations where such behavior would make multi-threaded code easier (e.g. it would guarantee that if two threads try to perform the above sequence simultaneously, i would get incremented by two) and it's not totally inconceivable that some future processor might provide a feature something like that.If the compiler were to write i++ as indicated above (legal under the standard) and were to intersperse the above instructions throughout the evaluation of the overall expression (also legal), and if it didn't happen to notice that one of the other instructions happened to access i, it would be possible (and legal) for the compiler to generate a sequence of instructions that would deadlock.  To be sure, a compiler would almost certainly detect the problem in the case where the same variable i is used in both places, but if a routine accepts references to two pointers p and q, and uses (*p) and (*q) in the above expression (rather than using i twice) the compiler would not be required to recognize or avoid the deadlock that would occur if the same object's address were passed for both p and q.", "While the  of the expressions like a = a++ or a++ + a++ is legal, the  of these constructs is  because a  in C standard is not obeyed. :With  further clarifying thatThis paragraph renders undefined statement expressions such asi = ++i + 1;\na[i++] = i;\nwhile allowingi = i + 1;\na[i] = i;\nThe various sequence points are listed in Annex C of  (and ):The following are the sequence points described in 5.1.2.3:\n  \n  \n  \n  \n  \n  \n  \n  \n  The wording of the same  is:You can detect such errors in a program by for example using a recent version of GCC with -Wall and -Werror, and then GCC will outright refuse to compile your program. The following is the output of gcc (Ubuntu 6.2.0-5ubuntu12) 6.2.0 20161005:% gcc plusplus.c -Wall -Werror -pedantic\nplusplus.c: In function \u2018main\u2019:\nplusplus.c:6:6: error: operation on \u2018i\u2019 may be undefined [-Werror=sequence-point]\n    i = i++ + ++i;\n    ~~^~~~~~~~~~~\nplusplus.c:6:6: error: operation on \u2018i\u2019 may be undefined [-Werror=sequence-point]\nplusplus.c:10:6: error: operation on \u2018i\u2019 may be undefined [-Werror=sequence-point]\n    i = (i++);\n    ~~^~~~~~~\nplusplus.c:14:6: error: operation on \u2018u\u2019 may be undefined [-Werror=sequence-point]\n    u = u++ + ++u;\n    ~~^~~~~~~~~~~\nplusplus.c:14:6: error: operation on \u2018u\u2019 may be undefined [-Werror=sequence-point]\nplusplus.c:18:6: error: operation on \u2018u\u2019 may be undefined [-Werror=sequence-point]\n    u = (u++);\n    ~~^~~~~~~\nplusplus.c:22:6: error: operation on \u2018v\u2019 may be undefined [-Werror=sequence-point]\n    v = v++ + ++v;\n    ~~^~~~~~~~~~~\nplusplus.c:22:6: error: operation on \u2018v\u2019 may be undefined [-Werror=sequence-point]\ncc1: all warnings being treated as errors\nThe important part is to know . For example the  is a sequence point, soj = (i ++, ++ i);\nis well-defined, and will increment i by one, yielding the old value, discard that value; then at comma operator, settle the side effects; and then increment i by one, and the resulting value becomes the value of the expression - i.e. this is just a contrived way to write j = (i += 2) which is yet again a \"clever\" way to writei += 2;\nj = i;\nHowever, the , in function argument lists is  a comma operator, and there is no sequence point between evaluations of distinct arguments; instead their evaluations are unsequenced with regard to each other; so the function call int i = 0;\nprintf(\"%d %d\\n\", i++, ++i, i);\nhas  because i++++i, and the value of i is therefore modified twice, by both i++ and ++i, between the previous and the next sequence point.", "The C standard says that a variable should only be assigned at most once between two sequence points. A semi-colon for instance is a sequence point. \nSo every statement of the form:i = i++;\ni = i++ + ++i;\nand so on violate that rule. The standard also says that behavior is undefined and not unspecified. Some compilers do detect these and produce some result but this is not per standard.However, two different variables can be incremented between two sequence points.while(*src++ = *dst++);\nThe above is a common coding practice while copying/analysing strings.", "In  someone asked about a statement like:int k[] = {0,1,2,3,4,5,6,7,8,9,10};\nint i = 0;\nint num;\nnum = k[++i+k[++i]] + k[++i];\nprintf(\"%d\", num);\nwhich prints 7... the OP expected it to print 6.The ++i increments aren't guaranteed to all complete before the rest of the calculations. In fact, different compilers will get different results here.  In the example you provided, the first 2 ++i executed, then the values of k[] were read, then the last ++i then k[].num = k[i+1]+k[i+2] + k[i+3];\ni += 3\nModern compilers will optimize this very well. In fact, possibly better than the code you originally wrote (assuming it had worked the way you had hoped).", "Your question was probably not, \"Why are these constructs undefined behavior in C?\".  Your question was probably, \"Why did this code (using ++) not give me the value I expected?\", and someone marked your question as a duplicate, and sent you here. answer tries to answer that question: why did your code not give you the answer you expected, and how can you learn to recognize (and avoid) expressions that will not work as expected.I assume you've heard the basic definition of C's ++ and -- operators by now, and how the prefix form ++x differs from the postfix form x++.  But these operators are hard to think about, so to make sure you understood, perhaps you wrote a tiny little test program involving something likeint x = 5;\nprintf(\"%d %d %d\\n\", x, ++x, x++);\nBut, to your surprise, this program did  help you understand -- it printed some strange, unexpected, inexplicable output, suggesting that maybe ++ does something completely different, not at all what you thought it did.Or, perhaps you're looking at a hard-to-understand expression likeint x = 5;\nx = x++ + ++x;\nprintf(\"%d\\n\", x);\nPerhaps someone gave you that code as a puzzle.  This code also makes no sense, especially if you run it -- and if you compile and run it under two different compilers, you're likely to get two different answers!  What's up with that?  Which answer is correct?  (And the answer is that both of them are, or neither of them are.)As you've heard by now, all of these expressions are , which means that the C language makes no guarantee about what they'll do.  This is a strange and surprising result, because you probably thought that any program you could write, as long as it compiled and ran, would generate a unique, well-defined output.  But in the case of undefined behavior, that's not so.What makes an expression undefined?  Are expressions involving ++ and -- always undefined?  Of course not: these are useful operators, and if you use them properly, they're perfectly well-defined.For the expressions we're talking about what makes them undefined is when there's too much going on at once, when we're not sure what order things will happen in, but when the order matters to the result we get.Let's go back to the two examples I've used in this answer.  When I wroteprintf(\"%d %d %d\\n\", x, ++x, x++);\nthe question is, before calling printf, does the compiler compute the value of x first, or x++, or maybe ++x?  But it turns out .  There's no rule in C which says that the arguments to a function get evaluated left-to-right, or right-to-left, or in some other order.  So we can't say whether the compiler will do x first, then ++x, then x++, or x++ then ++x then x, or some other order.  But the order clearly matters, because depending on which order the compiler uses, we'll clearly get different results printed by printf.What about this crazy expression?x = x++ + ++x;\nThe problem with this expression is that it contains three different attempts to modify the value of x: (1) the x++ part tries to add 1 to x, store the new value in x, and return the old value of x; (2) the ++x part tries to add 1 to x, store the new value in x, and return the new value of x; and (3) the x = part tries to assign the sum of the other two back to x.  Which of those three attempted assignments will \"win\"?  Which of the three values will actually get assigned to x?  Again, and perhaps surprisingly, there's no rule in C to tell us.You might imagine that precedence or associativity or left-to-right evaluation tells you what order things happen in, but they do not.  You may not believe me, but please take my word for it, and I'll say it again: precedence and associativity do not determine every aspect of the evaluation order of an expression in C.  In particular, if within one expression there are multiple different spots where we try to assign a new value to something like x, precedence and associativity do  tell us which of those attempts happens first, or last, or anything.So with all that background and introduction out of the way, if you want to make sure that all your programs are well-defined, which expressions can you write, and which ones can you not write?These expressions are all fine:y = x++;\nz = x++ + y++;\nx = x + 1;\nx = a[i++];\nx = a[i++] + b[j++];\nx[i++] = a[j++] + b[k++];\nx = *p++;\nx = *p++ + *q++;\nThese expressions are all undefined:x = x++;\nx = x++ + ++x;\ny = x + x++;\na[i] = i++;\na[i++] = i;\nprintf(\"%d %d %d\\n\", x, ++x, x++);\nAnd the last question is, how can you tell which expressions are well-defined, and which expressions are undefined?As I said earlier, the undefined expressions are the ones where there's too much going at once, where you can't be sure what order things happen in, and where the order matters:As an example of #1, in the expressionx = x++ + ++x;\nthere are three attempts to modify `x.As an example of #2, in the expressiony = x + x++;\nwe both use the value of x, and modify it.So that's the answer: make sure that in any expression you write, each variable is modified at most once, and if a variable is modified, you don't also attempt to use the value of that variable somewhere else.", "A good explanation about what happens in this kind of computation is provided in the document  from .I explain the ideas.The main rule from the standard ISO 9899 that applies in this situation is  6.5p2.Between the previous and next sequence point an object shall have its stored value modified at most once by the evaluation of an expression.   Furthermore, the prior value shall be read only to determine the value to be stored.The sequence points in an expression like i=i++ are before i= and after i++.  In the paper that I quoted above it is explained that you can figure out the program as being formed by small boxes, each box containing the instructions between 2 consecutive sequence points.  The sequence points are defined in annex C of the standard, in the case of i=i++ there are 2 sequence points that delimit a full-expression.  Such an expression is syntactically equivalent with an entry of expression-statement in the Backus-Naur form of the grammar (a grammar is provided in annex A of the Standard).So the order of instructions inside a box has no clear order.i=i++\ncan be interpreted astmp = i\ni=i+1\ni = tmp\nor astmp = i\ni = tmp\ni=i+1\nbecause both all these forms to interpret the code i=i++ are valid and because both generate different answers, the behavior is undefined.So a sequence point can be seen by the beginning and the end of each box that composes the program [the boxes are atomic units in C] and inside a box the order of instructions is not defined in all cases.  Changing that order one can change the result sometimes.EDIT:Other good source for explaining such ambiguities are the entries from  site (also published ) , namely  and  and  .", "The reason is that the program is running undefined behavior. The problem lies in the evaluation order, because there is no sequence points required according to C++98 standard ( no operations is sequenced before or after another according to C++11 terminology).However if you stick to one compiler, you will find the behavior persistent, as long as you don't add function calls or pointers, which would make the behavior more messy.\nSo first the GCC:\nUsing  15 GCC 7.1 you will get:#include<stdio.h>\nint main(int argc, char ** argv)\n{\nint i = 0;\ni = i++ + ++i;\nprintf(\"%d\\n\", i); // 2\n\ni = 1;\ni = (i++);\nprintf(\"%d\\n\", i); //1\n\nvolatile int u = 0;\nu = u++ + ++u;\nprintf(\"%d\\n\", u); // 2\n\nu = 1;\nu = (u++);\nprintf(\"%d\\n\", u); //1\n\nregister int v = 0;\nv = v++ + ++v;\nprintf(\"%d\\n\", v); //2\n}\nHow does GCC work? it evaluates sub expressions at a left to right order for the right hand side (RHS) , then assigns the value to the left hand side (LHS) . This is exactly how Java and C# behave and define their standards. (Yes, the equivalent software in Java and C# has defined behaviors). It evaluate each sub expression one by one in the RHS Statement in a left to right order; for each sub expression: the ++c (pre-increment)  is evaluated first then the value c is used for the operation, then the post increment c++).according to In GCC C++,  the precedence of the operators controls the order in\n  which the individual operators are evaluatedthe equivalent code in defined behavior C++ as   GCC understands:#include<stdio.h>\nint main(int argc, char ** argv)\n{\n    int i = 0;\n    //i = i++ + ++i;\n    int r;\n    r=i;\n    i++;\n    ++i;\n    r+=i;\n    i=r;\n    printf(\"%d\\n\", i); // 2\n\n    i = 1;\n    //i = (i++);\n    r=i;\n    i++;\n    i=r;\n    printf(\"%d\\n\", i); // 1\n\n    volatile int u = 0;\n    //u = u++ + ++u;\n    r=u;\n    u++;\n    ++u;\n    r+=u;\n    u=r;\n    printf(\"%d\\n\", u); // 2\n\n    u = 1;\n    //u = (u++);\n    r=u;\n    u++;\n    u=r;\n    printf(\"%d\\n\", u); // 1\n\n    register int v = 0;\n    //v = v++ + ++v;\n    r=v;\n    v++;\n    ++v;\n    r+=v;\n    v=r;\n    printf(\"%d\\n\", v); //2\n}\nThen we go to . Visual Studio 2015, you get:#include<stdio.h>\nint main(int argc, char ** argv)\n{\n    int i = 0;\n    i = i++ + ++i;\n    printf(\"%d\\n\", i); // 3\n\n    i = 1;\n    i = (i++);\n    printf(\"%d\\n\", i); // 2 \n\n    volatile int u = 0;\n    u = u++ + ++u;\n    printf(\"%d\\n\", u); // 3\n\n    u = 1;\n    u = (u++);\n    printf(\"%d\\n\", u); // 2 \n\n    register int v = 0;\n    v = v++ + ++v;\n    printf(\"%d\\n\", v); // 3 \n}\nHow does visual studio work, it takes another approach, it evaluates all pre-increments expressions in first pass, then uses variables values in the operations in second pass,  assign from RHS to LHS in third pass, then at last pass it evaluates all the post-increment expressions in one pass. So the equivalent in defined behavior C++ as Visual C++ understands:#include<stdio.h>\nint main(int argc, char ** argv)\n{\n    int r;\n    int i = 0;\n    //i = i++ + ++i;\n    ++i;\n    r = i + i;\n    i = r;\n    i++;\n    printf(\"%d\\n\", i); // 3\n\n    i = 1;\n    //i = (i++);\n    r = i;\n    i = r;\n    i++;\n    printf(\"%d\\n\", i); // 2 \n\n    volatile int u = 0;\n    //u = u++ + ++u;\n    ++u;\n    r = u + u;\n    u = r;\n    u++;\n    printf(\"%d\\n\", u); // 3\n\n    u = 1;\n    //u = (u++);\n    r = u;\n    u = r;\n    u++;\n    printf(\"%d\\n\", u); // 2 \n\n    register int v = 0;\n    //v = v++ + ++v;\n    ++v;\n    r = v + v;\n    v = r;\n    v++;\n    printf(\"%d\\n\", v); // 3 \n}\nas Visual Studio documentation states at :Where several operators appear together, they have equal precedence and are evaluated according to their associativity. The operators in the table are described in the sections beginning with Postfix Operators. "]},
{"question": "PHP code is not being executed, instead code shows on the page", "details": "I'm trying to execute some PHP code on a project (using Dreamweaver) but the code isn't being run.When I check the source code, the PHP code appears as HTML tags (I can see it in the source code). Apache is running properly (I'm working with XAMPP), the PHP pages are being opened properly but the PHP code isn't being executed.Does someone have a suggestion about what is happening? The file is already named as filename.php\nThe Code..:<?\ninclude_once(\"/code/configs.php\");\n?>\n", "answers": ["I'm trying to execute some PHP code on a project (using Dreamweaver) but the code isn't being run.When I check the source code, the PHP code appears as HTML tags (I can see it in the source code). Apache is running properly (I'm working with XAMPP), the PHP pages are being opened properly but the PHP code isn't being executed.Does someone have a suggestion about what is happening? The file is already named as filename.php\nThe Code..:<?\ninclude_once(\"/code/configs.php\");\n?>\n", "Sounds like there is something wrong with your configuration, here are a few things you can check:Make sure that PHP is installed and running correctly. This may sound silly, but you never know. An easy way to check is to run php -v from a command line and see if returns version information or any errors.Make sure that the PHP module is listed  inside of your Apache's httpd.conf This should be something like LoadModule php5_module \"c:/php/php5apache2_2.dll\" in the file. Search for LoadModule php, and make sure that there is no comment (;) in front of it.Make sure that Apache's httpd.conf file has the PHP MIME type in it. This should be something like AddType application/x-httpd-php .php. This tells Apache to run .php files as PHP. Search for AddType, and then make sure there is an entry for PHP, .Make sure your file has the .php extension on it, or whichever extension specified in the MIME definition in point #3, otherwise it will not be executed as PHP.Make sure you are not using  in the PHP file (<?), these are   by default and their use is discouraged. Use <?php instead (or  with short_open_tag=On if you have code that relies on them). Make sure you are accessing your file over your webserver using an URL like http://localhost/file.php not via local file access file://localhost/www/file.phpAnd lastly check the .", "php7 : sudo a2enmod proxy_fcgi setenvif\nsudo a2enconf php7.0-fpm\nsudo service apache2 restart\n", "I'm running Apache on Ubuntu and my issue was that the /etc/apache2/mods-available/php5.conf file was missing this:<FilesMatch \".+\\.ph(p[345]?|t|tml)$\">\n    SetHandler application/x-httpd-php\n</FilesMatch>\nI added it back in and php was parsing php files correctly.", "note for php 7 users, add this to your httpd.conf file:# PHP 7 specific configuration\n<IfModule php7_module>\n    AddType application/x-httpd-php .php\n    AddType application/x-httpd-php-source .phps\n    <IfModule dir_module>\n        DirectoryIndex index.html index.php\n    </IfModule>\n</IfModule>\n", "I found another problem causing this issue and already solved it. I accidentally saved my script in UTF-16 encoding. It seems that PHP5 can't recognize <?php tag in 16 bit encoding by default.", "Also, be sure to check that none of your website config files related to this specific host or virtualhost have any php_admin_value's in them that turn off PHP, like this:php_admin_value engine Off\nWhen in doubt, comment it...# php_admin_value engine Off\nAnd restart your webserver.", "You're just opening your php file into browser. You have to open it using localhost url. if you open a file directly from your directory it will not execute the php code in any case.http://locahost/index.phphttp:127.0.0.1/index.phpEnable php short code. In your case, you are using <? which is php short code for <?php. By default php short codes are disabled.Also use: sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt if you are a ubuntu user.", "I know it should sound silly... but seldom it happens.Check if you are trying to execute php from **http://localhost/info.php**\nand not from file:///var/www/info.php\nps> you can notice that if you write from shellphp info.php \nit answer with the code (it means php functions)..", "This just happened to me again, along with the server downloading html files, rather than processing. I had not use the webserver apache for some time on the computer and meanwhile Ubuntu updated like two more versions from originally installed LTS. Now it is $ cat /etc/issue\nUbuntu 16.04 LTS\nSo the php worked after like so:$ sudo apt-get install lamp-server^\n$ sudo a2enmod php7.0\n$ sudo service apache2 restart \nThe webserver was now parsing the php. Maybe now got to update some webs since php7.0 now running where as it was before running php5. Oh well.", "I've solved this by uninstalling XAMPP, and installing WAMP.\nThanks for the help.", "I faced this issue on php 7.1 that comes with High Sierra (OS X 10.13.5), editing /etc/apache2/httpd.conf with following changes helped:Uncomment this lineLoadModule php7_module libexec/apache2/libphp7.so\nPaste following at the end<IfModule php7_module>\n    AddType application/x-httpd-php .php\n    AddType application/x-httpd-php-source .phps\n\n    <IfModule dir_module>\n        DirectoryIndex index.html index.php\n    </IfModule>\n</IfModule>\n", "on my ubuntu 14.04, apache 2.4, php 5.5.9 install,  I tried with a sample.php on /var/www/html (default document root) and it worked ok. \nSo the problem was on my Virtual Servers config.\nThe solution was to include, on the Directory def containing the .php, this line:    php_admin_flag engine on\n", "Make sure the script contains <?php\nbefore the code that should be executed. There should be no space between <? and php in this.", "i had similar problem but in my case solution was different.\nmy file that held php code was called \nchanged it to  worked fine", "For fresh setup of LAMP running php 7\nedit the file /etc/httpd/conf/httpd.conf\nNote: make sure to make backup for it before changing anything.Paste this at the very bottom of the file:<IfModule php7_module>\nAddType application/x-httpd-php .php\nAddType application/x-httpd-php-source .phps\n<IfModule dir_module>\n    DirectoryIndex index.html index.php\n</IfModule>\nThen, search for LoadModule and paste the following line:LoadModule php7_module modules/libphp7.so\nThis line will simply ask httpd to load the php 7 moduleThen restart httpd", "Check all the packages you have installed for  using:yum list installed | grep remi\nInstall all relevant  packages, especially  on your machine.", "This was in my .htaccessDirectoryIndex index.html index.htm\nindex.html contained PHP code.  By default, PHP won't process files with extentions like htm* as PHP code.You can override this, by adding the following to .htaccess:<FilesMatch \".+\\.html$\">\n    SetHandler application/x-httpd-php\n</FilesMatch>\n", "Add AddType application/x-httpd-php .php to your httpd.conf file if you are using Apache 2.4", "In case we are in the same page do followingsudo apt-get install php -y\nsudo apt-get install php-{bcmath,bz2,intl,gd,mbstring,mysql,zip,fpm} -yTo enable PHP 7.2 FPM in Apache2 do:a2enmod proxy_fcgi setenvifa2enconf php7.2-fpmAfter that, I faced above issue. There are similar questions like .I don't know why but it only happened for my .php files in /var/www/html/ root folder. everything was ok for sub-directories. (for example wordpress and phpmyadmin worked fine)So here is my solution. I decided to enable php module. so I ran this command:a2enmod php7.2but I got this errors:Considering dependency mpm_prefork for php7.2:\n  Considering conflict mpm_event for mpm_prefork:\n  ERROR: Module mpm_event is enabled - cannot proceed due to conflicts. It needs to be disabled first!\n  Considering conflict mpm_worker for mpm_prefork:\n  ERROR: Could not enable dependency mpm_prefork for php7.2, abortingso I decided to disable mpm by running following commands:sudo a2dismod mpm_prefork\nsudo a2dismod mpm_worker\nsudo a2dismod mpm_event\nthen restart apache:systemctl restart apache2then enable php7.2 (my installed version):sudo a2enmod php7.2and right now everything works fine.", "Another possible cause of this problem could be that you are trying to run the script in a \"user directory\" from the UserDir module.  Running PHP scripts in user directories is disabled by default.  You will run into this problem if the script is in the public_html directory in your home folder and you are trying to access it from http://localhost/~your_username.To fix this, open up /etc/apache2/mods-enabled/php7.2.conf.  You must comment or delete the tag block at the bottom that reads<IfModule mod_userdir.c>\n    <Directory /home/*/public_html>\n        php_admin_flag engine Off\n    </Directory>\n</IfModule>\n", "I think the problem that it is showing code instead of the result is that it is not going to local host . recheck what address u r going in. are u going to a local file directory or to the local host.from the screenshot u sent it is going to ur computer not to the localhost.\"file:/// \" it should be  \"localhost/\"", "Reinstalling the mcrypt module worked for me.$sudo apt-get install php5-mcrypt\n$sudo php5enmod mcrypt\n", "I had a case that I accidentally started untaring my files directory in root.  It added the .htaccess file from my files folder that would block all php# If we know how to do it safely, disable the PHP engine entirely.\n<IfModule mod_php5.c>\n  php_flag engine off\n</IfModule>\nBottom line check the .htaccess file on root.", "If you have configuration like this:  <VirtualHost *:80>\n    ServerName example.com\n    DocumentRoot \"/var/www/example.com\"\n\n    <FilesMatch \"\\.php$\">\n        SetHandler \"proxy:fcgi://127.0.0.1:9000\"\n    </FilesMatch>\n</VirtualHost>\nUncomment next lines in your httpd.confLoadModule proxy_module lib/httpd/modules/mod_proxy.so\nLoadModule proxy_fcgi_module lib/httpd/modules/mod_proxy_fcgi.so\nIt works for me", "Just spent hours of trying to get . Finally for me it was a typo in  LoadModule. Drew attention to writing and exact module path through the . Thank you!After two nights I discovered... My directory was written c: (lower case)I had LoadModule php5_module \"c:/php/php5apache2.dll\" but  is:LoadModule php5_module \"C:/php/php5apache2_4.dll\"\nSo I also missed the _4 before (for ). The full snippet that worked for me:# PHP\nLoadModule php5_module \"C:/php/php5apache2_4.dll\"\nAddHandler application/x-httpd-php .php\n<FilesMatch \\.php$>\n    SetHandler application/x-httpd-php\n</FilesMatch>\nJust tried . There the LoadModule line in  for Apache 2.4 readsLoadModule php7_module \"C:/php/php7apache2_4.dll\"\nCurrently  c:/php/php5apache2.dll which of course needs to be adjusted.", "in my case (Apache/2.4.34), after uncommenting the specific module \"LoadModule php7_module libexec/apache2/libphp7.so\"from\"/etc/apache2/httpd.conf\"my problem was gone.", "Try restarting the apache server. This was the mistake I had made - forgetting to restart the server after installing php!service httpd restart\n", "In my case the php module was not loaded. Try this:apache2ctl -Mphp7_module (shared)libapache2-mod-php7.3a2enmod php7.3"]},
{"question": "What does a \u201cCannot find symbol\u201d or \u201cCannot resolve symbol\u201d error mean?", "details": "Please explain the following about \"Cannot find symbol\", \"Cannot resolve symbol\" or \"Symbol not found\" errors:\n\n\n\n", "answers": ["Please explain the following about \"Cannot find symbol\", \"Cannot resolve symbol\" or \"Symbol not found\" errors:\n\n\n\n", "Not really. \"Cannot find symbol\", \"Cannot resolve symbol\" and \"Symbol not found\" all mean the same thing.  Different Java compilers use different phraseology.Firstly, it is a .  It means that  there is a problem in your Java source code,  there is a problem in the way that you are compiling it.Your Java source code consists of the following things:\ntruefalseclasswhile\n42'X'\"Hi mum!\"\n+={\nReaderitoStringprocessEquibalancedElephants\n\nA \"Cannot find symbol\" error is about the identifiers.  When your code is compiled, the compiler needs to work out what each and every identifier in your code means.A \"Cannot find symbol\" error means that the compiler cannot do this.  Your code appears to be referring to something that the compiler doesn't understand.As a first order, there is only one cause.  The compiler looked in all of the places where the identifier  be defined, and it couldn't find the definition.  This could be caused by a number of things.  The common ones are as follows:\nFor identifiers in general:\nStringBiulderStringBuilder\nstringBuilderStringBuilder\nmystringmy_string\n\n\nFor identifiers that should refer to variables:\n\n\n\nFor identifiers that should be method or field names:\nPerhaps you are trying to refer to an inherited method or field that wasn't declared in the parent / ancestor classes or interfaces.\nPerhaps you are trying to refer to a method or field that does not exist (i.e. has not been declared) in the type you are using; e.g. \"someString\".push().\nPerhaps you are trying to use a method as a field, or vice versa; e.g. \"someString\".length or someArray.length().\nPerhaps you are mistakenly operating on an array rather than array element; e.g.    String strings[] = ...\n    if (strings.charAt(3)) { ... }\n    // maybe that should be 'strings[0].charAt(3)'\n\n\nFor identifiers that should be class names:\nPerhaps you forgot to import the class.\nPerhaps you used \"star\" imports, but the class isn't defined in any of the packages that you imported.\nPerhaps you forgot a new as in:    String s = String();  // should be 'new String()'\n\n\nFor cases where type or instance doesn't appear to have the member you were expecting it to have:\n\n\n\n\n\n\nThe problem is often a combination of the above.  For example, maybe you \"star\" imported java.io.* and then tried to use the Files class ... which is in java.nio not java.io.  Or maybe you meant to write File ... which  a class in java.io.Here is an example of how incorrect variable scoping can lead to a \"Cannot find symbol\" error:List<String> strings = ...\n\nfor (int i = 0; i < strings.size(); i++) {\n    if (strings.get(i).equalsIgnoreCase(\"fnord\")) {\n        break;\n    }\n}\nif (i < strings.size()) {\n    ...\n}\nThis will give a \"Cannot find symbol\" error for i in the if statement.  Though we previously declared i, that declaration is only  for the for statement and its body.  The reference to i in the if statement  that declaration of i.  It is .(An appropriate correction here might be to move the if statement inside the loop, or to declare i before the start of the loop.)Here is an example that causes puzzlement where a typo leads to a seemingly inexplicable \"Cannot find symbol\" error:for (int i = 0; i < 100; i++); {\n    System.out.println(\"i is \" + i);\n}\nThis will give you a compilation error in the println call saying that i cannot be found.  But (I hear you say) I did declare it!The problem is the sneaky semicolon ( ; ) before the {.  The Java language syntax defines a semicolon in that context to be an .  The empty statement then becomes the body of the for loop.  So that code actually means this:for (int i = 0; i < 100; i++); \n\n// The previous and following are separate statements!!\n\n{\n    System.out.println(\"i is \" + i);\n}\nThe { ... } block is NOT the body of the for loop, and therefore the previous declaration of i in the for statement is  in the block.Here is another example of \"Cannot find symbol\" error that is caused by a typo.int tmp = ...\nint res = tmp(a + b);\nDespite the previous declaration, the tmp in the tmp(...) expression is erroneous.  The compiler will look for a method called tmp, and won't find one.  The previously declared tmp is in the namespace for variables, not the namespace for methods.In the example I came across, the programmer had actually left out an operator.  What he meant to write was this:int res = tmp * (a + b);\nThere is another reason why the compiler might not find a symbol if you are compiling from the command line.  You might simply have forgotten to compile or recompile some other class.  For example, if you have classes Foo and Bar where Foo uses Bar.  If you have never compiled Bar and you run javac Foo.java, you are liable to find that the compiler can't find the symbol Bar.  The simple answer is to compile Foo and Bar together; e.g. javac Foo.java Bar.java or javac *.java.  Or better still use a Java build tool; e.g. Ant, Maven, Gradle and so on.There are some other more obscure causes too ... which I will deal with below.Generally speaking, you start out by figuring out what  the compilation error.\n\n\n\nThen you  about what your code is supposed to be saying.  Then finally you work out what correction you need to make to your source code to do what you want.Note that not every \"correction\" is correct. Consider this:for (int i = 1; i < 10; i++) {\n    for (j = 1; j < 10; j++) {\n        ...\n    }\n}\nSuppose that the compiler says \"Cannot find symbol\" for j.  There are many ways I could \"fix\" that:\nforfor (int j = 1; j < 10; j++)\njforfor\njifor\n\nThe point is that you  to understand what your code is trying to do in order to find the right fix.Here are a couple of cases where the \"Cannot find symbol\" is seemingly inexplicable ... until you look closer.: If you are using an IDE or a build tool that manages the build path and project dependencies, you may have made a mistake with the dependencies; e.g. left out a dependency, or selected the wrong version.  If you are using a build tool (Ant, Maven, Gradle, etc), check the project's build file.  If you are using an IDE, check the project's build path configuration.:  It sometimes happens that new Java programmers don't understand how the Java tool chain works, or haven't implemented a repeatable \"build process\"; e.g. using an IDE, Ant, Maven, Gradle and so on.  In such a situation, the programmer can end up chasing his tail looking for an illusory error that is  caused by not recompiling the code properly, and the like ...:  It is possible that an earlier build failed in a way that gave a JAR file with missing classes.  Such a failure would typically be noticed if you were using a build tool.  However if you are getting JAR files from someone else, you are dependent on  building properly, and noticing errors.  If you suspect this, use tar -tvf to list the contents of the suspect JAR file.: People have reported cases where their IDE gets confused and the compiler in the IDE cannot find a class that exists ... or the reverse situation.\nThis could happen if the IDE has been configured with the wrong JDK version.\nThis could happen if the IDE's caches get out of sync with the file system.  There are IDE specific ways to fix that.\nThis could be an IDE bug.  For instance @Joel Costigliola describes a scenario where Eclipse does not handle a Maven \"test\" tree correctly: .\n: When you are programming for Android, and you have \"Cannot find symbol\" errors related to R, be aware that the R symbols are defined by the context.xml file.  Check that your context.xml file is correct and in the correct place, and that the corresponding R class file has been generated / compiled.  Note that the Java symbols are case sensitive, so the corresponding XML ids are be case sensitive too.Other symbol errors on Android are likely to be due to previously mention reasons; e.g. missing or incorrect dependencies, incorrect package names, method or fields that don't exist in a particular API version, spelling / typing errors, and so on.: I've seen cases where the compiler complains that substring is an unknown symbol in something like the followingString s = ...\nString s1 = s.substring(1);\nIt turned out that the programmer had created their own version of String and that his version of the class didn't define a substring methods.Lesson: Don't define your own classes with the same names as common library classes!  If you use UTF-8 encoding for your source files, it is possible to have identifiers that  the same, but are in fact different because they contain homoglyphs.   See  for more information.You can avoid this by restricting yourself to ASCII or Latin-1 as the source file encoding, and using Java \\uxxxx escapes for other characters.", "You'll also get this error if you forget a new:String s = String();\nversusString s = new String();\nbecause the call without the new keyword will try and look for a (local) method called String without arguments - and that method signature is likely not defined.", "As I've seen that kind of questions a few times already, maybe one more example to what's illegal even if it might  okay.Consider this code:if(somethingIsTrue()) {\n  String message = \"Everything is fine\";\n} else {\n  String message = \"We have an error\";\n}\nSystem.out.println(message);\nThat's invalid code. Because neither of the variables named message is visible outside of their respective scope - which would be the surrounding brackets {} in this case. You might say: \"But a variable named message is defined either way - so message  defined after the if\". But you'd be wrong. Java has no free() or delete operators, so it has to rely on tracking variable scope to find out when variables are no longer used (together with references to these variables of cause). It's especially bad if you thought you did something good. I've seen this kind of error after \"optimizing\" code like this:if(somethingIsTrue()) {\n  String message = \"Everything is fine\";\n  System.out.println(message);\n} else {\n  String message = \"We have an error\";\n  System.out.println(message);\n}\n\"Oh, there's duplicated code, let's pull that common line out\" -> and there it it.The  most common way to deal with this kind of scope-trouble would be to pre-assign the else-values to the variable names in the outside scope and then reassign in if:String message = \"We have an error\";\nif(somethingIsTrue()) {\n  message = \"Everything is fine\";\n} \nSystem.out.println(message);\n", "One way to get this error in Eclipse : Asrc/test/javaBsrc/main/javaAResult : Eclipse will compile the code, but maven will give \"Cannot find symbol\".Underlying cause : Eclipse is using a combined build path for the main and test trees.  Unfortunately, it does not support using different build paths for different parts of an Eclipse project, which is what Maven requires.Solution : ", "\"Can not find \" means that , compiler who can't find appropriate variable, method ,class etc...if you got that error massage , first of all you want to find code line where get error massage..And then you will able to find which variable , method or class have not define before using it.After confirmation  initialize that variable ,method or class can be used for later require...Consider the following example.I'll create a demo class and print a name...class demo{ \n      public static void main(String a[]){\n             System.out.print(name);\n      }\n}\nNow look at the result..That error says, \"variable name can not find\"..Defining and initializing value for 'name' variable  can be abolished that error..Actually like this,class demo{ \n      public static void main(String a[]){\n\n             String name=\"smith\";\n\n             System.out.print(name);\n      }\n}\nNow look at the new output...Ok Successfully solved that error..At the same time , if you could get \"can not find method \" or \"can not find class\" something , At first,define a class or method and after use that.. ", "If you're getting this error in the build somewhere else, while your IDE says everything is perfectly fine, then check that you are using the same Java versions in both places.For example, Java 7 and Java 8 have different APIs, so calling a non-existent API in an older Java version would cause this error.", "Using IntelliJSelect -> will solve it", "I too was getting this error. (for which I googled and I was directed to this page) I was calling a static method defined in the class of a project A from a class defined in another project B. \nI was getting the following error:error: cannot find symbol\n I resolved this by first building the project where the method is defined then the project where the method was being called from.", "If eclipse Java build path is mapped to 7, 8 and in Project pom.xml Maven properties java.version is mentioned higher Java version(9,10,11, etc..,) than 7,8 you need to update in pom.xml file.In Eclipse if Java is mapped to Java version 11 and in pom.xml it is mapped to Java version 8. Update Eclipse support to Java 11 by go through below steps in eclipse IDE\nHelp -> Install New Software -> Paste following link  at Add (Popup window will open) ->Name: Java 11 support\nLocation: then update Java version in Maven properties of  file as below<java.version>11</java.version>\n<maven.compiler.source>${java.version}</maven.compiler.source>\n<maven.compiler.target>${java.version}</maven.compiler.target>\nFinally do right click on project Debug as -> Maven clean, Maven build steps", "There can be various scenarios as people have mentioned above. A couple of things which have helped me resolve this.If you are using IntelliJFile -> 'Invalidate Caches/Restart'ORThe class being referenced was in another project and that dependency was not added to the Gradle build file of my project. So I added the dependency usingcompile project(':anotherProject')and it worked. HTH!", "you compiled your code using maven compile and then used maven test to run it worked fine. Now if you changed something in your code and then without compiling you are running it, you will get this error.Solution: Again compile it and then run test. For me it worked this way.", "In my case - I had to perform below operations:context.xmlsrc/java/packageresourcetarget", "For hints, look closer at the class name name that throws an error and the line number, example:\nCompilation failure\n[ERROR] \\applications\\xxxxx.java:[44,30] error: cannot find symbolOne other cause is unsupported method of for java version say jdk7 vs 8.\nCheck your %JAVA_HOME% ", "We got the error in a Java project that is set up as a Gradle multi-project build. It turned out that one of the sub-projects was missing the .\nThis prevented the sub-project's class files from being visible to other projects in the build.After adding the Java library plugin to the sub-project's build.gradle in the following way, the error went away:plugins {\n    ...\n    id 'java-library'\n}\n", "I solved this error like this... The craziness of android. I had the package name as Adapter and the I refactor the name to adapter with an \"a\" instead of \"A\" and solved the error."]},
{"question": "What is a debugger and how can it help me diagnose problems?", "details": "This is intended to be a general-purpose question to assist new programmers who have a problem with a program, but do not know how to use a debugger to diagnose the cause of the problem.This question covers three classes of more specific question:\n\n\n\n", "answers": ["This is intended to be a general-purpose question to assist new programmers who have a problem with a program, but do not know how to use a debugger to diagnose the cause of the problem.This question covers three classes of more specific question:\n\n\n\n", "A debugger is a program that can examine the state of your program while your program is running. The  are not important for understanding the basics of how to use a debugger. You can use a debugger to halt the execution of your program when it reaches a particular place in your code, then examine the values of the variables in the program. You can use a debugger to run your program very slowly, one line of code at a time (called ), while you examine the values of its variables.A debugger is a very powerful tool for helping diagnose problems with programs.  And debuggers are available for all practical programming languages. Therefore being able to use a debugger is considered a  of any professional or enthusiast programmer. And using a debugger   is considered  you should do  before asking others for help. As this site is for professional and enthusiast programmers, and not a helpdesk or mentoring site, if you have a question about a problem with a specific program, but have not used a debugger, your question is very likely to be closed and downvoted. If you persist with questions like that, you will eventually be blocked from posting more. By using a debugger you can discover whether a variable has the wrong value, and where in your program its value changed to the wrong value.Using single stepping you can also discover whether the control flow is as you expect. For example, whether an if branch executed when you expect it ought to be.The specifics of using a debugger depend on the debugger and, to a lesser degree, the programming language you are using.\nYou can  a debugger to a process already running your program. You might do if your program is stuck.\nIn practice it is often easier to run your program under the control of a debugger from the very start.\nYou indicate  your program should stop executing by indicating the source-code file and line number of the line at which execution should stop, or by indicating the name of the method/function at which the program should stop (if you want to stop as soon as execution enters the method). The technical means that the debugger uses to cause your program to stop is called a  and this process is called .\nMost  and provide you with a convenient GUI for examining the source code and variables of your program, with a point-and-click interface for setting breakpoints, running your program and single stepping it.\nUsing a debugger can be very difficult unless your program executable or bytecode files include debugging  and cross-references to your source-code. You might have to  to ensure that information is present. If the compiler performs extensive optimizations, those cross-references can become confusing. You might therefore have to .\n", "I want to add that a debugger isn't always the perfect solution, and shouldn't always be the go-to solution to debugging. Here are a few cases where a debugger might not work for you:\n\n\n\n\n\n\n\nIn all of these cases, either having your program stop abruptly could cause the end results to differ, or stepping through manually in search of the one line where the bug is caused is too much of a hassle. This can equally happen whether your bug is incorrect behavior, or a crash. For instance, if memory corruption causes a crash, by the time the crash happens, it's too far from where the memory corruption first occurred, and no useful information is left.So, what are the alternatives?Simplest is simply logging and assertions. Add logs to your program at various points, and compare what you get with what you're expecting. For instance, see if the function where you think there's a bug is even called in the first place. See if the variables at the start of a method are what you think they are. Unlike breakpoints, it's okay for there to be many log lines in which nothing special happens. You can simply search through the log afterward. Once you hit a log line that's different from what you're expecting, add more in the same area. Narrow it down farther and farther, until it's small enough to be able to log every line in the bugged area.Assertions can be used to trap incorrect values as they occur, rather than once they have an effect visible to the end-user. The quicker you catch an incorrect value, the closer you are to the line that produced it.Refactor and unit test. If your program is too big, it might be worthwhile to test it one class or one function at a time. Give it inputs, and look at the outputs, and see which are not as you're expecting. Being able to narrow down a bug from an entire program to a single function can make a huge difference in debugging time.In case of memory leaks or memory stomping, use appropriate tools that are able to analyze and detect these at runtime. Being able to detect where the actual corruption occurs is the first step. After this, you can use logs to work your way back to where incorrect values were introduced.Remember that debugging is a process going backward. You have the end result - a bug - and find the cause, which preceded it. It's about working your way backward and, unfortunately, debuggers only step forwards. This is where good logging and postmortem analysis can give you much better results."]},
{"question": "Can I mix MySQL APIs in PHP?", "details": "I have searched the net and so far what I have seen is that you can use mysql_ and mysqli_ together meaning:<?php\n$con=mysqli_connect(\"localhost\", \"root\" ,\"\" ,\"mysql\");\n\nif( mysqli_connect_errno( $con ) ) {\n    echo \"failed to connect\";\n}else{\n    echo \"connected\";\n}\nmysql_close($con);\necho \"Done\";\n?>\nor <?php\n$con=mysql_connect(\"localhost\", \"root\" ,\"\" ,\"mysql\");\nif( mysqli_connect_errno( $con ) ) {\n    echo \"failed to connect\";\n}else{\n    echo \"connected\";\n}\nmysqli_close($con);\necho \"Done\";\n?>\nAre valid but when I use this code what I get is:Connected\nWarning: mysql_close() expects parameter 1 to be resource, object given in D:\\************.php on line 9\nDone\nFor the first and the same except with mysqli_close(). For the second one.What is the problem? Can't I use mysql_ and mysqli together? Or is it normal? Is the way I can check if the connections are valid at all? (the if(mysq...))", "answers": ["I have searched the net and so far what I have seen is that you can use mysql_ and mysqli_ together meaning:<?php\n$con=mysqli_connect(\"localhost\", \"root\" ,\"\" ,\"mysql\");\n\nif( mysqli_connect_errno( $con ) ) {\n    echo \"failed to connect\";\n}else{\n    echo \"connected\";\n}\nmysql_close($con);\necho \"Done\";\n?>\nor <?php\n$con=mysql_connect(\"localhost\", \"root\" ,\"\" ,\"mysql\");\nif( mysqli_connect_errno( $con ) ) {\n    echo \"failed to connect\";\n}else{\n    echo \"connected\";\n}\nmysqli_close($con);\necho \"Done\";\n?>\nAre valid but when I use this code what I get is:Connected\nWarning: mysql_close() expects parameter 1 to be resource, object given in D:\\************.php on line 9\nDone\nFor the first and the same except with mysqli_close(). For the second one.What is the problem? Can't I use mysql_ and mysqli together? Or is it normal? Is the way I can check if the connections are valid at all? (the if(mysq...))", "No, you can't use mysql and mysqli together.  They are separate APIs and the resources they create are incompatible with one another.There is a mysqli_close, though.", "Just to give a general answer here about all three MYSQL API's with a reference:You can't mix any of the three (mysql_*, mysqli_*, PDO) MYSQL API's from PHP together, it just doesn't work. It's even in the :It is . So, for example, passing a mysqli connection to PDO_MySQL or ext/mysql .You need to use the same MySQL API and its related functions, from connection to querying.\n\n", "Technically you can use as many separate connections as you want, while your problem is caused by a mere typo - you only cannot use resources from one extension with functions from another, which is quite obviously.However, you , no matter from single API or different ones. As it will burden your database server and exhaust its resources. So, although technically you can, you shouldn't mix different extensions in your code, save for the short period of refactoring.", "MySQLi is a lot more secure than MySQL which is anyway now deprecated. That's why you should stick with MySQLi and also you can't mix them as they are both different."]},
{"question": "Passing Data between View Controllers", "details": "I'm new to iOS and Objective-C and the whole MVC paradigm and I'm stuck with the following:I have a view that acts as a data entry form and I want to give the user the option to select multiple products. The products are listed on another view with a UITableViewController and I have enabled multiple selections.My question is, how do I transfer the data from one view to another? I will be holding the selections on the UITableView in an array, but how do I then pass that back to the previous data entry form view so it can be saved along with the other data to Core Data on submission of the form?I have surfed around and seen some people declare an array in the app delegate. I read something about Singletons but don't understand what these are and I read something about creating a data model.What would be the correct way of performing this and how would I go about it?", "answers": ["I'm new to iOS and Objective-C and the whole MVC paradigm and I'm stuck with the following:I have a view that acts as a data entry form and I want to give the user the option to select multiple products. The products are listed on another view with a UITableViewController and I have enabled multiple selections.My question is, how do I transfer the data from one view to another? I will be holding the selections on the UITableView in an array, but how do I then pass that back to the previous data entry form view so it can be saved along with the other data to Core Data on submission of the form?I have surfed around and seen some people declare an array in the app delegate. I read something about Singletons but don't understand what these are and I read something about creating a data model.What would be the correct way of performing this and how would I go about it?", "This question seems to be very popular here on stackoverflow so I thought I would try and give a better answer to help out people starting in the world of iOS like me.I hope this answer is clear enough for people to understand and that I have not missed anything.Passing data forward to a view controller from another view controller. You would use this method if you wanted to pass an object/value from one view controller to another view controller that you may be pushing on to a navigation stack.For this example, we will have ViewControllerA and ViewControllerBTo pass a BOOL value from ViewControllerA to ViewControllerB we would do the following.in ViewControllerB.h create a property for the BOOL@property (nonatomic, assign) BOOL isSomethingEnabled;\nin ViewControllerA you need to tell it about ViewControllerB so use an #import \"ViewControllerB.h\"\nThen where you want to load the view eg. didSelectRowAtIndex or some IBAction you need to set the property in ViewControllerB before you push it onto nav stack.ViewControllerB *viewControllerB = [[ViewControllerB alloc] initWithNib:@\"ViewControllerB\" bundle:nil];\nviewControllerB.isSomethingEnabled = YES;\n[self pushViewController:viewControllerB animated:YES];\nThis will set isSomethingEnabled in ViewControllerB to BOOL value YES.If you are using Storyboards you are most likely using segues and will need this procedure to pass data forward. This is similar to the above but instead of passing the data before you push the view controller, you use a method called-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender\nSo to pass a BOOL from ViewControllerA to ViewControllerB we would do the following:in ViewControllerB.h create a property for the BOOL@property (nonatomic, assign) BOOL isSomethingEnabled;\nin ViewControllerA you need to tell it about ViewControllerB so use an#import \"ViewControllerB.h\"\nCreate a the segue from ViewControllerA to ViewControllerB on the storyboard and give it an identifier, in this example we'll call it \"showDetailSegue\"Next, we need to add the method to ViewControllerA that is called when any segue is performed, because of this we need to detect which segue was called and then do something. In our example we will check for \"showDetailSegue\" and if that's performed we will pass our BOOL value to ViewControllerB-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender{\n    if([segue.identifier isEqualToString:@\"showDetailSegue\"]){\n        ViewControllerB *controller = (ViewControllerB *)segue.destinationViewController;\n        controller.isSomethingEnabled = YES;\n    }\n}\nIf you have your views embedded in a navigation controller you need to change the method above slightly to the following-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender{\n    if([segue.identifier isEqualToString:@\"showDetailSegue\"]){\n        UINavigationController *navController = (UINavigationController *)segue.destinationViewController;\n        ViewControllerB *controller = (ViewControllerB *)navController.topViewController;\n        controller.isSomethingEnabled = YES;\n    }\n}\nThis will set isSomethingEnabled in ViewControllerB to BOOL value YES.To pass data back from ViewControllerB to ViewControllerA you need to use  or , the latter can be used as a loosely coupled mechanism for callbacks.To do this we will make ViewControllerA a delegate of ViewControllerB. This allows ViewControllerB to send a message back to ViewControllerA enabling us to send data back.For ViewControllerA to be a delegate of ViewControllerB it must conform to ViewControllerB's protocol which we have to specify. This tells ViewControllerA which methods it must implement.In ViewControllerB.h, below the #import, but above @interface you specify the protocol.@class ViewControllerB;\n\n@protocol ViewControllerBDelegate <NSObject>\n- (void)addItemViewController:(ViewControllerB *)controller didFinishEnteringItem:(NSString *)item;\n@end\nnext still in the ViewControllerB.h you need to setup a delegate property and synthesize in ViewControllerB.m@property (nonatomic, weak) id <ViewControllerBDelegate> delegate;\nIn ViewControllerB we call a message on the delegate when we pop the view controller.NSString *itemToPassBack = @\"Pass this value back to ViewControllerA\";\n[self.delegate addItemViewController:self didFinishEnteringItem:itemToPassBack];\nThat's it for ViewControllerB. Now in ViewControllerA.h, tell ViewControllerA to import ViewControllerB and conform to its protocol.#import \"ViewControllerB.h\"\n\n@interface ViewControllerA : UIViewController <ViewControllerBDelegate>\nIn ViewControllerA.m implement the following method from our protocol- (void)addItemViewController:(ViewControllerB *)controller didFinishEnteringItem:(NSString *)item\n{\n    NSLog(@\"This was returned from ViewControllerB %@\",item);\n}\nBefore pushing viewControllerB to navigation stack we need to tell  ViewControllerB that ViewControllerA is its delegate, otherwise we will get an error.ViewControllerB *viewControllerB = [[ViewControllerB alloc] initWithNib:@\"ViewControllerB\" bundle:nil];\nviewControllerB.delegate = self\n[[self navigationController] pushViewController:viewControllerB animated:YES];\n\nIt's another way to pass data. // add observer in controller(s) where you want to receive data\n[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleDeepLinking:) name:@\"handleDeepLinking\" object:nil];\n\n-(void) handleDeepLinking:(NSNotification *) notification {\n    id someObject = notification.object // some custom object that was passed with notification fire.\n}\n\n// post notification\nid someObject;\n[NSNotificationCenter.defaultCenter postNotificationName:@\"handleDeepLinking\" object:someObject];\n (A class can be any controller, Network/session manager, UIView subclass or any other class)This example passes data from  to @property void(^selectedVoucherBlock)(NSString *); // in ContollerA.h\n\nwhere you need a value (for example you need your API response in ControllerA or you need ContorllerB data on A)// in ContollerA.m\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    __unsafe_unretained typeof(self) weakSelf = self;\n    self.selectedVoucherBlock = ^(NSString *voucher) {\n        weakSelf->someLabel.text = voucher;\n    };\n}\nUIStoryboard *storyboard = [UIStoryboard storyboardWithName:@\"Main\" bundle:nil];\nControllerB *vc = [storyboard instantiateViewControllerWithIdentifier:@\"ControllerB\"];\nvc.sourceVC = self;\n    [self.navigationController pushViewController:vc animated:NO];\n-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath: \n(NSIndexPath *)indexPath {\n    NSString *voucher = vouchersArray[indexPath.row];\n    if (sourceVC.selectVoucherBlock) {\n        sourceVC.selectVoucherBlock(voucher);\n    }\n    [self.navigationController popToViewController:sourceVC animated:YES];\n}\n", "There are tons and tons of explanations here and around StackOverflow, but if you are a beginner just trying to get something basic to work, try watching this YouTube tutorial (It's what helped me to finally understand how to do it).\n\nThe following is an example based on the video. The idea is to pass a string from the text field in the First View Controller to the label in the Second View Controller.Create the storyboard layout in the Interface Builder. To make the segue, you just  click on the button and drag over to the Second View Controller.The code for the First View Controller isimport UIKit\n\nclass FirstViewController: UIViewController {\n\n    @IBOutlet weak var textField: UITextField!\n    \n    // This function is called before the segue\n    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n        \n        // get a reference to the second view controller\n        let secondViewController = segue.destination as! SecondViewController\n        \n        // set a variable in the second view controller with the String to pass\n        secondViewController.receivedString = textField.text!\n    }\n\n}\nAnd the code for the Second View Controller isimport UIKit\n\nclass SecondViewController: UIViewController {\n\n    @IBOutlet weak var label: UILabel!\n    \n    // This variable will hold the data being passed from the First View Controller\n    var receivedString = \"\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // Used the text from the First View Controller to set the label\n        label.text = receivedString\n    }\n\n}\n\nUITextFieldUILabel\n\nTo pass data back from the second view controller to the first view controller, you use . This video is a very clear walk though of that process:\n\nThe following is an example based on the video (with a few modifications).Create the storyboard layout in the Interface Builder. Again, to make the segue, you just  drag from the button to the Second View Controller. Set the segue identifier to showSecondViewController. Also, don't forget to hook up the outlets and actions using the names in the following code.The code for the First View Controller isimport UIKit\n\nclass FirstViewController: UIViewController, DataEnteredDelegate {\n\n    @IBOutlet weak var label: UILabel!\n    \n    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n        if segue.identifier == \"showSecondViewController\" {\n            let secondViewController = segue.destination as! SecondViewController\n            secondViewController.delegate = self\n        }\n    }\n    \n    func userDidEnterInformation(info: String) {\n        label.text = info\n    }\n}\nNote the use of our custom DataEnteredDelegate protocol.The code for the second view controller isimport UIKit\n\n// protocol used for sending data back\nprotocol DataEnteredDelegate: AnyObject {\n    func userDidEnterInformation(info: String)\n}\n\nclass SecondViewController: UIViewController {\n\n    // making this a weak variable so that it won't create a strong reference cycle\n    weak var delegate: DataEnteredDelegate? = nil\n    \n    @IBOutlet weak var textField: UITextField!\n\n    @IBAction func sendTextBackButton(sender: AnyObject) {\n        \n        // call this method on whichever class implements our delegate protocol\n        delegate?.userDidEnterInformation(info: textField.text!)\n    \n        // go back to the previous view controller\n        _ = self.navigationController?.popViewController(animated: true)\n    }\n}\nNote that the protocol is outside of the View Controller class.That's it. Running the app now you should be able to send data back from the second view controller to the first.", "The M in MVC is for \"Model\" and in the MVC paradigm the role of model classes is to manage a program's data. A model is the opposite of a view -- a view knows how to display data, but it knows nothing about what to do with data, whereas a model knows everything about how to work with data, but nothing about how to display it. Models can be complicated, but they don't have to be -- the model for your app might be as simple as an array of strings or dictionaries.The role of a controller is to mediate between view and model. Therefore, they need a reference to one or more view objects and one or more model objects. Let's say that your model is an array of dictionaries, with each dictionary representing one row in your table. The root view for your app displays that table, and it might be responsible for loading the array from a file. When the user decides to add a new row to the table, they tap some button and your controller creates a new (mutable) dictionary and adds it to the array. In order to fill in the row, the controller creates a detail view controller and gives it the new dictionary. The detail view controller fills in the dictionary and returns. The dictionary is already part of the model, so nothing else needs to happen.", "There are various ways by which a data can be received to a different class in iOS. For example - NSUserDefaultsBut for the simple scenario of passing a value to a different class whose allocation is done in the current class, the most common and preferred method would be the direct setting of values after allocation. This is done as follows:-We can understand it using two controllers -  Suppose in Controller1 class you want to create the Controller2 object and push it with a String value being passed. This can be done as this:-- (void)pushToController2 {\n\n    Controller2 *obj = [[Controller2 alloc] initWithNib:@\"Controller2\" bundle:nil];\n    [obj passValue:@\"String\"];\n    [self pushViewController:obj animated:YES];\n}\nIn the implementation of the Controller2 class there will be this function as- @interface Controller2  : NSObject\n\n@property (nonatomic , strong) NSString* stringPassed;\n\n@end\n\n@implementation Controller2\n\n@synthesize stringPassed = _stringPassed;\n\n- (void) passValue:(NSString *)value {\n\n    _stringPassed = value; //or self.stringPassed = value\n}\n\n@end\nYou can also directly set the properties of the Controller2 class in the similar way as this:- (void)pushToController2 {\n\n    Controller2 *obj = [[Controller2 alloc] initWithNib:@\"Controller2\" bundle:nil];\n    [obj setStringPassed:@\"String\"];  \n    [self pushViewController:obj animated:YES];\n}\nTo pass multiple values you can use the multiple parameters like :-Controller2 *obj = [[Controller2 alloc] initWithNib:@\"Controller2\" bundle:nil];\n[obj passValue:@\u201cString1\u201d andValues:objArray withDate:date]; \nOr if you need to pass more than 3 parameters which are related to a common feature you can store the values to a Model class and pass that modelObject to the next classModelClass *modelObject = [[ModelClass alloc] init]; \nmodelObject.property1 = _property1;\nmodelObject.property2 = _property2;\nmodelObject.property3 = _property3;\n\nController2 *obj = [[Controller2 alloc] initWithNib:@\"Controller2\" bundle:nil];\n[obj passmodel: modelObject];\nSo in-short if you want to -1) set the private variables of the second class initialise the values by calling a custom function and passing the values.\n2) setProperties do it by directlyInitialising it using the setter method.\n3) pass more that 3-4 values related to each other in some manner , then create a model class and set values to its object and pass the object using any of the above process.\nHope this helps", "After more research it seemed that Protocols and Delegates is the correct/Apple prefered way of doing this.I ended up using this example @ iPhone Dev SDKWorked fine and allowed me to pass a string and an array forward and back between my views.Thanks for all your help", "I find simplest and most elegant version with passing blocks.\nLet's name view controller that waits for returned data as \"A\" and returning view controller as \"B\". In this example we want to get 2 values: first of Type1 and second of Type2.Assuming we use Storyboard, first controller sets callback block, for example during segue preparation:- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender\n{\n    if ([segue.destinationViewController isKindOfClass:[BViewController class]])\n    {\n        BViewController *viewController = segue.destinationViewController;\n\n        viewController.callback = ^(Type1 *value1, Type2 *value2) {\n            // optionally, close B\n            //[self.navigationController popViewControllerAnimated:YES];\n\n            // let's do some action after with returned values\n            action1(value1);\n            action2(value2);\n        };\n\n    }\n}\nand \"B\" view controller should declare callback property, BViewController.h:// it is important to use \"copy\"\n@property (copy) void(^callback)(Type1 *value1, Type2 *value2);\nThan in implementation file BViewController.m after we have desired values to return our callback should be called:if (self.callback)\n    self.callback(value1, value2);\nOne thing to remember is that using block often needs to manage strong and __weak references  like explained ", "There is some good information in many of the answers given, but none address the question fully.The question asks about passing information between view controllers. The specific example given asks about passing information between views, but given the self-stated newness to iOS, the original poster likely meant between viewControllers, not between views (without any involvement from the ViewControllers). It seems that all the answers focus on two view controllers, but what if the app evolves to need to involve more than two view controllers in the information exchange? The original poster also asked about  and the use of the . These questions need to be answered.To help anyone else looking at this question, who wants a full answer, I'm going to attempt to provide it.Rather than having a highly hypothetical, abstract discussion, it helps to have concrete applications in mind. To help define a two-view-controller situation and a more-than-two-view-controller situation, I am going to define two concrete application scenarios. maximum two view controllers ever need to share information.\nSee diagram one. There are two view controllers in the application. There is a ViewControllerA (Data Entry Form), and View Controller B (Product List). The items selected in the product list must match the items displayed in the text box in the data entry form. In this scenario, ViewControllerA and ViewControllerB must communicate directly with each other and no other view controllers. : more than two view controllers need to share the same information.\nSee diagram two.There are four view controllers in the application. It is a tab-based application for managing home inventory. Three view controllers present differently filtered views of the same data:\n\n\n\n\nAny time an individual item is created or edited, it must also synchronize with the other view controllers. For example, if we add a boat in ViewControllerD, but it is not yet insured, then the boat must appear when the user goes to ViewControllerA (Luxury Items), and also ViewControllerC (Entire Home Inventory), but not when the user goes to ViewControllerB (Non-insured Items). We need be concerned with not only adding new items, but also deleting items (which may be allowed from any of the four view controllers), or editing existing items (which may be allowed from the \"Add New Item Form\", repurposing the same for editing).Since all the view controllers do need to share the same data, all four view controllers need to remain in synchronization, and therefore there needs to be some sort of communication to all other view controllers, whenever any single view controller changes the underlying data. It should be fairly obvious that we do not want each view controller communicating directly with each other view controller in this scenario. In case it is not obvious, consider if we had 20 different view controllers (rather than just 4). How difficult and error-prone would it be to notify each of the other 19 view controllers any time one view controller made a change?In scenario one, we have several viable solutions, as other answers have given\n\n\n\n\nIn scenario two, we have other viable solutions:\n\n\nA  is an instance of a class, that instance being the only instance in existence during its lifetime. A singleton gets its name from the fact that it is the single instance. Normally developers who use singletons have special class methods for accessing them. + (HouseholdInventoryManager*) sharedManager; {\n    static dispatch_once_t onceQueue;\n    static HouseholdInventoryManager* _sharedInstance;\n\n    // dispatch_once is guaranteed to only be executed once in the\n    // lifetime of the application\n    dispatch_once(&onceQueue, ^{\n        _sharedInstance = [[self alloc] init];\n    });\n    return _sharedInstance;\n}\nNow that we understand what a singleton is, let's discuss how a singleton fits into the observer pattern. The observer pattern is used for one object to respond to changes by another object. In the second scenario, we have four different view controllers, who all want to know about changes to the underlying data. The \"underlying data\" should belong to a single instance, a singleton. The \"know about changes\" is accomplished by observing changes made to the singleton.The home inventory application would have a single instance of a class which is designed to manage a list of inventory items. The manager would manage a collection of household items. The following is a class definition for the data manager:#import <Foundation/Foundation.h>\n\n@class JGCHouseholdInventoryItem;\n\n@interface HouseholdInventoryManager : NSObject\n/*!\n The global singleton for accessing application data\n */\n+ (HouseholdInventoryManager*) sharedManager;\n\n\n- (NSArray *) entireHouseholdInventory;\n- (NSArray *) luxuryItems;\n- (NSArray *) nonInsuredItems;\n\n- (void) addHouseholdItemToHomeInventory:(JGCHouseholdInventoryItem*)item;\n- (void) editHouseholdItemInHomeInventory:(JGCHouseholdInventoryItem*)item;\n- (void) deleteHoueholdItemFromHomeInventory:(JGCHouseholdInventoryItem*)item;\n@end\nWhen the collection of home inventory items changes, the view controllers need to be made aware of this change. The class definition above does not make it obvious how this will happen. We need to follow the observer pattern. The view controllers must formally observe the sharedManager. There are two ways to observe another object:\n\n\nIn scenario two, we do not have a single property of the HouseholdInventoryManager which could be observed using KVO. Because we do not have a single property which is easily observable, the observer pattern, in this case, must be implemented using NSNotificationCenter. Each of the four view controllers would subscribe to notifications, and the sharedManager would send notifications to the notification center when appropriate. The inventory manager does not need to know anything about the view controllers or instances of any other classes which may be interested in knowing when the collection of inventory items changes; the NSNotificationCenter takes care of these implementation details. The View Controllers simply subscribe to notifications, and the data manager simply posts notifications.Many beginner programmers take advantage of the fact that there is always exactly one  in the lifetime of the application, which is globally accessible. Beginning programmers use this fact to stuff objects and functionality into the appDelegate as a convenience for access from anywhere else in the application. Just because the AppDelegate is a singleton doesn't mean it should replace all other singletons. This is a poor practice as it places too much burden on one class, breaking good object-oriented practices. Each class should have a clear role that is easily explained, often just by the name of the class.Any time your Application Delegate starts to get bloated, start to remove functionality into singletons. For example, the Core Data Stack should not be left in the AppDelegate, but should instead be put in its own class, a coreDataManager class. \n\n\n\n", "The OP didn't mention view controllers but so many of the answers do, that I wanted to chime in with what some of the new features of the LLVM allow to make this easier when wanting to pass data from one view controller to another and then getting some results back.Storyboard segues, ARC and LLVM blocks make this easier than ever for me.  Some answers above mentioned storyboards and segues already but still relied on delegation.  Defining delegates certainly works but some people may find it easier to pass pointers or code blocks.With UINavigators and segues, there are easy ways of passing information to the subservient controller and getting the information back.  ARC makes passing pointers to things derived from NSObjects simple so if you want the subservient controller to add/change/modify some data for you, pass it a pointer to a mutable instance.  Blocks make passing actions easy so if you want the subservient controller to invoke an action on your higher level controller, pass it a block.  You define the block to accept any number of arguments that makes sense to you.  You can also design the API to use multiple blocks if that suits things better.Here are two trivial examples of the segue glue.  The first is straightforward showing one parameter passed for input, the second for output.// Prepare the destination view controller by passing it the input we want it to work on\n// and the results we will look at when the user has navigated back to this controller's view.\n\n- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender\n{\n    [[segue destinationViewController]\n\n     // This parameter gives the next controller the data it works on.\n     segueHandoffWithInput:self.dataForNextController\n\n     // This parameter allows the next controller to pass back results\n     // by virtue of both controllers having a pointer to the same object.\n     andResults:self.resultsFromNextController];\n}\nThis second example shows passing a callback block for the second argument.  I like using blocks because it keeps the relevant details close together in the source - the higher level source.// Prepare the destination view controller by passing it the input we want it to work on\n// and the callback when it has done its work.\n\n- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender\n{\n    [[segue destinationViewController]\n\n     // This parameter gives the next controller the data it works on.\n     segueHandoffWithInput:self.dataForNextController\n\n     // This parameter allows the next controller to pass back results.\n     resultsBlock:^(id results) {\n         // This callback could be as involved as you like.\n         // It can use Grand Central Dispatch to have work done on another thread for example.\n        [self setResultsFromNextController:results];\n    }];\n}\n", "Passing data back from ViewController 2(destination) to viewController 1(Source) is the more interesting thing.\nAssuming you use storyBoard those are all the ways i found out:\n\n\n\n\nThose were  discussed here already.I found there are more ways:use it in the prepareForSegue method in the VC1NextViewController *destinationVC = (NextViewController *) segue.destinationViewController;\n[destinationVC setDidFinishUsingBlockCallback:^(NextViewController *destinationVC)\n{\n    self.blockLabel.text = destination.blockTextField.text;\n}];\nImplement a method with a    UIStoryboardSegue argument in  VC 1,    like this one:-(IBAction)UnWindDone:(UIStoryboardSegue *)segue { }\nIn the storyBoard hook the \"return\" button to the green Exit\nbutton(Unwind) of the vc.\n Now you have a segue that \"goes back\" so u can use the\ndestinationViewController property in the prepareForSegue of VC2 and\nchange any property of VC1 before it goes back.\nAnother option of using storyboards Undwind (Exit)  - you can\nuse the method you wrote in VC1-(IBAction)UnWindDone:(UIStoryboardSegue *)segue {\n    NextViewController *nextViewController = segue.sourceViewController;\n    self.unwindLabel.text = nextViewController.unwindPropertyPass;\n} \nAnd in the prepareForSegue of VC1 you can change any property you want to share.\nIn both unwind options you can set the tag property of the button and check it in\n        the prepareForSegue. Hope i added something to the discussion. :) Cheers.", "There are multiple methods for sharing data.You can always share data using NSUserDefaults. Set the value you want to share with respect to a key of your choice and get the value from NSUserDefault associated to that key in the next view controller. [[NSUserDefaults standardUserDefaults] setValue:value forKey:key]\n[[NSUserDefaults standardUserDefaults] objectForKey:key]\nYou can just create a property in viewcontrollerA. Create an object of viewcontrollerA in viewcontrollerB and assign the desired value to that property.You can also create custom delegates for this.", "If you want to pass data from one controller to other try this codeFirstViewController.h@property (nonatomic, retain) NSString *str;\nSecondViewController.h@property (nonatomic, retain) NSString *str1;\nFirstViewController.m- (void)viewDidLoad\n   {\n     // message for the second SecondViewController\n     self.str = @\"text message\";\n\n     [super viewDidLoad];\n   }\n\n-(IBAction)ButtonClicked\n {\n   SecondViewController *secondViewController = [[SecondViewController alloc] initWithNibName:@\"SecondViewController\" bundle:nil];\n   secondViewController.str1 = str;\n  [self.navigationController pushViewController:secondViewController animated:YES];\n }\n", " Create the instance of first View Controller in the second View Controller and make its property @property (nonatomic,assign). Assign the SecondviewController instance of this view controller. When you finish the selection operation copy the array to first View Controller,When u unload the SecondView ,FirstView will hold the Array Data.Hope This Helps.", "I was searching this solution for long time, Atlast I found it. First of all declare all the objects in your SecondViewController.h file like@interface SecondViewController: UIviewController \n{\n    NSMutableArray *myAray;\n    CustomObject *object;\n}\nNow in your implementation file allocate the memory for those objects like this- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil\n{\n     self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];\n     if (self) \n     {\n         // Custom initialization\n         myAray=[[NSMutableArray alloc] init];\n         object=[[CustomObject alloc] init];\n     }\n     return self;\n}\nNow you have allocated the memory for Array and object. now you can fill that memory before pushing this ViewControllerGo to your SecondViewController.h and write two methods-(void)setMyArray:(NSArray *)_myArray;\n-(void)setMyObject:(CustomObject *)_myObject;\nin implementation file you can implement the function -(void)setMyArray:(NSArray *)_myArray\n{\n     [myArra addObjectsFromArray:_myArray];\n}\n-(void)setMyObject:(CustomObject *)_myObject\n{\n     [object setCustomObject:_myObject];\n}\nexpecting that your CustomObject must have a setter function with it.now your basic work is done. go to the place where you want to push the SecondViewController and do the following stuffSecondViewController *secondView= [[SecondViewController alloc] initWithNibName:@\"SecondViewController \" bundle:[NSBundle MainBundle]] ;\n[secondView setMyArray:ArrayToPass];\n[secondView setMyObject:objectToPass];\n[self.navigationController pushViewController:secondView animated:YES ];\nTake care for spelling mistakes. ", "This is not the way to do it, you should use delegates, I'll assume we have two view controllers ViewController1 and ViewController2 and this check thing is in the first one and when its state changes, you want to do something in ViewController2, to achieve that in the proper way, you should do the below:Add a new file to your project (Objective-C Protocol) File -> New, now name it ViewController1Delegate or whatever you want and write these between the @interface and @end directives@optional\n\n- (void)checkStateDidChange:(BOOL)checked;\nNow go to ViewController2.h and add#import \"ViewController1Delegate.h\"\nthen change its definition to@interface ViewController2: UIViewController<ViewController1Delegate>\nNow go to ViewController2.m and inside the implementation add:- (void)checkStateDidChange:(BOOL)checked {\n     if (checked) {\n           // Do whatever you want here\n           NSLog(@\"Checked\");\n     }\n     else {\n           // Also do whatever you want here\n           NSLog(@\"Not checked\");\n     }\n}\nNow go to ViewController1.h and add the following property:@property (weak, nonatomic) id<ViewController1Delegate> delegate; \nNow if you are creating ViewController1 inside ViewController2 after some event, then you should do it this way using NIB files:ViewController1* controller = [[NSBundle mainBundle] loadNibNamed:@\"ViewController1\" owner:self options:nil][0];\ncontroller.delegate = self;\n[self presentViewController:controller animated:YES completion:nil];\nNow you are all set, whenever you detect the event of check changed in ViewController1, all you have to do is the below[delegate checkStateDidChange:checked]; // You pass here YES or NO based on the check state of your control\nPlease tell me if there's anything that's not clear of if I didn't understand your question properly.", "If you want to send data from one to another viewController, here's a way to it:Say we have viewControllers: viewControllerA and viewControllerBNow in viewControllerB.h@interface viewControllerB : UIViewController {\n\n  NSString *string;\n  NSArray *array;\n\n}\n\n- (id)initWithArray:(NSArray)a andString:(NSString)s;\nIn viewControllerB.m#import \"viewControllerB.h\"\n\n@implementation viewControllerB\n\n- (id)initWithArray:(NSArray)a andString:(NSString)s {\n\n   array = [[NSArray alloc] init];\n   array = a;\n\n   string = [[NSString alloc] init];\n   string = s;\n\n}\nIn viewControllerA.m #import \"viewControllerA.h\"\n#import \"viewControllerB.h\"\n\n@implementation viewControllerA\n\n- (void)someMethod {\n\n  someArray = [NSArray arrayWithObjects:@\"One\", @\"Two\", @\"Three\", nil];\n  someString = [NSString stringWithFormat:@\"Hahahahaha\"];\n\n  viewControllerB *vc = [[viewControllerB alloc] initWithArray:someArray andString:someString];\n\n  [self.navigationController pushViewController:vc animated:YES];\n  [vc release];\n\n}\nSo this is how you can pass data from viewControllerA to viewControllerB without setting any delegate. ;)", "I know this is a beaten subject but for those looking to answer this question with a SWIFT slant and want a bare-bones example, here my go-to method for passing data if you are using a segue to get around.It is similar to the above but without the buttons, labels and such.  Just simply passing data from one view to the next.There are three parts.  This is a very simple view layout with a segue between them.Here is the setup for the senderHere is the setup for the receiver.Lastly, the setup for the segue.We are keeping this simple so no buttons, not actions, we are simply moving data from the sender to the receiver when the application loads and then outputting the transmitted value to the console.This page takes the initially loaded value and passes it along.import UIKit\n\n\nclass ViewControllerSender: UIViewController {\n\n    // THE STUFF - put some info into a variable\n    let favoriteMovie = \"Ghost Busters\"\n\n    override func viewDidAppear(animated: Bool) {\n        // PASS IDENTIFIER - go to the recieving view controller.\n        self.performSegueWithIdentifier(\"goToReciever\", sender: self)\n    }\n\n    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {\n\n        //GET REFERENCE - ...to the receiver view.\n        var viewControllerReceiver = segue.destinationViewController as? ViewControllerReceiver\n\n        //PASS STUFF - pass the variable along to the target.\n        viewControllerReceiver!.yourFavMovie = self.favoriteMovie\n\n    }\n\n}\nThis page just sends the value of the variable to the console when it loads.  By this point, our favorite movie should be in that variable.import UIKit\n\nclass ViewControllerReceiver: UIViewController {\n\n    //Basic empty variable waiting for you to pass in your fantastic favorite movie.\n    var yourFavMovie = \"\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        //And now we can view it in the console.\n        println(\"The Movie is \\(self.yourFavMovie)\")\n\n    }   \n}\nThat is how you can tackle it if you want to use a segue and you don't have your pages under a navigation controller.Once it is run it should switch to the receiver view automatically and pass the value from the sender to the receiver, displaying the value in the console.", "Well  is perfectly fine for passing data but I\n  am going to rewrite it, in Latest Swift version because I believe new\n  programmers find it quit challenging due to new Syntax and\n  methods/frameworks, as original post is in Objective-C.There are multiple options for Passing Data between View Controllers.I am going to rewrite his logic in Swift with latest iOS Framework :  Declare variable in ViewControllerBvar isSomethingEnabled = false\n Print Variable in ViewControllerB' ViewDidLoad methodoverride func viewDidLoad() {\n        super.viewDidLoad()\n        //Print value received through segue, navigation push\n        print(\"Value of 'isSomethingEnabled' from ViewControllerA : \", isSomethingEnabled)\n    }\n In ViewControllerA Pass Data while pushing through Navigation Controllerif let viewControllerB = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"ViewControllerB\") as? ViewControllerB {\n        viewControllerB.isSomethingEnabled = true\n        if let navigator = navigationController {\n            navigator.pushViewController(viewControllerB, animated: true)\n        }\n    }\nSo Here is the complete code for :   import UIKit\n\nclass ViewControllerA: UIViewController  {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    //MARK:Passing Data through Navigation PushViewController\n    @IBAction func goToViewControllerB(_ sender: Any) {\n\n        if let viewControllerB = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"ViewControllerB\") as? ViewControllerB {\n            viewControllerB.isSomethingEnabled = true\n            if let navigator = navigationController {\n                navigator.pushViewController(viewControllerB, animated: true)\n            }\n        }\n    }\n}\nimport UIKit\n\nclass ViewControllerB: UIViewController {\n\n    //MARK:  - Variable for Passing Data through Navigation push   \n    var isSomethingEnabled = false\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        //Print value received through navigation push\n        print(\"Value of 'isSomethingEnabled' from ViewControllerA : \", isSomethingEnabled)\n    }\n}\n :  Create Segue from ViewControllerA to ViewControllerB and give Identifier = showDetailSegue in Storyboard as shown below In ViewControllerB Declare a viable named  and print its value. In ViewControllerA pass isSomethingEnabled's value while passing SegueSo Here is the complete code for : import UIKit\n\nclass ViewControllerA: UIViewController  {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    //MARK:  - - Passing Data through Segue  - - \n    @IBAction func goToViewControllerBUsingSegue(_ sender: Any) {\n        performSegue(withIdentifier: \"showDetailSegue\", sender: nil)\n    }\n\n    //Segue Delegate Method\n    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n        if (segue.identifier == \"showDetailSegue\") {\n            let controller = segue.destination as? ViewControllerB\n            controller?.isSomethingEnabled = true//passing data\n        }\n    }\n}\nimport UIKit\n\nclass ViewControllerB: UIViewController {\n    var isSomethingEnabled = false\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        //Print value received through segue\n        print(\"Value of 'isSomethingEnabled' from ViewControllerA : \", isSomethingEnabled)\n    }\n}\n :  Declare Protocol  in ViewControllerB file but outside the classprotocol ViewControllerBDelegate: NSObjectProtocol {\n\n    // Classes that adopt this protocol MUST define\n    // this method -- and hopefully do something in\n    // that definition.\n    func addItemViewController(_ controller: ViewControllerB?, didFinishEnteringItem item: String?)\n}\n Declare Delegate variable instance in ViewControllerBvar delegate: ViewControllerBDelegate?\n Send data for delegate inside viewDidLoad method of ViewControllerBdelegate?.addItemViewController(self, didFinishEnteringItem: \"Data for ViewControllerA\")\n Confirm ViewControllerBDelegate in ViewControllerAclass ViewControllerA: UIViewController, ViewControllerBDelegate  {\n// to do\n}\n Confirm that you will implement delegate in ViewControllerAif let viewControllerB = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"ViewControllerB\") as? ViewControllerB {\n            viewControllerB.delegate = self//confirming delegate\n            if let navigator = navigationController {\n                navigator.pushViewController(viewControllerB, animated: true)\n            }\n        }\n Implement delegate method for receiving data in ViewControllerAfunc addItemViewController(_ controller: ViewControllerB?, didFinishEnteringItem item: String?) {\n        print(\"Value from ViewControllerB's Delegate\", item!)\n    }\nSo Here is the complete code for : import UIKit\n\nclass ViewControllerA: UIViewController, ViewControllerBDelegate  {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    //Delegate method\n    func addItemViewController(_ controller: ViewControllerB?, didFinishEnteringItem item: String?) {\n        print(\"Value from ViewControllerB's Delegate\", item!)\n    }\n\n    @IBAction func goToViewControllerForDelegate(_ sender: Any) {\n\n        if let viewControllerB = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"ViewControllerB\") as? ViewControllerB {\n            viewControllerB.delegate = self\n            if let navigator = navigationController {\n                navigator.pushViewController(viewControllerB, animated: true)\n            }\n        }\n    }\n}\nimport UIKit\n\n//Protocol decleare\nprotocol ViewControllerBDelegate: NSObjectProtocol {\n    // Classes that adopt this protocol MUST define\n    // this method -- and hopefully do something in\n    // that definition.\n    func addItemViewController(_ controller: ViewControllerB?, didFinishEnteringItem item: String?)\n}\n\nclass ViewControllerB: UIViewController {\n    var delegate: ViewControllerBDelegate?\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        //MARK:  - - - -  Set Data for Passing Data through Delegate  - - - - - -\n        delegate?.addItemViewController(self, didFinishEnteringItem: \"Data for ViewControllerA\")\n    }\n}\n : Step 1. Set and Post data in Notification observer in ViewControllerBlet objToBeSent = \"Test Message from Notification\"\n        NotificationCenter.default.post(name: Notification.Name(\"NotificationIdentifier\"), object: objToBeSent)\nStep 2. Add Notification Observer in ViewControllerANotificationCenter.default.addObserver(self, selector: #selector(self.methodOfReceivedNotification(notification:)), name: Notification.Name(\"NotificationIdentifier\"), object: nil)\nStep 3. Receive Notification data value in ViewControllerA@objc func methodOfReceivedNotification(notification: Notification) {\n        print(\"Value of notification : \", notification.object ?? \"\")\n    }\nSo Here is the complete code for : import UIKit\n\nclass ViewControllerA: UIViewController{\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // add observer in controller(s) where you want to receive data\n        NotificationCenter.default.addObserver(self, selector: #selector(self.methodOfReceivedNotification(notification:)), name: Notification.Name(\"NotificationIdentifier\"), object: nil)\n    }\n\n    //MARK: Method for receiving Data through Post Notification \n    @objc func methodOfReceivedNotification(notification: Notification) {\n        print(\"Value of notification : \", notification.object ?? \"\")\n    }\n}\nimport UIKit\n\nclass ViewControllerB: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        //MARK:Set data for Passing Data through Post Notification\n        let objToBeSent = \"Test Message from Notification\"\n        NotificationCenter.default.post(name: Notification.Name(\"NotificationIdentifier\"), object: objToBeSent)\n    }\n}\n : Step 1. Declare block in ViewControllerBvar authorizationCompletionBlock:((Bool)->())? = {_ in}Step 2. Set data in block in ViewControllerBif authorizationCompletionBlock != nil\n        {\n            authorizationCompletionBlock!(true)\n        }\nStep 3. Receive block data in ViewControllerA//Receiver Block\n                controller!.authorizationCompletionBlock = { isGranted in\n                    print(\"Data received from Block is :\", isGranted)\n                }\nSo Here is the complete code for : import UIKit\n\nclass ViewControllerA: UIViewController  {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    //MARK:Method for receiving Data through Block\n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if (segue.identifier == \"showDetailSegue\") {\n                let controller = segue.destination as? ViewControllerB\n                controller?.isSomethingEnabled = true\n\n                //Receiver Block\n                controller!.authorizationCompletionBlock = { isGranted in\n                    print(\"Data received from Block is :\", isGranted)\n                }\n            }\n        }\n}\nimport UIKit\n\nclass ViewControllerB: UIViewController {\n\n    //MARK:Variable for Passing Data through Block\n    var authorizationCompletionBlock:((Bool)->())? = {_ in}\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        //MARK:Set data for Passing Data through Block\n        if authorizationCompletionBlock != nil\n        {\n            authorizationCompletionBlock!(true)\n        }\n    }\n}\n Please let me know if you have any question(s) on this.", "In my case I used a singleton class which can work as a global object allowing accesses to the data from almost everywhere in the app. First thing is to build a singleton class. Please refer to the page,\"  \"\nAnd what I did to make the object globally accessible was simply import it in appName_Prefix.pch which is for applying import statement in every classes.\nTo access this object and to use, I simply implemented class method to return the shared instance, which contains its own variables", "For example: FirstViewController String value asStrFirstValue = @\"first\";\nso we can pass this value in second class using below step1>We need to crate string object in SecondViewController.h fileNSString *strValue;\n2>Need to declare property as below below declaration in .h file @property (strong, nonatomic)  NSString *strSecondValue;\n3>Need synthesize that value in FirstViewController.m file below header declaration@synthesize strValue;\nand in FirstViewController.h :@property (strong, nonatomic)  NSString *strValue;\n4>In FirstViewController,From which method we navigate to second view please write below code in that method. SecondViewController *secondView= [[SecondViewController alloc]     \ninitWithNibName:@\"SecondViewController \" bundle:[NSBundle MainBundle]];\n\n[secondView setStrSecondValue:StrFirstValue];\n\n[self.navigationController pushViewController:secondView animated:YES ];\n", "I am currently contributing to an open source solution to this problem through a project called MCViewFactory, which may be found here:The idea is imitate Android's intent paradigm, using a global factory to manage which view you are looking at and using \"intents\" to switch and pass data between views. All the documentation is on the github page, but here are some highlights:You setup all your views in .XIB files and register them in the app delegate, while initializing the factory.// Register activities\n\nMCViewFactory *factory = [MCViewFactory sharedFactory];\n\n// the following two lines are optional. \n[factory registerView:@\"YourSectionViewController\"]; \nNow, in your VC, anytime you want to move to a new VC and pass data, you create a new intent and add data to its dictionary (savedInstanceState). Then, just set the current intent of factory:MCIntent* intent = [MCIntent intentWithSectionName:@\"YourSectionViewController\"];\n[intent setAnimationStyle:UIViewAnimationOptionTransitionFlipFromLeft];\n[[intent savedInstanceState] setObject:@\"someValue\" forKey:@\"yourKey\"];\n[[intent savedInstanceState] setObject:@\"anotherValue\" forKey:@\"anotherKey\"];\n// ...\n[[MCViewModel sharedModel] setCurrentSection:intent];\nAll of your views that conform to this need to be subclasses of MCViewController, which allow you to override the new onResume: method, allowing you access to the data you've passed in.-(void)onResume:(MCIntent *)intent {\n    NSObject* someValue = [intent.savedInstanceState objectForKey:@\"yourKey\"];\n    NSObject* anotherValue = [intent.savedInstanceState objectForKey:@\"anotherKey\"];\n\n    // ...\n\n    // ensure the following line is called, especially for MCSectionViewController\n    [super onResume:intent];\n}\nHope some of you find this solution useful/interesting.  ", "Create the property on next view controller .h and define getter and setter.Add this property in NextVC.h on nextVC@property (strong, nonatomic) NSString *indexNumber;\nAdd @synthesize  indexNumber;           in NextVC.mAnd lastNextVC *vc=[[NextVC alloc]init];\n\nvc.indexNumber=@\"123\";\n\n[self.navigationController vc animated:YES];\n", "There are tons of ways to do this and it's important to pick the right one. Probably one of the biggest architectural decisions lies on how the model code will be shared or accessed throughout the app.I wrote a blog post about this a while back: . Here's a brief summary:One approach is to share pointers to the model objects between view controllers. \n\n\nSince prepare for segue is the most common here is an example:override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {\n    var next = segue.destinationViewController as NextViewController\n    next.dataSource = dataSource\n}\nAnother approach is to handle a screen full of data at a time and instead of coupling the view controllers to each other couple each view controller to single data source that they can get to independently. The most common way I've seen this done is a  instance. So if your singleton object was DataAccess you could do the following in the viewDidLoad method of UIViewController:func viewDidLoad() {\n    super.viewDidLoad()\n    var data = dataAccess.requestData()\n}\nThere are addition tools that also help pass along data:\n\n\n\n\n\nThe nice thing about Core Data is that it has inverse relationships. So if you want to just give a NotesViewController the notes object you can because it'll have an inverse relationship to something else like the notebook. If you need data on the notebook in the NotesViewController you can walk back up the object graph by doing the following:let notebookName = note.notebook.name\nRead more about this in my blog post: ", "- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n{\n  [tbl_View deselectRowAtIndexPath:indexPath animated:YES];\n  News *newsObj = [newstitleArr objectAtIndex:indexPath.row];\n  NewsDetailViewController *newsDetailView = [[NewsDetailViewController alloc] initWithNibName:@\"NewsDetailViewController\" bundle:nil];\n\n  newsDetailView.newsHeadlineStr = newsObj.newsHeadline;\n\n  [self.navigationController pushViewController:newsDetailView animated:YES];\n}\n@interface NewsDetailViewController : UIViewController\n@property(nonatomic,retain) NSString *newsHeadlineStr;\n@end\n@synthesize newsHeadlineStr;\n", "Delegation is the only one solution to perform such operations when you are using .xib files however all answers described above are for storyboard for .xibs files you need to use delegation. that's only solution you can. Another solution is use singleton class pattern initialize it once and use it in your entire app.  ", "if you wants to pass data from ViewControlerOne to ViewControllerTwo try these.. do these in ViewControlerOne.h @property (nonatomic, strong) NSString *str1;\ndo these in ViewControllerTwo.h @property (nonatomic, strong) NSString *str2;\nSynthesize str2 in ViewControllerTwo.m@interface ViewControllerTwo ()\n@end\n@implementation ViewControllerTwo\n@synthesize str2;\ndo these in ViewControlerOne.m - (void)viewDidLoad\n {\n   [super viewDidLoad];\n\n  // Data or string you wants to pass in ViewControllerTwo..\n  self.str1 = @\"hello world\";\n\n }\non the buttons click event do this..-(IBAction)ButtonClicked\n{ //Navigation on buttons click event from ViewControlerOne to ViewControlerTwo with transferring data or string..\n  ViewControllerTwo *objViewTwo=[self.storyboard instantiateViewControllerWithIdentifier:@\"ViewControllerTwo\"];\n  obj.str2=str1;\n  [self.navigationController pushViewController: objViewTwo animated:YES];\n}\ndo these in ViewControllerTwo.m- (void)viewDidLoad\n{\n [super viewDidLoad];\n  NSLog(@\"%@\",str2);\n}\n", "You can save data in App delegate to access it across view controllers in your application. All you have to do is create a shared instance of app delegateAppDelegate *appDelegate = (AppDelegate *)[UIApplication sharedApplication].delegate;\nif you declare a NSArray object *arrayXYZ then you can access it in any view controller by appDelegate.arrayXYZ", "If you want to send data from one to another viewController, here's a way to it:Say we have viewControllers: ViewController and NewViewController.in ViewController.h#import <UIKit/UIKit.h>\n\n@interface ViewController : UIViewController\n{\n    IBOutlet UITextField *mytext1,*mytext2,*mytext3,*mytext4;\n}\n\n@property (nonatomic,retain) IBOutlet UITextField *mytext1,*mytext2,*mytext3,*mytext4;\n\n-(IBAction)goToNextScreen:(id)sender;\n\n@end\nin ViewController.m#import \"ViewController.h\"\n\n#import \"NewViewController.h\"\n\n@implementation ViewController\n@synthesize mytext1,mytext2,mytext3,mytext4;\n\n-(IBAction)goToNextScreen:(id)sender\n{\n    NSArray *arr = [NSArray arrayWithObjects:mytext1.text,mytext2.text,mytext3.text,mytext4.text, nil];\n\n\n    NewViewController *newVc = [[NewViewController alloc] initWithNibName:@\"NewViewController\" bundle:nil];\n\n    newVc.arrayList = arr;\n\n    [self.navigationController pushViewController:newVc animated:YES];\n\n}\nIn NewViewController.h#import <UIKit/UIKit.h>\n\n@interface NewViewController : UITableViewController\n{\n    NSArray *arrayList;\n\n    NSString *name,*age,*dob,*mobile;\n\n}\n\n@property(nonatomic, retain)NSArray *arrayList;\n\n@end\nIn NewViewController.m#import \"NewViewController.h\"\n\n#import \"ViewController.h\"\n\n@implementation NewViewController\n@synthesize arrayList;\n\n#pragma mark - Table view data source\n\n- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView\n{\n\n    // Return the number of sections.\n    return 1;\n}\n\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n{\n\n    // Return the number of rows in the section.\n    return [arrayList count];\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    static NSString *CellIdentifier = @\"Cell\";\n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];\n    if (cell == nil)\n    {\n         cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];      \n    }\n    // Configure the cell...\n    cell.textLabel.text = [arrayList objectAtIndex:indexPath.row];\n    return cell;\n\n\n}\n\n@end\nSo this way we can pass the data from one viewcontroller to another view controller...", "I like the idea of Model objects and Mock objects based on NSProxy to commit or discard data if what user selects can be cancelled. It's easy to pass data around since it's single object or couple of objects and if you have let's say UINavigationController controller, you can keep the reference to model inside and all pushed view controllers can access it directly from navigation controller.", "I have seen a lot of people over complicating this using the didSelectRowAtPath method. I am using Core Data in my example.- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{\n\n    //this solution is for using Core Data\n    YourCDEntityName * value = (YourCDEntityName *)[[self fetchedResultsController] objectAtIndexPath: indexPath];\n\n    YourSecondViewController * details = [self.storyboard instantiateViewControllerWithIdentifier:@\"nameOfYourSecondVC\"];//make sure in storyboards you give your second VC an identifier\n\n    //Make sure you declare your value in the second view controller\n    details.selectedValue = value;\n\n    //Now that you have said to pass value all you need to do is change views\n    [self.navigationController pushViewController: details animated:YES];\n\n}\n4 lines of code inside the method and you are done. ", "There are many answers to this questions offering many different ways to perform view controller communication that would indeed work, but I don't see anywhere mentioned which one are actually best to use and which ones to avoid.\n\nprepare(for:sender:)UIViewController\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese solutions, although working in the short term, introduce too many dependencies that will garble the architecture of the app and create more problems later.For those interested, I wrote some articles that address these points more in depth and highlight the various drawbacks:\n\n\n\n"]},
{"question": "What does \u201cFatal error: Unexpectedly found nil while unwrapping an Optional value\u201d mean?", "details": "My Swift program is crashing with EXC_BAD_INSTRUCTION and one of the following similar errors. What does this error mean, and how do I fix it?Fatal error: Unexpectedly found nil while unwrapping an Optional value  Fatal error: Unexpectedly found nil while implicitly unwrapping an Optional value  ", "answers": ["My Swift program is crashing with EXC_BAD_INSTRUCTION and one of the following similar errors. What does this error mean, and how do I fix it?Fatal error: Unexpectedly found nil while unwrapping an Optional value  Fatal error: Unexpectedly found nil while implicitly unwrapping an Optional value  ", "In Swift, Optional<Wrapped> is an : it can contain any value from the original (\"Wrapped\") type, or no value at all (the special value nil). An optional value must be  before it can be used.Optional is a , which means that Optional<Int> and Optional<String> are distinct types \u2014 the type inside <> is called the Wrapped type. Under the hood, an Optional is an  with two cases: .some(Wrapped) and .none, where .none is equivalent to nil.Optionals can be declared using the named type Optional<T>, or (most commonly) as a shorthand with a ? suffix.var anInt: Int = 42\nvar anOptionalInt: Int? = 42\nvar anotherOptionalInt: Int?  // `nil` is the default when no value is provided\nvar aVerboseOptionalInt: Optional<Int>  // equivalent to `Int?`\n\nanOptionalInt = nil // now this variable contains nil instead of an integer\nOptionals are a simple yet powerful tool to express your assumptions while writing code. The compiler can use this information to prevent you from making mistakes. From :Swift is a  language, which means the language helps you to be clear about the types of values your code can work with. If part of your code requires a String, type safety prevents you from passing it an Int by mistake. StringString Type safety helps you catch and fix errors as early as possible in the development process.Some other programming languages also have generic : for example,  in Haskell,  in Rust, and  in C++17.In programming languages  option types, a particular  is often used to indicate the absence of a valid value. In Objective-C, for example, nil (the ) represents the lack of an object. For primitive types such as int, a null pointer can't be used, so you would need either a separate variable (such as value: Int and isValid: Bool) or a designated sentinel value (such as -1 or INT_MIN). These approaches are error-prone because it's easy to forget to check isValid or to check for the sentinel value. Also, if a particular value is chosen as the sentinel, that means it can no longer be treated as a  value.Option types such as Swift's Optional solve these problems by introducing a special, separate nil value (so you don't have to designate a sentinel value), and by leveraging the strong type system so the compiler can help you remember to check for nil when necessary.In order to access an optional\u2019s value (if it has one at all), you need to  it. An optional value can be unwrapped safely or forcibly. If you force-unwrap an optional, and it  have a value, your program will crash with the above message.Xcode will show you the crash by highlighting a line of code. The problem occurs on this line.This crash can occur with two different kinds of force-unwrap:This is done with the ! operator on an optional. For example:let anOptionalString: String?\nprint(anOptionalString!) // <- CRASH\nFatal error: Unexpectedly found nil while unwrapping an Optional valueAs anOptionalString is nil here, you will get a crash on the line where you force unwrap it.These are defined with  a !, rather than a ? after the type.var optionalDouble: Double!   // this value is implicitly unwrapped wherever it's used\nThese optionals are assumed to contain a value. Therefore whenever you access an implicitly unwrapped optional, it will automatically be force unwrapped for you. If it doesn\u2019t contain a value, it will crash.print(optionalDouble) // <- CRASH\nFatal error: Unexpectedly found nil while  unwrapping an Optional valueIn order to work out which variable caused the crash, you can hold  while clicking to show the definition, where you might find the optional type.IBOutlets, in particular, are usually implicitly unwrapped optionals. This is because your xib or storyboard will link up the outlets at runtime,  initialization. You should therefore ensure that you\u2019re not accessing outlets before they're loaded in. You also should check that the connections are correct in your storyboard/xib file, otherwise the values will be nil at runtime, and therefore crash when they are implicitly unwrapped. When fixing connections, try deleting the lines of code that define your outlets, then reconnect them.As a general rule, you should never explicitly force unwrap an optional with the ! operator. There may be cases where using ! is acceptable \u2013 but you should only ever be using it if you are 100% sure that the optional contains a value.While there  be an occasion where you can use force unwrapping, as you know for a  that an optional contains a value \u2013 there is not a  place where you cannot safely unwrap that optional instead.These variables are designed so that you can defer their assignment until later in your code. It is  responsibility to ensure they have a value before you access them. However, because they involve force unwrapping, they are still inherently unsafe \u2013 as they  your value is non-nil, even though assigning nil is valid.You should only be using implicitly unwrapped optionals as a . If you can use a , or provide a  for a variable \u2013 you should do so instead of using an implicitly unwrapped optional.However, there are a , and you are still able to use various ways of safely unwrapping them as listed below \u2013 but you should  use them with due caution.The simplest way to check whether an optional contains a value, is to compare it to nil.if anOptionalInt != nil {\n    print(\"Contains a value!\")\n} else {\n    print(\"Doesn\u2019t contain a value.\")\n}\nHowever, 99.9% of the time when working with optionals, you\u2019ll actually want to access the value it contains, if it contains one at all. To do this, you can use .Optional Binding allows you to check if an optional contains a value \u2013 and allows you to assign the unwrapped value to a new variable or constant. It uses the syntax if let x = anOptional {...} or if var x = anOptional {...}, depending if you need to modify the value of the new variable after binding it.For example:if let number = anOptionalInt {\n    print(\"Contains a value! It is \\(number)!\")\n} else {\n    print(\"Doesn\u2019t contain a number\")\n}\nWhat this does is first check that the optional contains a value. If it , then the \u2018unwrapped\u2019 value is assigned to  a new variable (number) \u2013 which you can then freely use as if it were non-optional. If the optional  contain a value, then the else clause will be invoked, as you would expect.What\u2019s neat about optional binding, is you can unwrap multiple optionals at the same time. You can just separate the statements with a comma. The statement will succeed if all the optionals were unwrapped.var anOptionalInt : Int?\nvar anOptionalString : String?\n\nif let number = anOptionalInt, let text = anOptionalString {\n    print(\"anOptionalInt contains a value: \\(number). And so does anOptionalString, it\u2019s: \\(text)\")\n} else {\n    print(\"One or more of the optionals don\u2019t contain a value\")\n}\nAnother neat trick is that you can also use commas to check for a certain condition on the value, after unwrapping it.if let number = anOptionalInt, number > 0 {\n    print(\"anOptionalInt contains a value: \\(number), and it\u2019s greater than zero!\")\n}\nThe only catch with using optional binding within an if statement, is that you can only access the unwrapped value from within the scope of the statement. If you need access to the value from outside of the scope of the statement, you can use a .A  allows you to define a condition for success \u2013 and the current scope will only continue executing if that condition is met. They are defined with the syntax guard condition else {...}.So, to use them with an optional binding, you can do this:guard let number = anOptionalInt else {\n    return\n}\nIf anOptionalInt contains a value, it will be unwrapped and assigned to the new number constant. The code  the guard will then continue executing. If it doesn\u2019t contain a value \u2013 the guard will execute the code within the brackets, which will lead to transfer of control, so that the code immediately after will not be executed.The real neat thing about guard statements is the unwrapped value is now available to use in code that follows the statement (as we know that future code can  execute if the optional has a value). This is a great for eliminating  created by nesting multiple if statements.For example:guard let number = anOptionalInt else {\n    return\n}\n\nprint(\"anOptionalInt contains a value, and it\u2019s: \\(number)!\")\nGuards also support the same neat tricks that the if statement supported, such as unwrapping multiple optionals at the same time and using the where clause.Whether you use an if or guard statement completely depends on whether any future code  the optional to contain a value.The  is a nifty shorthand version of the , primarily designed to convert optionals to non-optionals. It has the syntax a ?? b, where a is an optional type and b is the same type as a (although usually non-optional).It essentially lets you say \u201cIf a contains a value, unwrap it. If it doesn\u2019t then return b instead\u201d. For example, you could use it like this:let number = anOptionalInt ?? 0\nThis will define a number constant of Int type, that will either contain the value of anOptionalInt, if it contains a value, or 0 otherwise.It\u2019s just shorthand for:let number = anOptionalInt != nil ? anOptionalInt! : 0\nYou can use  in order to call a method or access a property on an optional. This is simply done by suffixing the variable name with a ? when using it.For example, say we have a variable foo, of type an optional Foo instance.var foo : Foo?\nIf we wanted to call a method on foo that doesn\u2019t return anything, we can simply do:foo?.doSomethingInteresting()\nIf foo contains a value, this method will be called on it. If it doesn\u2019t, nothing bad will happen \u2013 the code will simply continue executing.nilThis can therefore also be used to set properties as well as call methods. For example:foo?.bar = Bar()\nAgain, nothing bad will happen here if foo is nil. Your code will simply continue executing.Another neat trick that optional chaining lets you do is check whether setting a property or calling a method was successful. You can do this by comparing the return value to nil.Void?VoidFor example:if (foo?.bar = Bar()) != nil {\n    print(\"bar was set successfully\")\n} else {\n    print(\"bar wasn\u2019t set successfully\")\n}\nHowever, things become a little bit more tricky when trying to access properties or call methods that return a value. Because foo is optional, anything returned from it will also be optional. To deal with this, you can either unwrap the optionals that get returned using one of the above methods \u2013 or unwrap foo itself before accessing methods or calling methods that return values.Also, as the name suggests, you can \u2018chain\u2019 these statements together. This means that if foo has an optional property baz, which has a property qux \u2013 you could write the following:let optionalQux = foo?.baz?.qux\nAgain, because foo and baz are optional, the value returned from qux will always be an optional regardless of whether qux itself is optional.mapflatMapAn often underused feature with optionals is the ability to use the map and flatMap functions. These allow you to apply non-optional transforms to optional variables. If an optional has a value, you can apply a given transformation to it. If it doesn\u2019t have a value, it will remain nil.For example, let\u2019s say you have an optional string:let anOptionalString:String?\nBy applying the map function to it \u2013 we can use the stringByAppendingString function in order to concatenate it to another string.Because stringByAppendingString takes a non-optional string argument, we cannot input our optional string directly. However, by using map, we can use allow stringByAppendingString to be used if anOptionalString has a value.For example:var anOptionalString:String? = \"bar\"\n\nanOptionalString = anOptionalString.map {unwrappedString in\n    return \"foo\".stringByAppendingString(unwrappedString)\n}\n\nprint(anOptionalString) // Optional(\"foobar\")\nHowever, if anOptionalString doesn\u2019t have a value, map will return nil. For example:var anOptionalString:String?\n\nanOptionalString = anOptionalString.map {unwrappedString in\n    return \"foo\".stringByAppendingString(unwrappedString)\n}\n\nprint(anOptionalString) // nil\nflatMap works similarly to map, except it allows you to return  optional from within the closure body. This means you can input an optional into a process that requires a non-optional input, but can output an optional itself.try!Swift's error handling system can be safely used with :do {\n    let result = try someThrowingFunc() \n} catch {\n    print(error)\n}\nIf someThrowingFunc() throws an error, the error will be safely caught in the catch block.The error constant you see in the catch block has not been declared by us - it's automatically generated by catch.You can also declare error yourself, it has the advantage of being able to cast it to a useful format, for example:do {\n    let result = try someThrowingFunc()    \n} catch let error as NSError {\n    print(error.debugDescription)\n}\nUsing try this way is the proper way to try, catch and handle errors coming from throwing functions.There's also try? which absorbs the error:if let result = try? someThrowingFunc() {\n    // cool\n} else {\n    // handle the failure, but there's no error information available\n}\nBut Swift's error handling system also provides a way to \"force try\" with try!:let result = try! someThrowingFunc()\nThe concepts explained in this post also apply here: if an error is thrown, the application will crash.try!Most of the time you will use the complete Do-Try-Catch system - and the optional one, try?, in the rare cases where handling the error is not important.\n\n\n\n", "With , this rule is golden:!?!In other words, rather use:\nvar nameOfDaughter: String?Instead of:\nvar nameOfDaughter: String!if letguard letEither unwrap variable like this:if let nameOfDaughter = nameOfDaughter {\n    print(\"My daughters name is: \\(nameOfDaughter)\")\n}\nOr like this:guard let nameOfDaughter = nameOfDaughter else { return }\nprint(\"My daughters name is: \\(nameOfDaughter)\")\nThis answer was intended to be concise, \n\n", "This question comes up  on SO. It's one of the first things that new Swift developers struggle with.Swift uses the concept of \"Optionals\" to deal with values that could contain a value, or not. In other languages like C, you might store a value of 0 in a variable to indicate that it contains no value. However, what if 0 is a valid value? Then you might use -1. What if -1 is a valid value? And so on.Swift optionals let you set up a variable of any type to contain either a valid value, or no value.You put a question mark after the type when you declare a variable to mean (type x, or no value).An optional is actually a container than contains either a variable of a given type, or nothing.An optional needs to be \"unwrapped\" in order to fetch the value inside.The \"!\" operator is a \"force unwrap\" operator. It says \"trust me. I know what I am doing. I guarantee that when this code runs, the variable will not contain nil.\" If you are wrong, you crash.Unless you really  know what you are doing, avoid the \"!\" force unwrap operator. It is probably the largest source of crashes for beginning Swift programmers.There are lots of other ways of dealing with optionals that are safer. Here are some (not an exhaustive list)You can use \"optional binding\" or \"if let\" to say \"if this optional contains a value, save that value into a new, non-optional variable. If the optional does not contain a value, skip the body of this if statement\".Here is an example of optional binding with our foo optional:if let newFoo = foo //If let is called optional binding. {\n  print(\"foo is not nil\")\n} else {\n  print(\"foo is nil\")\n}\nNote that the variable you define when you use optional biding only exists (is only \"in scope\") in the body of the if statement.Alternately, you could use a guard statement, which lets you exit your function if the variable is nil:func aFunc(foo: Int?) {\n  guard let newFoo = input else { return }\n  //For the rest of the function newFoo is a non-optional var\n}\nGuard statements were added in Swift 2. Guard lets you preserve the \"golden path\" through your code, and avoid ever-increasing levels of nested ifs that sometimes result from using \"if let\" optional binding.There is also a construct called the \"nil coalescing operator\". It takes the form \"optional_var ?? replacement_val\". It returns a non-optional variable with the same type as the data contained in the optional. If the optional contains nil, it returns the value of the expression after the \"??\" symbol.So you could use code like this:let newFoo = foo ?? \"nil\" // \"??\" is the nil coalescing operator\nprint(\"foo = \\(newFoo)\")\nYou could also use try/catch or guard error handling, but generally one of the other techniques above is cleaner.Another, slightly more subtle gotcha with optionals is \"implicitly unwrapped optionals. When we declare foo, we could say:var foo: String!\nIn that case foo is still an optional, but you don't have to unwrap it to reference it.  That means any time you try to reference foo, you crash if it's nil.So this code:var foo: String!\n\n\nlet upperFoo = foo.capitalizedString\nWill crash on reference to foo's capitalizedString property even though we're not force-unwrapping foo. the print looks fine, but it's not.Thus you want to be really careful with implicitly unwrapped optionals.  (and perhaps even avoid them completely until you have a solid understanding of optionals.)Bottom line: When you are first learning Swift, pretend the \"!\" character is not part of the language. It's likely to get you into trouble.", "Since the above answers clearly explains how to play safely with Optionals.\nI will try explain what Optionals are really in swift.Another way to declare an optional variable is var i : Optional<Int>And Optional type is nothing but an enumeration with two cases, i.e  enum Optional<Wrapped> : ExpressibleByNilLiteral {\n    case none \n    case some(Wrapped)\n    .\n    .\n    .\n}\nSo to assign a nil to our variable 'i'. We can do \nvar i = Optional<Int>.none\nor to assign a value, we will pass some value \nvar i = Optional<Int>.some(28) According to swift, 'nil' is the absence of value.\nAnd to create an instance initialized with nil We have to conform to a protocol called ExpressibleByNilLiteral and great if you guessed it, only Optionals conform to ExpressibleByNilLiteral and conforming to other types is discouraged.ExpressibleByNilLiteral has a single method called init(nilLiteral:) which initializes an instace with nil. You usually wont call this method and according to swift documentation it is discouraged to call this initializer directly as the compiler calls it whenever you initialize an Optional type with nil literal.Even myself has to wrap (no pun intended) my head around Optionals :D\n. ", "First, you should know what an Optional value is.\nYou can step to  for detail.Second, you should know the optional value has two statuses. One is the full value, and the other is a nil value. So before you implement an optional value, you should check which state it is.You can use if let ... or guard let ... else and so on.One other way, if you don't want to check the variable state before your implementation, you can also use var buildingName = buildingName ?? \"buildingName\" instead.", "I had this error once when I was trying to set my Outlets values from the prepare for segue method as follows:override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n    if let destination = segue.destination as? DestinationVC{\n\n        if let item = sender as? DataItem{\n            // This line pops up the error\n            destination.nameLabel.text = item.name\n        }\n    }\n}\nThen I found out that I can't set the values of the destination controller outlets because the controller hasn't been loaded or initialized yet.So I solved it this way:override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n    if let destination = segue.destination as? DestinationVC{\n\n        if let item = sender as? DataItem{\n            // Created this method in the destination Controller to update its outlets after it's being initialized and loaded\n            destination.updateView(itemData:  item)\n        }\n    }\n}\nDestination Controller:// This variable to hold the data received to update the Label text after the VIEW DID LOAD\nvar name = \"\"\n\n// Outlets\n@IBOutlet weak var nameLabel: UILabel!\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    // Do any additional setup after loading the view.\n    nameLabel.text = name\n}\n\nfunc updateView(itemDate: ObjectModel) {\n    name = itemDate.name\n}\nI hope this answer helps anyone out there with the same issue as I found the marked answer is great resource to the understanding of optionals and how they work but hasn't addressed the issue itself directly.", "Basically you tried to use a nil value in places where Swift allows only non-nil ones, by telling the compiler to trust you that there will never be nil value there, thus allowing your app to compile.There are several scenarios that lead to this kind of fatal error:forced unwraps:let user = someVariable!\nIf someVariable is nil, then you'll get a crash. By doing a force unwrap you moved the nil check responsibility from the compiler to you, basically by doing a forced unwrap you're guaranteeing to the compiler that you'll never have nil values there. And guess what it happens if somehow a nil value ends in in someVariable?Solution? Use optional binding (aka if-let), do the variable processing there:if user = someVariable {\n    // do your stuff\n}\nforced (down)casts:let myRectangle = someShape as! Rectangle\nHere by force casting you tell the compiler to no longer worry, as you'll always have a Rectangle instance there. And as long as that holds, you don't have to worry. The problems start when you or your colleagues from the project start circulating non-rectangle values.Solution? Use optional binding (aka if-let), do the variable processing there:if let myRectangle = someShape as? Rectangle {\n    // yay, I have a rectangle\n}\nImplicitly unwrapped optionals. Let's assume you have the following class definition:class User {\n    var name: String!\n\n    init() {\n        name = \"(unnamed)\"\n    }\n\n    func nicerName() {\n        return \"Mr/Ms \" + name\n    }\n}\nNow, if no-one messes up with the name property by setting it to nil, then it works as expected, however if User is initialized from a JSON that lacks the name key, then you get the fatal error when trying to use the property.Solution? Don't use them :) Unless you're 102% sure that the property will always have a non-nil value by the time it needs to be used. In most cases converting to an optional or non-optional will work. Making it non-optional will also result in the compiler helping you by telling the code paths you missed giving a value to that propertyUnconnected, or not yet connected, outlets. This is a particular case of scenario #3. Basically you have some XIB-loaded class that you want to use.class SignInViewController: UIViewController {\n\n    @IBOutlet var emailTextField: UITextField!\n}\nNow if you missed connecting the outlet from the XIB editor, then the app will crash as soon as you'll want to use the outlet.\nSolution? Make sure all outlets are connected. Or use the ? operator on them: emailTextField?.text = \"my@email.com\". Or declare the outlet as optional, though in this case the compiler will force you to unwrap it all over the code.Values coming from Objective-C, and that don't have nullability annotations. Let's assume we have the following Objective-C class:@interface MyUser: NSObject\n@property NSString *name;\n@end\nNow if no nullability annotations are specified (either explicitly or via NS_ASSUME_NONNULL_BEGIN/NS_ASSUME_NONNULL_END), then the name property will be imported in Swift as String! (an IUO - implicitly unwrapped optional). As soon as some swift code will want to use the value, it will crash if name is nil.Solution? Add nullability annotations to your Objective-C code. Beware though, the Objective-C compiler is a little bit permissive when it comes to nullability, you might end up with nil values, even if you explicitly marked them as nonnull.", "This is more of a important comment and that why implicitly unwrapped optionals can be deceptive when it comes to debugging nil values.Think of the following code: \nIt compiles with no errors/warnings:c1.address.city = c3.address.city\nYet at runtime it gives the following error: nil You can't!The full code would be: class ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        var c1 = NormalContact()\n        let c3 = BadContact()\n\n        c1.address.city = c3.address.city // compiler hides the truth from you and then you sudden get a crash\n    }\n}\n\nstruct NormalContact {\n    var address : Address = Address(city: \"defaultCity\")\n}\n\nstruct BadContact {\n    var address : Address!\n}\n\nstruct Address {\n    var city : String\n}\nLong story short by using var address : Address! you're  the possibility that a variable can be nil from other readers. And when it crashes you're like \"what the hell?! my address isn't an optional, so why am I crashing?!. Hence it's better to write as such: c1.address.city = c2.address!.city  // ERROR:  Fatal error: Unexpectedly found nil while unwrapping an Optional value \nnil This time the code has been made more clear to you. You can rationalize and think that likely it's the address parameter that was forcefully unwrapped. The full code would be :class ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        var c1 = NormalContact()\n        let c2 = GoodContact()\n\n        c1.address.city = c2.address!.city\n        c1.address.city = c2.address?.city // not compile-able. No deceiving by the compiler\n        c1.address.city = c2.address.city // not compile-able. No deceiving by the compiler\n        if let city = c2.address?.city {  // safest approach. But that's not what I'm talking about here. \n            c1.address.city = city\n        }\n\n    }\n}\n\nstruct NormalContact {\n    var address : Address = Address(city: \"defaultCity\")\n}\n\nstruct GoodContact {\n    var address : Address?\n}\n\nstruct Address {\n    var city : String\n}\n", "The errors EXC_BAD_INSTRUCTION and fatal error: unexpectedly found nil while implicitly unwrapping an Optional value appears the most when you have declared an @IBOutlet, but not connected to the .You should also learn about how  work, mentioned in other answers, but this is the only time that mostly appears to me.", "If you get this error in CollectionView try to create CustomCell file and Custom xib also.add this code in ViewDidLoad() at mainVC.    let nib = UINib(nibName: \"CustomnibName\", bundle: nil)\n    self.collectionView.register(nib, forCellWithReuseIdentifier: \"cell\")\n", "I came across this error while making a segue from a table view controller to a view controller because I had forgotten to specify the custom class name for the view controller in the main storyboard.Something simple that is worth checking if all else looks ok"]},
{"question": "How do I extract data from JSON with PHP?", "details": "This is intended to be a general reference question and answer covering many of the never-ending  questions. It is here to handle the broad basics of decoding JSON in PHP and accessing the results.I have the JSON:{\n    \"type\": \"donut\",\n    \"name\": \"Cake\",\n    \"toppings\": [\n        { \"id\": \"5002\", \"type\": \"Glazed\" },\n        { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\n        { \"id\": \"5004\", \"type\": \"Maple\" }\n    ]\n}\nHow do I decode this in PHP and access the resulting data?", "answers": ["This is intended to be a general reference question and answer covering many of the never-ending  questions. It is here to handle the broad basics of decoding JSON in PHP and accessing the results.I have the JSON:{\n    \"type\": \"donut\",\n    \"name\": \"Cake\",\n    \"toppings\": [\n        { \"id\": \"5002\", \"type\": \"Glazed\" },\n        { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\n        { \"id\": \"5004\", \"type\": \"Maple\" }\n    ]\n}\nHow do I decode this in PHP and access the resulting data?", "First off you have a string. JSON is not an array, an object, or a data structure.  is a text-based serialization format - so a fancy string, but still just a string. Decode it in PHP by using json_decode(). $data = json_decode($json);\nTherein you might find:\n\n\n\nThese are the things that can be encoded in JSON. Or more accurately, these are PHP's versions of the things that can be encoded in JSON.There's nothing special about them. They are not \"JSON objects\" or \"JSON arrays.\" You've decoded the JSON - you now have .Objects will be instances of , a built-in class which is just a  that's not important here.You access the  of one of these objects the same way you would for the public non-static properties of any other object, e.g. $object->property.$json = '\n{\n    \"type\": \"donut\",\n    \"name\": \"Cake\"\n}';\n\n$yummy = json_decode($json);\n\necho $yummy->type; //donut\nYou access the elements of one of these arrays the same way you would for any other array, e.g. $array[0].$json = '\n[\n    \"Glazed\",\n    \"Chocolate with Sprinkles\",\n    \"Maple\"\n]';\n\n$toppings = json_decode($json);\n\necho $toppings[1]; //Chocolate with Sprinkles\nIterate over it with foreach.foreach ($toppings as $topping) {\n    echo $topping, \"\\n\";\n}\nGlazed \n  Chocolate with Sprinkles \n  MapleOr mess about with any of the .The properties of objects and the elements of arrays might be more objects and/or arrays - you can simply continue to access their properties and members as usual, e.g. $object->array[0]->etc.$json = '\n{\n    \"type\": \"donut\",\n    \"name\": \"Cake\",\n    \"toppings\": [\n        { \"id\": \"5002\", \"type\": \"Glazed\" },\n        { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\n        { \"id\": \"5004\", \"type\": \"Maple\" }\n    ]\n}';\n\n$yummy = json_decode($json);\n\necho $yummy->toppings[2]->id; //5004\ntrueWhen you do this, instead of objects you'll get associative arrays - arrays with strings for keys. Again you access the elements thereof as usual, e.g. $array['key'].$json = '\n{\n    \"type\": \"donut\",\n    \"name\": \"Cake\",\n    \"toppings\": [\n        { \"id\": \"5002\", \"type\": \"Glazed\" },\n        { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\n        { \"id\": \"5004\", \"type\": \"Maple\" }\n    ]\n}';\n\n$yummy = json_decode($json, true);\n\necho $yummy['toppings'][2]['type']; //Maple\nWhen decoding a JSON  to an associative PHP array, you can iterate both keys and values using the foreach (array_expression as $key => $value) syntax, eg$json = '\n{\n    \"foo\": \"foo value\",\n    \"bar\": \"bar value\",\n    \"baz\": \"baz value\"\n}';\n\n$assoc = json_decode($json, true);\nforeach ($assoc as $key => $value) {\n    echo \"The value of key '$key' is '$value'\", PHP_EOL;\n}\nPrintsThe value of key 'foo' is 'foo value'\n  The value of key 'bar' is 'bar value'\n  The value of key 'baz' is 'baz value'Read the documentation for whatever it is you're getting the JSON from.Look at the JSON - where you see curly brackets {} expect an object, where you see square brackets [] expect an array.Hit the decoded data with a print_r():$json = '\n{\n    \"type\": \"donut\",\n    \"name\": \"Cake\",\n    \"toppings\": [\n        { \"id\": \"5002\", \"type\": \"Glazed\" },\n        { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\n        { \"id\": \"5004\", \"type\": \"Maple\" }\n    ]\n}';\n\n$yummy = json_decode($json);\n\nprint_r($yummy);\nand check the output:stdClass Object\n(\n    [type] => donut\n    [name] => Cake\n    [toppings] => Array\n        (\n            [0] => stdClass Object\n                (\n                    [id] => 5002\n                    [type] => Glazed\n                )\n\n            [1] => stdClass Object\n                (\n                    [id] => 5006\n                    [type] => Chocolate with Sprinkles\n                )\n\n            [2] => stdClass Object\n                (\n                    [id] => 5004\n                    [type] => Maple\n                )\n\n        )\n\n)\nIt'll tell you where you have objects, where you have arrays, along with the names and values of their members.If you can only get so far into it before you get lost - go that far and hit  with print_r():print_r($yummy->toppings[0]);\nstdClass Object\n(\n    [id] => 5002\n    [type] => Glazed\n)\nTake a look at it in .Break the problem down into pieces that are easier to wrap your head around.json_decode()nullThis happens because either:nulljson_last_error_msgjson_decode()If you need to change the max depth you're probably solving the wrong problem. Find out why you're getting such deeply nested data (e.g. the service you're querying that's generating the JSON has a bug) and get that to not happen.Sometimes you'll have an object property name that contains something like a hyphen - or at sign @ which can't be used in a literal identifier. Instead you can use a string literal within curly braces to address it.$json = '{\"@attributes\":{\"answer\":42}}';\n$thing = json_decode($json);\n\necho $thing->{'@attributes'}->answer; //42\nIf you have an integer as property see:  as reference.It's ridiculous but it happens - there's JSON encoded as a string within your JSON. Decode, access the string as usual, decode , and eventually get to what you need.$json = '\n{\n    \"type\": \"donut\",\n    \"name\": \"Cake\",\n    \"toppings\": \"[{ \\\"type\\\": \\\"Glazed\\\" }, { \\\"type\\\": \\\"Maple\\\" }]\"\n}';\n\n$yummy = json_decode($json);\n$toppings = json_decode($yummy->toppings);\n\necho $toppings[0]->type; //Glazed\nIf your JSON is too large for json_decode() to handle at once things start to get tricky. See:\n\n\nSee: .", "You can use  to convert a json string to a PHP object/array.Eg.$json = '{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}';\n\nvar_dump(json_decode($json));\nvar_dump(json_decode($json, true));\nobject(stdClass)#1 (5) {\n    [\"a\"] => int(1)\n    [\"b\"] => int(2)\n    [\"c\"] => int(3)\n    [\"d\"] => int(4)\n    [\"e\"] => int(5)\n}\n\narray(5) {\n    [\"a\"] => int(1)\n    [\"b\"] => int(2)\n    [\"c\"] => int(3)\n    [\"d\"] => int(4)\n    [\"e\"] => int(5)\n}\nFew Points to remember:\njson_decodejsonNULL\njson_last_error()\nutf8json_decodeNULL\n", "// Using json as php array \n\n$json = '[{\"user_id\":\"1\",\"user_name\":\"Sayeed Amin\",\"time\":\"2019-11-06 13:21:26\"}]';\n\n//or use from file\n//$json = file_get_contents('results.json');\n\n$someArray = json_decode($json, true);\n\nforeach ($someArray as $key => $value) {\n    echo $value[\"user_id\"] . \", \" . $value[\"user_name\"] . \", \" . $value[\"time\"] . \"<br>\";\n}\n", "1) json_decode($json_string) // it returns object2) json_decode($json_string,true) // it returns array$json_string = '{\n    \"type\": \"donut\",\n    \"name\": \"Cake\",\n    \"toppings\": [\n        { \"id\": \"5002\", \"type\": \"Glazed\" },\n        { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\n        { \"id\": \"5004\", \"type\": \"Maple\" }\n    ]\n}';\n$array = json_decode($json_string,true);\n\necho $array['type']; //it gives donut\n", "Consider using JSONPath There is a pretty clear explanation of how to use it and parse a JSON-file  proposed. If you are familiar with XPath for XML you will start loving this approach. ", "Check below code for converting json to array in PHP,\nIf JSON is correct then json_decode() works well, and will return an array,\nBut if malformed JSON, then It will return NULL,<?php\nfunction jsonDecode1($json){\n    $arr = json_decode($json, true);\n    return $arr;\n}\n\n// In case of malformed JSON, it will return NULL\nvar_dump( jsonDecode1($json) );\nIf malformed JSON, and you are expecting only array, then you can use this function,<?php\nfunction jsonDecode2($json){\n    $arr = (array) json_decode($json, true);\n    return $arr;\n}\n\n// In case of malformed JSON, it will return an empty array()\nvar_dump( jsonDecode2($json) );\nIf malformed JSON, and you want to stop code execution, then you can use this function,<?php\nfunction jsonDecode3($json){\n    $arr = (array) json_decode($json, true);\n\n    if(empty(json_last_error())){\n        return $arr;\n    }\n    else{\n        throw new ErrorException( json_last_error_msg() );\n    }\n}\n\n// In case of malformed JSON, Fatal error will be generated\nvar_dump( jsonDecode3($json) );\nYou can use any function depends on your requirement,"]},
{"question": "How to reshape data from long to wide format", "details": "I'm having trouble rearranging the following data frame:set.seed(45)\ndat1 <- data.frame(\n    name = rep(c(\"firstName\", \"secondName\"), each=4),\n    numbers = rep(1:4, 2),\n    value = rnorm(8)\n    )\n\ndat1\n       name  numbers      value\n1  firstName       1  0.3407997\n2  firstName       2 -0.7033403\n3  firstName       3 -0.3795377\n4  firstName       4 -0.7460474\n5 secondName       1 -0.8981073\n6 secondName       2 -0.3347941\n7 secondName       3 -0.5013782\n8 secondName       4 -0.1745357\nI want to reshape it so that each unique \"name\" variable is a rowname, with the \"values\" as observations along that row and the \"numbers\" as colnames. Sort of like this:     name          1          2          3         4\n1  firstName  0.3407997 -0.7033403 -0.3795377 -0.7460474\n5 secondName -0.8981073 -0.3347941 -0.5013782 -0.1745357\nI've looked at melt and cast and a few other things, but none seem to do the job.", "answers": ["I'm having trouble rearranging the following data frame:set.seed(45)\ndat1 <- data.frame(\n    name = rep(c(\"firstName\", \"secondName\"), each=4),\n    numbers = rep(1:4, 2),\n    value = rnorm(8)\n    )\n\ndat1\n       name  numbers      value\n1  firstName       1  0.3407997\n2  firstName       2 -0.7033403\n3  firstName       3 -0.3795377\n4  firstName       4 -0.7460474\n5 secondName       1 -0.8981073\n6 secondName       2 -0.3347941\n7 secondName       3 -0.5013782\n8 secondName       4 -0.1745357\nI want to reshape it so that each unique \"name\" variable is a rowname, with the \"values\" as observations along that row and the \"numbers\" as colnames. Sort of like this:     name          1          2          3         4\n1  firstName  0.3407997 -0.7033403 -0.3795377 -0.7460474\n5 secondName -0.8981073 -0.3347941 -0.5013782 -0.1745357\nI've looked at melt and cast and a few other things, but none seem to do the job.", "Using reshape function:reshape(dat1, idvar = \"name\", timevar = \"numbers\", direction = \"wide\")\n", "The new (in 2014) tidyr package also does this simply, with gather()/spread() being the terms for melt/cast. Now, in 2019, tidyr v 1.0 has launched and set spread and gather on a deprecation path, preferring instead pivot_wider and pivot_longer, which you can find described . Read on if you want a brief glimpse into the brief life of spread/gather.library(tidyr)\nspread(dat1, key = numbers, value = value)\nFrom ,tidyr is a reframing of reshape2 designed to accompany the tidy data framework, and to work hand-in-hand with magrittr and dplyr to build a solid pipeline for data analysis.Just as reshape2 did less than reshape, tidyr does less than reshape2. It's designed specifically for tidying data, not the general reshaping that reshape2 does, or the general aggregation that reshape did. In particular, built-in methods only work for data frames, and tidyr provides no margins or aggregation.", "You can do this with the reshape() function, or with the melt() / cast() functions in the reshape package. For the second option, example code islibrary(reshape)\ncast(dat1, name ~ numbers)\nOr using reshape2library(reshape2)\ndcast(dat1, name ~ numbers)\n", "Another option if performance is a concern is to use data.table's extension of reshape2's melt & dcast functions()library(data.table)\n\nsetDT(dat1)\ndcast(dat1, name ~ numbers, value.var = \"value\")\n\n#          name          1          2         3         4\n# 1:  firstName  0.1836433 -0.8356286 1.5952808 0.3295078\n# 2: secondName -0.8204684  0.4874291 0.7383247 0.5757814\nAnd, as of data.table v1.9.6 we can cast on multiple columns## add an extra column\ndat1[, value2 := value * 2]\n\n## cast multiple value columns\ndcast(dat1, name ~ numbers, value.var = c(\"value\", \"value2\"))\n\n#          name    value_1    value_2   value_3   value_4   value2_1   value2_2 value2_3  value2_4\n# 1:  firstName  0.1836433 -0.8356286 1.5952808 0.3295078  0.3672866 -1.6712572 3.190562 0.6590155\n# 2: secondName -0.8204684  0.4874291 0.7383247 0.5757814 -1.6409368  0.9748581 1.476649 1.1515627\n", "Using your example dataframe, we could:xtabs(value ~ name + numbers, data = dat1)\n", "Other two options:Base package:df <- unstack(dat1, form = value ~ numbers)\nrownames(df) <- unique(dat1$name)\ndf\nsqldf package:library(sqldf)\nsqldf('SELECT name,\n      MAX(CASE WHEN numbers = 1 THEN value ELSE NULL END) x1, \n      MAX(CASE WHEN numbers = 2 THEN value ELSE NULL END) x2,\n      MAX(CASE WHEN numbers = 3 THEN value ELSE NULL END) x3,\n      MAX(CASE WHEN numbers = 4 THEN value ELSE NULL END) x4\n      FROM dat1\n      GROUP BY name')\n", "With the devel version of tidyr \u20180.8.3.9000\u2019, there is pivot_wider and pivot_longer which is generalized to do the reshaping (long -> wide, wide -> long, respectively) from 1 to multiple columns.  Using the OP's data-single column long -> widelibrary(dplyr)\nlibrary(tidyr)\ndat1 %>% \n    pivot_wider(names_from = numbers, values_from = value)\n# A tibble: 2 x 5\n#  name          `1`    `2`    `3`    `4`\n#  <fct>       <dbl>  <dbl>  <dbl>  <dbl>\n#1 firstName   0.341 -0.703 -0.380 -0.746\n#2 secondName -0.898 -0.335 -0.501 -0.175\n-> created another column for showing the functionalitydat1 %>% \n    mutate(value2 = value * 2) %>% \n    pivot_wider(names_from = numbers, values_from = c(\"value\", \"value2\"))\n# A tibble: 2 x 9\n#  name       value_1 value_2 value_3 value_4 value2_1 value2_2 value2_3 value2_4\n#  <fct>        <dbl>   <dbl>   <dbl>   <dbl>    <dbl>    <dbl>    <dbl>    <dbl>\n#1 firstName    0.341  -0.703  -0.380  -0.746    0.682   -1.41    -0.759   -1.49 \n#2 secondName  -0.898  -0.335  -0.501  -0.175   -1.80    -0.670   -1.00    -0.349\n", "Using base R aggregate function:aggregate(value ~ name, dat1, I)\n\n# name           value.1  value.2  value.3  value.4\n#1 firstName      0.4145  -0.4747   0.0659   -0.5024\n#2 secondName    -0.8259   0.1669  -0.8962    0.1681\n", "There's very powerful new package from genius data scientists at Win-Vector (folks that made vtreat, seplyr and replyr) called cdata. It implements \"coordinated data\" principles described in  and also in this . The idea is that regardless how you organize your data, it should be possible to identify individual data points using a system of \"data coordinates\". Here's a excerpt from the recent blog post by John Mount:The whole system is based on two primitives or operators\n  cdata::moveValuesToRowsD() and cdata::moveValuesToColumnsD(). These\n  operators have pivot, un-pivot, one-hot encode, transpose, moving\n  multiple rows and columns, and many other transforms as simple special\n  cases. It is easy to write many different operations in terms of the\n  cdata primitives. These operators can work-in memory or at big data\n  scale (with databases and Apache Spark; for big data use the\n  cdata::moveValuesToRowsN() and cdata::moveValuesToColumnsN()\n  variants). The transforms are controlled by a control table that\n  itself is a diagram of (or picture of) the transform.We will first build the control table (see  for details) and then perform the move of data from rows to columns.library(cdata)\n# first build the control table\npivotControlTable <- buildPivotControlTableD(table = dat1, # reference to dataset\n                        columnToTakeKeysFrom = 'numbers', # this will become column headers\n                        columnToTakeValuesFrom = 'value', # this contains data\n                        sep=\"_\")                          # optional for making column names\n\n# perform the move of data to columns\ndat_wide <- moveValuesToColumnsD(tallTable =  dat1, # reference to dataset\n                    keyColumns = c('name'),         # this(these) column(s) should stay untouched \n                    controlTable = pivotControlTable# control table above\n                    ) \ndat_wide\n\n#>         name  numbers_1  numbers_2  numbers_3  numbers_4\n#> 1  firstName  0.3407997 -0.7033403 -0.3795377 -0.7460474\n#> 2 secondName -0.8981073 -0.3347941 -0.5013782 -0.1745357\n", "The base reshape function works perfectly fine:df <- data.frame(\n  year   = c(rep(2000, 12), rep(2001, 12)),\n  month  = rep(1:12, 2),\n  values = rnorm(24)\n)\ndf_wide <- reshape(df, idvar=\"year\", timevar=\"month\", v.names=\"values\", direction=\"wide\", sep=\"_\")\ndf_wide\nWhere\nidvar\ntimevar\nv.names\ndirection\nseptimevarv.namesdata.frame\nIf no idvar exists, create one before using the reshape() function:df$id   <- c(rep(\"year1\", 12), rep(\"year2\", 12))\ndf_wide <- reshape(df, idvar=\"id\", timevar=\"month\", v.names=\"values\", direction=\"wide\", sep=\"_\")\ndf_wide\nJust remember that idvar is required! The timevar and v.names part is easy. The output of this function is more predictable than some of the others, as everything is explicitly defined.", "much easier way!devtools::install_github(\"yikeshu0611/onetree\") #install onetree package\n\nlibrary(onetree)\nwidedata=reshape_toWide(data = dat1,id = \"name\",j = \"numbers\",value.var.prefix = \"value\")\nwidedata\n\n        name     value1     value2     value3     value4\n   firstName  0.3407997 -0.7033403 -0.3795377 -0.7460474\n  secondName -0.8981073 -0.3347941 -0.5013782 -0.1745357\nif you want to go back from wide to long, only change Wide to Long, and no changes in objects.reshape_toLong(data = widedata,id = \"name\",j = \"numbers\",value.var.prefix = \"value\")\n\n        name numbers      value\n   firstName       1  0.3407997\n  secondName       1 -0.8981073\n   firstName       2 -0.7033403\n  secondName       2 -0.3347941\n   firstName       3 -0.3795377\n  secondName       3 -0.5013782\n   firstName       4 -0.7460474\n  secondName       4 -0.1745357\n", "You can try thislibrary(reshape2)dcast(df, City ~ Facility, fill=0)"]},
{"question": "How do I write a correct micro-benchmark in Java?", "details": "How do you write (and run) a correct micro-benchmark in Java?I'm looking for some code samples and comments illustrating various things to think about.Example: Should the benchmark measure time/iteration or iterations/time, and why?Related: ", "answers": ["How do you write (and run) a correct micro-benchmark in Java?I'm looking for some code samples and comments illustrating various things to think about.Example: Should the benchmark measure time/iteration or iterations/time, and why?Related: ", "Tips about writing micro benchmarks : Read a reputable paper on JVMs and micro-benchmarking. A good one is . Do not expect too much from micro-benchmarks; they measure only a limited range of JVM performance characteristics. Always include a warmup phase which runs your test kernel all the way through, enough to trigger all initializations and compilations before timing phase(s). (Fewer iterations is OK on the warmup phase. The rule of thumb is several tens of thousands of inner loop iterations.) Always run with -XX:+PrintCompilation, -verbose:gc, etc., so you can verify that the compiler and other parts of the JVM are not doing unexpected work during your timing phase. Print messages at the beginning and end of timing and warmup phases, so you can verify that there is no output from Rule 2 during the timing phase. Be aware of the difference between -client and -server, and OSR and regular compilations. The -XX:+PrintCompilation flag reports OSR compilations with an at-sign to denote the non-initial entry point, for example: Trouble$1::run @ 2 (41 bytes). Prefer server to client, and regular to OSR, if you are after best performance. Be aware of initialization effects. Do not print for the first time during your timing phase, since printing loads and initializes classes. Do not load new classes outside of the warmup phase (or final reporting phase), unless you are testing class loading specifically (and in that case load only the test classes). Rule 2 is your first line of defense against such effects. Be aware of deoptimization and recompilation effects. Do not take any code path for the first time in the timing phase, because the compiler may junk and recompile the code, based on an earlier optimistic assumption that the path was not going to be used at all. Rule 2 is your first line of defense against such effects. Use appropriate tools to read the compiler's mind, and expect to be surprised by the code it produces. Inspect the code yourself before forming theories about what makes something faster or slower. Reduce noise in your measurements. Run your benchmark on a quiet machine, and run it several times, discarding outliers. Use -Xbatch to serialize the compiler with the application, and consider setting -XX:CICompilerCount=1 to prevent the compiler from running in parallel with itself. Try your best to reduce GC overhead, set Xmx(large enough) equals Xms and use UseEpsilonGC if it is available. Use a library for your benchmark as it is probably more efficient and was already debugged for this sole purpose. Such as ,  or .  ", "I know this question has been marked as answered but I wanted to mention two libraries that help us to write micro benchmarks", "Important things for Java benchmarks are:\n\n\nSystem.gc()gc()\n\nI'm just in the process of blogging about the design of a benchmarking framework in .NET. I've got a  of  which may be able to give you some ideas - not everything will be appropriate, of course, but some of it may be.", " is a recent addition to OpenJDK and has been written by some performance engineers from Oracle. Certainly worth a look.The jmh is a Java harness for building, running, and analysing nano/micro/macro benchmarks written in Java and other languages targetting the JVM.Very interesting pieces of information buried in .See also:\n\n\n", "Should the benchmark measure time/iteration or iterations/time, and why?It depends on  you are trying to test.  If you are interested in , use time/iteration and if you are interested in , use iterations/time.", "If you are trying to compare two algorithms, do at least two benchmarks for each, alternating the order.  i.e.:for(i=1..n)\n  alg1();\nfor(i=1..n)\n  alg2();\nfor(i=1..n)\n  alg2();\nfor(i=1..n)\n  alg1();\nI have found some noticeable differences (5-10% sometimes) in the runtime of the same algorithm in different passes..Also, make sure that  is very large, so that the runtime of each loop is at the very least 10 seconds or so.  The more iterations, the more significant figures in your benchmark time and the more reliable that data is.", "Make sure you somehow use results which are computed in benchmarked code. Otherwise your code can be optimized away.", "There are many possible pitfalls for writing micro-benchmarks in Java.First: You have to calculate with all sorts of events that take time more or less random: Garbage collection, caching effects (of OS for files and of CPU for memory), IO etc.Second: You cannot trust the accuracy of the measured times for very short intervals.Third: The JVM optimizes your code while executing. So different runs in the same JVM-instance will become faster and faster.My recommendations: Make your benchmark run some seconds, that is more reliable than a runtime over milliseconds. Warm up the JVM (means running the benchmark at least once without measuring, that the JVM can run optimizations). And run your benchmark multiple times (maybe 5 times) and take the median-value. Run every micro-benchmark in a new JVM-instance (call for every benchmark new Java) otherwise optimization effects of the JVM can influence later running tests. Don't execute things, that aren't executed in the warmup-phase (as this could trigger class-load and recompilation).", "It should also be noted that it might also be important to analyze the results of the micro benchmark when comparing different implementations. Therefore a  should be made.This is because implementation A might be faster during most of the runs of the benchmark than implementation B. But A might also have a higher spread, so the measured performance benefit of A won't be of any significance when compared with B.So it is also important to write and run a micro benchmark correctly, but also to analyze it correctly.", "To add to the other excellent advice, I'd also be mindful of the following:For some CPUs (e.g. Intel Core i5 range with TurboBoost), the temperature (and number of cores currently being used, as well as thier utilisation percent) affects the clock speed. Since CPUs are dynamically clocked, this can affect your results. For example, if you have a single-threaded application, the maximum clock speed (with TurboBoost) is higher than for an application using all cores. This can therefore interfere with comparisons of single and multi-threaded performance on some systems. Bear in mind that the temperature and volatages also affect how long Turbo frequency is maintained.Perhaps a more fundamentally important aspect that you have direct control over: make sure you're measuring the right thing! For example, if you're using System.nanoTime() to benchmark a particular bit of code, put the calls to the assignment in places that make sense to avoid measuring things which you aren't interested in. For example, don't do:long startTime = System.nanoTime();\n//code here...\nSystem.out.println(\"Code took \"+(System.nanoTime()-startTime)+\"nano seconds\");\nProblem is you're not immediately getting the end time when the code has finished. Instead, try the following:final long endTime, startTime = System.nanoTime();\n//code here...\nendTime = System.nanoTime();\nSystem.out.println(\"Code took \"+(endTime-startTime)+\"nano seconds\");\n", " Java Micro Benchmark - control tasks required to determine the comparative performance characteristics of the computer system on different platforms. Can be used to guide optimization decisions and to compare different Java implementations."]},
{"question": "Pandas Merging 101", "details": "\n\n\n\n\n\n\n\n... and more. I've seen these recurring questions asking about various facets of the pandas merge functionality. Most of the information regarding merge and its various use cases today is fragmented across dozens of badly worded, unsearchable posts. The aim here is to collate some of the more important points for posterity.This QnA is meant to be the next installment in a series of helpful  user-guides on common pandas idioms (see , and , which I will be touching on, later).Please note that this post is  meant to be a replacement for the , so please read that as well! Some of the examples are taken from there.", "answers": ["\nINNERLEFTRIGHTFULLOUTERJOIN\n\n\n\n\n\nmergejoinconcatupdate\n... and more. I've seen these recurring questions asking about various facets of the pandas merge functionality. Most of the information regarding merge and its various use cases today is fragmented across dozens of badly worded, unsearchable posts. The aim here is to collate some of the more important points for posterity.This QnA is meant to be the next installment in a series of helpful  user-guides on common pandas idioms (see , and , which I will be touching on, later).Please note that this post is  meant to be a replacement for the , so please read that as well! Some of the examples are taken from there.", "This post aims to give readers a primer on SQL-flavored merging with pandas, how to use it, and when not to use it.In particular, here's what this post will go through:\nThe basics - types of joins (LEFT, RIGHT, OUTER, INNER)\n\n\n\nMerging with index under different conditions\n\n\n\nMultiway merges on columns and indexes (unique and non-unique)\nNotable alternatives to merge and join\nWhat this post will not go through:\n\n\n\nMost examples default to INNER JOIN operations while demonstrating various features, unless otherwise specified.Furthermore, all the DataFrames here can be copied and replicated so\nyou can play with them. Also, see \non how to read DataFrames from your clipboard.Lastly, all visual representation of JOIN operations have been hand-drawn using Google Drawings. Inspiration from .mergenp.random.seed(0)\nleft = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'value': np.random.randn(4)})    \nright = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'value': np.random.randn(4)})\n  \nleft\n\n  key     value\n0   A  1.764052\n1   B  0.400157\n2   C  0.978738\n3   D  2.240893\n\nright\n\n  key     value\n0   B  1.867558\n1   D -0.977278\n2   E  0.950088\n3   F -0.151357\nFor the sake of simplicity, the key column has the same name (for now).An  is represented by\nThis, along with the forthcoming figures all follow this convention:\n\n\nNaN\nTo perform an INNER JOIN, call merge on the left DataFrame, specifying the right DataFrame and the join key (at the very least) as arguments.left.merge(right, on='key')\n# Or, if you want to be explicit\n# left.merge(right, on='key', how='inner')\n\n  key   value_x   value_y\n0   B  0.400157  1.867558\n1   D  2.240893 -0.977278\nThis returns only rows from left and right which share a common key (in this example, \"B\" and \"D).A , or LEFT JOIN  is represented byThis can be performed by specifying how='left'.left.merge(right, on='key', how='left')\n\n  key   value_x   value_y\n0   A  1.764052       NaN\n1   B  0.400157  1.867558\n2   C  0.978738       NaN\n3   D  2.240893 -0.977278\nCarefully note the placement of NaNs here. If you specify how='left', then only keys from left are used, and missing data from right is replaced by NaN.And similarly, for a , or RIGHT JOIN which is......specify how='right':left.merge(right, on='key', how='right')\n\n  key   value_x   value_y\n0   B  0.400157  1.867558\n1   D  2.240893 -0.977278\n2   E       NaN  0.950088\n3   F       NaN -0.151357\nHere, keys from right are used, and missing data from left is replaced by NaN.Finally, for the , given byspecify how='outer'.left.merge(right, on='key', how='outer')\n\n  key   value_x   value_y\n0   A  1.764052       NaN\n1   B  0.400157  1.867558\n2   C  0.978738       NaN\n3   D  2.240893 -0.977278\n4   E       NaN  0.950088\n5   F       NaN -0.151357\nThis uses the keys from both frames, and NaNs are inserted for missing rows in both.The documentation summarizes these various merges nicely:If you need  and  in two steps.For LEFT-Excluding JOIN, represented asStart by performing a LEFT OUTER JOIN and then filtering (excluding!) rows coming from left only,(left.merge(right, on='key', how='left', indicator=True)\n     .query('_merge == \"left_only\"')\n     .drop('_merge', 1))\n\n  key   value_x  value_y\n0   A  1.764052      NaN\n2   C  0.978738      NaN\nWhere,left.merge(right, on='key', how='left', )\n\n  key   value_x   value_y     _merge\n0   A  1.764052       NaN  left_only\n1   B  0.400157  1.867558       both\n2   C  0.978738       NaN  left_only\n3   D  2.240893 -0.977278       bothAnd similarly, for a RIGHT-Excluding JOIN,(left.merge(right, on='key', how='right', )\n     .query('_merge == \"right_only\"')\n     .drop('_merge', 1))\n\n  key  value_x   value_y\n2   E      NaN  0.950088\n3   F      NaN -0.151357Lastly, if you are required to do a merge that only retains keys from the left or right, but not both (IOW, performing an ),You can do this in similar fashion\u2014(left.merge(right, on='key', how='outer', indicator=True)\n     .query('_merge != \"both\"')\n     .drop('_merge', 1))\n\n  key   value_x   value_y\n0   A  1.764052       NaN\n2   C  0.978738       NaN\n4   E       NaN  0.950088\n5   F       NaN -0.151357\nIf the key columns are named differently\u2014for example, left has keyLeft, and right has keyRight instead of key\u2014then you will have to specify left_on and right_on as arguments instead of on:left2 = left.rename({'key':'keyLeft'}, axis=1)\nright2 = right.rename({'key':'keyRight'}, axis=1)\n\nleft2\n \n  keyLeft     value\n0       A  1.764052\n1       B  0.400157\n2       C  0.978738\n3       D  2.240893\n\nright2\n\n  keyRight     value\n0        B  1.867558\n1        D -0.977278\n2        E  0.950088\n3        F -0.151357\nleft2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')\n\n  keyLeft   value_x keyRight   value_y\n0       B  0.400157        B  1.867558\n1       D  2.240893        D -0.977278\nWhen merging on keyLeft from left and keyRight from right, if you only want either of the keyLeft or keyRight (but not both) in the output, you can start by setting the index as a preliminary step.left3 = left2.set_index('keyLeft')\nleft3.merge(right2, left_index=True, right_on='keyRight')\n    \n    value_x keyRight   value_y\n0  0.400157        B  1.867558\n1  2.240893        D -0.977278\nContrast this with the output of the command just before (that is, the output of left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')), you'll notice keyLeft is missing. You can figure out what column to keep based on which frame's index is set as the key. This may matter when, say, performing some OUTER JOIN operation.DataFramesFor example, considerright3 = right.assign(newcol=np.arange(len(right)))\nright3\n  key     value  newcol\n0   B  1.867558       0\n1   D -0.977278       1\n2   E  0.950088       2\n3   F -0.151357       3\nIf you are required to merge only \"new_val\" (without any of the other columns), you can usually just subset columns before merging:left.merge(right3[['key', 'newcol']], on='key')\n\n  key     value  newcol\n0   B  0.400157       0\n1   D  2.240893       1\nIf you're doing a LEFT OUTER JOIN, a more performant solution would involve map:# left['newcol'] = left['key'].map(right3.set_index('key')['newcol']))\nleft.assign(newcol=left['key'].map(right3.set_index('key')['newcol']))\n\n  key     value  newcol\n0   A  1.764052     NaN\n1   B  0.400157     0.0\n2   C  0.978738     NaN\n3   D  2.240893     1.0\nAs mentioned, this is similar to, but faster thanleft.merge(right3[['key', 'newcol']], on='key', how='left')\n\n  key     value  newcol\n0   A  1.764052     NaN\n1   B  0.400157     0.0\n2   C  0.978738     NaN\n3   D  2.240893     1.0\nTo join on more than one column, specify a list for on (or left_on and right_on, as appropriate).left.merge(right, on=['key1', 'key2'] ...)\nOr, in the event the names are different,left.merge(right, left_on=['lkey1', 'lkey2'], right_on=['rkey1', 'rkey2'])\nmerge*\n: See .\nBesides merge, DataFrame.update and DataFrame.combine_first are also used in certain cases to update one DataFrame with another.\npd.merge_ordered is a useful function for ordered JOINs.\npd.merge_asof (read: merge_asOf) is useful for  joins.\nmergejoinconcatmergenp.random.seed([3, 14])\nleft = pd.DataFrame({'value': np.random.randn(4)}, index=['A', 'B', 'C', 'D'])    \nright = pd.DataFrame({'value': np.random.randn(4)}, index=['B', 'D', 'E', 'F'])\nleft.index.name = right.index.name = 'idxkey'\n\nleft\n           value\nidxkey          \nA      -0.602923\nB      -0.402655\nC       0.302329\nD      -0.524349\n\nright\n \n           value\nidxkey          \nB       0.543843\nD       0.013135\nE      -0.326498\nF       1.385076\nTypically, a merge on index would look like this:left.merge(right, left_index=True, right_index=True)\n\n\n         value_x   value_y\nidxkey                    \nB      -0.402655  0.543843\nD      -0.524349  0.013135\nIf your index is named, then v0.23 users can also specify the level name to on (or left_on and right_on as necessary).left.merge(right, on='idxkey')\n\n         value_x   value_y\nidxkey                    \nB      -0.402655  0.543843\nD      -0.524349  0.013135\nIt is possible (and quite simple) to use the index of one, and the column of another, to perform a merge. For example,left.merge(right, left_on='key1', right_index=True)\nOr vice versa (right_on=... and left_index=True).right2 = right.reset_index().rename({'idxkey' : 'colkey'}, axis=1)\nright2\n \n  colkey     value\n0      B  0.543843\n1      D  0.013135\n2      E -0.326498\n3      F  1.385076\n\nleft.merge(right2, left_index=True, right_on='colkey')\n\n    value_x colkey   value_y\n0 -0.402655      B  0.543843\n1 -0.524349      D  0.013135\nIn this special case, the index for left is named, so you can also use the index name with left_on, like this:left.merge(right2, left_on='idxkey', right_on='colkey')\n\n    value_x colkey   value_y\n0 -0.402655      B  0.543843\n1 -0.524349      D  0.013135\nDataFrame.join\nBesides these, there is another succinct option. You can use DataFrame.join which defaults to joins on the index. DataFrame.join does a LEFT OUTER JOIN by default, so how='inner' is necessary here.left.join(right, how='inner', lsuffix='_x', rsuffix='_y')\n\n         value_x   value_y\nidxkey                    \nB      -0.402655  0.543843\nD      -0.524349  0.013135\nNote that I needed to specify the lsuffix and rsuffix arguments since join would otherwise error out:left.join(right)\nValueError: columns overlap but no suffix specified: Index(['value'], dtype='object')\n \nSince the column names are the same. This would not be a problem if they were differently named.left.rename(columns={'value':'leftvalue'}).join(right, how='inner')\n\n        leftvalue     value\nidxkey                     \nB       -0.402655  0.543843\nD       -0.524349  0.013135\npd.concat\nLastly, as an alternative for index-based joins, you can use pd.concat:pd.concat([left, right], axis=1, sort=False, join='inner')\n\n           value     value\nidxkey                    \nB      -0.402655  0.543843\nD      -0.524349  0.013135\nOmit join='inner' if you need a FULL OUTER JOIN (the default):pd.concat([left, right], axis=1, sort=False)\n\n      value     value\nA -0.602923       NaN\nB -0.402655  0.543843\nC  0.302329       NaN\nD -0.524349  0.013135\nE       NaN -0.326498\nF       NaN  1.385076\nFor more information, see pd.concat.mergeOftentimes, the situation arises when multiple DataFrames are to be merged together. Naively, this can be done by chaining merge calls:df1.merge(df2, ...).merge(df3, ...)\nHowever, this quickly gets out of hand for many DataFrames. Furthermore, it may be necessary to generalise for an unknown number of DataFrames.Here I introduce pd.concat for multi-way joins on  keys, and DataFrame.join for multi-way joins on  keys. First, the setup.# Setup.\nnp.random.seed(0)\nA = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'valueA': np.random.randn(4)})    \nB = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'valueB': np.random.randn(4)})\nC = pd.DataFrame({'key': ['D', 'E', 'J', 'C'], 'valueC': np.ones(4)})\ndfs = [A, B, C] \n\n# Note, the \"key\" column values are unique, so the index is unique.\nA2 = A.set_index('key')\nB2 = B.set_index('key')\nC2 = C.set_index('key')\n\ndfs2 = [A2, B2, C2]\nIf your keys (here, the key could either be a column or an index) are unique, then you can use pd.concat. Note that pd.concat.# merge on `key` column, you'll need to set the index before concatenating\npd.concat([\n    df.set_index('key') for df in dfs], axis=1, join='inner'\n).reset_index()\n\n  key    valueA    valueB  valueC\n0   D  2.240893 -0.977278     1.0\n\n# merge on `key` index\npd.concat(dfs2, axis=1, sort=False, join='inner')\n\n       valueA    valueB  valueC\nkey                            \nD    2.240893 -0.977278     1.0\nOmit join='inner' for a FULL OUTER JOIN. Note that you cannot specify LEFT or RIGHT OUTER joins (if you need these, use join, described below).concat is fast, but has its shortcomings. It cannot handle duplicates.A3 = pd.DataFrame({'key': ['A', 'B', 'C', 'D', 'D'], 'valueA': np.random.randn(5)})\npd.concat([df.set_index('key') for df in [A3, B, C]], axis=1, join='inner')\nValueError: Shape of passed values is (3, 4), indices imply (3, 2)\nIn this situation, we can use join since it can handle non-unique keys (note that join joins DataFrames on their index; it calls merge under the hood and does a LEFT OUTER JOIN unless otherwise specified).# join on `key` column, set as the index first\n# For inner join. For left join, omit the \"how\" argument.\nA.set_index('key').join(\n    [df.set_index('key') for df in (B, C)], how='inner').reset_index()\n\n  key    valueA    valueB  valueC\n0   D  2.240893 -0.977278     1.0\n\n# join on `key` index\nA3.set_index('key').join([B2, C2], how='inner')\n\n       valueA    valueB  valueC\nkey                            \nD    1.454274 -0.977278     1.0\nD    0.761038 -0.977278     1.0\n", "A supplemental visual view of pd.concat([df0, df1], kwargs). \nNotice that, kwarg axis=0 or axis=1 's meaning is not as intuitive as df.mean() or df.apply(func)", "In this answer, I will consider a practical example of the pandas.concat.Considering the following DataFrames with the same column names: with size (8784, 5) with size (8760, 5)That have the same column names.You can combine them using pandas.concat, by simplyimport pandas as pd\n\nframes = [Preco2018, Preco2019]\n\ndf_merged = pd.concat(frames)\nWhich results in a DataFrame with the following size (17544, 5)If you want to visualize, it ends up working like this()"]},
{"question": "What is a raw type and why shouldn't we use it?", "details": "\n\n\n", "answers": ["\n\n\n", "The Java Language Specification defines a  as follows:A raw type is defined to be one of:\nThe reference type that is formed by taking the name of a generic type declaration without an accompanying type argument list.\nAn array type whose element type is a raw type.\nA non-static member type of a raw type R that is not inherited from a superclass or superinterface of R.\nHere's an example to illustrate:public class MyType<E> {\n    class Inner { }\n    static class Nested { }\n    \n    public static void main(String[] args) {\n        MyType mt;          // warning: MyType is a raw type\n        MyType.Inner inn;   // warning: MyType.Inner is a raw type\n\n        MyType.Nested nest; // no warning: not parameterized type\n        MyType<Object> mt1; // no warning: type parameter given\n        MyType<?> mt2;      // no warning: type parameter given (wildcard OK!)\n    }\n}\nHere, MyType<E> is a  (). It is common to colloquially refer to this type as simply MyType for short, but technically the name is MyType<E>.mt has a raw type (and generates a compilation warning) by the first bullet point in the above definition; inn also has a raw type by the third bullet point.MyType.Nested is not a parameterized type, even though it's a member type of a parameterized type MyType<E>, because it's static.mt1, and mt2 are both declared with actual type parameters, so they're not raw types.Essentially, raw types behaves just like they were before generics were introduced. That is, the following is entirely legal at compile-time.List names = new ArrayList(); // warning: raw type!\nnames.add(\"John\");\nnames.add(\"Mary\");\nnames.add(Boolean.FALSE); // not a compilation error!\nThe above code runs just fine, but suppose you also have the following:for (Object o : names) {\n    String name = (String) o;\n    System.out.println(name);\n} // throws ClassCastException!\n  //    java.lang.Boolean cannot be cast to java.lang.String\nNow we run into trouble at run-time, because names contains something that isn't an instanceof String.Presumably, if you want names to contain only String, you  perhaps still use a raw type and  add yourself, and then  to String every item from names. , though is NOT to use a raw type and , harnessing the power of Java generics.List<String> names = new ArrayList<String>();\nnames.add(\"John\");\nnames.add(\"Mary\");\nnames.add(Boolean.FALSE); // compilation error!\nOf course, if you  want names to allow a Boolean, then you can declare it as List<Object> names, and the above code would compile.\n\n<Object>The following is a quote from :Just what is the difference between the raw type List and the parameterized type List<Object>? Loosely speaking, the former has opted out generic type checking, while the latter explicitly told the compiler that it is capable of holding objects of any type. While you can pass a List<String> to a parameter of type List, you can't pass it to a parameter of type List<Object>. There are subtyping rules for generics, and List<String> is a subtype of the raw type List, but not of the parameterized type List<Object>. As a consequence, ListList<Object>.To illustrate the point, consider the following method which takes a List<Object> and appends a new Object().void appendNewObject(List<Object> list) {\n   list.add(new Object());\n}\nGenerics in Java are invariant. A List<String> is not a List<Object>, so the following would generate a compiler warning:List<String> names = new ArrayList<String>();\nappendNewObject(names); // compilation error!\nIf you had declared appendNewObject to take a raw type List as parameter, then this would compile, and you'd therefore lose the type safety that you get from generics.\n<E extends Number><Number>\n\n<?>List<Object>, List<String>, etc are all List<?>, so it may be tempting to just say that they're just List instead. However, there is a major difference: since a List<E> defines only add(E), you can't add just any arbitrary object to a List<?>. On the other hand, since the raw type List does not have type safety, you can add just about anything to a List.Consider the following variation of the previous snippet:static void appendNewObject(List<?> list) {\n    list.add(new Object()); // compilation error!\n}\n//...\n\nList<String> names = new ArrayList<String>();\nappendNewObject(names); // this part is fine!\nThe compiler did a wonderful job of protecting you from potentially violating the type invariance of the List<?>! If you had declared the parameter as the raw type List list, then the code would compile, and you'd violate the type invariant of List<String> names.Back to JLS 4.8:It is possible to use as a type  of a parameterized type or the erasure of an array type whose element type is a parameterized type. The superclasses (respectively, superinterfaces) of a raw type are the erasures of the superclasses (superinterfaces) of any of the parameterizations of the generic type.The type of a constructor, instance method, or non-static field of a raw type C that is not inherited from its superclasses or superinterfaces is the raw type that corresponds to the erasure of its type in the generic declaration corresponding to C.In simpler terms, when a raw type is used, the constructors, instance methods and non-static fields are .Take the following example:class MyType<E> {\n    List<String> getNames() {\n        return Arrays.asList(\"John\", \"Mary\");\n    }\n\n    public static void main(String[] args) {\n        MyType rawType = new MyType();\n        // unchecked warning!\n        // required: List<String> found: List\n        List<String> names = rawType.getNames();\n        // compilation error!\n        // incompatible types: Object cannot be converted to String\n        for (String str : rawType.getNames())\n            System.out.print(str);\n    }\n}\nWhen we use the raw MyType, getNames becomes erased as well, so that it returns a raw List! continues to explain the following: The erasure of a constructor or method signature s is a signature consisting of the same name as s and the erasures of all the formal parameter types given in s.The erasure of the signature of a generic method has no type parameters.The following bug report contains some thoughts from Maurizio Cimadamore, a compiler dev, and Alex Buckley, one of the authors of the JLS, on why this sort of behavior ought to occur: . (In short, it makes the specification simpler.)Here's another quote from JLS 4.8:The use of raw types is allowed only as a concession to compatibility of legacy code.  also has this to add:Given that you shouldn't use raw types, why did the language designers allow them? To provide compatibility.The Java platform was about to enter its second decade when generics were introduced, and there was an enormous amount of Java code in existence that did not use generics. It was deemed critical that all this code remains legal and interoperable with new code that does use generics. It had to be legal to pass instances of parameterized types to methods that were designed for use with ordinary types, and vice versa. This requirement, known as , drove the decision to support raw types.In summary, raw types should NEVER be used in new code. .Unfortunately, because Java generics are non-reified, there are two exceptions where raw types must be used in new code:\nList.classList<String>.class\ninstanceofo instanceof Seto instanceof Set<String>\n\nCollection<String>.class\n", "What are raw types in Java, and why do I often hear that they shouldn't be used in new code?Raw-types are ancient history of the Java language. In the beginning there were Collections and they held Objects nothing more and nothing less. Every operation on Collections required casts from Object to the desired type.List aList = new ArrayList();\nString s = \"Hello World!\";\naList.add(s);\nString c = (String)aList.get(0);\nWhile this worked most of the time, errors did happenList aNumberList = new ArrayList();\nString one = \"1\";//Number one\naNumberList.add(one);\nInteger iOne = (Integer)aNumberList.get(0);//Insert ClassCastException here\nThe old typeless collections could not enforce type-safety so the programmer had to remember what he stored within a collection.\nGenerics where invented to get around this limitation, the developer would declare the stored type once and the compiler would do it instead.List<String> aNumberList = new ArrayList<String>();\naNumberList.add(\"one\");\nInteger iOne = aNumberList.get(0);//Compile time error\nString sOne = aNumberList.get(0);//works fine\nFor Comparison:// Old style collections now known as raw types\nList aList = new ArrayList(); //Could contain anything\n// New style collections with Generics\nList<String> aList = new ArrayList<String>(); //Contains only Strings\nMore complex the Compareable interface://raw, not type save can compare with Other classes\nclass MyCompareAble implements CompareAble\n{\n   int id;\n   public int compareTo(Object other)\n   {return this.id - ((MyCompareAble)other).id;}\n}\n//Generic\nclass MyCompareAble implements CompareAble<MyCompareAble>\n{\n   int id;\n   public int compareTo(MyCompareAble other)\n   {return this.id - other.id;}\n}\nNote that it is impossible to implement the CompareAble interface with compareTo(MyCompareAble) with raw types.\nWhy you should not use them:\nObjectCollection\n\nObject\nWhat the compiler does:\nGenerics are backward compatible, they use the same java classes as the raw types do. The magic happens mostly at compile time.List<String> someStrings = new ArrayList<String>();\nsomeStrings.add(\"one\");\nString one = someStrings.get(0);\nWill be compiled as:List someStrings = new ArrayList();\nsomeStrings.add(\"one\"); \nString one = (String)someStrings.get(0);\nThis is the same code you would write if you used the raw types directly. Thought I'm not sure what happens with the CompareAble interface, I guess that it creates two compareTo functions, one taking a MyCompareAble and the other taking an Object and passing it to the first after casting it.What are the alternatives to raw types: Use ", "A raw type is the name of a generic class or interface without any type arguments. For example, given the generic Box class:public class Box<T> {\n    public void set(T t) { /* ... */ }\n    // ...\n}\nTo create a parameterized type of Box<T>, you supply an actual type argument for the formal type parameter T:Box<Integer> intBox = new Box<>();\nIf the actual type argument is omitted, you create a raw type of Box<T>:Box rawBox = new Box();\nTherefore, Box is the raw type of the generic type Box<T>. However, a non-generic class or interface type is not a raw type.Raw types show up in legacy code because lots of API classes (such as the Collections classes) were not generic prior to JDK 5.0. When using raw types, you essentially get pre-generics behavior \u2014 a Box gives you Objects. For backward compatibility, assigning a parameterized type to its raw type is allowed:Box<String> stringBox = new Box<>();\nBox rawBox = stringBox;               // OK\nBut if you assign a raw type to a parameterized type, you get a warning:Box rawBox = new Box();           // rawBox is a raw type of Box<T>\nBox<Integer> intBox = rawBox;     // warning: unchecked conversion\nYou also get a warning if you use a raw type to invoke generic methods defined in the corresponding generic type:Box<String> stringBox = new Box<>();\nBox rawBox = stringBox;\nrawBox.set(8);  // warning: unchecked invocation to set(T)\nThe warning shows that raw types bypass generic type checks, deferring the catch of unsafe code to runtime. Therefore, you should avoid using raw types.The Type Erasure section has more information on how the Java compiler uses raw types.As mentioned previously, when mixing legacy code with generic code, you may encounter warning messages similar to the following:Note: Example.java uses unchecked or unsafe operations.Note: Recompile with -Xlint:unchecked for details.This can happen when using an older API that operates on raw types, as shown in the following example:public class WarningDemo {\n    public static void main(String[] args){\n        Box<Integer> bi;\n        bi = createBox();\n    }\n\n    static Box createBox(){\n        return new Box();\n    }\n}\nThe term \"unchecked\" means that the compiler does not have enough type information to perform all type checks necessary to ensure type safety. The \"unchecked\" warning is disabled, by default, though the compiler gives a hint. To see all \"unchecked\" warnings, recompile with -Xlint:unchecked.Recompiling the previous example with -Xlint:unchecked reveals the following additional information:WarningDemo.java:4: warning: [unchecked] unchecked conversion\nfound   : Box\nrequired: Box<java.lang.Integer>\n        bi = createBox();\n                      ^\n1 warning\nTo completely disable unchecked warnings, use the -Xlint:-unchecked flag. The @SuppressWarnings(\"unchecked\") annotation suppresses unchecked warnings. If you are unfamiliar with the @SuppressWarnings syntax, see Annotations.Original source: ", "A \"raw\" type in Java is a class which is non-generic and deals with \"raw\" Objects, rather than type-safe generic type parameters.For example, before Java generics was available, you would use a collection class like this:LinkedList list = new LinkedList();\nlist.add(new MyObject());\nMyObject myObject = (MyObject)list.get(0);\nWhen you add your object to the list, it doesn't care what type of object it is, and when you get it from the list, you have to explicitly cast it to the type you are expecting.Using generics, you remove the \"unknown\" factor, because you must explicitly specify which type of objects can go in the list:LinkedList<MyObject> list = new LinkedList<MyObject>();\nlist.add(new MyObject());\nMyObject myObject = list.get(0);\nNotice that with generics you don't have to cast the object coming from the get call, the collection is pre-defined to only work with MyObject.  This very fact is the main driving factor for generics.  It changes a source of runtime errors into something that can be checked at compile time.", " private static List<String> list = new ArrayList<String>();\nYou should specify the type-parameter. The warning advises that types that are defined to support  should be parameterized, rather than using their raw form.List is defined to support generics: public class List<E>. This allows many type-safe operations, that are checked compile-time.", "A \"raw type\" is the use of a generic class without specifying a type argument(s) for its parameterized type(s), e.g. using List instead of List<String>. When generics were introduced into Java, several classes were updated to use generics.  Using these class as a \"raw type\" (without specifying a type argument) allowed legacy code to still compile.\"Raw types\" are used for backwards compatibility. Their use in new code is not recommended because using the generic class with a type argument allows for stronger typing, which in turn may improve code understandability and lead to catching potential problems earlier.The preferred alternative is to use generic classes as intended - with a suitable type argument (e.g. List<String>). This allows the programmer to specify types more specifically, conveys more meaning to future maintainers about the intended use of a variable or data structure, and it allows compiler to enforce better type-safety.  These advantages together may improve code quality and help prevent the introduction of some coding errors.For example, for a method where the programmer wants to ensure a List variable called 'names' contains only Strings:List<String> names = new ArrayList<String>();\nnames.add(\"John\");          // OK\nnames.add(new Integer(1));  // compile error\n", "Here I am Considering multiple cases  through which you can clearify  the concept1. ArrayList<String> arr = new ArrayList<String>();\n2. ArrayList<String> arr = new ArrayList();\n3. ArrayList arr = new ArrayList<String>();\nArrayList<String> arr it is a ArrayList reference variable with type String which reference to a ArralyList Object of Type String. It means it can hold only String type Object.It is a Strict to String not  a Raw Type so, It will never raise an warning .    arr.add(\"hello\");// alone statement will compile successfully and no warning.\n\n    arr.add(23);  //prone to compile time error.\n     //error: no suitable method found for add(int)\nIn this case ArrayList<String> arr is a strict type but your Object new ArrayList(); is a raw type.     arr.add(\"hello\"); //alone this compile but raise the warning.\n    arr.add(23);  //again prone to compile time error.\n    //error: no suitable method found for add(int)\nhere arr is a Strict type. So, It will raise compile time error when adding a integer. :- A Raw Type Object is referenced to a Strict type Referenced Variable of ArrayList.In this case ArrayList arr is a raw type but your Object new ArrayList<String>(); is a Strict type.     arr.add(\"hello\");  \n    arr.add(23);  //compiles fine but raise the warning.\nIt will add any type of Object into it because arr is a Raw Type. :- A Strict Type Object is referenced to a raw type referenced Variable.", "The compiler wants you to write this:private static List<String> list = new ArrayList<String>();\nbecause otherwise, you could add any type you like into list, making the instantiation as new ArrayList<String>() pointless. Java generics are a compile-time feature only, so an object created with new ArrayList<String>() will happily accept Integer or JFrame elements if assigned to a reference of the \"raw type\" List - the object itself knows nothing about what types it's supposed to contain, only the compiler does.", "A -type is the a lack of a  when using a generic type.Raw-type should not be used because it could cause runtime errors, like inserting a double into what was supposed to be a Set of ints.Set set = new HashSet();\nset.add(3.45); //ok\nWhen retrieving the stuff from the Set, you don't know what is coming out. Let's assume that you expect it to be all ints, you are casting it to Integer; exception at runtime when the double 3.45 comes along.With a  added to your Set, you will get a compile error at once. This preemptive error lets you fix the problem before something blows up during runtime (thus saving on time and effort).Set<Integer> set = new HashSet<Integer>();\nset.add(3.45); //NOT ok.\n", "Here's another case where raw types will bite you:public class StrangeClass<T> {\n  @SuppressWarnings(\"unchecked\")\n  public <X> X getSomethingElse() {\n    return (X)\"Testing something else!\";\n  }\n\n  public static void main(String[] args) {\n    final StrangeClass<String> withGeneric    = new StrangeClass<>();\n    final StrangeClass         withoutGeneric = new StrangeClass();\n    final String               value1,\n                               value2;\n\n    // Compiles\n    value1 = withGeneric.getSomethingElse();\n\n    // Produces compile error:\n    // incompatible types: java.lang.Object cannot be converted to java.lang.String\n    value2 = withoutGeneric.getSomethingElse();\n  }\n}\nAs was mentioned in the accepted answer, you lose all support for generics within the code of the raw type. Every type parameter is converted to its erasure (which in the above example is just Object).", "What is saying is that your list is a List of unespecified objects. That is that Java does not know what kind of objects are inside the list. Then when you want to iterate the list you have to cast every element, to be able to access the properties of that element (in this case, String).In general is a better idea to parametrize the collections, so you don't have conversion problems, you will only be able to add elements of the parametrized type and your editor will offer you the appropiate methods to select.private static List<String> list = new ArrayList<String>();\n", ".  A raw type is the name of a generic class or interface without any type arguments. For example, given the generic Box class:  public class Box<T> {\n    public void set(T t) { /* ... */ }\n    // ...\n}\nTo create a parameterized type of Box, you supply an actual type argument for the formal type parameter T:  Box<Integer> intBox = new Box<>();\nIf the actual type argument is omitted, you create a raw type of Box:  Box rawBox = new Box();\n", "Raw types refer to using a generic type without specifying a type parameter., A list is a raw type, while List<String> is a parameterized type.When generics were introduced in JDK 1.5, raw types were retained only to maintain backwards compatibility with older versions of Java. Although using raw types is still possible,:\n\n\nThey are less expressive, and don't self-document in the same way as parameterized types\n import java.util.*;\n\npublic final class AvoidRawTypes {\n\nvoid withRawType() {\n\n    //Raw List doesn't self-document, \n    //doesn't state explicitly what it can contain\n\n    List stars = Arrays.asList(\"Arcturus\", \"Vega\", \"Altair\");\n\n    Iterator iter = stars.iterator();\n\n    while (iter.hasNext()) {\n\n        String star = (String) iter.next(); //cast needed\n\n        log(star);\n    }\n\n}\n\nvoid withParameterizedType() {\n\n    List < String > stars = Arrays.asList(\"Spica\", \"Regulus\", \"Antares\");\n\n    for (String star: stars) {\n\n        log(star);\n    }\n\n}\n\nprivate void log(Object message) {\n\n    System.out.println(Objects.toString(message));\n\n}\n\n}\n\n: ", "I found this page after doing some sample exercises and having the exact same puzzlement.============== I went from this code as provide by the sample ===============public static void main(String[] args) throws IOException {\n\n    Map wordMap = new HashMap();\n    if (args.length > 0) {\n        for (int i = 0; i < args.length; i++) {\n            countWord(wordMap, args[i]);\n        }\n    } else {\n        getWordFrequency(System.in, wordMap);\n    }\n    for (Iterator i = wordMap.entrySet().iterator(); i.hasNext();) {\n        Map.Entry entry = (Map.Entry) i.next();\n        System.out.println(entry.getKey() + \" :\\t\" + entry.getValue());\n    }\n====================== To This code ========================public static void main(String[] args) throws IOException {\n    // replace with TreeMap to get them sorted by name\n    Map<String, Integer> wordMap = new HashMap<String, Integer>();\n    if (args.length > 0) {\n        for (int i = 0; i < args.length; i++) {\n            countWord(wordMap, args[i]);\n        }\n    } else {\n        getWordFrequency(System.in, wordMap);\n    }\n    for (Iterator<Entry<String, Integer>> i = wordMap.entrySet().iterator(); i.hasNext();) {\n        Entry<String, Integer> entry =   i.next();\n        System.out.println(entry.getKey() + \" :\\t\" + entry.getValue());\n    }\n\n}\n===============================================================================It may be safer but took 4  hours to demuddle the philosophy...", "Raw types are fine when they express what you want to express.For example, a deserialisation function might return a List, but it doesn't know the list's element type. So List is the appropriate return type here."]},
{"question": "What is the scope of variables in JavaScript?", "details": "What is the scope of variables in javascript? Do they have the same scope inside as opposed to outside a function? Or does it even matter? Also, where are the variables stored if they are defined globally?", "answers": ["What is the scope of variables in javascript? Do they have the same scope inside as opposed to outside a function? Or does it even matter? Also, where are the variables stored if they are defined globally?", "JavaScript has lexical (also called static) scoping and closures. This means you can tell the scope of an identifier by looking at the source code.The four scopes are:Outside of the special cases of global and module scope, variables are declared using var (function scope), let (block scope), and const (block scope). Most other forms of identifier declaration have block scope in strict mode.Scope is the region of the codebase over which an identifier is valid.A lexical environment is a mapping between identifier names and the values associated with them.Scope is formed of a linked nesting of lexical environments, with each level in the nesting corresponding to a lexical environment of an ancestor execution context.These linked lexical environments form a scope \"chain\". Identifier resolution is the process of searching along this chain for a matching identifier.Identifier resolution only occurs in one direction: outwards. In this way, outer lexical environments cannot \"see\" into inner lexical environments.There are three pertinent factors in deciding the  of an  in JavaScript:Some of the ways identifiers can be declared:varletconstvarimportevalSome of the locations identifiers can be declared:Identifiers declared using var , apart from when they are declared directly in the global context, in which case they are added as properties on the global object and have global scope. There are separate rules for their use in eval functions.Identifiers declared using let and const , apart from when they are declared directly in the global context, in which case they have global scope.Note: let, const and var . This means that their logical position of definition is the top of their enclosing scope (block or function). However, variables declared using let and const cannot be read or assigned to until control has passed the point of declaration in the source code. The interim period is known as the temporal dead zone.function f() {\n    function g() {\n        console.log(x)\n    }\n    let x = 1\n    g()\n}\nf() // 1 because x is hoisted even though declared with `let`!Function parameter names are scoped to the function body. Note that there is a slight complexity to this. Functions declared as default arguments close over the , and not the body of the function.Function declarations have block scope in strict mode and function scope in non-strict mode. Note: non-strict mode is a complicated set of emergent rules based on the quirky historical implementations of different browsers.Named function expressions are scoped to themselves (e.g., for the purpose of recursion).In non-strict mode, implicitly defined properties on the global object have global scope, because the global object sits at the top of the scope chain. In strict mode, these are not permitted.In eval strings, variables declared using var will be placed in the current scope, or, if eval is used indirectly, as properties on the global object.The following will throw a ReferenceError because the namesx, y, and z have no meaning outside of the function f.function f() {\n    var x = 1\n    let y = 1\n    const z = 1\n}\nconsole.log(typeof x) // undefined (because var has function scope!)\nconsole.log(typeof y) // undefined (because the body of the function is a block)\nconsole.log(typeof z) // undefined (because the body of the function is a block)The following will throw a ReferenceError for y and z, but not for x, because the visibility of x is not constrained by the block. Blocks that define the bodies of control structures like if, for, and while, behave similarly.{\n    var x = 1\n    let y = 1\n    const z = 1\n}\nconsole.log(x) // 1\nconsole.log(typeof y) // undefined because `y` has block scope\nconsole.log(typeof z) // undefined because `z` has block scopeIn the following, x is visible outside of the loop because var has function scope:for(var x = 0; x < 5; ++x) {}\nconsole.log(x) // 5 (note this is outside the loop!)...because of this behavior, you need to be careful about closing over variables declared using var in loops. There is only one instance of variable x declared here, and it sits logically outside of the loop.The following prints 5, five times, and then prints 5 a sixth time for the console.log outside the loop:for(var x = 0; x < 5; ++x) {\n    setTimeout(() => console.log(x)) // closes over the `x` which is logically positioned at the top of the enclosing scope, above the loop\n}\nconsole.log(x) // note: visible outside the loopThe following prints undefined because x is block-scoped. The callbacks are run one by one asynchronously. New behavior for let variables means that each anonymous function closed over a different variable named x (unlike it would have done with var), and so integers 0 through 4 are printed.:for(let x = 0; x < 5; ++x) {\n    setTimeout(() => console.log(x)) // `let` declarations are re-declared on a per-iteration basis, so the closures capture different variables\n}\nconsole.log(typeof x) // undefinedThe following will NOT throw a ReferenceError because the visibility of x is not constrained by the block; it will, however, print undefined because the variable has not been initialised (because of the if statement).if(false) {\n    var x = 1\n}\nconsole.log(x) // here, `x` has been declared, but not initialisedA variable declared at the top of a for loop using let is scoped to the body of the loop:for(let x = 0; x < 10; ++x) {} \nconsole.log(typeof x) // undefined, because `x` is block-scopedThe following will throw a ReferenceError because the visibility of x is constrained by the block:if(false) {\n    let x = 1\n}\nconsole.log(typeof x) // undefined, because `x` is block-scopedVariables declared using var, let or const are all scoped to modules:// module1.js\n\nvar x = 0\nexport function f() {}\n\n//module2.js\n\nimport f from 'module1.js'\n\nconsole.log(x) // throws ReferenceError\nThe following will declare a property on the global object because variables declared using var within the global context are added as properties to the global object:var x = 1\nconsole.log(window.hasOwnProperty('x')) // truelet and const in the global context do not add properties to the global object, but still have global scope:let x = 1\nconsole.log(window.hasOwnProperty('x')) // falseFunction parameters can be considered to be declared in the function body:function f(x) {}\nconsole.log(typeof x) // undefined, because `x` is scoped to the functionCatch block parameters are scoped to the catch-block body:try {} catch(e) {}\nconsole.log(typeof e) // undefined, because `e` is scoped to the catch blockNamed function expressions are scoped only to the expression itself:(function foo() { console.log(foo) })()\nconsole.log(typeof foo) // undefined, because `foo` is scoped to its own expressionIn non-strict mode, implicitly defined properties on the global object are globally scoped. In strict mode, you get an error.x = 1 // implicitly defined property on the global object (no \"var\"!)\n\nconsole.log(x) // 1\nconsole.log(window.hasOwnProperty('x')) // trueIn non-strict mode, function declarations have function scope. In strict mode, they have block scope.'use strict'\n{\n    function foo() {}\n}\nconsole.log(typeof foo) // undefined, because `foo` is block-scopedScope is defined as the  region of code over which an identifier is valid.In JavaScript, every function-object has a hidden [[Environment]] reference that is a reference to the  of the  (stack frame) within which it was created.When you invoke a function, the hidden [[Call]] method is called. This method creates a new execution context and establishes a link between the new execution context and the lexical environment of the function-object. It does this by copying the [[Environment]] value on the function-object, into an  field on the lexical environment of the new execution context.Note that this link between the new execution context and the lexical environment of the function object is called a .Thus, in JavaScript, scope is implemented via lexical environments linked together in a \"chain\" by outer references. This chain of lexical environments is called the scope chain, and identifier resolution occurs by  for a matching identifier.Find out .", "Javascript uses scope chains to establish the scope for a given function. There is typically one global scope, and each function defined has its own nested scope. Any function defined within another function has a local scope which is linked to the outer function. It's always the position in the source that defines the scope.An element in the scope chain is basically a Map with a pointer to its parent scope.When resolving a variable, javascript starts at the innermost scope and searches outwards.", "Variables declared globally have a global scope. Variables declared within a function are scoped to that function, and shadow global variables of the same name.(I'm sure there are many subtleties that real JavaScript programmers will be able to point out in other answers. In particular I came across  about what exactly this means at any time. Hopefully  is enough to get you started though.)", "Traditionally, JavaScript really only has two types of scope :I will not elaborate on this, since there are already many other answers explaining the difference.The  now also allow a third scope :Traditionally, you create your variables like this :var myVariable = \"Some text\";\nBlock scope variables are created like this :let myVariable = \"Some text\";\nTo understand the difference between functional scope and block scope, consider the following code :// i IS NOT known here\n// j IS NOT known here\n// k IS known here, but undefined\n// l IS NOT known here\n\nfunction loop(arr) {\n    // i IS known here, but undefined\n    // j IS NOT known here\n    // k IS known here, but has a value only the second time loop is called\n    // l IS NOT known here\n\n    for( var i = 0; i < arr.length; i++ ) {\n        // i IS known here, and has a value\n        // j IS NOT known here\n        // k IS known here, but has a value only the second time loop is called\n        // l IS NOT known here\n    };\n\n    // i IS known here, and has a value\n    // j IS NOT known here\n    // k IS known here, but has a value only the second time loop is called\n    // l IS NOT known here\n\n    for( let j = 0; j < arr.length; j++ ) {\n        // i IS known here, and has a value\n        // j IS known here, and has a value\n        // k IS known here, but has a value only the second time loop is called\n        // l IS NOT known here\n    };\n\n    // i IS known here, and has a value\n    // j IS NOT known here\n    // k IS known here, but has a value only the second time loop is called\n    // l IS NOT known here\n}\n\nloop([1,2,3,4]);\n\nfor( var k = 0; k < arr.length; k++ ) {\n    // i IS NOT known here\n    // j IS NOT known here\n    // k IS known here, and has a value\n    // l IS NOT known here\n};\n\nfor( let l = 0; l < arr.length; l++ ) {\n    // i IS NOT known here\n    // j IS NOT known here\n    // k IS known here, and has a value\n    // l IS known here, and has a value\n};\n\nloop([1,2,3,4]);\n\n// i IS NOT known here\n// j IS NOT known here\n// k IS known here, and has a value\n// l IS NOT known here\nHere, we can see that our variable j is only known in the first for loop, but not before and after. Yet, our variable i is known in the entire function.Also, consider that block scoped variables are not known before they are declared because they are not hoisted. You're also not allowed to redeclare the same block scoped variable within the same block. This makes block scoped variables less error prone than globally or functionally scoped variables, which are hoisted and which do not produce any errors in case of multiple declarations.Whether or not it is safe to use today, depends on your environment :\nIf you're writing server-side JavaScript code (), you can safely use the let statement.\nIf you're writing client-side JavaScript code and use a browser based transpiler (like  or ), you can safely use the let statement, however your code is likely to be anything but optimal with respect to performance.\nIf you're writing client-side JavaScript code and use a Node based transpiler (like the  or ), you can safely use the let statement. And because your browser will only know about the transpiled code, performance drawbacks should be limited.\nIf you're writing client-side JavaScript code and don't use a transpiler, you need to consider browser support.These are some browsers that don't support let at all :\n\n\n\n\n\n\n\n\nFor an up-to-date overview of which browsers support the let statement at the time of your reading this answer, see Can I Use. This means that declarations are always much to the top of the scope.", "Here's an example:<script>\n\nvar globalVariable = 7; //==window.globalVariable\n\nfunction aGlobal( param ) { //==window.aGlobal(); \n                            //param is only accessible in this function\n  var scopedToFunction = {\n    //can't be accessed outside of this function\n\n    nested : 3 //accessible by: scopedToFunction.nested\n  };\n\n  anotherGlobal = {\n    //global because there's no `var`\n  }; \n\n}\n\n</script>\nYou'll want to investigate closures, and how to use them to make .", "The key, as I understand it, is that Javascript has function level scoping vs the more common C block scoping.", "In \"Javascript 1.7\" (Mozilla's extension to Javascript) one can also declare block-scope variables with let: var a = 4;\n let (a = 3) {\n   alert(a); // 3\n }\n alert(a);   // 4\n", "The idea of scoping in JavaScript when originally designed by  came from the  scripting language . In this language, the displays were done similar to a stack of index cards. There was a master card referred to as the background. It was transparent and can be seen as the bottom card. Any content on this base card was shared with cards placed on top of it. Each card placed on top had its own content which took precedence over the previous card, but still had access to the prior cards if desired.This is exactly how the JavaScript scoping system is designed. It just has different names. The cards in JavaScript are known as . Each one of these contexts contains three main parts. A variable environment, a lexical environment, and a this binding. Going back to the cards reference, the lexical environment contains all of the content from prior cards lower in the stack. The current context is at the top of the stack and any content declared there will be stored in the variable environment. The variable environment will take precedence in the case of naming collisions.The this binding will point to the containing object. Sometimes scopes or execution contexts change without the containing object changing, such as in a declared function where the containing object may be window or a constructor function.These execution contexts are created any time control is transferred. Control is transferred when code begins to execute, and this is primarily done from function execution. So that is the technical explanation. In practice, it is important to remember that in JavaScript\n\n\n\n\nApplying this to one of the previous examples (5. \"Closure\") on this page, it is possible to follow the stack of execution contexts. In this example there are three contexts in the stack. They are defined by the outer context, the context in the immediately invoked function called by var six, and the context in the returned function inside of var six's immediately invoked function.) The outer context. It has a variable environment of a = 1\n ) The IIFE context, it has a lexical environment of a = 1, but a variable environment of a = 6 which takes precedence in the stack\n ) The returned function context, it has a lexical environment of a = 6 and that is the value referenced in the alert when called.", "1) There is a global scope, a function scope, and the with and catch scopes. There is no 'block' level scope in general for variable's -- the with and the catch statements add names to their blocks.2) Scopes are nested by functions all the way to the global scope.3) Properties are resolved by going through the prototype chain.  The with statement brings object property names into the lexical scope defined by the with block.EDIT: ECMAAScript 6 (Harmony) is spec'ed to support let, and I know chrome allows a 'harmony' flag, so perhaps it does support it..Let would be a support for block level scoping, but you have to use the keyword to make it happen.EDIT: Based on Benjamin's pointing out of the with and catch statements in the comments, I've edited the post, and added more.  Both the with and the catch statements introduce variables into their respective blocks, and that  a block scope. These variables are aliased to the properties of the objects passed into them. //chrome (v8)\n\n var a = { 'test1':'test1val' }\n test1   // error not defined\n with (a) { var test1 = 'replaced' }\n test1   // undefined\n a       // a.test1 = 'replaced'\nEDIT: Clarifying example:test1 is scoped to the with block, but is aliased to a.test1.  'Var test1' creates a new variable test1 in the upper lexical context (function, or global), unless it is a property of a -- which it is. Yikes!  Be careful using 'with' -- just like var is a noop if the variable is already defined in the function, it is also a noop with respect to names imported from the object!  A little heads up on the name already being defined would make this much safer.  I personally will never use with because of this.", "I found that many people new to JavaScript have trouble understanding that inheritance is available by default in the language and that function scope is the only scope, so far. I provided an extension to a beautifier I wrote at the end of last year called JSPretty. The feature colors function scope in the code and always associates a color to all variables declared in that scope. Closure is visually demonstrated when a variable with a color from one scope is used in a different scope.Try the feature at:\n\nSee a demo at:\n\nView the code at:\n\n\nCurrently the feature offers support for a depth of 16 nested functions, but currently does not color global variables.", "JavaScript have only two type of scope : var        a = \"global\";\n         function outer(){ \n              b = \"local\";\n              console.log(a+b); //\"globallocal\"\n         }\nouter();\nScope chain -->  aoutervariable scope objectbNow when a variable a required it first searches for nearest variable scope and if variable is not there than it move's to next object of variable scope chain.which is in this case is window level.", "Just to add to the other answers, scope is a look-up list of all the declared identifiers (variables), and enforces a strict set of rules as to how these are accessible to currently executing code.  This look-up may be for the purposes of assigning to the variable, which is an LHS (lefthand-side) reference, or it may be for the purposes of retrieving its value, which is an RHS (righthand-side) reference. These look-ups are what the JavaScript engine is doing internally when it's compiling and executing the code.So from this perspective, I think that a picture would help that I found in the Scopes and Closures ebook by Kyle Simpson:Quoting from his ebook:The building represents our program\u2019s nested scope ruleset. The first\n  floor of the building represents your currently executing scope,\n  wherever you are. The top level of the building is the global scope.\n  You resolve LHS and RHS references by looking on your current floor,\n  and if you don\u2019t find it, taking the elevator to the next floor,\n  looking there, then the next, and so on. Once you get to the top floor\n  (the global scope), you either find what you\u2019re looking for, or you\n  don\u2019t. But you have to stop regardless.One thing of note that is worth mentioning, \"Scope look-up stops once it finds the first match\".This idea of \"scope levels\" explains why \"this\" can be changed with a newly created scope, if it's being looked up in a nested function.\nHere is a link that goes into all these details,  ", "run the code. hope this will give an idea about scoping Name = 'global data';\ndocument.Name = 'current document data';\n(function(window,document){\nvar Name = 'local data';\nvar myObj = {\n    Name: 'object data',\n    f: function(){\n        alert(this.Name);\n    }\n};\n\nmyObj.newFun = function(){\n    alert(this.Name);\n}\n\nfunction testFun(){\n    alert(\"Window Scope : \" + window.Name + \n          \"\\nLocal Scope : \" + Name + \n          \"\\nObject Scope : \" + this.Name + \n          \"\\nCurrent document Scope : \" + document.Name\n         );\n}\n\n\ntestFun.call(myObj);\n})(window,document);\n", "Global variables are exactly like global stars (Jackie Chan, Nelson Mandela). You can access them (get or set the value), from any part of your application. Global functions are like global events (New Year, Christmas). You can execute (call) them from any part of your application.//global variable\nvar a = 2;\n\n//global function\nfunction b(){\n   console.log(a);  //access global variable\n}\nIf you are in the USA, you may know Kim Kardashian, infamous celebrity ( she somehow manages to make the tabloids). But people outside of the USA will not recognize her. She is a local star, bound to her territory.Local variables are like local stars. You can only access them (get or set the value) inside the scope. A local function is like local events - you can execute only (celebrate) inside that scope. If you want to access them from outside of the scope, you will get a reference errorfunction b(){\n   var d = 21; //local variable\n   console.log(d);\n\n   function dog(){  console.log(a); }\n     dog(); //execute local function\n}\n\n console.log(d); //ReferenceError: dddddd is not defined    \n ", "There are ALMOST only two types of JavaScript scopes:\n\n\nSo, any blocks other than functions do not create a new scope. That explains why for-loops overwrite outer scoped variables:var i = 10, v = 10;\nfor (var i = 0; i < 5; i++) { var v = 5; }\nconsole.log(i, v);\n// output 5 5\nUsing functions instead:var i = 10, v = 10;\n$.each([0, 1, 2, 3, 4], function(i) { var v = 5; });\nconsole.log(i,v);\n// output 10 10\nIn the first example, there was no block scope, so the initially declared variables were overwritten. In the second example, there was a new scope due to the function, so the initially declared variables were SHADOWED, and not overwritten.That's almost all you need to know in terms of JavaScript scoping, except:\n\n\nSo you can see JavaScript scoping is actually extremely simple, albeit not always intuitive. A few things to be aware of:\n\n\nSo this code:var i = 1;\nfunction abc() {\n  i = 2;\n  var i = 3;\n}\nconsole.log(i);     // outputs 1\nis equivalent to:var i = 1;\nfunction abc() {\n  var i;     // var declaration moved to the top of the scope\n  i = 2;\n  i = 3;     // the assignment stays where it is\n}\nconsole.log(i);\nThis may seem counter intuitive, but it makes sense from the perspective of a imperative language designer.", "constletYou should be using block scoping for every variable you create, just like most other major languages. var is . This makes your code safer and more maintainable.const should be used for . It makes it so the variable  can't change. Array, object, and DOM node properties can change and should likely be const.let should be be used for any variable expecting to be reassigned. This includes within a for loop. If you ever change value beyond initialization, use let.Block scope means that the variable will only be available within the brackets in which it is declared. This extends to internal scopes, including anonymous functions created within your scope.", "Try this curious example. In the example below if a were a numeric initialized at 0, you'd see 0 and then 1. Except a is an object and javascript will pass f1 a pointer of a rather than a copy of it. The result is that you get the same alert both times.var a = new Date();\nfunction f1(b)\n{\n    b.setDate(b.getDate()+1);\n    alert(b.getDate());\n}\nf1(a);\nalert(a.getDate());\n", "There are only function scopes in JS. Not block scopes!\nYou can see what is hoisting too.var global_variable = \"global_variable\";\nvar hoisting_variable = \"global_hoist\";\n\n// Global variables printed\nconsole.log(\"global_scope: - global_variable: \" + global_variable);\nconsole.log(\"global_scope: - hoisting_variable: \" + hoisting_variable);\n\nif (true) {\n    // The variable block will be global, on true condition.\n    var block = \"block\";\n}\nconsole.log(\"global_scope: - block: \" + block);\n\nfunction local_function() {\n    var local_variable = \"local_variable\";\n    console.log(\"local_scope: - local_variable: \" + local_variable);\n    console.log(\"local_scope: - global_variable: \" + global_variable);\n    console.log(\"local_scope: - block: \" + block);\n    // The hoisting_variable is undefined at the moment.\n    console.log(\"local_scope: - hoisting_variable: \" + hoisting_variable);\n\n    var hoisting_variable = \"local_hoist\";\n    // The hoisting_variable is now set as a local one.\n    console.log(\"local_scope: - hoisting_variable: \" + hoisting_variable);\n}\n\nlocal_function();\n\n// No variable in a separate function is visible into the global scope.\nconsole.log(\"global_scope: - local_variable: \" + local_variable);\n", "My understanding is that there are 3 scopes: global scope, available globally; local scope, available to an entire function regardless of blocks; and block scope, only available to the block, statement, or expression on which it was used. Global and local scope are indicated with the keyword 'var', either within a function or outside, and block scope is indicated with the keyword 'let'.For those that believe there is only global and local scope, please explain why Mozilla would have an entire page describing the nuances of block scope in JS. ", "In JavaScript there are two types of scope:\n\n\nThe Below function has a local scope variable carName. And this variable is not accessible from outside of the function.function myFunction() {\n    var carName = \"Volvo\";\n    alert(carName);\n    // code here can use carName\n}\nThe Below Class has a Global scope variable carName. And this variable is accessible from everywhere in the class.class {\n\n    var carName = \" Volvo\";\n\n    // code here can use carName\n\n    function myFunction() {\n        alert(carName);\n        // code here can use carName \n    }\n}\n", "A very common issue not described yet that front-end coders often run into is the scope that is visible to an inline event handler in the HTML - for example, with<button onclick=\"foo()\"></button>\nThe scope of the variables that an on* attribute can reference  be either:\n\nquerySelectordocument.querySelector\n\nOtherwise, you'll get a ReferenceError when the handler is invoked. So, for example, if the inline handler references a function which is defined  window.onload or $(function() {, the reference will fail, because the inline handler may only reference variables in the global scope, and the function is not global:window.addEventListener('DOMContentLoaded', () => {\r\n  function foo() {\r\n    console.log('foo running');\r\n  }\r\n});<button onclick=\"foo()\">click</button>Properties of the document and properties of the element the handler is attached to may also be referenced as standalone variables inside inline handlers because inline handlers are invoked with, one for the document, one for the element. The scope chain of variables inside these handlers is , and a working event handler will  require a function to be global (and unnecessary global pollution ).Since the scope chain inside inline handlers is , and since inline handlers require global pollution to work, and since inline handlers sometimes require ugly string escaping when passing arguments, it's probably easier to avoid them. Instead, attach event handlers using Javascript (like with addEventListener), rather than with HTML markup.function foo() {\r\n  console.log('foo running');\r\n}\r\ndocument.querySelector('.my-button').addEventListener('click', foo);<button class=\"my-button\">click</button>On a different note, unlike normal <script> tags, which run on the top level, code inside ES6 modules runs in its own private scope. A variable defined at the top of a normal <script> tag is global, so you can reference it in other <script> tags, like this:<script>\r\nconst foo = 'foo';\r\n</script>\r\n<script>\r\nconsole.log(foo);\r\n</script>But the top level of an ES6 module is  global. A variable declared at the top of an ES6 module will only be visible inside that module, unless the variable is explicitly exported, or unless it's assigned to a property of the global object.<script type=\"module\">\r\nconst foo = 'foo';\r\n</script>\r\n<script>\r\n// Can't access foo here, because the other script is a module\r\nconsole.log(typeof foo);\r\n</script>The top level of an ES6 module is similar to that of the inside of an IIFE on the top level in a normal <script>. The module can reference any variables which are global, and nothing can reference anything inside the module unless the module is explicitly designed for it.", "ES5Variables in Javascript were initially (pre ES6) lexically function scoped. The term lexically scoped means that you can see the scope of the variables by 'looking' at the code.Every variable declared with the var keyword is scoped to the function. However, if other function are declared within that function those functions will have access to the variables of the outer functions. This is called a . It works in the following manner:// global scope\nvar foo = 'global';\nvar bar = 'global';\nvar foobar = 'global';\n\nfunction outerFunc () {\n // outerFunc scope\n var foo = 'outerFunc';\n var foobar = 'outerFunc';\n innerFunc();\n \n function innerFunc(){\n // innerFunc scope\n  var foo = 'innerFunc';\n  console.log(foo);\n  console.log(bar);\n  console.log(foobar);\n  }\n}\n\nouterFunc();What happens when we are trying to log the variables foo, bar, and foobar to the console is the following:innerFuncinnerFuncinnerFuncinnerFuncouterFuncouterFuncES6The same concepts of lexically scope and scopechain still apply in ES6. However a new ways to declare variables were introduced. There are the following:\nlet\nconst\nThe biggest difference between var and let/const is that var is function scoped whereas let/const are block scoped. Here is an example to illustrate this:let letVar = 'global';\nvar varVar = 'global';\n\nfunction foo () {\n  \n  if (true) {\n    // this variable declared with let is scoped to the if block, block scoped\n    let letVar = 5;\n    // this variable declared with let is scoped to the function block, function scoped\n    var varVar = 10;\n  }\n  \n  console.log(letVar);\n  console.log(varVar);\n}\n\n\nfoo();In the above example letVar logs the value global because variables declared with let are block scoped. They cease to exist outside their respective block, so the variable can't be accessed outside the if block.", "In EcmaScript5, there are mainly two scopes,  and  but in EcmaScript6 we have mainly three scopes, local scope, global scope and a new scope called . Example of block scope is :-for ( let i = 0; i < 10; i++)\n{\n statement1...\nstatement2...// inside this scope we can access the value of i, if we want to access the value of i outside for loop it will give undefined.\n}\n", "ECMAScript 6 introduced the let and const keywords. These keywords can be used in place of the var keyword. Contrary to the var keyword, the let and const keywords support the declaration of local scope inside block statements.var x = 10\nlet y = 10\nconst z = 10\n{\n  x = 20\n  let y = 20\n  const z = 20\n  {\n    x = 30\n    // x is in the global scope because of the 'var' keyword\n    let y = 30\n    // y is in the local scope because of the 'let' keyword\n    const z = 30\n    // z is in the local scope because of the 'const' keyword\n    console.log(x) // 30\n    console.log(y) // 30\n    console.log(z) // 30\n  }\n  console.log(x) // 30\n  console.log(y) // 20\n  console.log(z) // 20\n}\n\nconsole.log(x) // 30\nconsole.log(y) // 10\nconsole.log(z) // 10\n", "I really like the accepted answer but I want to add this: Scope is a set of rules for looking up variables by their identifier name.\n\n\n\n\n\n\n", "There are two types of scopes in JavaScript. : variable which is announced in global scope can be used anywhere in the program very smoothly. For example: var carName = \" BMW\";\n\n// code here can use carName\n\nfunction myFunction() {\n     // code here can use carName \n}\n: variable declared in this scope can be used in its own function only. For example:// code here can not use carName\nfunction myFunction() {\n   var carName = \"BMW\";\n   // code here can use carName\n}\n"]},
{"question": "Official locator strategies for the webdriver", "details": "In the , it's clearly stated that the location strategies are:State   Keyword\nCSS selector    \"css selector\"\nLink text selector  \"link text\"\nPartial link text selector  \"partial link text\"\nTag name    \"tag name\"\nXPath selector  \"xpath\"\nHowever,  allowed:class name  \ncss selector\nid  \nname\nlink text\npartial link text\ntag name\nxpath\nIn THEORY, Selenium's docs are obsolete and the \"real\" story is in the new spec document. However... I ran some tests on the latest Chrome's own Webdriver, and I can confirm that name and class name both work; however, they are not in the specs.I remember reading on a Chromium issue that they would only ever implement the official Webdriver specs.Now: I  the generic answer, where \"specs are not always followed 100%\" etc. However, what I'd like to know is:\n\n\n\n", "answers": ["In the , it's clearly stated that the location strategies are:State   Keyword\nCSS selector    \"css selector\"\nLink text selector  \"link text\"\nPartial link text selector  \"partial link text\"\nTag name    \"tag name\"\nXPath selector  \"xpath\"\nHowever,  allowed:class name  \ncss selector\nid  \nname\nlink text\npartial link text\ntag name\nxpath\nIn THEORY, Selenium's docs are obsolete and the \"real\" story is in the new spec document. However... I ran some tests on the latest Chrome's own Webdriver, and I can confirm that name and class name both work; however, they are not in the specs.I remember reading on a Chromium issue that they would only ever implement the official Webdriver specs.Now: I  the generic answer, where \"specs are not always followed 100%\" etc. However, what I'd like to know is:\n\n\n\n", "Yes, you saw it right.As per the current WebDriver - W3C Candidate Recommendation the Locator Strategies enlisted are as follows :\n\"css selector\"\n\"link text\"\n\"partial link text\"\n\"tag name\"\n\"xpath\"\nSnapshot :However, the JsonWireProtocol was once used to support the  enlisted below but currently the documentation clearly states it's  as  :\nclass name\ncss selector\nid\nname\nlink text\npartial link text\ntag name\nxpath\nSnapshot :The change was propagated through the respective  specific bindings. For the Selenium-Java clients here is the  where we have the switchcase working for the users :        switch (using) {\r\n          case \"class name\":\r\n            toReturn.put(\"using\", \"css selector\");\r\n            toReturn.put(\"value\", \".\" + cssEscape(value));\r\n            break;\r\n\r\n          case \"id\":\r\n            toReturn.put(\"using\", \"css selector\");\r\n            toReturn.put(\"value\", \"#\" + cssEscape(value));\r\n            break;\r\n\r\n          case \"link text\":\r\n            // Do nothing\r\n            break;\r\n\r\n          case \"name\":\r\n            toReturn.put(\"using\", \"css selector\");\r\n            toReturn.put(\"value\", \"*[name='\" + value + \"']\");\r\n            break;\r\n\r\n          case \"partial link text\":\r\n            // Do nothing\r\n            break;\r\n\r\n          case \"tag name\":\r\n            toReturn.put(\"using\", \"css selector\");\r\n            toReturn.put(\"value\", cssEscape(value));\r\n            break;\r\n\r\n          case \"xpath\":\r\n            // Do nothing\r\n            break;\r\n        }\r\n        return toReturn;Snapshot :Now, your question must be why this change in the W3C Specs and in the clients. As per  the Answer from the  was pretty straight as : This keeps the specification simple as these can be implemented using the CSS selector, which maps down to querySelector/querySelectorAll."]},
{"question": "Is storing a delimited list in a database column really that bad?", "details": "Imagine a web form with a set of check boxes (any or all of them can be selected). I chose to save them in a comma separated list of values stored in one column of the database table.Now, I know that the correct solution would be to create a second table and properly normalize the database. It was quicker to implement the easy solution, and I wanted to have a proof-of-concept of that application quickly and without having to spend too much time on it.I thought the saved time and simpler code was worth it in my situation, is this a defensible design choice, or should I have normalized it from the start?Some more context, this is a small internal application that essentially replaces an Excel file that was stored on a shared folder. I'm also asking because I'm thinking about cleaning up the program and make it more maintainable. There are some things in there I'm not entirely happy with, one of them is the topic of this question.", "answers": ["Imagine a web form with a set of check boxes (any or all of them can be selected). I chose to save them in a comma separated list of values stored in one column of the database table.Now, I know that the correct solution would be to create a second table and properly normalize the database. It was quicker to implement the easy solution, and I wanted to have a proof-of-concept of that application quickly and without having to spend too much time on it.I thought the saved time and simpler code was worth it in my situation, is this a defensible design choice, or should I have normalized it from the start?Some more context, this is a small internal application that essentially replaces an Excel file that was stored on a shared folder. I'm also asking because I'm thinking about cleaning up the program and make it more maintainable. There are some things in there I'm not entirely happy with, one of them is the topic of this question.", "In addition to violating  because of the repeating group of values stored in a single column, comma-separated lists have a lot of other more practical problems:\n\n\n\n\n\nidlist REGEXP '[[:<:]]2[[:>:]]'\n\n\n\nTo solve these problems, you have to write tons of application code, reinventing functionality that the RDBMS .Comma-separated lists are wrong enough that I made this the first chapter in my book: .There are times when you need to employ denormalization, but as , these are exception cases.  Any non-relational \u201coptimization\u201d benefits one type of query at the expense of other uses of the data, so be sure you know which of your queries need to be treated so specially that they deserve denormalization. MySQL 8.0 no longer supports this word-boundary expression syntax.", "\"One reason was laziness\".This rings alarm bells. The only reason you should do something like this is that you know how to do it \"the right way\" but you have come to the conclusion that there is a tangible reason not to do it that way.Having said this: if the data you are choosing to store this way is data that you will never need to query by, then there may be a case for storing it in the way you have chosen.(Some users would dispute the statement in my previous paragraph, saying that \"you can never know what requirements will be added in the future\". These users are either misguided or stating a religious conviction. Sometimes it is advantageous to work to the requirements you have before you.)", "There are numerous questions on SO asking:\n\n\nAnother problem with the comma separated list is ensuring the values are consistent - storing text means the possibility of typos...These are all symptoms of denormalized data, and highlight why you should always model for normalized data.  Denormalization  be a query optimization, .", "In general anything can be defensible if it meets the requirements of your project.  This doesn't mean that people will agree with or want to defend your decision...In general, storing data in this way is suboptimal (e.g. harder to do efficient queries) and may cause maintenance issues if you modify the items in your form.  Perhaps you could have found a middle ground and used an integer representing a set of bit flags instead?", "Yes, I would say that it really is that bad.  It's a defensible choice, but that doesn't make it correct or good.It breaks first normal form.A second criticism is that putting raw input results directly into a database, without any validation or binding at all, leaves you open to SQL injection attacks.What you're calling laziness and lack of SQL knowledge is the stuff that neophytes are made of.  I'd recommend taking the time to do it properly and view it as an opportunity to learn.Or leave it as it is and learn the painful lesson of a SQL injection attack.", "Well I've been using a key/value pair tab separated list in a NTEXT column in SQL Server for more than 4 years now and it works. You do lose the flexibility of making queries but on the other hand, if you have a library that persists/derpersists the key value pair then it's not a that bad idea.", "I needed a multi-value column, it could be implemented as an xml fieldIt could be converted to a comma delimited as necessary.By being an xml field, some of the concerns can be addressed. Can't ensure that each value is the right data type: no way to prevent 1,2,3,banana,5 values in a tag can be forced to be the correct type Can't use foreign key constraints to link values to a lookup table; no way to enforce referential integrity. still an issue Can't enforce uniqueness: no way to prevent 1,2,3,3,3,5 still an issue Can't delete a value from the list without fetching the whole list. single items can be removed Hard to search for all entities with a given value in the list; you have to use an inefficient table-scan. xml field can be indexed Hard to count elements in the list, or do other aggregate queries.** not particularly hard  Hard to join the values to the lookup table they reference.** not particularly hard  Hard to fetch the list in sorted order. not particularly hard  Storing integers as strings takes about twice as much space as storing binary integers. storage is even worse than a csv  Plus a lot of comma characters. tags are used instead of commasIn short, using XML gets around some of the issues with delimited list AND can be converted to a delimited list as needed", "Yes, it  that bad.  My view is that if you don't like using relational databases then look for an alternative that suits you better, there are lots of interesting \"NOSQL\" projects out there with some really advanced features.", "I would probably take the middle ground: make each field in the CSV into a separate column in the database, but not worry much about normalization (at least for now). At some point, normalization  become interesting, but with all the data shoved into a single column you're gaining virtually no benefit from using a database at all. You need to separate the data into logical fields/columns/whatever you want to call them before you can manipulate it meaningfully at all.", "If you have a fixed number of boolean fields, you could use a INT(1) NOT NULL (or BIT NOT NULL if it exists) or CHAR (0) (nullable) for each. You could also use a SET (I forget the exact syntax)."]},
{"question": "What do querySelectorAll and getElementsBy* methods return?", "details": "Do getElementsByClassName (and similar functions like getElementsByTagName and querySelectorAll) work the same as getElementById or do they return an array of elements?The reason I ask is because I am trying to change the style of all elements using getElementsByClassName. See below.//doesn't work\ndocument.getElementsByClassName('myElement').style.size = '100px';\n\n//works\ndocument.getElementById('myIdElement').style.size = '100px';\n", "answers": ["Do getElementsByClassName (and similar functions like getElementsByTagName and querySelectorAll) work the same as getElementById or do they return an array of elements?The reason I ask is because I am trying to change the style of all elements using getElementsByClassName. See below.//doesn't work\ndocument.getElementsByClassName('myElement').style.size = '100px';\n\n//works\ndocument.getElementById('myIdElement').style.size = '100px';\n", "Your getElementById() code works since IDs have to be unique and thus the function always returns exactly one element (or null if none was found).However, getElementsByClassName(), querySelectorAll(), and other getElementsBy* methods return an array-like collection of elements. Iterate over it like you would with a real array:var elems = document.getElementsByClassName('myElement');\nfor(var i = 0; i < elems.length; i++) {\n    elems[i].style.size = '100px';\n}\nIf you prefer something shorter, consider using :$('.myElement').css('size', '100px');\n", "You are using a array as an object, the difference between getElementbyId and \ngetElementsByClassName is that: \ngetElementbyId\ngetElementsByClassName\nThe getElementsByClassName(classNames) method takes a string that\n  contains an unordered set of unique space-separated tokens\n  representing classes. When called, the method must return a live\n  NodeList object containing all the elements in the document that\n  have all the classes specified in that argument, having obtained the\n  classes by splitting a string on spaces. If there are no tokens\n  specified in the argument, then the method must return an empty\n  NodeList.The getElementById() method accesses the first element with the specified id.in your code the lines:1- document.getElementsByClassName('myElement').style.size = '100px';will  work as expected, because the getElementByClassName will return an array, and the array will  have the style property, you can access each element by iterating through them.That's why the function getElementById worked for you, this function will return the direct object. Therefore you will be able to access the style property.", "The following description is taken from :The getElementsByClassName() method returns a collection of all elements in the document with the specified class name, as a NodeList object.The NodeList object represents a collection of nodes. The nodes can be\naccessed by index numbers. The index starts at 0.Tip: You can use the  length property of the NodeList object to determine the number of elements with a specified class name, then you can loop through all elements and extract the info you want.So, as a parameter getElementsByClassName would accept a class name.If this is your HTML body:<div id=\"first\" class=\"menuItem\"></div>\n<div id=\"second\" class=\"menuItem\"></div>\n<div id=\"third\" class=\"menuItem\"></div>\n<div id=\"footer\"></div>\nthen var menuItems = document.getElementsByClassName('menuItem') would return a collection (not an array) of the 3 upper <div>s, as they match the given class name.You can then iterate over this nodes (<div>s in this case) collection with:for (var menuItemIndex = 0 ; menuItems.length ; menuItemIndex ++) {\n   var currentMenuItem = menuItems[menuItemIndex];\n   // do stuff with currentMenuItem as a node.\n}\nPlease refer to  for more on differences between elements and nodes.", " provides Array.from() method, which creates a new Array instance from an array-like or iterable object.let boxes = document.getElementsByClassName('box');\r\n\r\nArray.from(boxes).forEach(v => v.style.background = 'green');\r\nconsole.log(Array.from(boxes));.box {\r\n  width: 50px;\r\n  height: 50px;\r\n  margin: 5px;\r\n  background: blue;\r\n  display: inline-block;\r\n}<div class='box'></div>\r\n<div class='box'></div>\r\n<div class='box'></div>\r\n<div class='box'></div>As you can see inside the code snippet, after using Array.from() function you are then able to manipulate over each element.\nThe same solution using jQuery.$('.box').css({'background':'green'});.box {\r\n  width: 50px;\r\n  height: 50px;\r\n  margin: 5px;\r\n  background: blue;\r\n  display: inline-block;\r\n}<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\r\n<div class='box'></div>\r\n<div class='box'></div>\r\n<div class='box'></div>\r\n<div class='box'></div>", "\ndocument.querySelector() selects only the first  element of the specified selector. So it doesn't spit out an array, it's a single value. Similar to document.getElementById() which fetches ID-elements only, since IDs have to be unique.\ndocument.querySelectorAll() selects  elements with the specified selector and returns them in an array. Similar to document.getElementsByClassName() for classes and document.getElementsByTagName() tags only.\nIt's used merely for the sole purpose of ease and brevity.Faster performance.Both ways of selection has the purpose of creating a  for further use. \n generates a static NodeList with the selectors thus it must be first created from scratch.\n immediately adapts the existing live NodeList of the current DOM.So, when to use which method it's up to you/your project/your device.\n\n", "It returns Array-like list.var el = getElementsByClassName(\"elem\");\nel = Array.prototype.slice.call(el); //this line\nel[0].appendChild(otherElem);  \n", "You could get a single element by running document.querySelector('.myElement').style.size = '100px';\nbut it's going to work for the first element with class .myElement.If you would like apply this for all elements with the class I suggest you to use document.querySelectorAll('.myElement').forEach(function(element) {\n    element.style.size = '100px';\n});\n", "/*\n * To hide all elements with the same class, \n * use looping to reach each element with that class. \n * In this case, looping is done recursively\n */\n\nconst hideAll = (className, i=0) => {\nif(!document.getElementsByClassName(className)[i]){ //exits the loop when element of that id does not exist\n  return; \n}\n\ndocument.getElementsByClassName(className)[i].style.visibility = 'hidden'; //hide element\nreturn hideAll(className, i+1) //loop for the next element\n}\n\nhideAll('appBanner') //the function call requires the class name\n", "With ES5+ (any browsed nowadays - 2017) you should be able to do [].forEach.call(document.getElementsByClassName('answer'), function(el) {\r\n    el.style.color= 'red';\r\n});", "An answer ...You could make word and pass in the number of the one you want to transform, like:// Binds `wordButtons` to an (array-like) HTMLCollection of buttons\nconst wordButtons = document.getElementsByClassName(\"word\");\n\n// Applies the `slantWord` function to the first word button\nslantWord(1);\n\n// Defines the `slantWord` function\nfunction slantWord(wordNumber) {\n  const index = wordNumber - 1; // Collection index is zero-based\n  wordButtons[index].style.transform = \"rotate(7deg)\"; // Transforms the specified button\n}<div class=\"wordGameContainer\">\n  <button class=\"word word1\">WORD 1</button>\n  <button class=\"word word2\">WORD 2</button>\n  <button class=\"word word3\">WORD 3</button>\n  <button class=\"word word4\">WORD 4</button>\n</div>\n\n<div>\n  <button onclick=\"moveWord()\" class=\"playButton\">PLAY</button>\n</div>"]},
{"question": "How to pivot a dataframe?", "details": "\n\n\n\n\nI've seen a lot of questions that ask about pivot tables.  Even if they don't know that they are asking about pivot tables, they usually are.  It is virtually impossible to write a canonical question and answer that encompasses all aspects of pivoting...... But I'm going to give it a go.The problem with existing questions and answers is that often the question is focused on a nuance that the OP has trouble generalizing in order to use a number of the existing good answers.  However, none of the answers attempt to give a comprehensive explanation (because it's a daunting task)Look a few examples from my \n\n\n\n\n\nSo whenever someone searches for pivot they get sporadic results that are likely not going to answer their specific question.You may notice that I conspicuously named my columns and relevant column values to correspond with how I'm going to pivot in the answers below.import numpy as np\nimport pandas as pd\nfrom numpy.core.defchararray import add\n\nnp.random.seed([3,1415])\nn = 20\n\ncols = np.array(['key', 'row', 'item', 'col'])\narr1 = (np.random.randint(5, size=(n, 4)) // [2, 1, 2, 1]).astype(str)\n\ndf = pd.DataFrame(\n    add(cols, arr1), columns=cols\n).join(\n    pd.DataFrame(np.random.rand(n, 2).round(2)).add_prefix('val')\n)\nprint(df)\n\n     key   row   item   col  val0  val1\n0   key0  row3  item1  col3  0.81  0.04\n1   key1  row2  item1  col2  0.44  0.07\n2   key1  row0  item1  col0  0.77  0.01\n3   key0  row4  item0  col2  0.15  0.59\n4   key1  row0  item2  col1  0.81  0.64\n5   key1  row2  item2  col4  0.13  0.88\n6   key2  row4  item1  col3  0.88  0.39\n7   key1  row4  item1  col1  0.10  0.07\n8   key1  row0  item2  col4  0.65  0.02\n9   key1  row2  item0  col2  0.35  0.61\n10  key2  row0  item2  col1  0.40  0.85\n11  key2  row4  item1  col2  0.64  0.25\n12  key0  row2  item2  col3  0.50  0.44\n13  key0  row4  item1  col4  0.24  0.46\n14  key1  row3  item2  col3  0.28  0.11\n15  key0  row3  item1  col1  0.31  0.23\n16  key0  row0  item2  col3  0.86  0.01\n17  key0  row4  item0  col3  0.64  0.21\n18  key2  row2  item2  col0  0.13  0.45\n19  key0  row2  item0  col4  0.37  0.70\nWhy do I get ValueError: Index contains duplicate entries, cannot reshapeHow do I pivot df such that the col values are columns, row values are the index, and mean of val0 are the values? col   col0   col1   col2   col3  col4\n row                                  \n row0  0.77  0.605    NaN  0.860  0.65\n row2  0.13    NaN  0.395  0.500  0.25\n row3   NaN  0.310    NaN  0.545   NaN\n row4   NaN  0.100  0.395  0.760  0.24\nHow do I pivot df such that the col values are columns, row values are the index, mean of val0 are the values, and missing values are 0? col   col0   col1   col2   col3  col4\n row                                  \n row0  0.77  0.605  0.000  0.860  0.65\n row2  0.13  0.000  0.395  0.500  0.25\n row3  0.00  0.310  0.000  0.545  0.00\n row4  0.00  0.100  0.395  0.760  0.24\nCan I get something other than mean, like maybe sum? col   col0  col1  col2  col3  col4\n row                               \n row0  0.77  1.21  0.00  0.86  0.65\n row2  0.13  0.00  0.79  0.50  0.50\n row3  0.00  0.31  0.00  1.09  0.00\n row4  0.00  0.10  0.79  1.52  0.24\nCan I do more that one aggregation at a time?        sum                          mean                           \n col   col0  col1  col2  col3  col4  col0   col1   col2   col3  col4\n row                                                                \n row0  0.77  1.21  0.00  0.86  0.65  0.77  0.605  0.000  0.860  0.65\n row2  0.13  0.00  0.79  0.50  0.50  0.13  0.000  0.395  0.500  0.25\n row3  0.00  0.31  0.00  1.09  0.00  0.00  0.310  0.000  0.545  0.00\n row4  0.00  0.10  0.79  1.52  0.24  0.00  0.100  0.395  0.760  0.24\nCan I aggregate over multiple value columns?       val0                             val1                          \n col   col0   col1   col2   col3  col4  col0   col1  col2   col3  col4\n row                                                                  \n row0  0.77  0.605  0.000  0.860  0.65  0.01  0.745  0.00  0.010  0.02\n row2  0.13  0.000  0.395  0.500  0.25  0.45  0.000  0.34  0.440  0.79\n row3  0.00  0.310  0.000  0.545  0.00  0.00  0.230  0.00  0.075  0.00\n row4  0.00  0.100  0.395  0.760  0.24  0.00  0.070  0.42  0.300  0.46\nCan Subdivide by multiple columns? item item0             item1                         item2                   \n col   col2  col3  col4  col0  col1  col2  col3  col4  col0   col1  col3  col4\n row                                                                          \n row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.605  0.86  0.65\n row2  0.35  0.00  0.37  0.00  0.00  0.44  0.00  0.00  0.13  0.000  0.50  0.13\n row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.000  0.28  0.00\n row4  0.15  0.64  0.00  0.00  0.10  0.64  0.88  0.24  0.00  0.000  0.00  0.00\nOr item      item0             item1                         item2                  \n col        col2  col3  col4  col0  col1  col2  col3  col4  col0  col1  col3  col4\n key  row                                                                         \n key0 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.86  0.00\n      row2  0.00  0.00  0.37  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.50  0.00\n      row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.00  0.00  0.00\n      row4  0.15  0.64  0.00  0.00  0.00  0.00  0.00  0.24  0.00  0.00  0.00  0.00\n key1 row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.81  0.00  0.65\n      row2  0.35  0.00  0.00  0.00  0.00  0.44  0.00  0.00  0.00  0.00  0.00  0.13\n      row3  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.28  0.00\n      row4  0.00  0.00  0.00  0.00  0.10  0.00  0.00  0.00  0.00  0.00  0.00  0.00\n key2 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.40  0.00  0.00\n      row2  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.13  0.00  0.00  0.00\n      row4  0.00  0.00  0.00  0.00  0.00  0.64  0.88  0.00  0.00  0.00  0.00  0.00\nCan I aggregate the frequency in which the column and rows occur together, aka \"cross tabulation\"? col   col0  col1  col2  col3  col4\n row                               \n row0     1     2     0     1     1\n row2     1     0     2     1     2\n row3     0     1     0     2     0\n row4     0     1     2     2     1\nHow do I convert a DataFrame from long to wide by pivoting on ONLY two columns? Given,np.random.seed([3, 1415])\ndf2 = pd.DataFrame({'A': list('aaaabbbc'), 'B': np.random.choice(15, 8)})        \ndf2        \n   A   B\n0  a   0\n1  a  11\n2  a   2\n3  a  11\n4  b  10\n5  b  10\n6  b  14\n7  c   7\nThe expected should look something like      a     b    c\n0   0.0  10.0  7.0\n1  11.0  10.0  NaN\n2   2.0  14.0  NaN\n3  11.0   NaN  NaN\nHow do I flatten the multiple index to single index after pivotFrom   1  2   \n   1  1  2        \na  2  1  1\nb  2  1  0\nc  1  0  0\nTo   1|1  2|1  2|2               \na    2    1    1\nb    2    1    0\nc    1    0    0\n", "answers": ["\n\n\n\n\nI've seen a lot of questions that ask about pivot tables.  Even if they don't know that they are asking about pivot tables, they usually are.  It is virtually impossible to write a canonical question and answer that encompasses all aspects of pivoting...... But I'm going to give it a go.The problem with existing questions and answers is that often the question is focused on a nuance that the OP has trouble generalizing in order to use a number of the existing good answers.  However, none of the answers attempt to give a comprehensive explanation (because it's a daunting task)Look a few examples from my \n\n\n\n\npd.DataFrame.pivot\nSo whenever someone searches for pivot they get sporadic results that are likely not going to answer their specific question.You may notice that I conspicuously named my columns and relevant column values to correspond with how I'm going to pivot in the answers below.import numpy as np\nimport pandas as pd\nfrom numpy.core.defchararray import add\n\nnp.random.seed([3,1415])\nn = 20\n\ncols = np.array(['key', 'row', 'item', 'col'])\narr1 = (np.random.randint(5, size=(n, 4)) // [2, 1, 2, 1]).astype(str)\n\ndf = pd.DataFrame(\n    add(cols, arr1), columns=cols\n).join(\n    pd.DataFrame(np.random.rand(n, 2).round(2)).add_prefix('val')\n)\nprint(df)\n\n     key   row   item   col  val0  val1\n0   key0  row3  item1  col3  0.81  0.04\n1   key1  row2  item1  col2  0.44  0.07\n2   key1  row0  item1  col0  0.77  0.01\n3   key0  row4  item0  col2  0.15  0.59\n4   key1  row0  item2  col1  0.81  0.64\n5   key1  row2  item2  col4  0.13  0.88\n6   key2  row4  item1  col3  0.88  0.39\n7   key1  row4  item1  col1  0.10  0.07\n8   key1  row0  item2  col4  0.65  0.02\n9   key1  row2  item0  col2  0.35  0.61\n10  key2  row0  item2  col1  0.40  0.85\n11  key2  row4  item1  col2  0.64  0.25\n12  key0  row2  item2  col3  0.50  0.44\n13  key0  row4  item1  col4  0.24  0.46\n14  key1  row3  item2  col3  0.28  0.11\n15  key0  row3  item1  col1  0.31  0.23\n16  key0  row0  item2  col3  0.86  0.01\n17  key0  row4  item0  col3  0.64  0.21\n18  key2  row2  item2  col0  0.13  0.45\n19  key0  row2  item0  col4  0.37  0.70\nWhy do I get ValueError: Index contains duplicate entries, cannot reshapeHow do I pivot df such that the col values are columns, row values are the index, and mean of val0 are the values? col   col0   col1   col2   col3  col4\n row                                  \n row0  0.77  0.605    NaN  0.860  0.65\n row2  0.13    NaN  0.395  0.500  0.25\n row3   NaN  0.310    NaN  0.545   NaN\n row4   NaN  0.100  0.395  0.760  0.24\nHow do I pivot df such that the col values are columns, row values are the index, mean of val0 are the values, and missing values are 0? col   col0   col1   col2   col3  col4\n row                                  \n row0  0.77  0.605  0.000  0.860  0.65\n row2  0.13  0.000  0.395  0.500  0.25\n row3  0.00  0.310  0.000  0.545  0.00\n row4  0.00  0.100  0.395  0.760  0.24\nCan I get something other than mean, like maybe sum? col   col0  col1  col2  col3  col4\n row                               \n row0  0.77  1.21  0.00  0.86  0.65\n row2  0.13  0.00  0.79  0.50  0.50\n row3  0.00  0.31  0.00  1.09  0.00\n row4  0.00  0.10  0.79  1.52  0.24\nCan I do more that one aggregation at a time?        sum                          mean                           \n col   col0  col1  col2  col3  col4  col0   col1   col2   col3  col4\n row                                                                \n row0  0.77  1.21  0.00  0.86  0.65  0.77  0.605  0.000  0.860  0.65\n row2  0.13  0.00  0.79  0.50  0.50  0.13  0.000  0.395  0.500  0.25\n row3  0.00  0.31  0.00  1.09  0.00  0.00  0.310  0.000  0.545  0.00\n row4  0.00  0.10  0.79  1.52  0.24  0.00  0.100  0.395  0.760  0.24\nCan I aggregate over multiple value columns?       val0                             val1                          \n col   col0   col1   col2   col3  col4  col0   col1  col2   col3  col4\n row                                                                  \n row0  0.77  0.605  0.000  0.860  0.65  0.01  0.745  0.00  0.010  0.02\n row2  0.13  0.000  0.395  0.500  0.25  0.45  0.000  0.34  0.440  0.79\n row3  0.00  0.310  0.000  0.545  0.00  0.00  0.230  0.00  0.075  0.00\n row4  0.00  0.100  0.395  0.760  0.24  0.00  0.070  0.42  0.300  0.46\nCan Subdivide by multiple columns? item item0             item1                         item2                   \n col   col2  col3  col4  col0  col1  col2  col3  col4  col0   col1  col3  col4\n row                                                                          \n row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.605  0.86  0.65\n row2  0.35  0.00  0.37  0.00  0.00  0.44  0.00  0.00  0.13  0.000  0.50  0.13\n row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.000  0.28  0.00\n row4  0.15  0.64  0.00  0.00  0.10  0.64  0.88  0.24  0.00  0.000  0.00  0.00\nOr item      item0             item1                         item2                  \n col        col2  col3  col4  col0  col1  col2  col3  col4  col0  col1  col3  col4\n key  row                                                                         \n key0 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.86  0.00\n      row2  0.00  0.00  0.37  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.50  0.00\n      row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.00  0.00  0.00\n      row4  0.15  0.64  0.00  0.00  0.00  0.00  0.00  0.24  0.00  0.00  0.00  0.00\n key1 row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.81  0.00  0.65\n      row2  0.35  0.00  0.00  0.00  0.00  0.44  0.00  0.00  0.00  0.00  0.00  0.13\n      row3  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.28  0.00\n      row4  0.00  0.00  0.00  0.00  0.10  0.00  0.00  0.00  0.00  0.00  0.00  0.00\n key2 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.40  0.00  0.00\n      row2  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.13  0.00  0.00  0.00\n      row4  0.00  0.00  0.00  0.00  0.00  0.64  0.88  0.00  0.00  0.00  0.00  0.00\nCan I aggregate the frequency in which the column and rows occur together, aka \"cross tabulation\"? col   col0  col1  col2  col3  col4\n row                               \n row0     1     2     0     1     1\n row2     1     0     2     1     2\n row3     0     1     0     2     0\n row4     0     1     2     2     1\nHow do I convert a DataFrame from long to wide by pivoting on ONLY two columns? Given,np.random.seed([3, 1415])\ndf2 = pd.DataFrame({'A': list('aaaabbbc'), 'B': np.random.choice(15, 8)})        \ndf2        \n   A   B\n0  a   0\n1  a  11\n2  a   2\n3  a  11\n4  b  10\n5  b  10\n6  b  14\n7  c   7\nThe expected should look something like      a     b    c\n0   0.0  10.0  7.0\n1  11.0  10.0  NaN\n2   2.0  14.0  NaN\n3  11.0   NaN  NaN\nHow do I flatten the multiple index to single index after pivotFrom   1  2   \n   1  1  2        \na  2  1  1\nb  2  1  0\nc  1  0  0\nTo   1|1  2|1  2|2               \na    2    1    1\nb    2    1    0\nc    1    0    0\n", "We start by answering the first question:Why do I get ValueError: Index contains duplicate entries, cannot reshapeThis occurs because pandas is attempting to reindex either a columns or index object with duplicate entries.  There are varying methods to use that can perform a pivot.  Some of them are not well suited to when there are duplicates of the keys in which it is being asked to pivot on.  For example.  Consider pd.DataFrame.pivot.  I know there are duplicate entries that share the row and col values:df.duplicated(['row', 'col']).any()\n\nTrue\nSo when I pivot usingdf.pivot(index='row', columns='col', values='val0')\nI get the error mentioned above.  In fact, I get the same error when I try to perform the same task with:df.set_index(['row', 'col'])['val0'].unstack()\nHere is a list of idioms we can use to pivotpd.DataFrame.groupbypd.DataFrame.unstack\n\nunstack\npd.DataFrame.pivot_table\ngroupby\n\npd.DataFrame.set_indexpd.DataFrame.unstack\n\ngroupbyunstack\npd.DataFrame.pivot\nset_indexindexcolumnsvalues\npivot_table\npd.crosstab\npivot_table\npd.factorizenp.bincount\n\npd.get_dummiespd.DataFrame.dot\n\nWhat I'm going to do for each subsequent answer and question is to answer it using pd.DataFrame.pivot_table.  Then I'll provide alternatives to perform the same task.  How do I pivot df such that the col values are columns, row values are the index, mean of val0 are the values, and missing values are 0?\npd.DataFrame.pivot_table\nfill_value0fill_value\naggfunc='mean' is the default and I didn't have to set it.  I included it to be explicit.df.pivot_table(\n    values='val0', index='row', columns='col',\n    fill_value=0, aggfunc='mean')\n\ncol   col0   col1   col2   col3  col4\nrow                                  \nrow0  0.77  0.605  0.000  0.860  0.65\nrow2  0.13  0.000  0.395  0.500  0.25\nrow3  0.00  0.310  0.000  0.545  0.00\nrow4  0.00  0.100  0.395  0.760  0.24\n\n\npd.DataFrame.groupbydf.groupby(['row', 'col'])['val0'].mean().unstack(fill_value=0)\n\npd.crosstabpd.crosstab(\n    index=df['row'], columns=df['col'],\n    values=df['val0'], aggfunc='mean').fillna(0)\n\nCan I get something other than mean, like maybe sum?\npd.DataFrame.pivot_tabledf.pivot_table(\n    values='val0', index='row', columns='col',\n    fill_value=0, aggfunc='sum')\n\ncol   col0  col1  col2  col3  col4\nrow                               \nrow0  0.77  1.21  0.00  0.86  0.65\nrow2  0.13  0.00  0.79  0.50  0.50\nrow3  0.00  0.31  0.00  1.09  0.00\nrow4  0.00  0.10  0.79  1.52  0.24\n\npd.DataFrame.groupbydf.groupby(['row', 'col'])['val0'].sum().unstack(fill_value=0)\n\npd.crosstabpd.crosstab(\n    index=df['row'], columns=df['col'],\n    values=df['val0'], aggfunc='sum').fillna(0)\n\nCan I do more that one aggregation at a time?Notice that for pivot_table and crosstab I needed to pass list of callables.  On the other hand, groupby.agg is able to take strings for a limited number of special functions.  groupby.agg would also have taken the same callables we passed to the others, but it is often more efficient to leverage the string function names as there are efficiencies to be gained.\npd.DataFrame.pivot_tabledf.pivot_table(\n    values='val0', index='row', columns='col',\n    fill_value=0, aggfunc=[np.size, np.mean])\n\n     size                      mean                           \ncol  col0 col1 col2 col3 col4  col0   col1   col2   col3  col4\nrow                                                           \nrow0    1    2    0    1    1  0.77  0.605  0.000  0.860  0.65\nrow2    1    0    2    1    2  0.13  0.000  0.395  0.500  0.25\nrow3    0    1    0    2    0  0.00  0.310  0.000  0.545  0.00\nrow4    0    1    2    2    1  0.00  0.100  0.395  0.760  0.24\n\npd.DataFrame.groupbydf.groupby(['row', 'col'])['val0'].agg(['size', 'mean']).unstack(fill_value=0)\n\npd.crosstabpd.crosstab(\n    index=df['row'], columns=df['col'],\n    values=df['val0'], aggfunc=[np.size, np.mean]).fillna(0, downcast='infer')\n\nCan I aggregate over multiple value columns?\npd.DataFrame.pivot_table we pass values=['val0', 'val1'] but we could've left that off completelydf.pivot_table(\n    values=['val0', 'val1'], index='row', columns='col',\n    fill_value=0, aggfunc='mean')\n\n      val0                             val1                          \ncol   col0   col1   col2   col3  col4  col0   col1  col2   col3  col4\nrow                                                                  \nrow0  0.77  0.605  0.000  0.860  0.65  0.01  0.745  0.00  0.010  0.02\nrow2  0.13  0.000  0.395  0.500  0.25  0.45  0.000  0.34  0.440  0.79\nrow3  0.00  0.310  0.000  0.545  0.00  0.00  0.230  0.00  0.075  0.00\nrow4  0.00  0.100  0.395  0.760  0.24  0.00  0.070  0.42  0.300  0.46\n\npd.DataFrame.groupbydf.groupby(['row', 'col'])['val0', 'val1'].mean().unstack(fill_value=0)\n\nCan Subdivide by multiple columns?\npd.DataFrame.pivot_tabledf.pivot_table(\n    values='val0', index='row', columns=['item', 'col'],\n    fill_value=0, aggfunc='mean')\n\nitem item0             item1                         item2                   \ncol   col2  col3  col4  col0  col1  col2  col3  col4  col0   col1  col3  col4\nrow                                                                          \nrow0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.605  0.86  0.65\nrow2  0.35  0.00  0.37  0.00  0.00  0.44  0.00  0.00  0.13  0.000  0.50  0.13\nrow3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.000  0.28  0.00\nrow4  0.15  0.64  0.00  0.00  0.10  0.64  0.88  0.24  0.00  0.000  0.00  0.00\n\npd.DataFrame.groupbydf.groupby(\n    ['row', 'item', 'col']\n)['val0'].mean().unstack(['item', 'col']).fillna(0).sort_index(1)\n\nCan Subdivide by multiple columns?\npd.DataFrame.pivot_tabledf.pivot_table(\n    values='val0', index=['key', 'row'], columns=['item', 'col'],\n    fill_value=0, aggfunc='mean')\n\nitem      item0             item1                         item2                  \ncol        col2  col3  col4  col0  col1  col2  col3  col4  col0  col1  col3  col4\nkey  row                                                                         \nkey0 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.86  0.00\n     row2  0.00  0.00  0.37  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.50  0.00\n     row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.00  0.00  0.00\n     row4  0.15  0.64  0.00  0.00  0.00  0.00  0.00  0.24  0.00  0.00  0.00  0.00\nkey1 row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.81  0.00  0.65\n     row2  0.35  0.00  0.00  0.00  0.00  0.44  0.00  0.00  0.00  0.00  0.00  0.13\n     row3  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.28  0.00\n     row4  0.00  0.00  0.00  0.00  0.10  0.00  0.00  0.00  0.00  0.00  0.00  0.00\nkey2 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.40  0.00  0.00\n     row2  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.13  0.00  0.00  0.00\n     row4  0.00  0.00  0.00  0.00  0.00  0.64  0.88  0.00  0.00  0.00  0.00  0.00\n\npd.DataFrame.groupbydf.groupby(\n    ['key', 'row', 'item', 'col']\n)['val0'].mean().unstack(['item', 'col']).fillna(0).sort_index(1)\n\npd.DataFrame.set_index because the set of keys are unique for both rows and columnsdf.set_index(\n    ['key', 'row', 'item', 'col']\n)['val0'].unstack(['item', 'col']).fillna(0).sort_index(1)\n\nCan I aggregate the frequency in which the column and rows occur together, aka \"cross tabulation\"?\npd.DataFrame.pivot_tabledf.pivot_table(index='row', columns='col', fill_value=0, aggfunc='size')\n\n    col   col0  col1  col2  col3  col4\nrow                               \nrow0     1     2     0     1     1\nrow2     1     0     2     1     2\nrow3     0     1     0     2     0\nrow4     0     1     2     2     1\n\npd.DataFrame.groupbydf.groupby(['row', 'col'])['val0'].size().unstack(fill_value=0)\n\npd.crosstabpd.crosstab(df['row'], df['col'])\n\npd.factorize + np.bincount# get integer factorization `i` and unique values `r`\n# for column `'row'`\ni, r = pd.factorize(df['row'].values)\n# get integer factorization `j` and unique values `c`\n# for column `'col'`\nj, c = pd.factorize(df['col'].values)\n# `n` will be the number of rows\n# `m` will be the number of columns\nn, m = r.size, c.size\n# `i * m + j` is a clever way of counting the \n# factorization bins assuming a flat array of length\n# `n * m`.  Which is why we subsequently reshape as `(n, m)`\nb = np.bincount(i * m + j, minlength=n * m).reshape(n, m)\n# BTW, whenever I read this, I think 'Bean, Rice, and Cheese'\npd.DataFrame(b, r, c)\n\n      col3  col2  col0  col1  col4\nrow3     2     0     0     1     0\nrow2     1     2     1     0     2\nrow0     1     0     1     2     1\nrow4     2     2     0     1     1\n\npd.get_dummiespd.get_dummies(df['row']).T.dot(pd.get_dummies(df['col']))\n\n      col0  col1  col2  col3  col4\nrow0     1     2     0     1     1\nrow2     1     0     2     1     2\nrow3     0     1     0     2     0\nrow4     0     1     2     2     1\n\nHow do I convert a DataFrame from long to wide by pivoting on ONLY two\n  columns?The first step is to assign a number to each row - this number will be the row index of that value in the pivoted result. This is done using GroupBy.cumcount:df2.insert(0, 'count', df.groupby('A').cumcount())\ndf2\n\n   count  A   B\n0      0  a   0\n1      1  a  11\n2      2  a   2\n3      3  a  11\n4      0  b  10\n5      1  b  10\n6      2  b  14\n7      0  c   7\nThe second step is to use the newly created column as the index to call DataFrame.pivot. df2.pivot(*df)\n# df.pivot(index='count', columns='A', values='B')\n\nA         a     b    c\ncount                 \n0       0.0  10.0  7.0\n1      11.0  10.0  NaN\n2       2.0  14.0  NaN\n3      11.0   NaN  NaN\nHow do I flatten the multiple index to single index after pivotIf columns type object with string join df.columns = df.columns.map('|'.join)\nelse formatdf.columns = df.columns.map('{0[0]}|{0[1]}'.format) \n", "To extend  another version of DataFrame:d = data = {'A': {0: 1, 1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 5},\n 'B': {0: 'a', 1: 'b', 2: 'c', 3: 'a', 4: 'b', 5: 'a', 6: 'c'}}\ndf = pd.DataFrame(d)\n\n   A  B\n0  1  a\n1  1  b\n2  1  c\n3  2  a\n4  2  b\n5  3  a\n6  5  c\nOutput:   0     1     2\nA\n1  a     b     c\n2  a     b  None\n3  a  None  None\n5  c  None  None\nUsing df.groupby and pd.Series.tolistt = df.groupby('A')['B'].apply(list)\nout = pd.DataFrame(t.tolist(),index=t.index)\nout\n   0     1     2\nA\n1  a     b     c\n2  a     b  None\n3  a  None  None\n5  c  None  None\nOr \nA much better alternative using pd.pivot_table with df.squeeze.t = df.pivot_table(index='A',values='B',aggfunc=list).squeeze()\nout = pd.DataFrame(t.tolist(),index=t.index)\n"]},
{"question": "Where and why do I have to put the \u201ctemplate\u201d and \u201ctypename\u201d keywords?", "details": "In templates, where and why do I have to put typename and template on dependent names?\nWhat exactly are dependent names anyway?  I have the following code:template <typename T, typename Tail> // Tail will be a UnionNode too.\nstruct UnionNode : public Tail {\n    // ...\n    template<typename U> struct inUnion {\n        // Q: where to add typename/template here?\n        typedef Tail::inUnion<U> dummy; \n    };\n    template< > struct inUnion<T> {\n    };\n};\ntemplate <typename T> // For the last node Tn.\nstruct UnionNode<T, void> {\n    // ...\n    template<typename U> struct inUnion {\n        char fail[ -2 + (sizeof(U)%2) ]; // Cannot be instantiated for any U\n    };\n    template< > struct inUnion<T> {\n    };\n};\nThe problem I have is in the typedef Tail::inUnion<U> dummy line. I'm fairly certain that inUnion is a dependent name, and VC++ is quite right in choking on it.\nI also know that I should be able to add template somewhere to tell the compiler that inUnion is a template-id. But where exactly? And should it then assume that inUnion is a class template, i.e. inUnion<U> names a type and not a function?", "answers": ["In templates, where and why do I have to put typename and template on dependent names?\nWhat exactly are dependent names anyway?  I have the following code:template <typename T, typename Tail> // Tail will be a UnionNode too.\nstruct UnionNode : public Tail {\n    // ...\n    template<typename U> struct inUnion {\n        // Q: where to add typename/template here?\n        typedef Tail::inUnion<U> dummy; \n    };\n    template< > struct inUnion<T> {\n    };\n};\ntemplate <typename T> // For the last node Tn.\nstruct UnionNode<T, void> {\n    // ...\n    template<typename U> struct inUnion {\n        char fail[ -2 + (sizeof(U)%2) ]; // Cannot be instantiated for any U\n    };\n    template< > struct inUnion<T> {\n    };\n};\nThe problem I have is in the typedef Tail::inUnion<U> dummy line. I'm fairly certain that inUnion is a dependent name, and VC++ is quite right in choking on it.\nI also know that I should be able to add template somewhere to tell the compiler that inUnion is a template-id. But where exactly? And should it then assume that inUnion is a class template, i.e. inUnion<U> names a type and not a function?", "(See )In order to parse a C++ program, the compiler needs to know whether certain names are types or not. The following example demonstrates that:t * f;\nHow should this be parsed? For many languages a compiler doesn't need to know the meaning of a name in order to parse and basically know what action a line of code does. In C++, the above however can yield vastly different interpretations depending on what t means. If it's a type, then it will be a declaration of a pointer f. However if it's not a type, it will be a multiplication. So the C++ Standard says at paragraph (3/7):Some names denote types or templates. In general, whenever a name is encountered it is necessary to determine whether that name denotes one of these entities before continuing to parse the program that contains it. The process that determines this is called name lookup.How will the compiler find out what a name t::x refers to, if t refers to a template type parameter? x could be a static int data member that could be multiplied or could equally well be a nested class or typedef that could yield to a declaration.  You might recommend to just wait till the user instantiates the template: t::x * f; This will work and actually is allowed by the Standard as a possible implementation approach. These compilers basically copy the template's text into an internal buffer, and only when an instantiation is needed, they parse the template and possibly detect errors in the definition. But instead of bothering the template's users (poor colleagues!) with errors made by a template's author, other implementations choose to check templates early on and give errors in the definition as soon as possible, before an instantiation even takes place. So there has to be a way to tell the compiler that certain names are types and that certain names aren't. The answer is:  decide how the compiler should parse this. If t::x is a dependent name, then we need to prefix it by typename to tell the compiler to parse it in a certain way. The Standard says at (14.6/2):A name used in a template declaration or definition and that is dependent on a template-parameter is\n  assumed not to name a type unless the applicable name lookup finds a type name or the name is qualified\n  by the keyword typename. There are many names for which typename is not necessary, because the compiler can, with the applicable name lookup in the template definition, figure out how to parse a construct itself - for example with T *f;, when T is a type template parameter. But for t::x * f; to be a declaration, it must be written as typename t::x *f;. If you omit the keyword and the name is taken to be a non-type, but when instantiation finds it denotes a type, the usual error messages are emitted by the compiler. Sometimes, the error consequently is given at definition time:// t::x is taken as non-type, but as an expression the following misses an\n// operator between the two names or a semicolon separating them.\nt::x f;\ntypename - it is therefor taken as granted that unqualified names are always known to refer to types if they do so.A similar gotcha exists for names that denote templates, as hinted at by the introductory text.Remember the initial quote above and how the Standard requires special handling for templates as well? Let's take the following innocent-looking example: boost::function< int() > f;\nIt might look obvious to a human reader. Not so for the compiler. Imagine the following arbitrary definition of boost::function and f:namespace boost { int function = 0; }\nint main() { \n  int f = 0;\n  boost::function< int() > f; \n}\nThat's actually a valid ! It uses the less-than operator to compare boost::function against zero (int()), and then uses the greater-than operator to compare the resulting bool against f. However as you might well know, boost::function  is a template, so the compiler knows (14.2/3):After name lookup (3.4) finds that a name is a template-name, if this name is followed by a <, the < is\n  always taken as the beginning of a template-argument-list and never as a name followed by the less-than\n  operator.Now we are back to the same problem as with typename. What if we can't know yet whether the name is a template when parsing the code? We will need to insert template immediately before the template name, as specified by 14.2/4. This looks like:t::template f<int>(); // call a function template\nTemplate names can not only occur after a :: but also after a -> or . in a class member access. You need to insert the keyword there too:this->template f<int>(); // call a function template\nFor the people that have thick Standardese books on their shelf and that want to know what exactly I was talking about, I'll talk a bit about how this is specified in the Standard.In template declarations some constructs have different meanings depending on what template arguments you use to instantiate the template: Expressions may have different types or values, variables may have different types or function calls might end up calling different functions. Such constructs are generally said to  on template parameters.The Standard defines precisely the rules by whether a construct is dependent or not. It separates them into logically different groups: One catches types, another catches expressions. Expressions may depend by their value and/or their type. So we have, with typical examples appended:\nT\nN\n(T)0\nMost of the rules are intuitive and are built up recursively: For example, a type constructed as T[N] is a dependent type if N is a value-dependent expression or T is a dependent type. The details of this can be read in section (14.6.2/1) for dependent types, (14.6.2.2) for type-dependent expressions and (14.6.2.3) for value-dependent expressions. The Standard is a bit unclear about what  is a . On a simple read (you know, the principle of least surprise), all it defines as a  is the special case for function names below. But since clearly T::x also needs to be looked up in the instantiation context, it also needs to be a dependent name (fortunately, as of mid C++14 the committee has started to look into how to fix this confusing definition). To avoid this problem, I have resorted to a simple interpretation of the Standard text. Of all the constructs that denote dependent types or expressions, a subset of them represent names. Those names are therefore \"dependent names\". A name can take different forms - the Standard says:A name is a use of an identifier (2.11), operator-function-id (13.5), conversion-function-id (12.3.2), or template-id (14.2) that denotes an entity or label (6.6.4, 6.1)An identifier is just a plain sequence of characters / digits, while the next two are the operator + and operator type form. The last form is template-name <argument list>. All these are names, and by conventional use in the Standard, a name can also include qualifiers that say what namespace or class a name should be looked up in.A value dependent expression 1 + N is not a name, but N is. The subset of all dependent constructs that are names is called . Function names, however, may have different meaning in different instantiations of a template, but unfortunately are not caught by this general rule. Not primarily a concern of this article, but still worth mentioning: Function names are an exception that are handled separately. An identifier function name is dependent not by itself, but by the type dependent argument expressions used in a call. In the example f((T)0), f is a dependent name. In the Standard, this is specified at (14.6.2/1).In enough cases we need both of typename and template. Your code should look like the followingtemplate <typename T, typename Tail>\nstruct UnionNode : public Tail {\n    // ...\n    template<typename U> struct inUnion {\n        typedef typename Tail::template inUnion<U> dummy;\n    };\n    // ...\n};\nThe keyword template doesn't always have to appear in the last part of a name. It can appear in the middle before a class name that's used as a scope, like in the following exampletypename t::template iterator<int>::value_type v;\nIn some cases, the keywords are forbidden, as detailed below\nOn the name of a dependent base class you are not allowed to write typename. It's assumed that the name given is a class type name. This is true for both names in the base-class list and the constructor initializer list: template <typename T>\n struct derive_from_Has_type : /* typename */ SomeBase<T>::type \n { };\n\nIn using-declarations it's not possible to use template after the last ::, and the C++ committee  not to work on a solution.  template <typename T>\n struct derive_from_Has_type : SomeBase<T> {\n    using SomeBase<T>::template type; // error\n    using typename SomeBase<T>::type; // typename *is* allowed\n };\n\n", "While the rules in C++03 about when you need typename and template are largely reasonable, there is one annoying disadvantage of its formulationtemplate<typename T>\nstruct A {\n  typedef int result_type;\n\n  void f() {\n    // error, \"this\" is dependent, \"template\" keyword needed\n    this->g<float>();\n\n    // OK\n    g<float>();\n\n    // error, \"A<T>\" is dependent, \"typename\" keyword needed\n    A<T>::result_type n1;\n\n    // OK\n    result_type n2; \n  }\n\n  template<typename U>\n  void g();\n};\nAs can be seen, we need the disambiguation keyword even if the compiler could perfectly figure out itself that A::result_type can only be int (and is hence a type), and this->g can only be the member template g declared later (even if A is explicitly specialized somewhere, that would not affect the code within that template, so its meaning cannot be affected by a later specialization of A!). To improve the situation, in C++11 the language tracks when a type refers to the enclosing template. To know that, the type must have been formed by using a certain form of name, which is its own name (in the above, A, A<T>, ::A<T>). A type referenced by such a name is known to be  the . There may be multiple types that are all the current instantiation if the type from which the name is formed is a member/nested class (then, A::NestedClass and A are both current instantiations). Based on this notion, the language says that CurrentInstantiation::Foo, Foo and CurrentInstantiationTyped->Foo (such as A *a = this; a->Foo) are all   they are found to be members of a class that is the current instantiation or one of its non-dependent base classes (by just doing the name lookup immediately). The keywords typename and template are now not required anymore if the qualifier is a member of the current instantiation. A keypoint here to remember is that A<T> is  a type-dependent name (after all T is also type dependent). But A<T>::result_type is known to be a type - the compiler will \"magically\" look into this kind of dependent types to figure this out. struct B {\n  typedef int result_type;\n};\n\ntemplate<typename T>\nstruct C { }; // could be specialized!\n\ntemplate<typename T>\nstruct D : B, C<T> {\n  void f() {\n    // OK, member of current instantiation!\n    // A::result_type is not dependent: int\n    D::result_type r1;\n\n    // error, not a member of the current instantiation\n    D::questionable_type r2;\n\n    // OK for now - relying on C<T> to provide it\n    // But not a member of the current instantiation\n    typename D::questionable_type r3;        \n  }\n};\nThat's impressive, but can we do better? The language even goes further and  that an implementation again looks up D::result_type when instantiating D::f (even if it found its meaning already at definition time). When now the lookup result differs or results in ambiguity, the program is ill-formed and a diagnostic must be given. Imagine what happens if we defined C like thistemplate<>\nstruct C<int> {\n  typedef bool result_type;\n  typedef int questionable_type;\n};\nA compiler is required to catch the error when instantiating D<int>::f. So you get the best of the two worlds: \"Delayed\" lookup protecting you if you could get in trouble with dependent base classes, and also \"Immediate\" lookup that frees you from typename and template. In the code of D, the name typename D::questionable_type is not a member of the current instantiation. Instead the language marks it as a . In particular, this is always the case when you are doing DependentTypeName::Foo or DependentTypedName->Foo and either the dependent type is  the current instantiation (in which case the compiler can give up and say \"we will look later what Foo is) or it  the current instantiation and the name was not found in it or its non-dependent base classes and there are also dependent base classes. Imagine what happens if we had a member function h within the above defined A class templatevoid h() {\n  typename A<T>::questionable_type x;\n}\nIn C++03, the language allowed to catch this error because there could never be a valid way to instantiate A<T>::h (whatever argument you give to T). In C++11, the language now has a further check to give more reason for compilers to implement this rule. Since A has no dependent base classes, and A declares no member questionable_type, the name A<T>::questionable_type is  a member of the current instantiation  a member of an unknown specialization. In that case, there should be no way that that code could validly compile at instantiation time, so the language forbids a name where the qualifier is the current instantiation to be neither a member of an unknown specialization nor a member of the current instantiation (however, this violation is still not required to be diagnosed).You can try this knowledge on  and see whether the above definitions make sense for you on a real-world example (they are repeated slightly less detailed in that answer).  The C++11 rules make the following valid C++03 code ill-formed (which was not intended by the C++ committee, but will probably not be fixed)struct B { void f(); };\nstruct A : virtual B { void f(); };\n\ntemplate<typename T>\nstruct C : virtual B, T {\n  void g() { this->f(); }\n};\n\nint main() { \n  C<A> c; c.g(); \n}\nThis valid C++03 code would bind this->f to A::f at instantiation time and everything is fine. C++11 however immediately binds it to B::f and requires a double-check when instantiating, checking whether the lookup still matches. However when instantiating C<A>::g, the  applies and lookup will find A::f instead.", "This post is meant to be an  alternative to .The underlying purpose is the same; an explanation to \"When?\" and \"Why?\" typename and template must be applied.typenametemplatetypename and template are usable in circumstances other than when declaring a template.There are certain contexts in  where the compiler must explicitly be told how to treat a name, and all these contexts have one thing in common; they depend on at least one .We refer to such names, where there can be an ambiguity in interpretation, as; \"\".This post will offer an explanation to the relationship between , and the two keywords.Try to explain what is going on in the following , either to yourself, a friend, or perhaps your cat; what is happening in the statement marked ()?template<class T> void f_tmpl () { T::foo * x; /* <-- (A) */ }\n\nIt might not be as easy as one thinks, more specifically the result of evaluating () heavily  on the definition of the type passed as template-parameter T.Different Ts can drastically change the semantics involved.struct X { typedef int       foo;       }; /* (C) --> */ f_tmpl<X> ();\nstruct Y { static  int const foo = 123; }; /* (D) --> */ f_tmpl<Y> ();\n:\nIf we instantiate the function-template with type , as in (), we will have a declaration of a  named , but;\nif we instantiate the template with type , as in (), () would instead consist of an expression that calculates the product of  multiplied with some already declared variable .\nThe C++ Standard cares about our safety and well-being, at least in this case.To prevent an implementation from potentially suffering from nasty surprises, the Standard mandates that we sort out the ambiguity of a  by  stating the intent anywhere we'd like to treat the name as either a , or a .If nothing is stated, the  will be considered to be either a variable, or a function.If this was a Hollywood film,  would be the disease that spreads through body contact, instantly affects its host to make it confused. Confusion that could, possibly, lead to an ill-formed perso-, erhm.. program.A  is  name that directly, or indirectly, depends on a .\ntemplate<class T> void g_tmpl () {\n   SomeTrait<T>::type                   foo; // (E), ill-formed\n   SomeTrait<T>::NestedTrait<int>::type bar; // (F), ill-formed\n   foo.data<int> ();                         // (G), ill-formed    \n}\nWe have four  names in the above snippet:\n\nSomeTrait<T>T\n\n\nSomeTrait<T>\nSomeTrait<T>\n\n\nSomeTrait<T>\n\nNeither of statement (), () or () is valid if the compiler would interpret the  as variables/functions (which as stated earlier is what happens if we don't explicitly say otherwise).\nTo make g_tmpl have a valid definition we must explicitly tell the compiler that we expect a type in (), a  and a  in (), and a  in ().template<class T> void g_tmpl () {\n   typename SomeTrait<T>::type foo;                            // (G), legal\n   typename SomeTrait<T>::template NestedTrait<int>::type bar; // (H), legal\n   foo.template data<int> ();                                  // (I), legal\n}\nEvery time a  denotes a type,   involved must be either  or , with this in mind it's quite easy to see that we apply typename at the beginning of our fully .template however, is different in this regard, since there's no way of coming to a conclusion such as; . This means that we apply template directly in front of any  that we'd like to treat as such.\"typenametemplate\" - Some C++ DeveloperThe rules in the Standard states that you may apply the keywords as long as you are dealing with a  (), but if the name isn't  the application is ill-formed ().namespace N {\n  template<class T>\n  struct X { };\n}\n         N::         X<int> a; // ...  legal\ntypename N::template X<int> b; // (K), legal\ntypename template    X<int> c; // (L), ill-formed\ntypenametemplateAdditionally there are contexts where typename and template are  disallowed:\nEvery name written in a derived class's  is already treated as a , explicitly specifying typename is both ill-formed, and redundant.                    // .------- the base-specifier-list\n  template<class T> // v\n  struct Derived      : typename SomeTrait<T>::type /* <- ill-formed */ {\n    ...\n  };\n\n  struct Base {\n    template<class T>\n    struct type { };\n  };\n\n  struct Derived : Base {\n    using Base::template type; // ill-formed\n    using Base::type;          // legal\n  };\n\n", "The general rule for putting the typename keyword is mostly when you're using a template parameter and you want to access a nested typedef or using-alias, for example:template<typename T>\nstruct test {\n    using type = T; // no typename required\n    using underlying_type = typename T::type // typename required\n};\nNote that this also applies for meta functions or things that take generic template parameters too. However, if the template parameter provided is an explicit type then you don't have to specify typename, for example:template<typename T>\nstruct test {\n    // typename required\n    using type = typename std::conditional<true, const T&, T&&>::type;\n    // no typename required\n    using integer = std::conditional<true, int, float>::type;\n};\nThe general rules for adding the template qualifier are mostly similar except they typically involve templated member functions (static or otherwise) of a struct/class that is itself templated, for example:Given this struct and function:template<typename T>\nstruct test {\n    template<typename U>\n    void get() const {\n        std::cout << \"get\\n\";\n    }\n};\n\ntemplate<typename T>\nvoid func(const test<T>& t) {\n    t.get<int>(); // error\n}\nAttempting to access t.get<int>() from inside the function will result in an error:main.cpp:13:11: error: expected primary-expression before 'int'\n     t.get<int>();\n           ^\nmain.cpp:13:11: error: expected ';' before 'int'\nThus in this context you would need the template keyword beforehand and call it like so:t.template get<int>()That way the compiler will parse this properly rather than t.get < int.", "typedef typename Tail::inUnion<U> dummy;\nHowever, I'm not sure you're implementation of inUnion is correct. If I understand correctly, this class is not supposed to be instantiated, therefore the \"fail\" tab will never avtually fails. Maybe it would be better to indicates whether the type is in the union or not with a simple boolean value.template <typename T, typename TypeList> struct Contains;\n\ntemplate <typename T, typename Head, typename Tail>\nstruct Contains<T, UnionNode<Head, Tail> >\n{\n    enum { result = Contains<T, Tail>::result };\n};\n\ntemplate <typename T, typename Tail>\nstruct Contains<T, UnionNode<T, Tail> >\n{\n    enum { result = true };\n};\n\ntemplate <typename T>\nstruct Contains<T, void>\n{\n    enum { result = false };\n};\nPS: Have a look at PS2: Have a look at , notably in Andrei Alexandrescu's book: Modern C++ Design", "I am placing JLBorges's excellent  to a similar question verbatim from cplusplus.com, as it is the most succinct explanation I've read on the subject.In a template that we write, there are two kinds of names that could be used - dependant names and non- dependant names. A dependant name is a name that depends on a template parameter; a non-dependant name has the same meaning irrespective of what the template parameters are.For example:template< typename T > void foo( T& x, std::string str, int count )\n{\n    // these names are looked up during the second phase\n    // when foo is instantiated and the type T is known\n    x.size(); // dependant name (non-type)\n    T::instance_count ; // dependant name (non-type)\n    typename T::iterator i ; // dependant name (type)\n      \n    // during the first phase, \n    // T::instance_count is treated as a non-type (this is the default)\n    // the typename keyword specifies that T::iterator is to be treated as a type.\n\n    // these names are looked up during the first phase\n    std::string::size_type s ; // non-dependant name (type)\n    std::string::npos ; // non-dependant name (non-type)\n    str.empty() ; // non-dependant name (non-type)\n    count ; // non-dependant name (non-type)\n}\nWhat a dependant name refers to could be something different for each different instantiation of the template. As a consequence, C++ templates are subject to \"two-phase name lookup\". When a template is initially parsed (before any instantiation takes place) the compiler looks up the non-dependent names. When a particular instantiation of the template takes place, the template parameters are known by then, and the compiler looks up dependent names.During the first phase, the parser needs to know if a dependant name is the name of a type or the name of a non-type. By default, a dependant name is assumed to be the name of a non-type. The typename keyword before a dependant name specifies that it is the name of a type.Use the keyword typename only in template declarations and definitions provided you have a qualified name that refers to a type and depends on a template parameter."]},
{"question": "The Use of Multiple JFrames: Good or Bad Practice? [closed]", "details": "\r\n                     Update the question so it can be answered with facts and citations by .\r\n                Closed .I'm developing an application which displays images, and plays sounds from a database. I'm trying to decide whether or not to use a separate JFrame to add images to the database from the GUI. I'm just wondering whether it is good practice to use multiple JFrame windows?", "answers": ["\r\n                     Update the question so it can be answered with facts and citations by .\r\n                Closed .I'm developing an application which displays images, and plays sounds from a database. I'm trying to decide whether or not to use a separate JFrame to add images to the database from the GUI. I'm just wondering whether it is good practice to use multiple JFrame windows?", "I'm just wondering whether it is good practice to use multiple JFrames?Bad (bad, bad) practice.  \n\n\n\n\n\nThere are any number of ways of displaying many elements in one GUI, e.g.:\nCardLayout\nJInternalFrameJDesktopPane\nJTabbedPane\nJSplitPane\nJLayeredPane\nJToolBar\nJList\nJTree\n\nBut if those strategies do not work for a particular use-case, try the following.  Establish a single main JFrame, then have JDialog or JOptionPane instances appear for the rest of the free-floating elements, using the frame as the parent for the dialogs.In this case where the multiple elements are images, it would be better to use either of the following instead:JLabelImageViewerJList", "The multiple JFrame approach has been something I've implemented since I began programming Swing apps. For the most part, I did it in the beginning because I didn't know any better. , as I matured in my experience and knowledge as a developer and as began to read and absorb the opinions of so many more experienced Java devs online, I made an attempt to  from the multiple JFrame approach (both in current projects and future projects) only to be met with... get this...  As I began implementing modal dialogs to control \"child\" windows and JInternalFrames for separate components,  I was quite surprised, as I was doing what I thought was best-practice! But, as they say, \"A happy wife is a happy life.\" Same goes for your clients. Of course, I am a contractor so my end-users have direct access to me, the developer, which is obviously not a common scenario.So, I'm going to explain the benefits of the multiple JFrame approach, as well as myth-bust some of the cons that others have presented.JFrameJFrameJInternalFrameJFrameJDialogJDialogJInternalFrameJFramesJInternalFrameJFrameJInternalFramesJFrameSwingWorkerJFrameopen()windowClosing()JFrameJInternalFrameJFramedispose()JInternalFrameI've written a lot and I feel like I could write more. Anyways, I hope I don't get down-voted simply because it's an unpopular opinion. The question is clearly a valuable one and I hope I've provided a valuable answer, even if it isn't the common opinion.A great example of multiple frames/single document per frame () vs single frame/multiple documents per frame () is Microsoft Excel. Some of MDI benefits:\n\n\n\nSDI (Single-Document Interface, i.e., every window can only have a single document):MDI (Multiple-Document Interface, i.e., every window can have multiple documents):", "I'd like to counter the \"not user friendly\" argument with an example that I have just been involved with.In our application we have a main window where the users run various 'programs' as separate tabs. As much as possible we have tried to keep our application to this single window.One of the 'programs' they run presents a list of reports that have been generated by the system, and the user can click on an icon on each line to pop open a report viewer dialog. This viewer is showing the equivalent of the portrait/landscape A4 page(s) of the report, so the users like this window to be quite big, almost filling their screens.A few months ago we started getting requests from our customers to make these report viewer windows modeless, so that they could have multiple reports open at the same time.For some time I resisted this request as I did not think this was a good solution. However, my mind was changed when I found out how the users were getting around this 'deficiency' of our system.They were opening a viewer, using the 'Save As' facility to save the report as a PDF to a specific directory, using Acrobat Reader to open the PDF file, and then they would do the same with the next report. They would have multiple Acrobat Readers running with the various report outputs that they wanted to look at.So I relented and made the viewer modeless. This means that each viewer has a task-bar icon.When the latest version was released to them last week, the overwhelming response from them is that they LOVE it. It's been one of our most popular recent enhancements to the system.So you go ahead and tell your users that what they want is bad, but ultimately it won't do you any favours.SOME NOTES:\n\nModalityTypemodal\n\n\n", "Make an jInternalFrame into main frame and make it invisible. Then you can use it for further events.jInternalFrame.setSize(300,150);\njInternalFrame.setVisible(true);\n", "It's been a while since the last time i touch swing but in general is a bad practice to do this. Some of the main disadvantages that comes to mind: \n you will have to allocate way more resources to draw a JFrame that other kind of window container, such as Dialog or JInternalFrame.\n It is not easy to navigate into a bunch of JFrame stuck together, it will look like your application is a set of applications inconsistent and poorly design.\n This is kind of retorical, now it's way easier and other people smarter ( or with more spare time) than us have already think through the Desktop and JInternalFrame pattern, so I would recommend to use it.\n", "Bad practice definitely. One reason is that it is not very 'user-friendly' for the fact that every JFrame shows a new taskbar icon. Controlling multiple JFrames will have you ripping your hair out.Personally, I would use ONE JFrame for your kind of application. Methods of displaying multiple things is up to you, there are many. Canvases, JInternalFrame, CardLayout, even JPanels possibly.Multiple JFrame objects = Pain, trouble, and problems.", "I think using multiple Jframes is not a good idea.Instead we can use JPanels more than one or more JPanel in the same JFrame.Also we can switch between this JPanels. So it gives us freedom to display more than on thing in the JFrame.For each JPanel we can design different things and all this JPanel can be displayed on the single JFrameone at a time.To switch between this JPanels use JMenuBar with JMenuItems for each JPanelor 'JButtonfor eachJPanel`.More than one JFrame is not a good practice, but there is nothing wrong if we want more than one JFrame.  But its better to change one JFrame for our different needs rather than having multiple JFrames.", "If the frames are going to be the same size, why not create the frame and pass the frame then as a reference to it instead. When you have passed the frame you can then decide how to populate it. It would be like having a method for calculating the average of a set of figures. Would you create the method over and over again? ", "It is not a good practice but even though you wish to use it you can use the singleton pattern as its good. I have used the singleton patterns in most of my project its good."]},
{"question": "What are the basic rules and idioms for operator overloading?", "details": "Note: The answers were given in , but since many users sort answers according to votes, rather than the time they were given, here's an  in the order in which they make the most sense:\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["Note: The answers were given in , but since many users sort answers according to votes, rather than the time they were given, here's an  in the order in which they make the most sense:\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "Most of the work in overloading operators is boiler-plate code. That is little wonder, since operators are merely syntactic sugar, their actual work could be done by (and often is forwarded to) plain functions. But it is important that you get this boiler-plate code right. If you fail, either your operator\u2019s code won\u2019t compile or your users\u2019 code won\u2019t compile or your users\u2019 code will behave surprisingly.There's a lot to be said about assignment. However, most of it has already been said in , so I'll skip most of it here, only listing the perfect assignment operator for reference:X& X::operator=(X rhs)\n{\n  swap(rhs);\n  return *this;\n}\nThe bitshift operators << and >>, although still used in hardware interfacing for the bit-manipulation functions they inherit from C, have become more prevalent as overloaded stream input and output operators in most applications.  For guidance overloading as bit-manipulation operators, see the section below on Binary Arithmetic Operators.  For implementing your own custom format and parsing logic when your object is used with iostreams, continue.The stream operators, among the most commonly overloaded operators, are binary infix operators for which the syntax specifies no restriction on whether they should be members or non-members.\nSince they change their left argument (they alter the stream\u2019s state), they should, according to the rules of thumb, be implemented as members of their left operand\u2019s type. However, their left operands are streams from the standard library, and while most of the stream output and input operators defined by the standard library are indeed defined as members of the stream classes, when you implement output and input operations for your own types, you cannot change the standard library\u2019s stream types. That\u2019s why you need to implement these operators for your own types as non-member functions.\nThe canonical forms of the two are these:std::ostream& operator<<(std::ostream& os, const T& obj)\n{\n  // write obj to stream\n\n  return os;\n}\n\nstd::istream& operator>>(std::istream& is, T& obj)\n{\n  // read obj from stream\n\n  if( /* no valid object of T found in stream */ )\n    is.setstate(std::ios::failbit);\n\n  return is;\n}\nWhen implementing operator>>, manually setting the stream\u2019s state is only necessary when the reading itself succeeded, but the result is not what would be expected.The function call operator, used to create function objects, also known as functors, must be defined as a  function, so it always has the implicit this argument of member functions. Other than this, it can be overloaded to take any number of additional arguments, including zero.Here's an example of the syntax:class foo {\npublic:\n    // Overloaded call operator\n    int operator()(const std::string& y) {\n        // ...\n    }\n};\nUsage:foo f;\nint a = f(\"hello\");\nThroughout the C++ standard library, function objects are always copied. Your own function objects should therefore be cheap to copy. If a function object absolutely needs to use data which is expensive to copy, it is better to store that data elsewhere and have the function object refer to it.The binary infix comparison operators should, according to the rules of thumb, be implemented as non-member functions. The unary prefix negation ! should (according to the same rules) be implemented as a member function. (but it is usually not a good idea to overload it.)The standard library\u2019s algorithms (e.g. std::sort()) and types (e.g. std::map) will always only expect operator< to be present. However, the , too, so if you define operator<, be sure to follow the third fundamental rule of operator overloading and also define all the other boolean comparison operators. The canonical way to implement them is this:inline bool operator==(const X& lhs, const X& rhs){ /* do actual comparison */ }\ninline bool operator!=(const X& lhs, const X& rhs){return !operator==(lhs,rhs);}\ninline bool operator< (const X& lhs, const X& rhs){ /* do actual comparison */ }\ninline bool operator> (const X& lhs, const X& rhs){return  operator< (rhs,lhs);}\ninline bool operator<=(const X& lhs, const X& rhs){return !operator> (lhs,rhs);}\ninline bool operator>=(const X& lhs, const X& rhs){return !operator< (lhs,rhs);}\nThe important thing to note here is that only two of these operators actually do anything, the others are just forwarding their arguments to either of these two to do the actual work.The syntax for overloading the remaining binary boolean operators (||, &&) follows the rules of the comparison operators. However, it is  unlikely that you would find a reasonable use case for these. *thisconstbool operator<(const X& rhs) const { /* do actual comparison with *this */ }\nconst ||&&The unary increment and decrement operators come in both prefix and postfix flavor. To tell one from the other, the postfix variants take an additional dummy int argument. If you overload increment or decrement, be sure to always implement both prefix and postfix versions.\nHere is the canonical implementation of increment, decrement follows the same rules:class X {\n  X& operator++()\n  {\n    // do actual increment\n    return *this;\n  }\n  X operator++(int)\n  {\n    X tmp(*this);\n    operator++();\n    return tmp;\n  }\n};\nNote that the postfix variant is implemented in terms of prefix. Also note that postfix does an extra copy.Overloading unary minus and plus is not very common and probably best avoided. If needed, they should probably be overloaded as member functions.  i++++iiFor the binary arithmetic operators, do not forget to obey the third basic rule operator overloading: If you provide +, also provide +=, if you provide -, do not omit -=, etc. Andrew Koenig is said to have been the first to observe that the compound assignment operators can be used as a base for their non-compound counterparts. That is, operator + is implemented in terms of +=, - is implemented in terms of -= etc.According to our rules of thumb, + and its companions should be non-members, while their compound assignment counterparts (+= etc.), changing their left argument, should be a member. Here is the exemplary code for += and +; the other binary arithmetic operators should be implemented in the same way:class X {\n  X& operator+=(const X& rhs)\n  {\n    // actual addition of rhs to *this\n    return *this;\n  }\n};\ninline X operator+(X lhs, const X& rhs)\n{\n  lhs += rhs;\n  return lhs;\n}\noperator+= returns its result per reference, while operator+ returns a copy of its result. Of course, returning a reference is usually more efficient than returning a copy, but in the case of operator+, there is no way around the copying. When you write a + b, you expect the result to be a new value, which is why operator+ has to return a new value.\nAlso note that operator+ takes its left operand  rather than by const reference. The reason for this is the same as the reason giving for operator= taking its argument per copy.The bit manipulation operators ~ & | ^ << >> should be implemented in the same way as the arithmetic operators. However, (except for overloading << and >> for output and input) there are very few reasonable use cases for overloading these. a += ba + bThe array subscript operator is a binary operator which must be implemented as a class member. It is used for container-like types that allow access to their data elements by a key.\nThe canonical form of providing these is this:class X {\n        value_type& operator[](index_type idx);\n  const value_type& operator[](index_type idx) const;\n  // ...\n};\nUnless you do not want users of your class to be able to change data elements returned by operator[] (in which case you can omit the non-const variant), you should always provide both variants of the operator.If value_type is known to refer to a built-in type, the const variant of the operator should better return a copy instead of a const reference:class X {\n  value_type& operator[](index_type idx);\n  value_type  operator[](index_type idx) const;\n  // ...\n};\nFor defining your own iterators or smart pointers, you have to overload the unary prefix dereference operator * and the binary infix pointer member access operator ->:class my_ptr {\n        value_type& operator*();\n  const value_type& operator*() const;\n        value_type* operator->();\n  const value_type* operator->() const;\n};\nNote that these, too, will almost always need both a const and a non-const version.\nFor the -> operator, if value_type is of class (or struct or union) type, another operator->() is called recursively, until an operator->() returns a value of non-class type.The unary address-of operator should never be overloaded.For operator->*() see . It's rarely used and thus rarely ever overloaded. In fact, even iterators do not overload it.Continue to ", "When it comes to operator overloading in C++, there are . As with all such rules, there are indeed exceptions. Sometimes people have deviated from them and the outcome was not bad code, but such positive deviations are few and far between. At the very least, 99 out of 100 such deviations I have seen were unjustified. However, it might just as well have been 999 out of 1000. So you\u2019d better stick to the following rules. \nBasically, the first and foremost rule for overloading operators, at its very heart, says: . That might seem strange, because there is a lot to be known about operator overloading and so a lot of articles, book chapters, and other texts deal with all this. But despite this seemingly obvious evidence, . The reason is that actually it is hard to understand the semantics behind the application of an operator unless the use of the operator in the application domain is well known and undisputed. Contrary to popular belief, this is hardly ever the case.\nC++ poses no limitations on the semantics of overloaded operators. Your compiler will happily accept code that implements the binary + operator to subtract from its right operand. However, the users of such an operator would never suspect the expression a + b to subtract a from b. Of course, this supposes that the semantics of the operator in the application domain is undisputed.\n and to other operations. If your type supports a + b, users will expect to be able to call a += b, too. If it supports prefix increment ++a, they will expect a++ to work as well. If they can check whether a < b, they will most certainly expect to also to be able to check whether a > b. If they can copy-construct your type, they expect assignment to work as well.Continue to .", "You cannot change the meaning of operators for built-in types in C++, operators can only be overloaded for user-defined types. That is, at least one of the operands has to be of a user-defined type. As with other overloaded functions, operators can be overloaded for a certain set of parameters only once.Not all operators can be overloaded in C++. Among the operators that cannot be overloaded are: . :: sizeof typeid .* and the only ternary operator in C++, ?:Among the operators that can be overloaded in C++ are these:\n+-*/%+=-=*=/=%=+-++--\n&|^<<>>&=|=^=<<=>>=~\n==!=<><=>=||&&!\nnewnew[]deletedelete[]\n\n=[]->->*,*&()\nHowever, the fact that you  overload all of these does not mean you  do so. See the basic rules of operator overloading.In C++, operators are overloaded in the form of . As with other functions, overloaded operators can generally be implemented either as a  or as . Whether you are free to choose or bound to use either one depends on several criteria. A unary operator @, applied to an object x, is invoked either as operator@(x) or as x.operator@(). A binary infix operator @, applied to the objects x and y, is called either as operator@(x,y) or as x.operator@(y).Operators that are implemented as non-member functions are sometimes friend of their operand\u2019s type.   @ Continue to .", "The binary operators = (assignment), [] (array subscription), -> (member access), as well as the n-ary () (function call) operator, must always be implemented as , because the syntax of the language requires them to.Other operators can be implemented either as members or as non-members. Some of them, however, usually have to be implemented as non-member functions, because their left operand cannot be modified by you. The most prominent of these are the input and output operators << and >>, whose left operands are stream classes from the standard library which you cannot change.For all operators where you have to choose to either implement them as a member function or a non-member function,  to decide:Of course, as with all rules of thumb, there are exceptions. If you have a typeenum Month {Jan, Feb, ..., Nov, Dec}\nand you want to overload the increment and decrement operators for it, you cannot do this as a member functions, since in C++, enum types cannot have member functions. So you have to overload it as a free function. And operator<() for a class template nested within a class template is much easier to write and read when done as a member function inline in the class definition. But these are indeed rare exceptions.(However,  you make an exception, do not forget the issue of const-ness for the operand that, for member functions, becomes the implicit this argument. If the operator as a non-member function would take its left-most argument as a const reference, the same operator as a member function needs to have a const at the end to make *this a const reference.)Continue to .", "In C++ you can create conversion operators, operators that allow the compiler to convert between your types and other defined types.  There are two types of conversion operators, implicit and explicit ones.An implicit conversion operator allows the compiler to implicitly convert (like the conversion between int and long) the value of a user-defined type to some other type.The following is a simple class with an implicit conversion operator:class my_string {\npublic:\n  operator const char*() const {return data_;} // This is the conversion operator\nprivate:\n  const char* data_;\n};\nImplicit conversion operators, like one-argument constructors, are user-defined conversions. Compilers will grant one user-defined conversion when trying to match a call to an overloaded function.void f(const char*);\n\nmy_string str;\nf(str); // same as f( str.operator const char*() )\nAt first this seems very helpful, but the problem with this is that the implicit conversion even kicks in when it isn\u2019t expected to. In the following code, void f(const char*) will be called because my_string() is not an , so the first does not match:void f(my_string&);\nvoid f(const char*);\n\nf(my_string());\nBeginners easily get this wrong and even experienced C++ programmers are sometimes surprised because the compiler picks an overload they didn\u2019t suspect.  These problems can be mitigated by explicit conversion operators.Unlike implicit conversion operators, explicit conversion operators will never kick in when you don't expect them to.  The following is a simple class with an explicit conversion operator:class my_string {\npublic:\n  explicit operator const char*() const {return data_;}\nprivate:\n  const char* data_;\n};\nNotice the explicit.  Now when you try to execute the unexpected code from the implicit conversion operators, you get a compiler error:To invoke the explicit cast operator, you have to use static_cast, a C-style cast, or a constructor style cast ( i.e. T(value) ).  However, there is one exception to this:  The compiler is allowed to implicitly convert to bool.  In addition, the compiler is not allowed to do another implicit conversion after it converts to bool (a compiler is allowed to do 2 implicit conversions at a time, but only 1 user-defined conversion at max).  Because the compiler will not cast \"past\" bool, explicit conversion operators now remove the need for the .   For example, smart pointers before C++11 used the Safe Bool idiom to prevent conversions to integral types.  In C++11, the smart pointers use an explicit operator instead because the compiler is not allowed to implicitly convert to an integral type after it explicitly converted a type to bool.Continue to newdelete.", "newdeletenewdeletenewdeleteIn C++, when you write a  like new T(arg) two things happen when this expression is evaluated: First operator new is invoked to obtain raw memory, and then the appropriate constructor of T is invoked to turn this raw memory into a valid object. Likewise, when you delete an object, first its destructor is called, and then the memory is returned to operator delete.\nC++ allows you to tune both of these operations: memory management and the construction/destruction of the object at the allocated memory. The latter is done by writing constructors and destructors for a class. Fine-tuning memory management is done by writing your own operator new and operator delete.The first of the basic rules of operator overloading \u2013  \u2013 applies especially to overloading new and delete. Almost the only reasons to overload these operators are  and , and in many cases, other actions, like  used, will provide a much  than attempting to tweak memory management.The C++ standard library comes with a set of predefined new and delete operators. The most important ones are these:void* operator new(std::size_t) throw(std::bad_alloc); \nvoid  operator delete(void*) throw(); \nvoid* operator new[](std::size_t) throw(std::bad_alloc); \nvoid  operator delete[](void*) throw(); \nThe first two allocate/deallocate memory for an object, the latter two for an array of objects. If you provide your own versions of these, they will  the ones from the standard library.\nIf you overload operator new, you should always also overload the matching operator delete, even if you never intend to call it. The reason is that, if a constructor throws during the evaluation of a new expression, the run-time system will return the memory to the operator delete matching the operator new that was called to allocate the memory to create the object in. If you do not provide a matching operator delete, the default one is called, which is almost always wrong.\nIf you overload new and delete, you should consider overloading the array variants, too.newC++ allows new and delete operators to take additional arguments.\nSo-called placement new allows you to create an object at a certain address which is passed to:class X { /* ... */ };\nchar buffer[ sizeof(X) ];\nvoid f()\n{ \n  X* p = new(buffer) X(/*...*/);\n  // ... \n  p->~X(); // call destructor \n} \nThe standard library comes with the appropriate overloads of the new and delete operators for this:void* operator new(std::size_t,void* p) throw(std::bad_alloc); \nvoid  operator delete(void* p,void*) throw(); \nvoid* operator new[](std::size_t,void* p) throw(std::bad_alloc); \nvoid  operator delete[](void* p,void*) throw(); \nNote that, in the example code for placement new given above, operator delete is never called, unless the constructor of X throws an exception.You can also overload new and delete with other arguments. As with the additional argument for placement new, these arguments are also listed within parentheses after the keyword new. Merely for historical reasons, such variants are often also called placement new, even if their arguments are not for placing an object at a specific address.Most commonly you will want to fine-tune memory management because measurement has shown that instances of a specific class, or of a group of related classes, are created and destroyed often and that the default memory management of the run-time system, tuned for general performance, deals inefficiently in this specific case. To improve this, you can overload new and delete for a specific class:class my_class { \n  public: \n    // ... \n    void* operator new();\n    void  operator delete(void*,std::size_t);\n    void* operator new[](size_t);\n    void  operator delete[](void*,std::size_t);\n    // ... \n}; \nOverloaded thus, new and delete behave like static member functions. For objects of my_class, the std::size_t argument will always be sizeof(my_class). However, these operators are also called for dynamically allocated objects of , in which case it might be greater than that.To overload the global new and delete, simply replace the pre-defined operators of the standard library with our own. However, this rarely ever needs to be done.", "operator<<std::coutLet's say you have:struct Foo\n{\n   int a;\n   double b;\n\n   std::ostream& operator<<(std::ostream& out) const\n   {\n      return out << a << \" \" << b;\n   }\n};\nGiven that, you cannot use:Foo f = {10, 20.0};\nstd::cout << f;\nSince operator<< is overloaded as a member function of Foo, the LHS of the operator must be a Foo object. Which means, you will be required to use:Foo f = {10, 20.0};\nf << std::cout\nwhich is very non-intuitive.If you define it as a non-member function,struct Foo\n{\n   int a;\n   double b;\n};\n\nstd::ostream& operator<<(std::ostream& out, Foo const& f)\n{\n   return out << f.a << \" \" << f.b;\n}\nYou will be able to use:Foo f = {10, 20.0};\nstd::cout << f;\nwhich is very intuitive."]},
{"question": "Can a local variable's memory be accessed outside its scope?", "details": "I have the following code.#include <iostream>\n\nint * foo()\n{\n    int a = 5;\n    return &a;\n}\n\nint main()\n{\n    int* p = foo();\n    std::cout << *p;\n    *p = 8;\n    std::cout << *p;\n}\nAnd the code is just running with no runtime exceptions!The output was 58How can it be? Isn't the memory of a local variable inaccessible outside its function?", "answers": ["I have the following code.#include <iostream>\n\nint * foo()\n{\n    int a = 5;\n    return &a;\n}\n\nint main()\n{\n    int* p = foo();\n    std::cout << *p;\n    *p = 8;\n    std::cout << *p;\n}\nAnd the code is just running with no runtime exceptions!The output was 58How can it be? Isn't the memory of a local variable inaccessible outside its function?", "How can it be? Isn't the memory of a local variable inaccessible outside its function?You rent a hotel room. You put a book in the top drawer of the bedside table and go to sleep.  You check out the next morning, but \"forget\" to give back your key. You steal the key!A week later, you return to the hotel, do not check in, sneak into your old room with your stolen key, and look in the drawer. Your book is still there. Astonishing!Well, obviously that scenario can happen in the real world no problem. There is no mysterious force that causes your book to disappear when you are no longer authorized to be in the room. Nor is there a mysterious force that prevents you from entering a room with a stolen key.The hotel management is not  to remove your book. You didn't make a contract with them that said that if you leave stuff behind, they'll shred it for you. If you illegally re-enter your room with a stolen key to get it back, the hotel security staff is not  to catch you sneaking in. You didn't make a contract with them that said \"if I try to sneak back into my room later, you are required to stop me.\" Rather, you signed a contract with them that said \"I promise not to sneak back into my room later\", a contract which .In this situation . The book can be there -- you got lucky. Someone else's book can be there and yours could be in the hotel's furnace. Someone could be there right when you come in, tearing your book to pieces. The hotel could have removed the table and book entirely and replaced it with a wardrobe. The entire hotel could be just about to be torn down and replaced with a football stadium, and you are going to die in an explosion while you are sneaking around. You don't know what is going to happen; when you checked out of the hotel and stole a key to illegally use later, you gave up the right to live in a predictable, safe world because  chose to break the rules of the system.. It will cheerfully allow you to break the rules of the system. If you try to do something illegal and foolish like going back into a room you're not authorized to be in and rummaging through a desk that might not even be there anymore, C++ is not going to stop you. Safer languages than C++ solve this problem by restricting your power -- by having much stricter control over keys, for example.Holy goodness, this answer is getting a lot of attention. (I'm not sure why -- I considered it to be just a \"fun\" little analogy, but whatever.)I thought it might be germane to update this a bit with a few more technical thoughts.Compilers are in the business of generating code which manages the storage of the data manipulated by that program. There are lots of different ways of generating code to manage memory, but over time two basic techniques have become entrenched. The first is to have some sort of \"long lived\" storage area where the \"lifetime\" of each byte in the storage -- that is, the period of time when it is validly associated with some program variable -- cannot be easily predicted ahead of time. The compiler generates calls into a \"heap manager\" that knows how to dynamically allocate storage when it is needed and reclaim it when it is no longer needed.The second method is to have a \u201cshort-lived\u201d storage area where the lifetime of each byte is well known. Here, the lifetimes follow a \u201cnesting\u201d pattern. The longest-lived of these short-lived variables will be allocated before any other short-lived variables, and will be freed last. Shorter-lived variables will be allocated after the longest-lived ones, and will be freed before them. The lifetime of these shorter-lived variables is \u201cnested\u201d within the lifetime of longer-lived ones.Local variables follow the latter pattern; when a method is entered, its local variables come alive. When that method calls another method, the new method's local variables come alive. They'll be dead before the first method's local variables are dead.  The relative order of the beginnings and endings of lifetimes of storages associated with local variables can be worked out ahead of time.For this reason, local variables are usually generated as storage on a \"stack\" data structure, because a stack has the property that the first thing pushed on it is going to be the last thing popped off. It's like the hotel decides to only rent out rooms sequentially, and you can't check out until everyone with a room number higher than you has checked out. So let's think about the stack. In many operating systems you get one stack per thread and the stack is allocated to be a certain fixed size. When you call a method, stuff is pushed onto the stack. If you then pass a pointer to the stack back out of your method, as the original poster does here, that's just a pointer to the middle of some entirely valid million-byte memory block. In our analogy, you check out of the hotel; when you do, you just checked out of the highest-numbered occupied room.  If no one else checks in after you, and you go back to your room illegally, all your stuff is guaranteed to still be there .We use stacks for temporary stores because they are really cheap and easy. An implementation of C++ is not required to use a stack for storage of locals; it could use the heap. It doesn't, because that would make the program slower. An implementation of C++ is not required to leave the garbage you left on the stack untouched so that you can come back for it later illegally; it is perfectly legal for the compiler to generate code that turns back to zero everything in the \"room\" that you just vacated. It doesn't because again, that would be expensive.An implementation of C++ is not required to ensure that when the stack logically shrinks, the addresses that used to be valid are still mapped into memory. The implementation is allowed to tell the operating system \"we're done using this page of stack now. Until I say otherwise, issue an exception that destroys the process if anyone touches the previously-valid stack page\".  Again, implementations do not actually do that because it is slow and unnecessary.Instead, implementations let you make mistakes and get away with it. Most of the time. Until one day something truly awful goes wrong and the process explodes.This is problematic. There are a lot of rules and it is very easy to break them accidentally. I certainly have many times. And worse, the problem often only surfaces when memory is detected to be corrupt billions of nanoseconds after the corruption happened, when it is very hard to figure out who messed it up.More memory-safe languages solve this problem by restricting your power. In \"normal\" C# there simply is no way to take the address of a local and return it or store it for later. You can take the address of a local, but the language is cleverly designed so that it is impossible to use it after the lifetime of the local ends. In order to take the address of a local and pass it back, you have to put the compiler in a special \"unsafe\" mode,  put the word \"unsafe\" in your program, to call attention to the fact that you are probably doing something dangerous that could be breaking the rules. For further reading:\nWhat if C# did allow returning references? Coincidentally that is the subject of today's blog post:\nWhy do we use stacks to manage memory? Are value types in C# always stored on the stack? How does virtual memory work? And many more topics in how the C# memory manager works. Many of these articles are also germane to C++ programmers:\n", "What you're doing here is simply reading and writing to memory that  be the address of a. Now that you're outside of foo, it's just a pointer to some random memory area. It just so happens that in your example, that memory area does exist and nothing else is using it at the moment. You don't break anything by continuing to use it, and nothing else has overwritten it yet. Therefore, the 5 is still there. In a real program, that memory would be re-used almost immediately and you'd break something by doing this (though the symptoms may not appear until much later!)When you return from foo, you tell the OS that you're no longer using that memory and it can be reassigned to something else. If you're lucky and it never does get reassigned, and the OS doesn't catch you using it again, then you'll get away with the lie. Chances are though you'll end up writing over whatever else ends up with that address.Now if you're wondering why the compiler doesn't complain, it's probably because foo got eliminated by optimization. It usually will warn you about this sort of thing. C assumes you know what you're doing though, and technically you haven't violated scope here (there's no reference to a itself outside of foo), only memory access rules, which only triggers a warning rather than an error.In short: this won't usually work, but sometimes will by chance.", "Because the storage space wasn't stomped on just yet. Don't count on that behavior.", "A little addition to all the answers:if you do something like that:#include<stdio.h>\n#include <stdlib.h>\nint * foo(){\n    int a = 5;\n    return &a;\n}\nvoid boo(){\n    int a = 7;\n\n}\nint main(){\n    int * p = foo();\n    boo();\n    printf(\"%d\\n\",*p);\n}\nthe output probably will be: 7That is because after returning from foo() the stack is freed and then reused by boo().\nIf you deassemble the executable you will see it clearly.", "In C++, you  access any address, but it doesn't mean you . The address you are accessing is no longer valid. It  because nothing else scrambled the memory after foo returned, but it could crash under many circumstances. Try analyzing your program with , or even just compiling it optimized, and see...", "You never throw a C++ exception by accessing invalid memory. You are just giving an example of the general idea of referencing an arbitrary memory location. I could do the same like this:unsigned int q = 123456;\n\n*(double*)(q) = 1.2;\nHere I am simply treating 123456 as the address of a double and write to it. Any number of things could happen: qdouble p; q = &p;qqThe way you set it up it is a bit more reasonable that the returned address points into a valid area of memory, as it will probably just be a little further down the stack, but it is still an invalid location that you cannot access in a deterministic fashion.Nobody will automatically check the semantic validity of memory addresses like that for you during normal program execution. However, a memory debugger such as valgrind will happily do this, so you should run your program through it and witness the errors.", "Did you compile your program with the optimiser enabled? The foo() function is quite simple and might have been inlined or replaced in the resulting code.But I agree with Mark B that the resulting behavior is undefined.", "Your problem has nothing to do with . In the code you show, the function main does not see the names in the function foo, so you can't access a in foo directly with  name outside foo.The problem you are having is why the program doesn't signal an error when referencing illegal memory. This is because C++ standards does not specify a very clear boundary between illegal memory and legal memory. Referencing something in popped out stack sometimes causes error and sometimes not. It depends. Don't count on this behavior. Assume it will always result in error when you program, but assume it will never signal error when you debug.", "You are just returning a memory address, it's allowed but probably an error.  Yes if you try to dereference that memory address you will have undefined behavior.int * ref () {\n\n int tmp = 100;\n return &tmp;\n}\n\nint main () {\n\n int * a = ref();\n //Up until this point there is defined results\n //You can even print the address returned\n // but yes probably a bug\n\n cout << *a << endl;//Undefined results\n}\n", "That's classic  that's been discussed here not two days ago -- search around the site for a bit. In a nutshell, you were lucky, but anything could have happened and your code is making invalid access to memory.", "This behavior is undefined, as Alex pointed out--in fact, most compilers will warn against doing this, because it's an easy way to get crashes.For an example of the kind of spooky behavior you are  to get, try this sample:int *a()\n{\n   int x = 5;\n   return &x;\n}\n\nvoid b( int *c )\n{\n   int y = 29;\n   *c = 123;\n   cout << \"y=\" << y << endl;\n}\n\nint main()\n{\n   b( a() );\n   return 0;\n}\nThis prints out \"y=123\", but your results may vary (really!). Your pointer is clobbering other, unrelated local variables.", "Pay attention to  all warnings . Do not only solve errors.\nGCC shows this Warning warning: address of local variable 'a' returned This is  power of C++. You should care about memory. With the -Werror flag, this warning becames an error and now you have to debug it.", "It works because the stack has not been altered (yet) since a was put there. \nCall a few other functions (which are also calling other functions) before accessing a again and you will probably not be so lucky anymore... ;-)", "You actually invoked undefined behaviour.Returning the address of a temporary works, but as temporaries are destroyed at the end of a function the results of accessing them will be undefined.So you did not modify a but rather the memory location where a once was. This difference is very similar to the difference between crashing and not crashing. ", "In typical compiler implementations, you can think of the code as \"print out the value of the memory block with adress that  occupied by a\". Also, if you add a new function invocation to a function that constains a local int it's a good chance that the value of a (or the memory address that a used to point to) changes. This happens because the stack will be overwritten with a new frame containing different data.However, this is  behaviour and you should not rely on it to work!", "It can, because a is a variable allocated temporarily for the lifetime of its scope (foo function). After you return from foo the memory is free and can be overwritten.What you're doing is described as . The result cannot be predicted.", "The things with correct (?) console output can change dramatically if you use ::printf but not cout. \nYou can play around with debugger within below code (tested on x86, 32-bit, MSVisual Studio):char* foo() \n{\n  char buf[10];\n  ::strcpy(buf, \"TEST\u201d);\n  return buf;\n}\n\nint main() \n{\n  char* s = foo();    //place breakpoint & check 's' varialbe here\n  ::printf(\"%s\\n\", s); \n}\n", "After returning from a function, all identifiers are destroyed instead of kept values in a memory location and we can not locate the values without having an identifier.But that location still contains the value stored by previous function.So, here function foo() is returning the address of a and a is destroyed after returning its address. And you can access the modified value through that returned address.Suppose a man hides money at a location and tells you the location. After some time, the man who had told you the money location dies. But still you have the access of that hidden money.", "It's 'Dirty' way of using memory addresses. When you return an address (pointer) you don't know whether it belongs to local scope of a function. It's just an address. Now that you invoked the 'foo' function, that address (memory location) of 'a' was already allocated there in the (safely, for now at least) addressable memory of your application (process). After the 'foo' function returned, the address of 'a' can be considered 'dirty' but it's there, not cleaned up, nor disturbed/modified by expressions in other part of program (in this specific case at least). A C/C++ compiler doesn't stop you from such 'dirty' access (might warn you though, if you care). You can safely use (update) any memory location that is in the data segment of your program instance (process) unless you protect the address by some means.", "Your code is very risky. You are creating a local variable (wich is considered destroyed after function ends) and you return the address of memory of that variable after it is destoyed.That means the memory address could be valid or not, and your code will be vulnerable to possible memory address issues (for example segmentation fault).This means that you are doing a very bad thing, becouse you are passing a memory address to a pointer wich is not trustable at all. Consider this example, instead, and test it:int * foo()\n{\n   int *x = new int;\n   *x = 5;\n   return x;\n}\n\nint main()\n{\n    int* p = foo();\n    std::cout << *p << \"\\n\"; //better to put a new-line in the output, IMO\n    *p = 8;\n    std::cout << *p;\n    delete p;\n    return 0;\n}\nUnlike your example, with this example you are:\n\n\n\n\n"]},
{"question": "Dynamically access object property using variable", "details": "I'm trying to access a property of an object using a dynamic name. Is this possible?const something = { bar: \"Foobar!\" };\nconst foo = 'bar';\nsomething.foo; // The idea is to access something.bar, getting \"Foobar!\"\n", "answers": ["I'm trying to access a property of an object using a dynamic name. Is this possible?const something = { bar: \"Foobar!\" };\nconst foo = 'bar';\nsomething.foo; // The idea is to access something.bar, getting \"Foobar!\"\n", "There are  of an object:\nsomething.bar\nsomething['bar']\nThe value between the brackets can be any expression. Therefore, if the property name is stored in a variable, you have to use bracket notation:var something = {\n  bar: 'foo'\n};\nvar foo = 'bar';\n\n// both x = something[foo] and something[foo] = x work as expected\nconsole.log(something[foo]);\nconsole.log(something.bar)", "This is my solution:function resolve(path, obj) {\n    return path.split('.').reduce(function(prev, curr) {\n        return prev ? prev[curr] : null\n    }, obj || self)\n}\nUsage examples:resolve(\"document.body.style.width\")\n// or\nresolve(\"style.width\", document.body)\n// or even use array indexes\n// (someObject has been defined in the question)\nresolve(\"part.0.size\", someObject) \n// returns null when intermediate properties are not defined:\nresolve('properties.that.do.not.exist', {hello:'world'})\n", "In javascript we can access with:\nfoo.bar\nfoo[someVar]foo[\"string\"]\nBut only second case allows to access properties dynamically:var foo = { pName1 : 1, pName2 : [1, {foo : bar }, 3] , ...}\n\nvar name = \"pName\"\nvar num  = 1;\n\nfoo[name + num]; // 1\n\n// -- \n\nvar a = 2;\nvar b = 1;\nvar c = \"foo\";\n\nfoo[name + a][b][c]; // bar\n", "Following is an ES6 example of how you can access the property of an object using a property name that has been dynamically generated by concatenating two strings. var suffix = \" name\";\n\nvar person = {\n    [\"first\" + suffix]: \"Nicholas\",\n    [\"last\" + suffix]: \"Zakas\"\n};\n\nconsole.log(person[\"first name\"]);      // \"Nicholas\"\nconsole.log(person[\"last name\"]);       // \"Zakas\"\nThis is called ", "You can achieve this in quite a few different ways.let foo = {\n    bar: 'Hello World'\n};\n\nfoo.bar;\nfoo['bar'];\nThe bracket notation is specially powerful as it let's you access a property based on a variable:let foo = {\n    bar: 'Hello World'\n};\n\nlet prop = 'bar';\n\nfoo[prop];\nThis can be extended to looping over every property of an object. This can be seem redundant due to newer JavaScript constructs such as for ... of ..., but helps illustrate a use case:let foo = {\n    bar: 'Hello World',\n    baz: 'How are you doing?',\n    last: 'Quite alright'\n};\n\nfor (let prop in foo.getOwnPropertyNames()) {\n    console.log(foo[prop]);\n}\nBoth dot and bracket notation also work as expected for nested objects:let foo = {\n    bar: {\n        baz: 'Hello World'\n    }\n};\n\nfoo.bar.baz;\nfoo['bar']['baz'];\nfoo.bar['baz'];\nfoo['bar'].baz;\nWe could also consider object destructuring as a means to access a property in an object, but as follows:let foo = {\n    bar: 'Hello World',\n    baz: 'How are you doing?',\n    last: 'Quite alright'\n};\n\nlet prop = 'last';\nlet { bar, baz, [prop]: customName } = foo;\n\n// bar = 'Hello World'\n// baz = 'How are you doing?'\n// customName = 'Quite alright'\n", "You can do it like this using Lodash get_.get(object, 'a[0].b.c');\n", "I have take comments below into consideration and agreed. Eval is to be avoided.Accessing root properties in object is easily achieved with obj[variable], but getting nested complicates thing. Not to write already written code I suggest to use lodash.get.Example// Accessing root property\nvar rootProp = 'rootPropert';\n_.get(object, rootProp, defaultValue);\n\n// Accessing nested property\nvar listOfNestedProperties = [var1, var2];\n_.get(object, listOfNestedProperties);\nLodash get can be used on different ways, here is link to the documentation ", "Whenever you need to access property dynamically you have to use square bracket for accessing property not \".\" operator\n const something = { bar: \"Foobar!\" };\r\nconst foo = 'bar';\r\n// something.foo; -- not correct way at it is expecting foo as proprty in  something={ foo: \"value\"};\r\n// correct way is  something[foo]\r\nalert( something[foo])", "I came across a case where  I wanted to pass the \"address\" of an object property as data to another function and populate the object (with AJAX), do lookup from address array, and display in that other function. I couldn't use dot notation without doing string acrobatics so I thought an array might be nice to pass instead. I ended-up doing something different anyway, but seemed related to this post.Here's a sample of a language file object like the one I wanted data from:const locs = {\n  \"audioPlayer\": {\n    \"controls\": {\n      \"start\": \"start\",\n      \"stop\": \"stop\"\n    },\n    \"heading\": \"Use controls to start and stop audio.\"\n  }\n}\nI wanted to be able to pass an array such as: [\"audioPlayer\", \"controls\", \"stop\"] to access the language text, \"stop\" in this case.I created this little function that looks-up the \"least specific\" (first) address parameter, and reassigns the returned object to itself. Then it is ready to look-up the next-most-specific address parameter if one exists.function getText(selectionArray, obj) {\n  selectionArray.forEach(key => {\n    obj = obj[key];\n  });\n  return obj;\n}\nusage:/* returns 'stop' */\nconsole.log(getText([\"audioPlayer\", \"controls\", \"stop\"], locs)); \n\n/* returns 'use controls to start and stop audio.' */\nconsole.log(getText([\"audioPlayer\", \"heading\"], locs)); \n", "It gets interesting when you have to pass parameters to this function as well. var obj = {method:function(p1,p2,p3){console.log(\"method:\",arguments)}}\n\nvar str = \"method('p1', 'p2', 'p3');\"\n\nvar match = str.match(/^\\s*(\\S+)\\((.*)\\);\\s*$/);\n\nvar func = match[1]\nvar parameters = match[2].split(',');\nfor(var i = 0; i < parameters.length; ++i) {\n  // clean up param begninning\n    parameters[i] = parameters[i].replace(/^\\s*['\"]?/,'');\n  // clean up param end\n  parameters[i] = parameters[i].replace(/['\"]?\\s*$/,'');\n}\n\nobj[func](parameters); // sends parameters as array\nobj[func].apply(this, parameters); // sends parameters as individual values\n", "For anyone looking to set the value of a nested variable, here is how to do it:const _ = require('lodash'); //import lodash module\n\nvar object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.set(object, 'a[0].b.c', 4);\nconsole.log(object.a[0].b.c);\n// => 4\nDocumentation: Also, documentation if you want to get a value: ", "This simple piece of code can check for deeply nested variable / value existence without having to check each variable along the way... var getValue = function( s, context ){\n    return Function.call( context || null, 'return ' + s )();\n}\nEx. - a deeply nested array of objects:a = [ \n    {\n      b : [\n          {\n             a : 1,\n             b : [\n                 {\n                    c : 1,\n                    d : 2   // we want to check for this\n                 }\n             ]\n           }\n      ]\n    } \n]\nInstead of :if(a && a[0] && a[0].b && a[0].b[0] && a[0].b[0].b && a[0].b[0].b[0] && a[0].b[0].b[0].d && a[0].b[0].b[0].d == 2 )  // true\nWe can now :if( getValue('a[0].b[0].b[0].d') == 2 ) // true\nCheers!", "I asked a question that kinda duplicated on this topic a while back, and after excessive research, and seeing a lot of information missing that should be here, I feel I have something valuable to add to this older post.\n\nlet properyValue = element.style['enter-a-property'];\nhowever I rarely go this route because it doesn't work on property values assigned via style-sheets. To give you an example, I'll demonstrate with a bit of pseudo code. let elem = document.getElementById('someDiv');\n let cssProp = elem.style['width'];\n\nUsing the code example above; if the width property of the div element that was stored in the 'elem' variable was styled in a CSS style-sheet, and not styled inside of its HTML tag, you are without a doubt going to get a return value of undefined stored inside of the cssProp variable. The undefined value occurs because in-order to get the correct value, the code written inside a CSS Style-Sheet needs to be computed in-order to get the value, therefore; you must use a method that will compute the value of the property who's value lies within the style-sheet.\n\nfunction getCssProp(){\n  let ele = document.getElementById(\"test\");\n  let cssProp = window.getComputedStyle(ele,null).getPropertyValue(\"width\");\n}\n\n This gives a good example, and lets you play with it, however, this link  talks about the getComputedValue function in detail, and should be read by any aspiring developer who isn't totally clear on this subject.\n\n$(selector).css(property,value)\n...does get, and does set. It is what I use, the only downside is you got to know JQuery, but this is honestly one of the very many good reasons that every Javascript Developer should learn JQuery, it just makes life easy, and offers methods, like this one, which is not available with standard Javascript.\nHope this helps someone!!!", "Finding Object by reference without, strings,\nNote make sure the object you pass in is cloned , i use cloneDeep from lodash for thatif object looks likeconst obj = {data: ['an Object',{person: {name: {first:'nick', last:'gray'} }]\npath looks likeconst objectPath = ['data',1,'person',name','last']\nthen call below method and it will return the sub object by path givenconst child = findObjectByPath(obj, objectPath)\nalert( child) // alerts \"last\"\n\n\nconst findObjectByPath = (objectIn: any, path: any[]) => {\n    let obj = objectIn\n    for (let i = 0; i <= path.length - 1; i++) {\n        const item = path[i]\n        // keep going up to the next parent\n        obj = obj[item] // this is by reference\n    }\n    return obj\n}\n", "You should use JSON.parse, take a look at const obj = JSON.parse('{ \"name\":\"John\", \"age\":30, \"city\":\"New York\"}')\nconsole.log(obj.name)\nconsole.log(obj.age)\n", "const something = { bar: \"Foobar!\" };\nconst foo = 'bar';\n\nsomething[\\`${foo}\\`];\n"]},
{"question": "What is the explicit promise construction antipattern and how do I avoid it?", "details": "I was writing code that does something that looks like:function getStuffDone(param) {           | function getStuffDone(param) {\n    var d = Q.defer(); /* or $q.defer */ |     return new Promise(function(resolve, reject) {\n    // or = new $.Deferred() etc.        |     // using a promise constructor\n    myPromiseFn(param+1)                 |         myPromiseFn(param+1)\n    .then(function(val) { /* or .done */ |         .then(function(val) {\n        d.resolve(val);                  |             resolve(val);\n    }).catch(function(err) { /* .fail */ |         }).catch(function(err) {\n        d.reject(err);                   |             reject(err);\n    });                                  |         });\n    return d.promise; /* or promise() */ |     });\n}                                        | }\nSomeone told me this is called the \"\" or the \"Promise\" respectively, what's bad about this code and why is this called an ?", "answers": ["I was writing code that does something that looks like:function getStuffDone(param) {           | function getStuffDone(param) {\n    var d = Q.defer(); /* or $q.defer */ |     return new Promise(function(resolve, reject) {\n    // or = new $.Deferred() etc.        |     // using a promise constructor\n    myPromiseFn(param+1)                 |         myPromiseFn(param+1)\n    .then(function(val) { /* or .done */ |         .then(function(val) {\n        d.resolve(val);                  |             resolve(val);\n    }).catch(function(err) { /* .fail */ |         }).catch(function(err) {\n        d.reject(err);                   |             reject(err);\n    });                                  |         });\n    return d.promise; /* or promise() */ |     });\n}                                        | }\nSomeone told me this is called the \"\" or the \"Promise\" respectively, what's bad about this code and why is this called an ?", "The  coined by  is a common anti-pattern people who are new to promises make, I've made it myself when I first used promises. The problem with the above code is that is fails to utilize the fact that promises chain.Promises can chain with .then and you can return promises directly. Your code in getStuffDone can be rewritten as:function getStuffDone(param){\n    return myPromiseFn(param+1); // much nicer, right?\n}\nPromises are all about making asynchronous code more readable and behave like synchronous code without hiding that fact. Promises represent an abstraction over a value of one time operation, they abstract the notion of a statement or expression in a programming language.You should only use deferred objects when you are  and can't do it automatically, or when you're writing aggregation functions that are easier expressed this way. Quoting Esailija:This is the most common anti-pattern. It is easy to fall into this when you don't really understand promises and think of them as glorified event emitters or callback utility. Let's recap: promises are about making asynchronous code retain most of the lost properties of synchronous code such as flat indentation and one exception channel.", "But the pattern works!Lucky you. Unfortunately, it probably doesn't, as you likely forgot some edge case. In more than half of the occurrences I've seen, the author has forgotten to take care of the error handler:return new Promise(function(resolve) {\n    getOtherPromise().then(function(result) {\n        resolve(result.property.example);\n    });\n})\nIf the other promise is rejected, this will happen unnoticed instead of being propagated to the new promise (where it would get handled) - and the new promise stays forever pending, which can induce leaks.The same thing happens in the case that your callback code causes an error - e.g. when result doesn't have a property and an exception is thrown. That would go unhandled and leave the new promise unresolved. In contrast, using .then() does automatically take care of both these scenarios, and rejects the new promise when an error happens: return getOtherPromise().then(function(result) {\n     return result.property.example;\n })\nThe deferred antipattern is not only cumbersome, but also . Using .then() for chaining is much safer.But I've handled everything!Really? Good. However, this will be pretty detailed and copious, especially if you use a promise library that supports other features like cancellation or message passing. Or maybe it will in the future, or you want to swap your library against a better one? You won't want to rewrite your code for that.The libraries' methods (then) do not only natively support all the features, they also might have certain optimisations in place. Using them will likely make your code faster, or at least allow to be optimised by future revisions of the library.So whenever you find yourself manually creating a Promise or Deferred and already existing promises are involved, . The Deferred antipattern is often applied by people who see promises [only] as an observer pattern - but : they are supposed to be composable. Every decent library has lots of easy-to-use functions for the composition of promises in every thinkable manner, taking care of all the low-level stuff you don't want to deal with.If you have found a need to compose some promises in a new way that is not supported by an existing helper function, writing your own function with unavoidable Deferreds should be your last option. Consider switching to a more featureful library, and/or file a bug against your current library. Its maintainer should be able to derive the composition from existing functions, implement a new helper function for you and/or help to identify the edge cases that need to be handled."]},
{"question": "List changes unexpectedly after assignment. How do I clone or copy it to prevent this?", "details": "While using new_list = my_list, any modifications to new_list changes my_list everytime. Why is this, and how can I clone or copy the list to prevent it?", "answers": ["While using new_list = my_list, any modifications to new_list changes my_list everytime. Why is this, and how can I clone or copy the list to prevent it?", "With new_list = my_list, you don't actually have two lists. The assignment just copies the reference to the list, not the actual list, so both new_list and my_list refer to the same list after the assignment.To actually copy the list, you have various possibilities:\nYou can use the builtin list.copy() method (available since Python 3.3):new_list = old_list.copy()\n\nYou can slice it: new_list = old_list[:]\n opinion (at least ) about this is, that . ;) (In his opinion, the next one is more readable).\nYou can use the built in list() function:new_list = list(old_list)\n\nYou can use generic copy.copy():import copy\nnew_list = copy.copy(old_list)\nThis is a little slower than list() because it has to find out the datatype of old_list first.\nIf the list contains objects and you want to copy them as well, use generic copy.deepcopy():import copy\nnew_list = copy.deepcopy(old_list)\nObviously the slowest and most memory-needing method, but sometimes unavoidable.\nimport copy\n\nclass Foo(object):\n    def __init__(self, val):\n         self.val = val\n\n    def __repr__(self):\n        return 'Foo({!r})'.format(self.val)\n\nfoo = Foo(1)\n\na = ['foo', foo]\nb = a.copy()\nc = a[:]\nd = list(a)\ne = copy.copy(a)\nf = copy.deepcopy(a)\n\n# edit orignal list and instance \na.append('baz')\nfoo.val = 5\n\nprint('original: %r\\nlist.copy(): %r\\nslice: %r\\nlist(): %r\\ncopy: %r\\ndeepcopy: %r'\n      % (a, b, c, d, e, f))\nResult:original: ['foo', Foo(5), 'baz']\nlist.copy(): ['foo', Foo(5)]\nslice: ['foo', Foo(5)]\nlist(): ['foo', Foo(5)]\ncopy: ['foo', Foo(5)]\ndeepcopy: ['foo', Foo(1)]\n", "Felix already provided an excellent answer, but I thought I'd do a speed comparison of the various methods:copy.deepcopy(old_list)Copy()Copy()for item in old_list: new_list.append(item)[i for i in old_list]copy.copy(old_list)list(old_list)new_list = []; new_list.extend(old_list)old_list[:]So the fastest is list slicing. But be aware that copy.copy(), list[:] and list(list), unlike copy.deepcopy() and the python version don't copy any lists, dictionaries and class instances in the list, so if the originals change, they will change in the copied list too and vice versa.(Here's the script if anyone's interested or wants to raise any issues:)from copy import deepcopy\n\nclass old_class:\n    def __init__(self):\n        self.blah = 'blah'\n\nclass new_class(object):\n    def __init__(self):\n        self.blah = 'blah'\n\ndignore = {str: None, unicode: None, int: None, type(None): None}\n\ndef Copy(obj, use_deepcopy=True):\n    t = type(obj)\n\n    if t in (list, tuple):\n        if t == tuple:\n            # Convert to a list if a tuple to \n            # allow assigning to when copying\n            is_tuple = True\n            obj = list(obj)\n        else: \n            # Otherwise just do a quick slice copy\n            obj = obj[:]\n            is_tuple = False\n\n        # Copy each item recursively\n        for x in xrange(len(obj)):\n            if type(obj[x]) in dignore:\n                continue\n            obj[x] = Copy(obj[x], use_deepcopy)\n\n        if is_tuple: \n            # Convert back into a tuple again\n            obj = tuple(obj)\n\n    elif t == dict: \n        # Use the fast shallow dict copy() method and copy any \n        # values which aren't immutable (like lists, dicts etc)\n        obj = obj.copy()\n        for k in obj:\n            if type(obj[k]) in dignore:\n                continue\n            obj[k] = Copy(obj[k], use_deepcopy)\n\n    elif t in dignore: \n        # Numeric or string/unicode? \n        # It's immutable, so ignore it!\n        pass \n\n    elif use_deepcopy: \n        obj = deepcopy(obj)\n    return obj\n\nif __name__ == '__main__':\n    import copy\n    from time import time\n\n    num_times = 100000\n    L = [None, 'blah', 1, 543.4532, \n         ['foo'], ('bar',), {'blah': 'blah'},\n         old_class(), new_class()]\n\n    t = time()\n    for i in xrange(num_times):\n        Copy(L)\n    print 'Custom Copy:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        Copy(L, use_deepcopy=False)\n    print 'Custom Copy Only Copying Lists/Tuples/Dicts (no classes):', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        copy.copy(L)\n    print 'copy.copy:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        copy.deepcopy(L)\n    print 'copy.deepcopy:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        L[:]\n    print 'list slicing [:]:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        list(L)\n    print 'list(L):', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        [i for i in L]\n    print 'list expression(L):', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        a = []\n        a.extend(L)\n    print 'list extend:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        a = []\n        for y in L:\n            a.append(y)\n    print 'list append:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        a = []\n        a.extend(i for i in L)\n    print 'generator expression extend:', time()-t\n", "I've  that Python 3.3+ list.copy() method, which should be as fast as slicing:newlist = old_list.copy()", "In Python 3, a shallow copy can be made with:a_copy = a_list.copy()\nIn Python 2 and 3, you can get a shallow copy with a full slice of the original:a_copy = a_list[:]\nThere are two semantic ways to copy a list. A shallow copy creates a new list of the same objects, a deep copy creates a new list containing new equivalent objects.A shallow copy only copies the list itself, which is a container of references to the objects in the list. If the objects contained themselves are mutable and one is changed, the change will be reflected in both lists. There are different ways to do this in Python 2 and 3. The Python 2 ways will also work in Python 3.In Python 2, the idiomatic way of making a shallow copy of a list is with a complete slice of the original:a_copy = a_list[:]\nYou can also accomplish the same thing by passing the list through the list constructor, a_copy = list(a_list)\nbut using the constructor is less efficient:>>> timeit\n>>> l = range(20)\n>>> min(timeit.repeat(lambda: l[:]))\n0.30504298210144043\n>>> min(timeit.repeat(lambda: list(l)))\n0.40698814392089844\nIn Python 3, lists get the list.copy method:a_copy = a_list.copy()\nIn Python 3.5:>>> import timeit\n>>> l = list(range(20))\n>>> min(timeit.repeat(lambda: l[:]))\n0.38448613602668047\n>>> min(timeit.repeat(lambda: list(l)))\n0.6309100328944623\n>>> min(timeit.repeat(lambda: l.copy()))\n0.38122922903858125\nmy_list is just a name that points to the actual list in memory. When you say new_list = my_list you're not making a copy, you're just adding another name that points at that original list in memory. We can have similar issues when we make copies of lists. >>> l = [[], [], []]\n>>> l_copy = l[:]\n>>> l_copy\n[[], [], []]\n>>> l_copy[0].append('foo')\n>>> l_copy\n[['foo'], [], []]\n>>> l\n[['foo'], [], []]\nThe list is just an array of pointers to the contents, so a shallow copy just copies the pointers, and so you have two different lists, but they have the same contents. To make copies of the contents, you need a deep copy.To make a deepcopycopy:import copy\na_deep_copy = copy.deepcopy(a_list)\nTo demonstrate how this allows us to make new sub-lists:>>> import copy\n>>> l\n[['foo'], [], []]\n>>> l_deep_copy = copy.deepcopy(l)\n>>> l_deep_copy[0].pop()\n'foo'\n>>> l_deep_copy\n[[], [], []]\n>>> l\n[['foo'], [], []]\nAnd so we see that the deep copied list is an entirely different list from the original. You could roll your own function - but don't. You're likely to create bugs you otherwise wouldn't have by using the standard library's deepcopy function.evalYou may see this used as a way to deepcopy, but don't do it:problematic_deep_copy = eval(repr(a_list))\nIn 64 bit Python 2.7:>>> import timeit\n>>> import copy\n>>> l = range(10)\n>>> min(timeit.repeat(lambda: copy.deepcopy(l)))\n27.55826997756958\n>>> min(timeit.repeat(lambda: eval(repr(l))))\n29.04534101486206\non 64 bit Python 3.5:>>> import timeit\n>>> import copy\n>>> l = list(range(10))\n>>> min(timeit.repeat(lambda: copy.deepcopy(l)))\n16.84255409205798\n>>> min(timeit.repeat(lambda: eval(repr(l))))\n34.813894678023644\n", "There are many answers already that tell you how to make a proper copy, but none of them say why your original 'copy' failed. Python doesn't store values in variables; it binds names to objects. Your original assignment took the object referred to by my_list and bound it to new_list as well. No matter which name you use there is still only one list, so changes made when referring to it as my_list will persist when referring to it as new_list. Each of the other answers to this question give you different ways of creating a new object to bind to new_list. Each element of a list acts like a name, in that each element binds non-exclusively to an object. A shallow copy creates a new list whose elements bind to the same objects as before.new_list = list(my_list)  # or my_list[:], but I prefer this syntax\n# is simply a shorter way of:\nnew_list = [element for element in my_list]\nTo take your list copy one step further, copy each object that your list refers to, and bind those element copies to a new list. import copy  \n# each element must have __copy__ defined for this...\nnew_list = [copy.copy(element) for element in my_list]\nThis is not yet a deep copy, because each element of a list may refer to other objects, just like the list is bound to its elements. To recursively copy every element in the list, and then each other object referred to by each element, and so on: perform a deep copy. import copy\n# each element must have __deepcopy__ defined for this...\nnew_list = copy.deepcopy(my_list)\nSee  for more information about corner cases in copying.", "Let's start from the beginning and explore this question.So let's suppose you have two lists:list_1=['01','98']\nlist_2=[['01','98']]\nAnd we have to copy both lists, now starting from the first list:So first let's try by setting the variable copy to our original list, list_1:copy=list_1\nNow if you are thinking copy copied the list_1, then you are wrong. The id function can show us if two variables can point to the same object. Let's try this:print(id(copy))\nprint(id(list_1))\nThe output is:4329485320\n4329485320\nBoth variables are the exact same argument. Are you surprised?So as we know python doesn't store anything in a variable, Variables are just referencing to the object and object store the value. Here object is a list but we created two references to that same object by two different variable names. This means that both variables are pointing to the same object, just with different names.When you do copy=list_1, it is actually doing:Here in the image list_1 and copy are two variable names but the object is same for both variable which is listSo if you try to modify copied list then it will modify the original list too because the list is only one there, you will modify that list no matter you do from the copied list or from the original list:copy[0]=\"modify\"\n\nprint(copy)\nprint(list_1)\noutput:['modify', '98']\n['modify', '98']\nSo it modified the original list :Now let's move onto a pythonic method for copying lists.copy_1=list_1[:]\nThis method fixes the first issue we had:print(id(copy_1))\nprint(id(list_1))\n\n4338792136\n4338791432\nSo as we can see our both list having different id and it means that both variables are pointing to different objects. So what actually going on here is:Now let's try to modify the list and let's see if we still face the previous problem:copy_1[0]=\"modify\"\n\nprint(list_1)\nprint(copy_1)\nThe output is:['01', '98']\n['modify', '98']\nAs you can see, it only modified the copied list. That means it worked.Do you think we're done? No. Let's try to copy our nested list.copy_2=list_2[:]\nlist_2 should reference to another object which is copy of list_2. Let's check:print(id((list_2)),id(copy_2))\nWe get the output:4330403592 4330403528\nNow we can assume both lists are pointing different object, so now let's try to modify it and let's see it is giving what we want:copy_2[0][1]=\"modify\"\n\nprint(list_2,copy_2)\nThis gives us the output:[['01', 'modify']] [['01', 'modify']]\nThis may seem a little bit confusing, because the same method we previously used worked. Let's try to understand this.When you do:copy_2=list_2[:]\nYou're only copying the outer list, not the inside list. We can use the id function once again to check this.print(id(copy_2[0]))\nprint(id(list_2[0]))\nThe output is:4329485832\n4329485832\nWhen we do copy_2=list_2[:], this happens:It creates the copy of list but only outer list copy, not the nested list copy, nested list is same for both variable, so if you try to modify the nested list then it will modify the original list too as the nested list object is same for both lists.What is the solution? The solution is the deepcopy function.from copy import deepcopy\ndeep=deepcopy(list_2)\nLet's check this:print(id((list_2)),id(deep))\n\n4322146056 4322148040\nBoth outer lists have different IDs, let's try this on the inner nested lists.print(id(deep[0]))\nprint(id(list_2[0]))\nThe output is:4322145992\n4322145800\nAs you can see both IDs are different, meaning we can assume that both nested lists are pointing different object now.This means when you do deep=deepcopy(list_2) what actually happens:Both nested lists are pointing different object and they have separate copy of nested list now.Now let's try to modify the nested list and see if it solved the previous issue or not:deep[0][1]=\"modify\"\nprint(list_2,deep)\nIt outputs:[['01', '98']] [['01', 'modify']]\nAs you can see, it didn't modify the original nested list, it only modified the copied list.", "Use thing[:]>>> a = [1,2]\n>>> b = a[:]\n>>> a += [3]\n>>> a\n[1, 2, 3]\n>>> b\n[1, 2]\n>>> \n", "Here are the timing results using Python 3.6.8. Keep in mind these times are relative to one another, not absolute.I stuck to only doing shallow copies, and also added some new methods that weren't possible in Python2, such as list.copy() (the Python3 ) and two forms of  (*new_list, = list and new_list = [*list]):METHOD                  TIME TAKEN\nb = [*a]                2.75180600000021\nb = a * 1               3.50215399999990\nb = a[:]                3.78278899999986  # Python2 winner (see above)\nb = a.copy()            4.20556500000020  # Python3 \"slice equivalent\" (see above)\nb = []; b.extend(a)     4.68069800000012\nb = a[0:len(a)]         6.84498999999959\n*b, = a                 7.54031799999984\nb = list(a)             7.75815899999997\nb = [i for i in a]      18.4886440000000\nb = copy.copy(a)        18.8254879999999\nb = []\nfor item in a:\n  b.append(item)        35.4729199999997\nWe can see the Python2 winner still does well, but doesn't edge out Python3 list.copy() by much, especially considering the superior readability of the latter.The dark horse is the unpacking and repacking method (b = [*a]), which is ~25% faster than raw slicing, and more than twice as fast as the other unpacking method (*b, = a).b = a * 1 also does surprisingly well. They all work for sliceable objects, a few work for any iterable, but only copy.copy() works for more general Python objects.Here is the testing code for interested parties ():import timeit\n\nCOUNT = 50000000\nprint(\"Array duplicating. Tests run\", COUNT, \"times\")\nsetup = 'a = [0,1,2,3,4,5,6,7,8,9]; import copy'\n\nprint(\"b = list(a)\\t\\t\", timeit.timeit(stmt='b = list(a)', setup=setup, number=COUNT))\nprint(\"b = copy.copy(a)\\t\", timeit.timeit(stmt='b = copy.copy(a)', setup=setup, number=COUNT))\nprint(\"b = a.copy()\\t\\t\", timeit.timeit(stmt='b = a.copy()', setup=setup, number=COUNT))\nprint(\"b = a[:]\\t\\t\", timeit.timeit(stmt='b = a[:]', setup=setup, number=COUNT))\nprint(\"b = a[0:len(a)]\\t\\t\", timeit.timeit(stmt='b = a[0:len(a)]', setup=setup, number=COUNT))\nprint(\"*b, = a\\t\\t\\t\", timeit.timeit(stmt='*b, = a', setup=setup, number=COUNT))\nprint(\"b = []; b.extend(a)\\t\", timeit.timeit(stmt='b = []; b.extend(a)', setup=setup, number=COUNT))\nprint(\"b = []; for item in a: b.append(item)\\t\", timeit.timeit(stmt='b = []\\nfor item in a:  b.append(item)', setup=setup, number=COUNT))\nprint(\"b = [i for i in a]\\t\", timeit.timeit(stmt='b = [i for i in a]', setup=setup, number=COUNT))\nprint(\"b = [*a]\\t\\t\", timeit.timeit(stmt='b = [*a]', setup=setup, number=COUNT))\nprint(\"b = a * 1\\t\\t\", timeit.timeit(stmt='b = a * 1', setup=setup, number=COUNT))\n", "Python's idiom for doing this is newList = oldList[:]", "All of the other contributors gave  answers, which work when you have a single dimension (leveled) list, however of the methods mentioned so far, only copy.deepcopy() works to clone/copy a list and not have it point to the nested list objects when you are working with multidimensional, nested lists (list of lists). While  refers to it in his answer, there is a little bit more to the issue and possibly a workaround using built-ins that might prove a faster alternative to deepcopy.While new_list = old_list[:], copy.copy(old_list)' and for Py3k old_list.copy() work for single-leveled lists, they revert to pointing at the list objects nested within the old_list and the new_list, and changes to one of the list objects are perpetuated in the other.As was pointed out by both  and  eval()copy.deepcopy()This means that for multidimensional lists, the only option is copy.deepcopy(). With that being said, it really isn't an option as the performance goes way south when you try to use it on a moderately sized multidimensional array.  I tried to timeit using a 42x42 array, not unheard of or even that large for bioinformatics applications, and I gave up on waiting for a response and just started typing my edit to this post.It would seem that the only real option then is to initialize multiple lists and work on them independently. If anyone has any other suggestions, for how to handle multidimensional list copying, it would be appreciated.As others have stated, there   performance issues using the copy module and copy.deepcopy .", "It surprises me that this hasn't been mentioned yet, so for the sake of completeness...You can perform list unpacking with the \"splat operator\": *, which will also copy elements of your list.old_list = [1, 2, 3]\n\nnew_list = [*old_list]\n\nnew_list.append(4)\nold_list == [1, 2, 3]\nnew_list == [1, 2, 3, 4]\nThe obvious downside to this method is that it is only available in Python 3.5+.Timing wise though, this appears to perform better than other common methods.x = [random.random() for _ in range(1000)]\n\n%timeit a = list(x)\n%timeit a = x.copy()\n%timeit a = x[:]\n\n%timeit a = [*x]\n\n#: 2.47 \u00b5s \u00b1 38.1 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n#: 2.47 \u00b5s \u00b1 54.6 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n#: 2.39 \u00b5s \u00b1 58.2 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\n#: 2.22 \u00b5s \u00b1 43.2 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n", "A very simple approach independent of python version was missing in already given answers which you can use most of the time (at least I do):new_list = my_list * 1       #Solution 1 when you are not using nested lists\nHowever, If my_list contains other containers (for eg. nested lists) you must use deepcopy as others suggested in the answers above from the copy library. For example:import copy\nnew_list = copy.deepcopy(my_list)   #Solution 2 when you are using nested lists\n.: If you don't want to copy elements use (aka shallow copy):new_list = my_list[:]\nLet's understand difference between Solution#1 and Solution #2>>> a = range(5)\n>>> b = a*1\n>>> a,b\n([0, 1, 2, 3, 4], [0, 1, 2, 3, 4])\n>>> a[2] = 55 \n>>> a,b\n([0, 1, 55, 3, 4], [0, 1, 2, 3, 4])\nAs you can see Solution #1 worked perfectly when we were not using the nested lists. Let's check what will happen when we apply solution #1 to nested lists.>>> from copy import deepcopy\n>>> a = [range(i,i+4) for i in range(3)]\n>>> a\n[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]\n>>> b = a*1\n>>> c = deepcopy(a)\n>>> for i in (a, b, c): print i   \n[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]\n[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]\n[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]\n>>> a[2].append('99')\n>>> for i in (a, b, c): print i   \n[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5, 99]]\n[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5, 99]]   #Solution#1 didn't work in nested list\n[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]       #Solution #2 - DeepCopy worked in nested list\n", "Note that there are some cases where if you have defined your own custom class and you want to keep the attributes then you should use copy.copy() or copy.deepcopy() rather than the alternatives, for example in Python 3:import copy\n\nclass MyList(list):\n    pass\n\nlst = MyList([1,2,3])\n\nlst.name = 'custom list'\n\nd = {\n'original': lst,\n'slicecopy' : lst[:],\n'lstcopy' : lst.copy(),\n'copycopy': copy.copy(lst),\n'deepcopy': copy.deepcopy(lst)\n}\n\n\nfor k,v in d.items():\n    print('lst: {}'.format(k), end=', ')\n    try:\n        name = v.name\n    except AttributeError:\n        name = 'NA'\n    print('name: {}'.format(name))\nOutputs:lst: original, name: custom list\nlst: slicecopy, name: NA\nlst: lstcopy, name: NA\nlst: copycopy, name: custom list\nlst: deepcopy, name: custom list\n", "new_list = my_list[:]\nnew_list = my_list\nTry to understand this. Let's say that my_list is in the heap memory at location X i.e. my_list is pointing to the X. Now by assigning new_list = my_list you're Letting new_list pointing to the X. This is known as shallow Copy.                                                              Now if you assign new_list = my_list[:] You're simply copying each object of my_list to new_list. This is known as Deep copy.The Other way you can do this are :\nnew_list = list(old_list)\nimport copy\nnew_list = copy.deepcopy(old_list)\n", "I wanted to post something a bit different then some of the other answers. Even though this is most likely not the most understandable, or fastest option, it provides a bit of an inside view of how deep copy works, as well as being another alternative option for deep copying. It doesn't really matter if my function has bugs, since the point of this is to show a way to copy objects like the question answers, but also to use this as a point to explain how deepcopy works at its core.At the core of any deep copy function is way to make a shallow copy. How? Simple. Any deep copy function only duplicates the containers of immutable objects. When you deepcopy a nested list, you are only duplicating the outer lists, not the mutable objects inside of the lists. You are only duplicating the containers. The same works for classes, too. When you deepcopy a class, you deepcopy all of its mutable attributes. So, how? How come you only have to copy the containers, like lists, dicts, tuples, iters, classes, and class instances?It's simple. A mutable object can't really be duplicated. It can never be changed, so it is only a single value. That means you never have to duplicate strings, numbers, bools, or any of those. But how would you duplicate the containers? Simple. You make just initialize a new container with all of the values. Deepcopy relies on recursion. It duplicates all the containers, even ones with containers inside of them, until no containers are left. A container is an immutable object.Once you know that, completely duplicating an object without any references is pretty easy. Here's a function for deepcopying basic data-types (wouldn't work for custom classes but you could always add that)def deepcopy(x):\n  immutables = (str, int, bool, float)\n  mutables = (list, dict, tuple)\n  if isinstance(x, immutables):\n    return x\n  elif isinstance(x, mutables):\n    if isinstance(x, tuple):\n      return tuple(deepcopy(list(x)))\n    elif isinstance(x, list):\n      return [deepcopy(y) for y in x]\n    elif isinstance(x, dict):\n      values = [deepcopy(y) for y in list(x.values())]\n      keys = list(x.keys())\n      return dict(zip(keys, values))\nPython's own built-in deepcopy is based around that example. The only difference is it supports other types, and also supports user-classes by duplicating the attributes into a new duplicate class, and also blocks infinite-recursion with a reference to an object it's already seen using a memo list or dictionary. And that's really it for making deep copies. At its core, making a deep copy is just making shallow copies. I hope this answer adds something to the question.Say you have this list: . The immutable numbers cannot be duplicated, but the other layer can. You can duplicate it using a list comprehension: Now, imagine you have this list: . This time, you want to make a function, which uses recursion to deep copy all layers of the list. Instead of the previous list comprehension:[x for x in _list]\nIt uses a new one for lists:[deepcopy_list(x) for x in _list]\nAnd  looks like this:def deepcopy_list(x):\n  if isinstance(x, (str, bool, float, int)):\n    return x\n  else:\n    return [deepcopy_list(y) for y in x]\nThen now you have a function which can deepcopy any list of  and even  to infinitely many layers using recursion. And there you have it, deepcopying.: Deepcopy uses recursion to duplicate objects, and merely returns the same immutable objects as before, as immutable objects cannot be duplicated. However, it deepcopies the most inner layers of mutable objects until it reaches the outermost mutable layer of an object.", "A slight practical perspective to look into memory through id and gc. >>> b = a = ['hell', 'word']\n>>> c = ['hell', 'word']\n\n>>> id(a), id(b), id(c)\n(4424020872, 4424020872, 4423979272) \n     |           |\n      -----------\n\n>>> id(a[0]), id(b[0]), id(c[0])\n(4424018328, 4424018328, 4424018328) # all referring to same 'hell'\n     |           |           |\n      -----------------------\n\n>>> id(a[0][0]), id(b[0][0]), id(c[0][0])\n(4422785208, 4422785208, 4422785208) # all referring to same 'h'\n     |           |           |\n      -----------------------\n\n>>> a[0] += 'o'\n>>> a,b,c\n(['hello', 'word'], ['hello', 'word'], ['hell', 'word'])  # b changed too\n>>> id(a[0]), id(b[0]), id(c[0])\n(4424018384, 4424018384, 4424018328) # augmented assignment changed a[0],b[0]\n     |           |\n      -----------\n\n>>> b = a = ['hell', 'word']\n>>> id(a[0]), id(b[0]), id(c[0])\n(4424018328, 4424018328, 4424018328) # the same hell\n     |           |           |\n      -----------------------\n\n>>> import gc\n>>> gc.get_referrers(a[0]) \n[['hell', 'word'], ['hell', 'word']]  # one copy belong to a,b, the another for c\n>>> gc.get_referrers(('hell'))\n[['hell', 'word'], ['hell', 'word'], ('hell', None)] # ('hello', None) \n", "Remember that in Python when you do:    list1 = ['apples','bananas','pineapples']\n    list2 = list1\nList2 isn't storing the actual list, but a reference to list1. So when you do anything to list1, list2 changes as well. use the copy module (not default, download on pip) to make an original copy of the list(copy.copy() for simple lists, copy.deepcopy() for nested ones). This makes a copy that doesn't change with the first list.", "This is because, the line new_list = my_list assigns a new reference to the variable my_list which is new_list\nThis is similar to the C code given below,int my_list[] = [1,2,3,4];\nint *new_list;\nnew_list = my_list;\nYou should use the copy module to create a new list byimport copy\nnew_list = copy.deepcopy(my_list)\n", "The deepcopy option is the only method that works for me:from copy import deepcopy\n\na = [   [ list(range(1, 3)) for i in range(3) ]   ]\nb = deepcopy(a)\nb[0][1]=[3]\nprint('Deep:')\nprint(a)\nprint(b)\nprint('-----------------------------')\na = [   [ list(range(1, 3)) for i in range(3) ]   ]\nb = a*1\nb[0][1]=[3]\nprint('*1:')\nprint(a)\nprint(b)\nprint('-----------------------------')\na = [   [ list(range(1, 3)) for i in range(3) ] ]\nb = a[:]\nb[0][1]=[3]\nprint('Vector copy:')\nprint(a)\nprint(b)\nprint('-----------------------------')\na = [   [ list(range(1, 3)) for i in range(3) ]  ]\nb = list(a)\nb[0][1]=[3]\nprint('List copy:')\nprint(a)\nprint(b)\nprint('-----------------------------')\na = [   [ list(range(1, 3)) for i in range(3) ]  ]\nb = a.copy()\nb[0][1]=[3]\nprint('.copy():')\nprint(a)\nprint(b)\nprint('-----------------------------')\na = [   [ list(range(1, 3)) for i in range(3) ]  ]\nb = a\nb[0][1]=[3]\nprint('Shallow:')\nprint(a)\nprint(b)\nprint('-----------------------------')\nleads to output of:Deep:\n[[[1, 2], [1, 2], [1, 2]]]\n[[[1, 2], [3], [1, 2]]]\n-----------------------------\n*1:\n[[[1, 2], [3], [1, 2]]]\n[[[1, 2], [3], [1, 2]]]\n-----------------------------\nVector copy:\n[[[1, 2], [3], [1, 2]]]\n[[[1, 2], [3], [1, 2]]]\n-----------------------------\nList copy:\n[[[1, 2], [3], [1, 2]]]\n[[[1, 2], [3], [1, 2]]]\n-----------------------------\n.copy():\n[[[1, 2], [3], [1, 2]]]\n[[[1, 2], [3], [1, 2]]]\n-----------------------------\nShallow:\n[[[1, 2], [3], [1, 2]]]\n[[[1, 2], [3], [1, 2]]]\n-----------------------------\n", "There is a simple technique to handle this.Code:number=[1,2,3,4,5,6] #Original list\nanother=[] #another empty list\nfor a in number: #here I am declaring variable (a) as an item in the list (number)\n    another.append(a) #here we are adding the items of list (number) to list (another)\nprint(another)\nOutput:>>> [1,2,3,4,5,6]\nI hope this was useful for your query.", "There is another way of copying a list that was not listed until now : adding an empty list : l2 = l + [].\nI tested it with Python 3.8 :l = [1,2,3]\nl2 = l + []\nprint(l,l2)\nl[0] = 'a'\nprint(l,l2)\nNot the best answer but it works."]},
{"question": "How to join (merge) data frames (inner, outer, left, right)", "details": "Given two data frames:df1 = data.frame(CustomerId = c(1:6), Product = c(rep(\"Toaster\", 3), rep(\"Radio\", 3)))\ndf2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep(\"Alabama\", 2), rep(\"Ohio\", 1)))\n\ndf1\n#  CustomerId Product\n#           1 Toaster\n#           2 Toaster\n#           3 Toaster\n#           4   Radio\n#           5   Radio\n#           6   Radio\n\ndf2\n#  CustomerId   State\n#           2 Alabama\n#           4 Alabama\n#           6    Ohio\nHow can I do database style, i.e., ? That is, how do I get:\n\n\n\n\nHow can I do a SQL style select statement?", "answers": ["Given two data frames:df1 = data.frame(CustomerId = c(1:6), Product = c(rep(\"Toaster\", 3), rep(\"Radio\", 3)))\ndf2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep(\"Alabama\", 2), rep(\"Ohio\", 1)))\n\ndf1\n#  CustomerId Product\n#           1 Toaster\n#           2 Toaster\n#           3 Toaster\n#           4   Radio\n#           5   Radio\n#           6   Radio\n\ndf2\n#  CustomerId   State\n#           2 Alabama\n#           4 Alabama\n#           6    Ohio\nHow can I do database style, i.e., ? That is, how do I get:\ndf1df2\ndf1df2\ndf1df2\ndf1df2\nHow can I do a SQL style select statement?", "By using the merge function and its optional parameters: merge(df1, df2) will work for these examples because R automatically joins the frames by common variable names, but you would most likely want to specify merge(df1, df2, by = \"CustomerId\") to make sure that you were matching on only the fields you desired.  You can also use the by.x and by.y parameters if the matching variables have different names in the different data frames. merge(x = df1, y = df2, by = \"CustomerId\", all = TRUE) merge(x = df1, y = df2, by = \"CustomerId\", all.x = TRUE) merge(x = df1, y = df2, by = \"CustomerId\", all.y = TRUE) merge(x = df1, y = df2, by = NULL)  I think it's almost always best to explicitly state the identifiers on which you want to merge; it's safer if the input data.frames change unexpectedly and easier to read later on.You can merge on multiple columns by giving by a vector, e.g., by = c(\"CustomerId\", \"OrderId\"). If the column names to merge on are not the same, you can specify, e.g., by.x = \"CustomerId_in_df1\", by.y = \"CustomerId_in_df2\" where CustomerId_in_df1 is the name of the column in the first data frame and CustomerId_in_df2 is the name of the column in the second data frame. (These can also be vectors if you need to merge on multiple columns.)", "I would recommend checking out , which allows you to express these operations in SQL.library(sqldf)\n\n## inner join\ndf3 <- sqldf(\"SELECT CustomerId, Product, State \n              FROM df1\n              JOIN df2 USING(CustomerID)\")\n\n## left join (substitute 'right' for right join)\ndf4 <- sqldf(\"SELECT CustomerId, Product, State \n              FROM df1\n              LEFT JOIN df2 USING(CustomerID)\")\nI find the SQL syntax to be simpler and more natural than its R equivalent (but this may just reflect my RDBMS bias).See  for more information on joins. ", "There is the  approach for an inner join, which is very time and memory efficient (and necessary for some larger data.frames):library(data.table)\n\ndt1 <- data.table(df1, key = \"CustomerId\") \ndt2 <- data.table(df2, key = \"CustomerId\")\n\njoined.dt1.dt.2 <- dt1[dt2]\nmerge also works on data.tables (as it is generic and calls merge.data.table)merge(dt1, dt2)\ndata.table documented on stackoverflow:\n\n\n\nYet another option is the join function found in the  packagelibrary(plyr)\n\njoin(df1, df2,\n     type = \"inner\")\n\n#   CustomerId Product   State\n# 1          2 Toaster Alabama\n# 2          4   Radio Alabama\n# 3          6   Radio    Ohio\nOptions for type: inner, left, right, full.From ?join: Unlike merge, [join] preserves the order of x no matter what join type is used.", "You can do joins as well using Hadley Wickham's awesome  package.  library(dplyr)\n\n#make sure that CustomerId cols are both type numeric\n#they ARE not using the provided code in question and dplyr will complain\ndf1$CustomerId <- as.numeric(df1$CustomerId)\ndf2$CustomerId <- as.numeric(df2$CustomerId)\n#inner\ninner_join(df1, df2)\n\n#left outer\nleft_join(df1, df2)\n\n#right outer\nright_join(df1, df2)\n\n#alternate right outer\nleft_join(df2, df1)\n\n#full join\nfull_join(df1, df2)\nsemi_join(df1, df2) #keep only observations in df1 that match in df2.\nanti_join(df1, df2) #drops all observations in df1 that match in df2.\n", "There are some good examples of doing this over at the . I'll steal a couple here:Since your keys are named the same the short way to do an inner join is merge():merge(df1,df2)\na full inner join (all records from both tables) can be created with the \"all\" keyword:merge(df1,df2, all=TRUE)\na left outer join of df1 and df2:merge(df1,df2, all.x=TRUE)\na right outer join of df1 and df2:merge(df1,df2, all.y=TRUE)\nyou can flip 'em, slap 'em and rub 'em down to get the other two outer joins you asked about :)A left outer join with df1 on the left using a subscript method would be:df1[,\"State\"]<-df2[df1[ ,\"Product\"], \"State\"]\nThe other combination of outer joins can be created by mungling the left outer join subscript example. (yeah, I know that's the equivalent of saying \"I'll leave it as an exercise for the reader...\")", "New in 2014: Especially if you're also interested in data manipulation in general (including sorting, filtering, subsetting, summarizing etc.), you should definitely take a look at dplyr, which comes with a variety of functions all designed to facilitate your work specifically with data frames and certain other database types. It even offers quite an elaborate SQL interface, and even a function to convert (most) SQL code directly into R.The four joining-related functions in the dplyr package are (to quote):\ninner_join(x, y, by = NULL, copy = FALSE, ...)\nleft_join(x, y, by = NULL, copy = FALSE, ...)\nsemi_join(x, y, by = NULL, copy = FALSE, ...)\nanti_join(x, y, by = NULL, copy = FALSE, ...)\nIt's all  in great detail.Selecting columns can be done by select(df,\"column\"). If that's not SQL-ish enough for you, then there's the sql() function, into which you can enter SQL code as-is, and it will do the operation you specified just like you were writing in R all along (for more information, please refer to the ). For example, if applied correctly, sql(\"SELECT * FROM hflights\") will select all the columns from the \"hflights\" dplyr table (a \"tbl\").", "Update on data.table methods for joining datasets. See below examples for each type of join. There are two methods, one from [.data.table when passing second data.table as the first argument to subset, another way is to use merge function which dispatches to fast data.table method.  df1 = data.frame(CustomerId = c(1:6), Product = c(rep(\"Toaster\", 3), rep(\"Radio\", 3)))\ndf2 = data.frame(CustomerId = c(2L, 4L, 7L), State = c(rep(\"Alabama\", 2), rep(\"Ohio\", 1))) # one value changed to show full outer join\n\nlibrary(data.table)\n\ndt1 = as.data.table(df1)\ndt2 = as.data.table(df2)\nsetkey(dt1, CustomerId)\nsetkey(dt2, CustomerId)\n# right outer join keyed data.tables\ndt1[dt2]\n\nsetkey(dt1, NULL)\nsetkey(dt2, NULL)\n# right outer join unkeyed data.tables - use `on` argument\ndt1[dt2, on = \"CustomerId\"]\n\n# left outer join - swap dt1 with dt2\ndt2[dt1, on = \"CustomerId\"]\n\n# inner join - use `nomatch` argument\ndt1[dt2, nomatch=NULL, on = \"CustomerId\"]\n\n# anti join - use `!` operator\ndt1[!dt2, on = \"CustomerId\"]\n\n# inner join - using merge method\nmerge(dt1, dt2, by = \"CustomerId\")\n\n# full outer join\nmerge(dt1, dt2, by = \"CustomerId\", all = TRUE)\n\n# see ?merge.data.table arguments for other cases\nBelow benchmark tests base R, sqldf, dplyr and data.table.\nBenchmark tests unkeyed/unindexed datasets.\nBenchmark is performed on 50M-1 rows datasets, there are 50M-2 common values on join column so each scenario (inner, left, right, full) can be tested and join is still not trivial to perform. It is type of join which well stress join algorithms. Timings are as of sqldf:0.4.11, dplyr:0.7.8, data.table:1.12.0.  # inner\nUnit: seconds\n   expr       min        lq      mean    median        uq       max neval\n   base 111.66266 111.66266 111.66266 111.66266 111.66266 111.66266     1\n  sqldf 624.88388 624.88388 624.88388 624.88388 624.88388 624.88388     1\n  dplyr  51.91233  51.91233  51.91233  51.91233  51.91233  51.91233     1\n     DT  10.40552  10.40552  10.40552  10.40552  10.40552  10.40552     1\n# left\nUnit: seconds\n   expr        min         lq       mean     median         uq        max \n   base 142.782030 142.782030 142.782030 142.782030 142.782030 142.782030     \n  sqldf 613.917109 613.917109 613.917109 613.917109 613.917109 613.917109     \n  dplyr  49.711912  49.711912  49.711912  49.711912  49.711912  49.711912     \n     DT   9.674348   9.674348   9.674348   9.674348   9.674348   9.674348       \n# right\nUnit: seconds\n   expr        min         lq       mean     median         uq        max\n   base 122.366301 122.366301 122.366301 122.366301 122.366301 122.366301     \n  sqldf 611.119157 611.119157 611.119157 611.119157 611.119157 611.119157     \n  dplyr  50.384841  50.384841  50.384841  50.384841  50.384841  50.384841     \n     DT   9.899145   9.899145   9.899145   9.899145   9.899145   9.899145     \n# full\nUnit: seconds\n  expr       min        lq      mean    median        uq       max neval\n  base 141.79464 141.79464 141.79464 141.79464 141.79464 141.79464     1\n dplyr  94.66436  94.66436  94.66436  94.66436  94.66436  94.66436     1\n    DT  21.62573  21.62573  21.62573  21.62573  21.62573  21.62573     1\nBe aware there are other types of joins you can perform using data.table:\n  -  - if you want to lookup values from another table to your main table\n  -  - if you want to aggregate on key you are joining you do not have to materialize all join results\n  -  - if you want to merge by ranges\n  -  - if you want merge to be able to match to values from preceeding/following rows by rolling them forward or backward\n  -  - if your join condition is non-equal  Code to reproduce:library(microbenchmark)\nlibrary(sqldf)\nlibrary(dplyr)\nlibrary(data.table)\nsapply(c(\"sqldf\",\"dplyr\",\"data.table\"), packageVersion, simplify=FALSE)\n\nn = 5e7\nset.seed(108)\ndf1 = data.frame(x=sample(n,n-1L), y1=rnorm(n-1L))\ndf2 = data.frame(x=sample(n,n-1L), y2=rnorm(n-1L))\ndt1 = as.data.table(df1)\ndt2 = as.data.table(df2)\n\nmb = list()\n# inner join\nmicrobenchmark(times = 1L,\n               base = merge(df1, df2, by = \"x\"),\n               sqldf = sqldf(\"SELECT * FROM df1 INNER JOIN df2 ON df1.x = df2.x\"),\n               dplyr = inner_join(df1, df2, by = \"x\"),\n               DT = dt1[dt2, nomatch=NULL, on = \"x\"]) -> mb$inner\n\n# left outer join\nmicrobenchmark(times = 1L,\n               base = merge(df1, df2, by = \"x\", all.x = TRUE),\n               sqldf = sqldf(\"SELECT * FROM df1 LEFT OUTER JOIN df2 ON df1.x = df2.x\"),\n               dplyr = left_join(df1, df2, by = c(\"x\"=\"x\")),\n               DT = dt2[dt1, on = \"x\"]) -> mb$left\n\n# right outer join\nmicrobenchmark(times = 1L,\n               base = merge(df1, df2, by = \"x\", all.y = TRUE),\n               sqldf = sqldf(\"SELECT * FROM df2 LEFT OUTER JOIN df1 ON df2.x = df1.x\"),\n               dplyr = right_join(df1, df2, by = \"x\"),\n               DT = dt1[dt2, on = \"x\"]) -> mb$right\n\n# full outer join\nmicrobenchmark(times = 1L,\n               base = merge(df1, df2, by = \"x\", all = TRUE),\n               dplyr = full_join(df1, df2, by = \"x\"),\n               DT = merge(dt1, dt2, by = \"x\", all = TRUE)) -> mb$full\n\nlapply(mb, print) -> nul\n", "dplyr since 0.4 implemented all those joins including outer_join, but it was worth noting that outer_join Join-related :\n\n\n\n\n\n\n\n\n\n (4/2014)\n\n\n\n\n\nWorkarounds per hadley's comments in that issue:\n\n\n", "For the case of a left join with a 0..*:0..1 cardinality or a right join with a 0..1:0..* cardinality it is possible to assign in-place the unilateral columns from the joiner (the 0..1 table) directly onto the joinee (the 0..* table), and thereby avoid the creation of an entirely new table of data. This requires matching the key columns from the joinee into the joiner and indexing+ordering the joiner's rows accordingly for the assignment.If the key is a single column, then we can use a single call to match() to do the matching. This is the case I'll cover in this answer.Here's an example based on the OP, except I've added an extra row to df2 with an id of 7 to test the case of a non-matching key in the joiner. This is effectively df1 left join df2:df1 <- data.frame(CustomerId=1:6,Product=c(rep('Toaster',3L),rep('Radio',3L)));\ndf2 <- data.frame(CustomerId=c(2L,4L,6L,7L),State=c(rep('Alabama',2L),'Ohio','Texas'));\ndf1[names(df2)[-1L]] <- df2[match(df1[,1L],df2[,1L]),-1L];\ndf1;\n##   CustomerId Product   State\n## 1          1 Toaster    <NA>\n## 2          2 Toaster Alabama\n## 3          3 Toaster    <NA>\n## 4          4   Radio Alabama\n## 5          5   Radio    <NA>\n## 6          6   Radio    Ohio\nIn the above I hard-coded an assumption that the key column is the first column of both input tables. I would argue that, in general, this is not an unreasonable assumption, since, if you have a data.frame with a key column, it would be strange if it had not been set up as the first column of the data.frame from the outset. And you can always reorder the columns to make it so. An advantageous consequence of this assumption is that the name of the key column does not have to be hard-coded, although I suppose it's just replacing one assumption with another. Concision is another advantage of integer indexing, as well as speed. In the benchmarks below I'll change the implementation to use string name indexing to match the competing implementations.I think this is a particularly appropriate solution if you have several tables that you want to left join against a single large table. Repeatedly rebuilding the entire table for each merge would be unnecessary and inefficient.On the other hand, if you need the joinee to remain unaltered through this operation for whatever reason, then this solution cannot be used, since it modifies the joinee directly. Although in that case you could simply make a copy and perform the in-place assignment(s) on the copy.As a side note, I briefly looked into possible matching solutions for multicolumn keys. Unfortunately, the only matching solutions I found were:\nmatch(interaction(df1$a,df1$b),interaction(df2$a,df2$b))paste()\nouter(df1$a,df2$a,`==`) & outer(df1$b,df2$b,`==`)\nmerge()\nFor example, see , , , and the dupe of this question where I originally came up with the in-place solution, .I decided to do my own benchmarking to see how the in-place assignment approach compares to the other solutions that have been offered in this question.Testing code:library(microbenchmark);\nlibrary(data.table);\nlibrary(sqldf);\nlibrary(plyr);\nlibrary(dplyr);\n\nsolSpecs <- list(\n    merge=list(testFuncs=list(\n        inner=function(df1,df2,key) merge(df1,df2,key),\n        left =function(df1,df2,key) merge(df1,df2,key,all.x=T),\n        right=function(df1,df2,key) merge(df1,df2,key,all.y=T),\n        full =function(df1,df2,key) merge(df1,df2,key,all=T)\n    )),\n    data.table.unkeyed=list(argSpec='data.table.unkeyed',testFuncs=list(\n        inner=function(dt1,dt2,key) dt1[dt2,on=key,nomatch=0L,allow.cartesian=T],\n        left =function(dt1,dt2,key) dt2[dt1,on=key,allow.cartesian=T],\n        right=function(dt1,dt2,key) dt1[dt2,on=key,allow.cartesian=T],\n        full =function(dt1,dt2,key) merge(dt1,dt2,key,all=T,allow.cartesian=T) ## calls merge.data.table()\n    )),\n    data.table.keyed=list(argSpec='data.table.keyed',testFuncs=list(\n        inner=function(dt1,dt2) dt1[dt2,nomatch=0L,allow.cartesian=T],\n        left =function(dt1,dt2) dt2[dt1,allow.cartesian=T],\n        right=function(dt1,dt2) dt1[dt2,allow.cartesian=T],\n        full =function(dt1,dt2) merge(dt1,dt2,all=T,allow.cartesian=T) ## calls merge.data.table()\n    )),\n    sqldf.unindexed=list(testFuncs=list( ## note: must pass connection=NULL to avoid running against the live DB connection, which would result in collisions with the residual tables from the last query upload\n        inner=function(df1,df2,key) sqldf(paste0('select * from df1 inner join df2 using(',paste(collapse=',',key),')'),connection=NULL),\n        left =function(df1,df2,key) sqldf(paste0('select * from df1 left join df2 using(',paste(collapse=',',key),')'),connection=NULL),\n        right=function(df1,df2,key) sqldf(paste0('select * from df2 left join df1 using(',paste(collapse=',',key),')'),connection=NULL) ## can't do right join proper, not yet supported; inverted left join is equivalent\n        ##full =function(df1,df2,key) sqldf(paste0('select * from df1 full join df2 using(',paste(collapse=',',key),')'),connection=NULL) ## can't do full join proper, not yet supported; possible to hack it with a union of left joins, but too unreasonable to include in testing\n    )),\n    sqldf.indexed=list(testFuncs=list( ## important: requires an active DB connection with preindexed main.df1 and main.df2 ready to go; arguments are actually ignored\n        inner=function(df1,df2,key) sqldf(paste0('select * from main.df1 inner join main.df2 using(',paste(collapse=',',key),')')),\n        left =function(df1,df2,key) sqldf(paste0('select * from main.df1 left join main.df2 using(',paste(collapse=',',key),')')),\n        right=function(df1,df2,key) sqldf(paste0('select * from main.df2 left join main.df1 using(',paste(collapse=',',key),')')) ## can't do right join proper, not yet supported; inverted left join is equivalent\n        ##full =function(df1,df2,key) sqldf(paste0('select * from main.df1 full join main.df2 using(',paste(collapse=',',key),')')) ## can't do full join proper, not yet supported; possible to hack it with a union of left joins, but too unreasonable to include in testing\n    )),\n    plyr=list(testFuncs=list(\n        inner=function(df1,df2,key) join(df1,df2,key,'inner'),\n        left =function(df1,df2,key) join(df1,df2,key,'left'),\n        right=function(df1,df2,key) join(df1,df2,key,'right'),\n        full =function(df1,df2,key) join(df1,df2,key,'full')\n    )),\n    dplyr=list(testFuncs=list(\n        inner=function(df1,df2,key) inner_join(df1,df2,key),\n        left =function(df1,df2,key) left_join(df1,df2,key),\n        right=function(df1,df2,key) right_join(df1,df2,key),\n        full =function(df1,df2,key) full_join(df1,df2,key)\n    )),\n    in.place=list(testFuncs=list(\n        left =function(df1,df2,key) { cns <- setdiff(names(df2),key); df1[cns] <- df2[match(df1[,key],df2[,key]),cns]; df1; },\n        right=function(df1,df2,key) { cns <- setdiff(names(df1),key); df2[cns] <- df1[match(df2[,key],df1[,key]),cns]; df2; }\n    ))\n);\n\ngetSolTypes <- function() names(solSpecs);\ngetJoinTypes <- function() unique(unlist(lapply(solSpecs,function(x) names(x$testFuncs))));\ngetArgSpec <- function(argSpecs,key=NULL) if (is.null(key)) argSpecs$default else argSpecs[[key]];\n\ninitSqldf <- function() {\n    sqldf(); ## creates sqlite connection on first run, cleans up and closes existing connection otherwise\n    if (exists('sqldfInitFlag',envir=globalenv(),inherits=F) && sqldfInitFlag) { ## false only on first run\n        sqldf(); ## creates a new connection\n    } else {\n        assign('sqldfInitFlag',T,envir=globalenv()); ## set to true for the one and only time\n    }; ## end if\n    invisible();\n}; ## end initSqldf()\n\nsetUpBenchmarkCall <- function(argSpecs,joinType,solTypes=getSolTypes(),env=parent.frame()) {\n    ## builds and returns a list of expressions suitable for passing to the list argument of microbenchmark(), and assigns variables to resolve symbol references in those expressions\n    callExpressions <- list();\n    nms <- character();\n    for (solType in solTypes) {\n        testFunc <- solSpecs[[solType]]$testFuncs[[joinType]];\n        if (is.null(testFunc)) next; ## this join type is not defined for this solution type\n        testFuncName <- paste0('tf.',solType);\n        assign(testFuncName,testFunc,envir=env);\n        argSpecKey <- solSpecs[[solType]]$argSpec;\n        argSpec <- getArgSpec(argSpecs,argSpecKey);\n        argList <- setNames(nm=names(argSpec$args),vector('list',length(argSpec$args)));\n        for (i in seq_along(argSpec$args)) {\n            argName <- paste0('tfa.',argSpecKey,i);\n            assign(argName,argSpec$args[[i]],envir=env);\n            argList[[i]] <- if (i%in%argSpec$copySpec) call('copy',as.symbol(argName)) else as.symbol(argName);\n        }; ## end for\n        callExpressions[[length(callExpressions)+1L]] <- do.call(call,c(list(testFuncName),argList),quote=T);\n        nms[length(nms)+1L] <- solType;\n    }; ## end for\n    names(callExpressions) <- nms;\n    callExpressions;\n}; ## end setUpBenchmarkCall()\n\nharmonize <- function(res) {\n    res <- as.data.frame(res); ## coerce to data.frame\n    for (ci in which(sapply(res,is.factor))) res[[ci]] <- as.character(res[[ci]]); ## coerce factor columns to character\n    for (ci in which(sapply(res,is.logical))) res[[ci]] <- as.integer(res[[ci]]); ## coerce logical columns to integer (works around sqldf quirk of munging logicals to integers)\n    ##for (ci in which(sapply(res,inherits,'POSIXct'))) res[[ci]] <- as.double(res[[ci]]); ## coerce POSIXct columns to double (works around sqldf quirk of losing POSIXct class) ----- POSIXct doesn't work at all in sqldf.indexed\n    res <- res[order(names(res))]; ## order columns\n    res <- res[do.call(order,res),]; ## order rows\n    res;\n}; ## end harmonize()\n\ncheckIdentical <- function(argSpecs,solTypes=getSolTypes()) {\n    for (joinType in getJoinTypes()) {\n        callExpressions <- setUpBenchmarkCall(argSpecs,joinType,solTypes);\n        if (length(callExpressions)<2L) next;\n        ex <- harmonize(eval(callExpressions[[1L]]));\n        for (i in seq(2L,len=length(callExpressions)-1L)) {\n            y <- harmonize(eval(callExpressions[[i]]));\n            if (!isTRUE(all.equal(ex,y,check.attributes=F))) {\n                ex <<- ex;\n                y <<- y;\n                solType <- names(callExpressions)[i];\n                stop(paste0('non-identical: ',solType,' ',joinType,'.'));\n            }; ## end if\n        }; ## end for\n    }; ## end for\n    invisible();\n}; ## end checkIdentical()\n\ntestJoinType <- function(argSpecs,joinType,solTypes=getSolTypes(),metric=NULL,times=100L) {\n    callExpressions <- setUpBenchmarkCall(argSpecs,joinType,solTypes);\n    bm <- microbenchmark(list=callExpressions,times=times);\n    if (is.null(metric)) return(bm);\n    bm <- summary(bm);\n    res <- setNames(nm=names(callExpressions),bm[[metric]]);\n    attr(res,'unit') <- attr(bm,'unit');\n    res;\n}; ## end testJoinType()\n\ntestAllJoinTypes <- function(argSpecs,solTypes=getSolTypes(),metric=NULL,times=100L) {\n    joinTypes <- getJoinTypes();\n    resList <- setNames(nm=joinTypes,lapply(joinTypes,function(joinType) testJoinType(argSpecs,joinType,solTypes,metric,times)));\n    if (is.null(metric)) return(resList);\n    units <- unname(unlist(lapply(resList,attr,'unit')));\n    res <- do.call(data.frame,c(list(join=joinTypes),setNames(nm=solTypes,rep(list(rep(NA_real_,length(joinTypes))),length(solTypes))),list(unit=units,stringsAsFactors=F)));\n    for (i in seq_along(resList)) res[i,match(names(resList[[i]]),names(res))] <- resList[[i]];\n    res;\n}; ## end testAllJoinTypes()\n\ntestGrid <- function(makeArgSpecsFunc,sizes,overlaps,solTypes=getSolTypes(),joinTypes=getJoinTypes(),metric='median',times=100L) {\n\n    res <- expand.grid(size=sizes,overlap=overlaps,joinType=joinTypes,stringsAsFactors=F);\n    res[solTypes] <- NA_real_;\n    res$unit <- NA_character_;\n    for (ri in seq_len(nrow(res))) {\n\n        size <- res$size[ri];\n        overlap <- res$overlap[ri];\n        joinType <- res$joinType[ri];\n\n        argSpecs <- makeArgSpecsFunc(size,overlap);\n\n        checkIdentical(argSpecs,solTypes);\n\n        cur <- testJoinType(argSpecs,joinType,solTypes,metric,times);\n        res[ri,match(names(cur),names(res))] <- cur;\n        res$unit[ri] <- attr(cur,'unit');\n\n    }; ## end for\n\n    res;\n\n}; ## end testGrid()\nHere's a benchmark of the example based on the OP that I demonstrated earlier:## OP's example, supplemented with a non-matching row in df2\nargSpecs <- list(\n    default=list(copySpec=1:2,args=list(\n        df1 <- data.frame(CustomerId=1:6,Product=c(rep('Toaster',3L),rep('Radio',3L))),\n        df2 <- data.frame(CustomerId=c(2L,4L,6L,7L),State=c(rep('Alabama',2L),'Ohio','Texas')),\n        'CustomerId'\n    )),\n    data.table.unkeyed=list(copySpec=1:2,args=list(\n        as.data.table(df1),\n        as.data.table(df2),\n        'CustomerId'\n    )),\n    data.table.keyed=list(copySpec=1:2,args=list(\n        setkey(as.data.table(df1),CustomerId),\n        setkey(as.data.table(df2),CustomerId)\n    ))\n);\n## prepare sqldf\ninitSqldf();\nsqldf('create index df1_key on df1(CustomerId);'); ## upload and create an sqlite index on df1\nsqldf('create index df2_key on df2(CustomerId);'); ## upload and create an sqlite index on df2\n\ncheckIdentical(argSpecs);\n\ntestAllJoinTypes(argSpecs,metric='median');\n##    join    merge data.table.unkeyed data.table.keyed sqldf.unindexed sqldf.indexed      plyr    dplyr in.place         unit\n## 1 inner  644.259           861.9345          923.516        9157.752      1580.390  959.2250 270.9190       NA microseconds\n## 2  left  713.539           888.0205          910.045        8820.334      1529.714  968.4195 270.9185 224.3045 microseconds\n## 3 right 1221.804           909.1900          923.944        8930.668      1533.135 1063.7860 269.8495 218.1035 microseconds\n## 4  full 1302.203          3107.5380         3184.729              NA            NA 1593.6475 270.7055       NA microseconds\nHere I benchmark on random input data, trying different scales and different patterns of key overlap between the two input tables. This benchmark is still restricted to the case of a single-column integer key. As well, to ensure that the in-place solution would work for both left and right joins of the same tables, all random test data uses 0..1:0..1 cardinality. This is implemented by sampling without replacement the key column of the first data.frame when generating the key column of the second data.frame.makeArgSpecs.singleIntegerKey.optionalOneToOne <- function(size,overlap) {\n\n    com <- as.integer(size*overlap);\n\n    argSpecs <- list(\n        default=list(copySpec=1:2,args=list(\n            df1 <- data.frame(id=sample(size),y1=rnorm(size),y2=rnorm(size)),\n            df2 <- data.frame(id=sample(c(if (com>0L) sample(df1$id,com) else integer(),seq(size+1L,len=size-com))),y3=rnorm(size),y4=rnorm(size)),\n            'id'\n        )),\n        data.table.unkeyed=list(copySpec=1:2,args=list(\n            as.data.table(df1),\n            as.data.table(df2),\n            'id'\n        )),\n        data.table.keyed=list(copySpec=1:2,args=list(\n            setkey(as.data.table(df1),id),\n            setkey(as.data.table(df2),id)\n        ))\n    );\n    ## prepare sqldf\n    initSqldf();\n    sqldf('create index df1_key on df1(id);'); ## upload and create an sqlite index on df1\n    sqldf('create index df2_key on df2(id);'); ## upload and create an sqlite index on df2\n\n    argSpecs;\n\n}; ## end makeArgSpecs.singleIntegerKey.optionalOneToOne()\n\n## cross of various input sizes and key overlaps\nsizes <- c(1e1L,1e3L,1e6L);\noverlaps <- c(0.99,0.5,0.01);\nsystem.time({ res <- testGrid(makeArgSpecs.singleIntegerKey.optionalOneToOne,sizes,overlaps); });\n##     user   system  elapsed\n## 22024.65 12308.63 34493.19\nI wrote some code to create log-log plots of the above results. I generated a separate plot for each overlap percentage. It's a little bit cluttered, but I like having all the solution types and join types represented in the same plot.I used spline interpolation to show a smooth curve for each solution/join type combination, drawn with individual pch symbols. The join type is captured by the pch symbol, using a dot for inner, left and right angle brackets for left and right, and a diamond for full. The solution type is captured by the color as shown in the legend.plotRes <- function(res,titleFunc,useFloor=F) {\n    solTypes <- setdiff(names(res),c('size','overlap','joinType','unit')); ## derive from res\n    normMult <- c(microseconds=1e-3,milliseconds=1); ## normalize to milliseconds\n    joinTypes <- getJoinTypes();\n    cols <- c(merge='purple',data.table.unkeyed='blue',data.table.keyed='#00DDDD',sqldf.unindexed='brown',sqldf.indexed='orange',plyr='red',dplyr='#00BB00',in.place='magenta');\n    pchs <- list(inner=20L,left='<',right='>',full=23L);\n    cexs <- c(inner=0.7,left=1,right=1,full=0.7);\n    NP <- 60L;\n    ord <- order(decreasing=T,colMeans(res[res$size==max(res$size),solTypes],na.rm=T));\n    ymajors <- data.frame(y=c(1,1e3),label=c('1ms','1s'),stringsAsFactors=F);\n    for (overlap in unique(res$overlap)) {\n        x1 <- res[res$overlap==overlap,];\n        x1[solTypes] <- x1[solTypes]*normMult[x1$unit]; x1$unit <- NULL;\n        xlim <- c(1e1,max(x1$size));\n        xticks <- 10^seq(log10(xlim[1L]),log10(xlim[2L]));\n        ylim <- c(1e-1,10^((if (useFloor) floor else ceiling)(log10(max(x1[solTypes],na.rm=T))))); ## use floor() to zoom in a little more, only sqldf.unindexed will break above, but xpd=NA will keep it visible\n        yticks <- 10^seq(log10(ylim[1L]),log10(ylim[2L]));\n        yticks.minor <- rep(yticks[-length(yticks)],each=9L)*1:9;\n        plot(NA,xlim=xlim,ylim=ylim,xaxs='i',yaxs='i',axes=F,xlab='size (rows)',ylab='time (ms)',log='xy');\n        abline(v=xticks,col='lightgrey');\n        abline(h=yticks.minor,col='lightgrey',lty=3L);\n        abline(h=yticks,col='lightgrey');\n        axis(1L,xticks,parse(text=sprintf('10^%d',as.integer(log10(xticks)))));\n        axis(2L,yticks,parse(text=sprintf('10^%d',as.integer(log10(yticks)))),las=1L);\n        axis(4L,ymajors$y,ymajors$label,las=1L,tick=F,cex.axis=0.7,hadj=0.5);\n        for (joinType in rev(joinTypes)) { ## reverse to draw full first, since it's larger and would be more obtrusive if drawn last\n            x2 <- x1[x1$joinType==joinType,];\n            for (solType in solTypes) {\n                if (any(!is.na(x2[[solType]]))) {\n                    xy <- spline(x2$size,x2[[solType]],xout=10^(seq(log10(x2$size[1L]),log10(x2$size[nrow(x2)]),len=NP)));\n                    points(xy$x,xy$y,pch=pchs[[joinType]],col=cols[solType],cex=cexs[joinType],xpd=NA);\n                }; ## end if\n            }; ## end for\n        }; ## end for\n        ## custom legend\n        ## due to logarithmic skew, must do all distance calcs in inches, and convert to user coords afterward\n        ## the bottom-left corner of the legend will be defined in normalized figure coords, although we can convert to inches immediately\n        leg.cex <- 0.7;\n        leg.x.in <- grconvertX(0.275,'nfc','in');\n        leg.y.in <- grconvertY(0.6,'nfc','in');\n        leg.x.user <- grconvertX(leg.x.in,'in');\n        leg.y.user <- grconvertY(leg.y.in,'in');\n        leg.outpad.w.in <- 0.1;\n        leg.outpad.h.in <- 0.1;\n        leg.midpad.w.in <- 0.1;\n        leg.midpad.h.in <- 0.1;\n        leg.sol.w.in <- max(strwidth(solTypes,'in',leg.cex));\n        leg.sol.h.in <- max(strheight(solTypes,'in',leg.cex))*1.5; ## multiplication factor for greater line height\n        leg.join.w.in <- max(strheight(joinTypes,'in',leg.cex))*1.5; ## ditto\n        leg.join.h.in <- max(strwidth(joinTypes,'in',leg.cex));\n        leg.main.w.in <- leg.join.w.in*length(joinTypes);\n        leg.main.h.in <- leg.sol.h.in*length(solTypes);\n        leg.x2.user <- grconvertX(leg.x.in+leg.outpad.w.in*2+leg.main.w.in+leg.midpad.w.in+leg.sol.w.in,'in');\n        leg.y2.user <- grconvertY(leg.y.in+leg.outpad.h.in*2+leg.main.h.in+leg.midpad.h.in+leg.join.h.in,'in');\n        leg.cols.x.user <- grconvertX(leg.x.in+leg.outpad.w.in+leg.join.w.in*(0.5+seq(0L,length(joinTypes)-1L)),'in');\n        leg.lines.y.user <- grconvertY(leg.y.in+leg.outpad.h.in+leg.main.h.in-leg.sol.h.in*(0.5+seq(0L,length(solTypes)-1L)),'in');\n        leg.sol.x.user <- grconvertX(leg.x.in+leg.outpad.w.in+leg.main.w.in+leg.midpad.w.in,'in');\n        leg.join.y.user <- grconvertY(leg.y.in+leg.outpad.h.in+leg.main.h.in+leg.midpad.h.in,'in');\n        rect(leg.x.user,leg.y.user,leg.x2.user,leg.y2.user,col='white');\n        text(leg.sol.x.user,leg.lines.y.user,solTypes[ord],cex=leg.cex,pos=4L,offset=0);\n        text(leg.cols.x.user,leg.join.y.user,joinTypes,cex=leg.cex,pos=4L,offset=0,srt=90); ## srt rotation applies *after* pos/offset positioning\n        for (i in seq_along(joinTypes)) {\n            joinType <- joinTypes[i];\n            points(rep(leg.cols.x.user[i],length(solTypes)),ifelse(colSums(!is.na(x1[x1$joinType==joinType,solTypes[ord]]))==0L,NA,leg.lines.y.user),pch=pchs[[joinType]],col=cols[solTypes[ord]]);\n        }; ## end for\n        title(titleFunc(overlap));\n        readline(sprintf('overlap %.02f',overlap));\n    }; ## end for\n}; ## end plotRes()\n\ntitleFunc <- function(overlap) sprintf('R merge solutions: single-column integer key, 0..1:0..1 cardinality, %d%% overlap',as.integer(overlap*100));\nplotRes(res,titleFunc,T);\nHere's a second large-scale benchmark that's more heavy-duty, with respect to the number and types of key columns, as well as cardinality. For this benchmark I use three key columns: one character, one integer, and one logical, with no restrictions on cardinality (that is, 0..*:0..*). (In general it's not advisable to define key columns with double or complex values due to floating-point comparison complications, and basically no one ever uses the raw type, much less for key columns, so I haven't included those types in the key columns. Also, for information's sake, I initially tried to use four key columns by including a POSIXct key column, but the POSIXct type didn't play well with the sqldf.indexed solution for some reason, possibly due to floating-point comparison anomalies, so I removed it.)makeArgSpecs.assortedKey.optionalManyToMany <- function(size,overlap,uniquePct=75) {\n\n    ## number of unique keys in df1\n    u1Size <- as.integer(size*uniquePct/100);\n\n    ## (roughly) divide u1Size into bases, so we can use expand.grid() to produce the required number of unique key values with repetitions within individual key columns\n    ## use ceiling() to ensure we cover u1Size; will truncate afterward\n    u1SizePerKeyColumn <- as.integer(ceiling(u1Size^(1/3)));\n\n    ## generate the unique key values for df1\n    keys1 <- expand.grid(stringsAsFactors=F,\n        idCharacter=replicate(u1SizePerKeyColumn,paste(collapse='',sample(letters,sample(4:12,1L),T))),\n        idInteger=sample(u1SizePerKeyColumn),\n        idLogical=sample(c(F,T),u1SizePerKeyColumn,T)\n        ##idPOSIXct=as.POSIXct('2016-01-01 00:00:00','UTC')+sample(u1SizePerKeyColumn)\n    )[seq_len(u1Size),];\n\n    ## rbind some repetitions of the unique keys; this will prepare one side of the many-to-many relationship\n    ## also scramble the order afterward\n    keys1 <- rbind(keys1,keys1[sample(nrow(keys1),size-u1Size,T),])[sample(size),];\n\n    ## common and unilateral key counts\n    com <- as.integer(size*overlap);\n    uni <- size-com;\n\n    ## generate some unilateral keys for df2 by synthesizing outside of the idInteger range of df1\n    keys2 <- data.frame(stringsAsFactors=F,\n        idCharacter=replicate(uni,paste(collapse='',sample(letters,sample(4:12,1L),T))),\n        idInteger=u1SizePerKeyColumn+sample(uni),\n        idLogical=sample(c(F,T),uni,T)\n        ##idPOSIXct=as.POSIXct('2016-01-01 00:00:00','UTC')+u1SizePerKeyColumn+sample(uni)\n    );\n\n    ## rbind random keys from df1; this will complete the many-to-many relationship\n    ## also scramble the order afterward\n    keys2 <- rbind(keys2,keys1[sample(nrow(keys1),com,T),])[sample(size),];\n\n    ##keyNames <- c('idCharacter','idInteger','idLogical','idPOSIXct');\n    keyNames <- c('idCharacter','idInteger','idLogical');\n    ## note: was going to use raw and complex type for two of the non-key columns, but data.table doesn't seem to fully support them\n    argSpecs <- list(\n        default=list(copySpec=1:2,args=list(\n            df1 <- cbind(stringsAsFactors=F,keys1,y1=sample(c(F,T),size,T),y2=sample(size),y3=rnorm(size),y4=replicate(size,paste(collapse='',sample(letters,sample(4:12,1L),T)))),\n            df2 <- cbind(stringsAsFactors=F,keys2,y5=sample(c(F,T),size,T),y6=sample(size),y7=rnorm(size),y8=replicate(size,paste(collapse='',sample(letters,sample(4:12,1L),T)))),\n            keyNames\n        )),\n        data.table.unkeyed=list(copySpec=1:2,args=list(\n            as.data.table(df1),\n            as.data.table(df2),\n            keyNames\n        )),\n        data.table.keyed=list(copySpec=1:2,args=list(\n            setkeyv(as.data.table(df1),keyNames),\n            setkeyv(as.data.table(df2),keyNames)\n        ))\n    );\n    ## prepare sqldf\n    initSqldf();\n    sqldf(paste0('create index df1_key on df1(',paste(collapse=',',keyNames),');')); ## upload and create an sqlite index on df1\n    sqldf(paste0('create index df2_key on df2(',paste(collapse=',',keyNames),');')); ## upload and create an sqlite index on df2\n\n    argSpecs;\n\n}; ## end makeArgSpecs.assortedKey.optionalManyToMany()\n\nsizes <- c(1e1L,1e3L,1e5L); ## 1e5L instead of 1e6L to respect more heavy-duty inputs\noverlaps <- c(0.99,0.5,0.01);\nsolTypes <- setdiff(getSolTypes(),'in.place');\nsystem.time({ res <- testGrid(makeArgSpecs.assortedKey.optionalManyToMany,sizes,overlaps,solTypes); });\n##     user   system  elapsed\n## 38895.50   784.19 39745.53\nThe resulting plots, using the same plotting code given above:titleFunc <- function(overlap) sprintf('R merge solutions: character/integer/logical key, 0..*:0..* cardinality, %d%% overlap',as.integer(overlap*100));\nplotRes(res,titleFunc,F);\n", "In joining two data frames with ~1 million rows each, one with 2 columns and the other with ~20, I've surprisingly found merge(..., all.x = TRUE, all.y = TRUE) to be faster then dplyr::full_join(). This is with dplyr v0.4 Merge takes ~17 seconds, full_join takes ~65 seconds.  Some food for though, since I generally default to dplyr for manipulation tasks.", "mergeWe have to add extra code which will subset from the newly joined table .\nSQL :-  select a.* from df1 a inner join df2 b on a.CustomerId=b.CustomerId\nR :- merge(df1, df2, by.x = \"CustomerId\", by.y = \"CustomerId\")[,names(df1)]\nSame way \nSQL :- select b.* from df1 a inner join df2 b on a.CustomerId=b.CustomerId\nR :- merge(df1, df2, by.x = \"CustomerId\", by.y =\n\"CustomerId\")[,names(df2)]\n", "For an inner join on all columns, you could also use fintersect from the -package or intersect from the -package as an alternative to merge without specifying the by-columns. this will give the rows that are equal between two dataframes:merge(df1, df2)\n#   V1 V2\n# 1  B  2\n# 2  C  3\ndplyr::intersect(df1, df2)\n#   V1 V2\n# 1  B  2\n# 2  C  3\ndata.table::fintersect(setDT(df1), setDT(df2))\n#    V1 V2\n# 1:  B  2\n# 2:  C  3\nExample data:df1 <- data.frame(V1 = LETTERS[1:4], V2 = 1:4)\ndf2 <- data.frame(V1 = LETTERS[2:3], V2 = 2:3)\n", " One other important SQL-style join is an \"\" where columns in one table are updated (or created) using another table. Modifying the OP's example tables...sales = data.frame(\n  CustomerId = c(1, 1, 1, 3, 4, 6), \n  Year = 2000:2005,\n  Product = c(rep(\"Toaster\", 3), rep(\"Radio\", 3))\n)\ncust = data.frame(\n  CustomerId = c(1, 1, 4, 6), \n  Year = c(2001L, 2002L, 2002L, 2002L),\n  State = state.name[1:4]\n)\n\nsales\n# CustomerId Year Product\n#          1 2000 Toaster\n#          1 2001 Toaster\n#          1 2002 Toaster\n#          3 2003   Radio\n#          4 2004   Radio\n#          6 2005   Radio\n\ncust\n# CustomerId Year    State\n#          1 2001  Alabama\n#          1 2002   Alaska\n#          4 2002  Arizona\n#          6 2002 Arkansas\nSuppose we want to add the customer's state from cust to the purchases table, sales, ignoring the year column. With base R, we can identify matching rows and then copy values over:sales$State <- cust$State[ match(sales$CustomerId, cust$CustomerId) ]\n\n# CustomerId Year Product    State\n#          1 2000 Toaster  Alabama\n#          1 2001 Toaster  Alabama\n#          1 2002 Toaster  Alabama\n#          3 2003   Radio     <NA>\n#          4 2004   Radio  Arizona\n#          6 2005   Radio Arkansas\n\n# cleanup for the next example\nsales$State <- NULL\nAs can be seen here, match selects the first matching row from the customer table. The approach above works well when we are joining on only a single column and are satisfied with the first match. Suppose we want the year of measurement in the customer table to match the year of sale.As @bgoldst's answer mentions, match with interaction might be an option for this case. More straightforwardly, one could use data.table:library(data.table)\nsetDT(sales); setDT(cust)\n\nsales[, State := cust[sales, on=.(CustomerId, Year), x.State]]\n\n#    CustomerId Year Product   State\n# 1:          1 2000 Toaster    <NA>\n# 2:          1 2001 Toaster Alabama\n# 3:          1 2002 Toaster  Alaska\n# 4:          3 2003   Radio    <NA>\n# 5:          4 2004   Radio    <NA>\n# 6:          6 2005   Radio    <NA>\n\n# cleanup for next example\nsales[, State := NULL]\n Alternately, we may want to take the last state the customer was found in:sales[, State := cust[sales, on=.(CustomerId, Year), roll=TRUE, x.State]]\n\n#    CustomerId Year Product    State\n# 1:          1 2000 Toaster     <NA>\n# 2:          1 2001 Toaster  Alabama\n# 3:          1 2002 Toaster   Alaska\n# 4:          3 2003   Radio     <NA>\n# 5:          4 2004   Radio  Arizona\n# 6:          6 2005   Radio Arkansas\nThe three examples above all focus on creating/adding a new column. See  for an example of updating/modifying an existing column."]},
{"question": "How do I create variable variables?", "details": "How do I accomplish variable variables in Python? Here is an elaborative manual entry, for instance: I have heard this is a bad idea in general though, and it is a security hole in Python. Is that true?", "answers": ["How do I accomplish variable variables in Python? Here is an elaborative manual entry, for instance: I have heard this is a bad idea in general though, and it is a security hole in Python. Is that true?", "You can use  to accomplish this. Dictionaries are stores of keys and values. >>> dct = {'x': 1, 'y': 2, 'z': 3}\n>>> dct\n{'y': 2, 'x': 1, 'z': 3}\n>>> dct[\"y\"]\n2\nYou can use variable key names to achieve the effect of variable variables without the security risk.>>> x = \"spam\"\n>>> z = {x: \"eggs\"}\n>>> z[\"spam\"]\n'eggs'\nFor cases where you're thinking of doing something likevar1 = 'foo'\nvar2 = 'bar'\nvar3 = 'baz'\n...\na list may be more appropriate than a dict. A list represents an ordered sequence of objects, with integer indices:lst = ['foo', 'bar', 'baz']\nprint(lst[1])           # prints bar, because indices start at 0\nlst.append('potatoes')  # lst is now ['foo', 'bar', 'baz', 'potatoes']\nFor ordered sequences, lists are more convenient than dicts with integer keys, because lists support iteration in index order, , append, and other operations that would require awkward key management with a dict.", "Use the built-in getattr function to get an attribute on an object by name.  Modify the name as needed.obj.spam = 'eggs'\nname = 'spam'\ngetattr(obj, name)  # returns 'eggs'\n", "It's not a good idea. If you are accessing a global variable you can use globals().>>> a = 10\n>>> globals()['a']\n10\nIf you want to access a variable in the local scope you can use locals(), but you cannot assign values to the returned dict. is to use getattr or store your variables in a dictionary and then access them by name.", "New coders sometimes write code like this:my_calculator.button_0 = tkinter.Button(root, text=0)\nmy_calculator.button_1 = tkinter.Button(root, text=1)\nmy_calculator.button_2 = tkinter.Button(root, text=2)\n...\nThe coder is then left with a pile of named variables, with a coding effort of O( * ), where  is the number of named variables and  is the number of times that group of variables needs to be accessed (including creation). The more astute beginner observes that the only difference in each of those lines is a number that changes based on a rule, and decides to use a loop. However, they get stuck on how to dynamically create those variable names, and may try something like this:for i in range(10):\n    my_calculator.('button_%d' % i) = tkinter.Button(root, text=i)\nThey soon find that this does not work.If the program requires arbitrary variable \"names,\" a dictionary is the best choice, as explained in other answers. However, if you're simply trying to create many variables and you don't mind referring to them with a sequence of integers, you're probably looking for a list. This is particularly true if your data are homogeneous, such as daily temperature readings, weekly quiz scores, or a grid of graphical widgets.This can be assembled as follows:my_calculator.buttons = []\nfor i in range(10):\n    my_calculator.buttons.append(tkinter.Button(root, text=i))\nThis list can also be created in one line with a comprehension:my_calculator.buttons = [tkinter.Button(root, text=i) for i in range(10)]\nThe result in either case is a populated list, with the first element accessed with my_calculator.buttons[0], the next with my_calculator.buttons[1], and so on. The \"base\" variable name becomes the name of the list and the varying identifier is used to access it.Finally, don't forget other data structures, such as the set - this is similar to a dictionary, except that each \"name\" doesn't have a value attached to it. If you simply need a \"bag\" of objects, this can be a great choice. Instead of something like this:keyword_1 = 'apple'\nkeyword_2 = 'banana'\n\nif query == keyword_1 or query == keyword_2:\n    print('Match.')\nYou will have this:keywords = {'apple', 'banana'}\nif query in keywords:\n    print('Match.')\nUse a list for a sequence of similar objects, a set for an arbitrarily-ordered bag of objects, or a dict for a bag of names with associated values.", "Whenever you want to use variable variables, it's probably better to use a dictionary. So instead of writing$foo = \"bar\"\n$$foo = \"baz\"\nyou write mydict = {}\nfoo = \"bar\"\nmydict[foo] = \"baz\"\nThis way you won't accidentally overwrite previously existing variables (which is the security aspect) and you can have different \"namespaces\".", "Instead of a dictionary you can also use namedtuple from the collections module, which makes access easier.For example:# using dictionary\nvariables = {}\nvariables[\"first\"] = 34\nvariables[\"second\"] = 45\nprint(variables[\"first\"], variables[\"second\"])\n\n# using namedtuple\nVariables = namedtuple('Variables', ['first', 'second'])\nvars = Variables(34, 45)\nprint(vars.first, vars.second)\n", "If you don't want to use any object, you can still use setattr() inside your current module:import sys\ncurrent_module = module = sys.modules[__name__]  # i.e the \"file\" where your code is written\nsetattr(current_module, 'variable_name', 15)  # 15 is the value you assign to the var\nprint(variable_name)  # >>> 15, created from a string\n", "Use globals()You can actually assign variables to global scope dynamically, for instance, if you want 10 variables that can be accessed on a global scope i_1, i_2 ... i_10:for i in range(10):\n    globals()['i_{}'.format(i)] = 'a'\nThis will assign 'a' to all of these 10 variables, of course you can change the value dynamically as well. All of these variables can be accessed now like other globally declared variable:>>> i_5\n'a'\n", "The SimpleNamespace class could be used to create new attributes with setattr, or subclass SimpleNamespace and create your own function to add new attribute names (variables). from types import SimpleNamespace\n\nvariables = {\"b\":\"B\",\"c\":\"C\"}\na = SimpleNamespace(**variables)\nsetattr(a,\"g\",\"G\")\na.g = \"G+\"\nsomething = a.a\n", "I'm am answering the question: \nwhich is closed as a duplicate with a link to this question. If the variables in question are part of an object (part of a class for example) then some useful functions to achieve exactly that are hasattr, getattr, and setattr. So for example you can have:class Variables(object):\n    def __init__(self):\n        self.foo = \"initial_variable\"\n    def create_new_var(self,name,value):\n        setattr(self,name,value)\n    def get_var(self,name):\n        if hasattr(self,name):\n            return getattr(self,name)\n        else:\n            raise(\"Class does not have a variable named: \"+name)\nThen you can do:v = Variables()\nv.get_var(\"foo\")\n\"initial_variable\"v.create_new_var(v.foo,\"is actually not initial\")\nv.initial_variable\n\"is actually not initial\"", "I have tried both in python 3.7.3, you can use either globals() or vars()>>> food #Error\n>>> milkshake #Error\n>>> food=\"bread\"\n>>> drink=\"milkshake\"\n>>> globals()[food] = \"strawberry flavor\"\n>>> vars()[drink] = \"chocolate flavor\"\n>>> bread\n'strawberry flavor'\n>>> milkshake\n'chocolate flavor'\n>>> globals()[drink]\n'chocolate flavor'\n>>> vars()[food]\n'strawberry flavor'\nReference:\n", "You have to use globals()  to achieve that behaviour:def var_of_var(k, v):\n    globals()[k] = v\n\nprint variable_name # NameError: name 'variable_name' is not defined\nsome_name = 'variable_name'\nglobals()[some_name] = 123\nprint(variable_name) # 123\n\nsome_name = 'variable_name2'\nvar_of_var(some_name, 456)\nprint(variable_name2) # 456\n", "The consensus is to use a dictionary for this - see the other answers. This is a good idea for most cases, however, there are many aspects arising from this:\n\n\n\n\n\n\n\n\n\nThat said, I've implemented a -class which provides some of the above ideas. It works for python 2 and 3.You'd use  like this:from variableVariablesManager import VariableVariablesManager\n\nmyVars = VariableVariablesManager()\nmyVars['test'] = 25\nprint(myVars['test'])\n\n# define a const variable\nmyVars.defineConstVariable('myconst', 13)\ntry:\n    myVars['myconst'] = 14 # <- this raises an error, since 'myconst' must not be changed\n    print(\"not allowed\")\nexcept AttributeError as e:\n    pass\n\n# rename a variable\nmyVars.renameVariable('myconst', 'myconstOther')\n\n# preserve locality\ndef testLocalVar():\n    myVars = VariableVariablesManager()\n    myVars['test'] = 13\n    print(\"inside function myVars['test']:\", myVars['test'])\ntestLocalVar()\nprint(\"outside function myVars['test']:\", myVars['test'])\n\n# define a global variable\nmyVars.defineGlobalVariable('globalVar', 12)\ndef testGlobalVar():\n    myVars = VariableVariablesManager()\n    print(\"inside function myVars['globalVar']:\", myVars['globalVar'])\n    myVars['globalVar'] = 13\n    print(\"inside function myVars['globalVar'] (having been changed):\", myVars['globalVar'])\ntestGlobalVar()\nprint(\"outside function myVars['globalVar']:\", myVars['globalVar'])\nIf you wish to allow overwriting of variables with the same type only:myVars = VariableVariablesManager(enforceSameTypeOnOverride = True)\nmyVars['test'] = 25\nmyVars['test'] = \"Cat\" # <- raises Exception (different type on overwriting)\n", "Any set of variables can also be wrapped up in a class. \n\"Variable\" variables may be added to the class instance during runtime by directly accessing the built-in dictionary through __dict__ attribute. The following code defines Variables class, which adds variables (in this case attributes) to its instance during the construction. Variable names are taken from a specified list (which, for example, could have been generated by program code):# some list of variable names\nL = ['a', 'b', 'c']\n\nclass Variables:\n    def __init__(self, L):\n        for item in L:\n            self.__dict__[item] = 100\n\nv = Variables(L)\nprint(v.a, v.b, v.c)\n#will produce 100 100 100\n"]},
{"question": "Is there a CSS parent selector?", "details": "How do I select the <li> element that is a direct parent of the anchor element?As an example, my CSS would be something like this:li < a.active {\n    property: value;\n}\nObviously there are ways of doing this with JavaScript, but I'm hoping that there is some sort of workaround that exists native to CSS Level 2.The menu that I am trying to style is being spewed out by a CMS, so I can't move the active element to the <li> element... (unless I theme the menu creation module which I'd rather not do).Any ideas?", "answers": ["How do I select the <li> element that is a direct parent of the anchor element?As an example, my CSS would be something like this:li < a.active {\n    property: value;\n}\nObviously there are ways of doing this with JavaScript, but I'm hoping that there is some sort of workaround that exists native to CSS Level 2.The menu that I am trying to style is being spewed out by a CMS, so I can't move the active element to the <li> element... (unless I theme the menu creation module which I'd rather not do).Any ideas?", "There is currently no way to select the parent of an element in CSS.If there was a way to do it, it would be in either of the current CSS selectors specs:\n\n\nThat said, the  includes a :has() pseudo-class that will provide this capability. It will be similar to the .li:has(> a.active) { /* styles to apply to the li tag */ }\nHowever, as of 2020, .In the meantime, you'll have to resort to JavaScript if you need to select a parent element.", "I don\u2019t think you can select the parent in CSS only.But as you already seem to have an .active class, it would be easier to move that class to the li (instead of the a). That way you can access both the li and the a via CSS only.", "You can use :*! > input[type=text] { background: #000; }\nThis will select any parent of a text input. But wait, there's still much more. If you want, you can select a specified parent:.input-wrap! > input[type=text] { background: #000; }\nOr select it when it's active:.input-wrap! > input[type=text]:focus { background: #000; }\nCheck out this HTML:<div class=\"input-wrap\">\n    <input type=\"text\" class=\"Name\"/>\n    <span class=\"help hide\">Your name sir</span>\n</div>\nYou can select that span.help when the input is active and show it:.input-wrap! .help > input[type=text]:focus { display: block; }\nThere are many more capabilities; just check out the documentation of the plugin.BTW, it works in Internet\u00a0Explorer.", "Yes: :has()Browser support: ", "As mentioned by a couple of others, there isn't a way to style an element's parent/s using just CSS but the following works with :$(\"a.active\").parents('li').css(\"property\", \"value\");\n", "There is no parent selector; just the way there is no previous sibling selector. One good reason for not having these selectors is because the browser has to traverse through all children of an element to determine whether or not a class should be applied. For example, if you wrote:body:contains-selector(a.active) { background: red; }\nThen the browser will have to wait until it has loaded and parsed everything until the </body> to determine if the page should be red or not.The article  explains it in detail.", "There isn't a way to do this in CSS\u00a02. You could add the class to the li and reference the a:li.active > a {\n    property: value;\n}\n", "Try to switch a to block display, and then use any style you want. The a element will fill the li element, and you will be able to modify its look as you want. Don't forget to set li padding to 0.li {\n  padding: 0;\n  overflow: hidden;\n}\na {\n  display: block;\n  width: 100%;\n  color: ..., background: ..., border-radius: ..., etc...\n}\na.active {\n  color: ..., background: ...\n}\n", "The CSS selector \u201c\u201d could maybe used for what you want:E ~ F {\n    property: value;\n}\nThis matches any F element that is preceded by an E element.", "The pseudo element :focus-within allows a parent to be selected if a descendent has focus. An element can be focused if it has a tabindex attribute. .click {\r\n  cursor: pointer;\r\n}\r\n\r\n.color:focus-within .change {\r\n  color: red;\r\n}\r\n\r\n.color:focus-within p {\r\n  outline: 0;\r\n}<div class=\"color\">\r\n  <p class=\"change\" tabindex=\"0\">\r\n    I will change color\r\n  </p>\r\n  <p class=\"click\" tabindex=\"1\">\r\n    Click me\r\n  </p>\r\n</div>", "Not in CSS 2 as far as I'm aware.  CSS 3 has more robust selectors but is not consistently implemented across all browsers.  Even with the improved selectors, I don't believe it will accomplish exactly what you've specified in your example.", "I know the OP was looking for a CSS solution but it is simple to achieve using jQuery. In my case I needed to find the <ul> parent tag for a <span> tag contained in the child <li>. jQuery has the :has selector so it's possible to identify a parent by the children it contains:$(\"ul:has(#someId)\")\nwill select the ul element that has a child element with id . Or to answer the original question, something like the following should do the trick (untested):$(\"li:has(.active)\")\n", "This is the most discussed aspect of the  specification.\nWith this, a selector will be able to style an element according to its child by using an exclamation mark after the given selector (!).For example:body! a:hover{\n   background: red;\n}\nwill set a red background-color if the user hovers over any anchor.But we have to wait for browsers' implementation :(", "You might try to use hyperlink as the parent, and then change the inner elements on hover. Like this:a.active h1 {color:red;}\n\na.active:hover h1 {color:green;}\n\na.active h2 {color:blue;}\n\na.active:hover h1 {color:yellow;}\nThis way you can change the style in multiple inner tags, based on the rollover of the parent element.", "Here's a hack using pointer-events with hover:<!doctype html>\n<html>\n    <head>\n        <title></title>\n        <style>\n/* accessory */\n.parent {\n    width: 200px;\n    height: 200px;\n    background: gray;\n}\n.parent, \n.selector {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.selector {\n    cursor: pointer;\n    background: silver;\n    width: 50%;\n    height: 50%;\n}\n        </style>\n        <style>\n/* pertinent */\n.parent {\n    background: gray;\n    pointer-events: none;\n}\n.parent:hover {\n    background: fuchsia;\n}\n.parent \n.selector {\n    pointer-events: auto;\n}\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"selector\"></div>\n        </div>\n    </body>\n</html>", "Just an idea for horizontal menu...<div class='list'>\n  <div class='item'>\n    <a>Link</a>\n  </div>\n  <div class='parent-background'></div>\n  <!-- submenu takes this place -->\n</div>\nPart of CSS/* Hide parent backgrounds... */\n.parent-background {\n  display: none; }\n\n/* ... and show it when hover on children */\n.item:hover + .parent-background {\n  display: block;\n  position: absolute;\n  z-index: 10;\n  top: 0;\n  width: 100%; }\n how to use it with text-inputs - select parent fieldset", "Currently there is no parent selector & it is not even being discussed in any of the talks of W3C. You need to understand how CSS is evaluated by the browser to actually understand if we need it or not.There is a lot of technical explanation here....But .These people are all top class in the field of front end development.", "There's a plugin that extends CSS to include some non-standard features that can really help when designing websites. It's called .One of the things EQCSS adds is a parent selector. It works in all browsers, Internet\u00a0Explorer\u00a08 and up. Here's the format:@element 'a.active' {\n  $parent {\n    background: red;\n  }\n}\nSo here we've opened an element query on every element a.active, and for the styles inside that query, things like $parent make sense, because there's a reference point. The browser can find the parent, because it's very similar to parentNode in JavaScript.$parent and $parent, as well as .EQCSS also includes : $prev for the element before a selected element and $this for only those elements that match an element query, and more.", "It's now 2019, and the  actually has something like this. Introducing @nest at-rules.3.2. The Nesting At-Rule: @nestWhile direct nesting looks nice, it is somewhat fragile. Some valid nesting selectors, like .foo &, are disallowed, and editing the selector in certain ways can make the rule invalid unexpectedly. As well, some people find the nesting challenging to distinguish visually from the surrounding declarations.To aid in all these issues, this specification defines the @nest rule, which imposes fewer restrictions on how to validly nest style rules. Its syntax is:@nest = @nest <selector> { <declaration-list> }The @nest rule functions identically to a style rule: it starts with a selector, and contains declarations that apply to the elements the selector matches. The only difference is that the selector used in a @nest rule must be nest-containing, which means it contains a nesting selector in it somewhere. A list of selectors is nest-containing if all of its individual complex selectors are nest-containing.(Copy and pasted from the URL above).Example of valid selectors under this specification:.foo {\n  color: red;\n  @nest & > .bar {\n    color: blue;\n  }\n}\n/* Equivalent to:\n   .foo { color: red; }\n   .foo > .bar { color: blue; }\n */\n\n.foo {\n  color: red;\n  @nest .parent & {\n    color: blue;\n  }\n}\n/* Equivalent to:\n   .foo { color: red; }\n   .parent .foo { color: blue; }\n */\n\n.foo {\n  color: red;\n  @nest :not(&) {\n    color: blue;\n  }\n}\n/* Equivalent to:\n   .foo { color: red; }\n   :not(.foo) { color: blue; }\n */\n", "Technically there is no direct way to do this. However, you can sort that out with either jQuery or JavaScript.However, you can do something like this as well.a.active h1 {color: blue;}\na.active p {color: green;}\n$(\"a.active\").parents('li').css(\"property\", \"value\");\nIf you want to achieve this using jQuery here is the reference for the .", "The short answer is ; we don't have a parent selector at this stage in CSS, but if you don't have to swap the elements or classes anyway, the second option is using JavaScript. Something like this:var activeATag = Array.prototype.slice.call(document.querySelectorAll('a.active'));\n\nactiveATag.map(function(x) {\n  if(x.parentNode.tagName === 'LI') {\n    x.parentNode.style.color = 'red'; // Your property: value;\n  }\n});\nOr a shorter way if you use  in your application:$('a.active').parents('li').css('color', 'red'); // Your property: value;\n", "The W3C excluded such a selector because of the huge performance impact it would have on a browser.", "Although there is no parent selector in standard CSS at present, I am working on a (personal) project called  (ie. ) which, among its 7 new selectors, includes both:<>^[SPACE] is presently in a relatively early BETA stage of development.See a demo here:(compare the two lists on the left styled with standard selectors and the two lists on the right styled with axe selectors)", "At least up to and including CSS\u00a03 you cannot select like that.\nBut it can be done pretty easily nowadays in JavaScript, you just need to add a bit of vanilla JavaScript, notice that the code is pretty short.cells = document.querySelectorAll('div');\r\n[].forEach.call(cells, function (el) {\r\n    //console.log(el.nodeName)\r\n    if (el.hasChildNodes() && el.firstChild.nodeName==\"A\") {\r\n        console.log(el)\r\n    };\r\n});<div>Peter</div>\r\n<div><a href=\"#\">Jackson link</a></div>\r\n<div>Philip</div>\r\n<div><a href=\"#\">Pullman link</a></div>", "Any ideas?CSS4 will be fancy if it adds some  into . Until then it is possible (though  advisable) to use checkbox and/or radio input to  the usual way that things are connected, and through that also allow CSS to operate outside of its normal scope.../* Hide things that may be latter shown */\n.menu__checkbox__selection,\n.menu__checkbox__style,\n.menu__hidden {\n  display: none;\n  visibility: hidden;\n  opacity: 0;\n  filter: alpha(opacity=0); /* Old Microsoft opacity */\n}\n\n\n/* Base style for content and style menu */\n.main__content {\n  background-color: lightgray;\n  color: black;\n}\n\n.menu__hidden {\n  background-color: black;\n  color: lightgray;\n  /* Make list look not so _listy_ */\n  list-style: none;\n  padding-left: 5px;\n}\n\n.menu__option {\n  box-sizing: content-box;\n  display: block;\n  position: static;\n  z-index: auto;\n}\n\n/* &#9660; - \\u2630 - Three Bars */\n/*\n.menu__trigger__selection::before {\n  content: '\\2630';\n  display: inline-block;\n}\n*/\n\n/* &#9660; - Down Arrow */\n.menu__trigger__selection::after {\n  content: \"\\25BC\";\n  display: inline-block;\n  transform: rotate(90deg);\n}\n\n\n/* Customize to look more `select` like if you like */\n.menu__trigger__style:hover,\n.menu__trigger__style:active {\n  cursor: pointer;\n  background-color: darkgray;\n  color: white;\n}\n\n\n/**\n * Things to do when checkboxes/radios are checked\n */\n\n.menu__checkbox__selection:checked + .menu__trigger__selection::after,\n.menu__checkbox__selection[checked] + .menu__trigger__selection::after {\n  transform: rotate(0deg);\n}\n\n/* This bit is something that you may see elsewhere */\n.menu__checkbox__selection:checked ~ .menu__hidden,\n.menu__checkbox__selection[checked] ~ .menu__hidden {\n  display: block;\n  visibility: visible;\n  opacity: 1;\n  filter: alpha(opacity=100); /* Microsoft!? */\n}\n\n\n/**\n * Hacky CSS only changes based off non-inline checkboxes\n * ... AKA the stuff you cannot unsee after this...\n */\n.menu__checkbox__style[id=\"style-default\"]:checked ~ .main__content {\n  background-color: lightgray;\n  color: black;\n}\n\n.menu__checkbox__style[id=\"style-default\"]:checked ~ .main__content .menu__trigger__style[for=\"style-default\"] {\n  color: darkorange;\n}\n\n.menu__checkbox__style[id=\"style-one\"]:checked ~ .main__content {\n  background-color: black;\n  color: lightgray;\n}\n\n.menu__checkbox__style[id=\"style-one\"]:checked ~ .main__content .menu__trigger__style[for=\"style-one\"] {\n  color: darkorange;\n}\n\n.menu__checkbox__style[id=\"style-two\"]:checked ~ .main__content {\n  background-color: darkgreen;\n  color: red;\n}\n\n.menu__checkbox__style[id=\"style-two\"]:checked ~ .main__content .menu__trigger__style[for=\"style-two\"] {\n  color: darkorange;\n}<!--\n  This bit works, but will one day cause troubles,\n  but truth is you can stick checkbox/radio inputs\n  just about anywhere and then call them by id with\n  a `for` label. Keep scrolling to see what I mean\n-->\n<input type=\"radio\"\n       name=\"colorize\"\n       class=\"menu__checkbox__style\"\n       id=\"style-default\">\n<input type=\"radio\"\n       name=\"colorize\"\n       class=\"menu__checkbox__style\"\n       id=\"style-one\">\n<input type=\"radio\"\n       name=\"colorize\"\n       class=\"menu__checkbox__style\"\n       id=\"style-two\">\n\n\n<div class=\"main__content\">\n\n  <p class=\"paragraph__split\">\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n  </p>\n\n  <input type=\"checkbox\"\n         class=\"menu__checkbox__selection\"\n         id=\"trigger-style-menu\">\n  <label for=\"trigger-style-menu\"\n         class=\"menu__trigger__selection\"> Theme</label>\n\n  <ul class=\"menu__hidden\">\n    <li class=\"menu__option\">\n      <label for=\"style-default\"\n             class=\"menu__trigger__style\">Default Style</label>\n    </li>\n\n    <li class=\"menu__option\">\n      <label for=\"style-one\"\n             class=\"menu__trigger__style\">First Alternative Style</label>\n    </li>\n\n    <li class=\"menu__option\">\n      <label for=\"style-two\"\n             class=\"menu__trigger__style\">Second Alternative Style</label>\n    </li>\n  </ul>\n\n  <p class=\"paragraph__split\">\n    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n    proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  </p>\n\n</div>... pretty , but with just CSS and HTML it is possible to touch and re-touch anything but the body and :root from just about anywhere by linking the id and for properties of radio/checkbox input and label ; likely someone'll show how to re-touch those at some point.One additional caveat is that only  input of a specific id maybe used, first checkbox/radio  a toggled state in other words...  multiple labels can all point to the same input, though that would make both the HTML and CSS look even grosser.... I'm hoping that there is some sort of workaround that exists native to CSS Level 2...I am not sure about the other pseudo classes, but I :checked for pre-CSS\u00a03. If I remember correctly, it was something like [checked] which is why you may find it in the above code, for example,.menu__checkbox__selection:checked ~ .menu__hidden,\n.menu__checkbox__selection[checked] ~ .menu__hidden {\n /* rules: and-stuff; */\n}\n... but for things like ::after and :hover, I'm not at all certain in which CSS version those first appeared.That all stated, please don't ever use this in production, not even in anger. As a joke sure, or in other words just because something  be done does not always mean it .", "No, you cannot select the parent in CSS only.But as you already seem to have an .active class, it would be easier to move that class to the li (instead of the a). That way you can access both the li and the a via CSS only.", "There no css (and therefore in css preprocessors) parent selector due to \"The major reasons for the CSS Working Group previously rejecting proposals for parent selectors are related to browser performance and incremental rendering issues.\"", "I'd hire some JavaScript code to do that. For example, in React when you iterate over an array, add another class to the parent component, which indicates it contains your children:<div className={`parent ${hasKiddos ? 'has-kiddos' : ''}`}>\n    {kiddos.map(kid => <div key={kid.id} />)}\n</div>\nAnd then simply:.parent {\n    color: #000;\n}\n\n.parent.has-kiddos {\n    color: red;\n}\n", "Changing parent element based on child element can currently only happen when we have an <input> element inside the parent element. When an input gets focus, its corresponding parent element can get affected using CSS.Following example will help you understand using :focus-within in CSS..outer-div {\r\n  width: 400px;\r\n  height: 400px;\r\n  padding: 50px;\r\n  float: left\r\n}\r\n\r\n.outer-div:focus-within {\r\n  background: red;\r\n}\r\n\r\n.inner-div {\r\n  width: 200px;\r\n  height: 200px;\r\n  float: left;\r\n  background: yellow;\r\n  padding: 50px;\r\n}<div class=\"outer-div\">\r\n  <div class=\"inner-div\">\r\n    I want to change outer-div(Background color) class based on inner-div. Is it possible?\r\n    <input type=\"text\" placeholder=\"Name\" />\r\n  </div>\r\n</div>", "Just a work around..div {\n  height: 400px;\n  width: 400px;\n  background: white;\n  pointer-events: none;\n  padding: 40px;\n}\n\n.h1 {\n  pointer-events: auto;\n}\n\n.div:hover {\n  background: blue;\n}\n<div class =\"div\">\n    <h1 class=\"h1\">\n        Amit Chauhan\n    </h1>\n</div>\n"]},
{"question": "\u201cLeast Astonishment\u201d and the Mutable Default Argument", "details": "Anyone tinkering with Python long enough has been bitten (or torn to pieces) by the following issue:def foo(a=[]):\n    a.append(5)\n    return a\nPython novices would expect this function to always return a list with only one element: [5]. The result is instead very different, and very astonishing (for a novice):>>> foo()\n[5]\n>>> foo()\n[5, 5]\n>>> foo()\n[5, 5, 5]\n>>> foo()\n[5, 5, 5, 5]\n>>> foo()\nA manager of mine once had his first encounter with this feature, and called it \"a dramatic design flaw\" of the language. I replied that the behavior had an underlying explanation, and it is indeed very puzzling and unexpected if you don't understand the internals. However, I was not able to answer (to myself) the following question: what is the reason for binding the default argument at function definition, and not at function execution? I doubt the experienced behavior has a practical use (who really used static variables in C, without breeding bugs?): Baczek made an interesting example. Together with most of your comments and Utaal's in particular, I elaborated further:>>> def a():\n...     print(\"a executed\")\n...     return []\n... \n>>>            \n>>> def b(x=a()):\n...     x.append(5)\n...     print(x)\n... \na executed\n>>> b()\n[5]\n>>> b()\n[5, 5]\nTo me, it seems that the design decision was relative to where to put the scope of parameters: inside the function or \"together\" with it?Doing the binding inside the function would mean that x is effectively bound to the specified default when the function is called, not defined, something that would present a deep flaw: the def line would be \"hybrid\" in the sense that part of the binding (of the function object) would happen at definition, and part (assignment of default parameters) at function invocation time.The actual behavior is more consistent: everything of that line gets evaluated when that line is executed, meaning at function definition.", "answers": ["Anyone tinkering with Python long enough has been bitten (or torn to pieces) by the following issue:def foo(a=[]):\n    a.append(5)\n    return a\nPython novices would expect this function to always return a list with only one element: [5]. The result is instead very different, and very astonishing (for a novice):>>> foo()\n[5]\n>>> foo()\n[5, 5]\n>>> foo()\n[5, 5, 5]\n>>> foo()\n[5, 5, 5, 5]\n>>> foo()\nA manager of mine once had his first encounter with this feature, and called it \"a dramatic design flaw\" of the language. I replied that the behavior had an underlying explanation, and it is indeed very puzzling and unexpected if you don't understand the internals. However, I was not able to answer (to myself) the following question: what is the reason for binding the default argument at function definition, and not at function execution? I doubt the experienced behavior has a practical use (who really used static variables in C, without breeding bugs?): Baczek made an interesting example. Together with most of your comments and Utaal's in particular, I elaborated further:>>> def a():\n...     print(\"a executed\")\n...     return []\n... \n>>>            \n>>> def b(x=a()):\n...     x.append(5)\n...     print(x)\n... \na executed\n>>> b()\n[5]\n>>> b()\n[5, 5]\nTo me, it seems that the design decision was relative to where to put the scope of parameters: inside the function or \"together\" with it?Doing the binding inside the function would mean that x is effectively bound to the specified default when the function is called, not defined, something that would present a deep flaw: the def line would be \"hybrid\" in the sense that part of the binding (of the function object) would happen at definition, and part (assignment of default parameters) at function invocation time.The actual behavior is more consistent: everything of that line gets evaluated when that line is executed, meaning at function definition.", "Actually, this is not a design flaw, and it is not because of internals, or performance.\nIt comes simply from the fact that functions in Python are first-class objects, and not only a piece of code.As soon as you get to think into this way, then it completely makes sense: a function is an object being evaluated on its definition; default parameters are kind of \"member data\" and therefore their state may change from one call to the other - exactly as in any other object.In any case, Effbot has a very nice explanation of the reasons for this behavior in .\nI found it very clear, and I really suggest reading it for a better knowledge of how function objects work.", "Suppose you have the following codefruits = (\"apples\", \"bananas\", \"loganberries\")\n\ndef eat(food=fruits):\n    ...\nWhen I see the declaration of eat, the least astonishing thing is to think that if the first parameter is not given, that it will be equal to the tuple (\"apples\", \"bananas\", \"loganberries\")However, supposed later on in the code, I do something likedef some_random_function():\n    global fruits\n    fruits = (\"blueberries\", \"mangos\")\nthen if default parameters were bound at function execution rather than function declaration then I would be astonished (in a very bad way) to discover that fruits had been changed.  This would be more astonishing IMO than discovering that your foo function above was mutating the list.The real problem lies with mutable variables, and all languages have this problem to some extent. Here's a question: suppose in Java I have the following code:StringBuffer s = new StringBuffer(\"Hello World!\");\nMap<StringBuffer,Integer> counts = new HashMap<StringBuffer,Integer>();\ncounts.put(s, 5);\ns.append(\"!!!!\");\nSystem.out.println( counts.get(s) );  // does this work?\nNow, does my map use the value of the StringBuffer key when it was placed into the map, or does it store the key by reference?  Either way, someone is astonished; either the person who tried to get the object out of the Map using a value identical to the one they put it in with, or the person who can't seem to retrieve their object even though the key they're using is literally the same object that was used to put it into the map (this is actually why Python doesn't allow its mutable built-in data types to be used as dictionary keys).Your example is a good one of a case where Python newcomers will be surprised and bitten.  But I'd argue that if we \"fixed\" this, then that would only create a different situation where they'd be bitten instead, and that one would be even less intuitive. Moreover, this is always the case when dealing with mutable variables; you always run into cases where someone could intuitively expect one or the opposite behavior depending on what code they're writing.I personally like Python's current approach: default function arguments are evaluated when the function is defined and that object is always the default. I suppose they could special-case using an empty list, but that kind of special casing would cause even more astonishment, not to mention be backwards incompatible.", "The relevant part of the : This means that the expression is evaluated once, when the function is defined, and that the same \u201cpre-computed\u201d value is used for each call. This is especially important to understand when a default parameter is a mutable object, such as a list or a dictionary: if the function modifies the object (e.g. by appending an item to a list), the default value is in effect modified. This is generally not what was intended. A way around this is to use None as the default, and explicitly test for it in the body of the function, e.g.:def whats_on_the_telly(penguin=None):\n    if penguin is None:\n        penguin = []\n    penguin.append(\"property of the zoo\")\n    return penguin\n", "I know nothing about the Python interpreter inner workings (and I'm not an expert in compilers and interpreters either) so don't blame me if I propose anything unsensible or impossible.Provided that python objects  I think that this should be taken into account when designing the default arguments stuff.\nWhen you instantiate a list:a = []\nyou expect to get a  list referenced by a.Why should the a=[] indef x(a=[]):\ninstantiate a new list on function definition and not on invocation?\nIt's just like you're asking \"if the user doesn't provide the argument then  a new list and use it as if it was produced by the caller\".\nI think this is ambiguous instead:def x(a=datetime.datetime.now()):\nuser, do you want a to default to the datetime corresponding to when you're defining or executing x?\nIn this case, as in the previous one, I'll keep the same behaviour as if the default argument \"assignment\" was the first instruction of the function (datetime.now() called on function invocation).\nOn the other hand, if the user wanted the definition-time mapping he could write:b = datetime.datetime.now()\ndef x(a=b):\nI know, I know: that's a closure. Alternatively Python might provide a keyword to force definition-time binding:def x(static a=b):\n", "Well, the reason is quite simply that bindings are done when code is executed, and the function definition is executed, well... when the functions is defined.Compare this:class BananaBunch:\n    bananas = []\n\n    def addBanana(self, banana):\n        self.bananas.append(banana)\nThis code suffers from the exact same unexpected happenstance. bananas is a class attribute, and hence, when you add things to it, it's added to all instances of that class. The reason is exactly the same.It's just \"How It Works\", and making it work differently in the function case would probably be complicated, and in the class case likely impossible, or at least slow down object instantiation a lot, as you would have to keep the class code around and execute it when objects are created.Yes, it is unexpected. But once the penny drops, it fits in perfectly with how Python works in general. In fact, it's a good teaching aid, and once you understand why this happens, you'll grok python much better.That said it should feature prominently in any good Python tutorial. Because as you mention, everyone runs into this problem sooner or later.", "I'm  surprised no one has performed the insightful introspection offered by Python (2 and 3 apply) on callables. Given a simple little function func defined as:>>> def func(a = []):\n...    a.append(5)\nWhen Python encounters it, the first thing it will do is compile it in order to create a code object for this function. While this compilation step is done, []. As the top answer mentioned: the list a can now be considered a  of the function func.So, let's do some introspection, a before and after to examine how the list gets expanded  the function object. I'm using Python 3.x for this, for Python 2 the same applies (use __defaults__ or func_defaults in Python 2; yes, two names for the same thing).>>> def func(a = []):\n...     a.append(5)\n...     \nAfter Python executes this definition it will take any default parameters specified (a = [] here) and __defaults__ (relevant section: Callables):     >>> func.__defaults__\n([],)\nO.k, so an empty list as the single entry in __defaults__, just as expected. Let's now execute this function:>>> func()\nNow, let's see those __defaults__ again: >>> func.__defaults__\n([5],)\n The value inside the object changes! Consecutive calls to the function will now simply append to that embedded list object:>>> func(); func(); func()\n>>> func.__defaults__\n([5, 5, 5, 5],)\nSo, there you have it, the reason why this  happens, is because default arguments are part of the function object. There's nothing weird going on here, it's all just a bit surprising.The common solution to combat this is to use None as the default and then initialize in the function body:def func(a = None):\n    # or: a = [] if a is None else a\n    if a is None:\n        a = []\nSince the function body is executed anew each time, you always get a fresh new empty list if no argument was passed for a.To further verify that the list in __defaults__ is the same as that used in the function func you can just change your function to return the id of the list a used inside the function body. Then, compare it to the list in __defaults__ (position [0] in __defaults__) and you'll see how these are indeed refering to the same list instance:>>> def func(a = []): \n...     a.append(5)\n...     return id(a)\n>>>\n>>> id(func.__defaults__[0]) == func()\nTrue\nAll with the power of introspection!  To verify that Python evaluates the default arguments during compilation of the function, try executing the following:def bar(a=input('Did you just see me without calling the function?')): \n    pass  # use raw_input in Py2\nas you'll notice, input() is called before the process of building the function and binding it to the name bar is made.", "I used to think that creating the objects at runtime would be the better approach.  I'm less certain now, since you do lose some useful features, though it may be worth it regardless simply to prevent newbie confusion.  The disadvantages of doing so are:def foo(arg=something_expensive_to_compute())):\n    ...\nIf call-time evaluation is used, then the expensive function is called every time your function is used without an argument.  You'd either pay an expensive price on each call, or need to manually cache the value externally, polluting your namespace and adding verbosity.A useful trick is to bind parameters of a lambda to the  binding of a variable when the lambda is created.  For example:funcs = [ lambda i=i: i for i in range(10)]\nThis returns a list of functions that return 0,1,2,3... respectively.  If the behaviour is changed, they will instead bind i to the  value of i, so you would get a list of functions that all returned 9.The only way to implement this otherwise would be to create a further closure with the i bound, ie:def make_func(i): return lambda: i\nfuncs = [make_func(i) for i in range(10)]\nConsider the code:def foo(a='test', b=100, c=[]):\n   print a,b,c\nWe can get information about the arguments and defaults using the inspect module, which >>> inspect.getargspec(foo)\n(['a', 'b', 'c'], None, None, ('test', 100, []))\nThis information is very useful for things like document generation, metaprogramming, decorators etc.Now, suppose the behaviour of defaults could be changed so that this is the equivalent of:_undefined = object()  # sentinel value\n\ndef foo(a=_undefined, b=_undefined, c=_undefined)\n    if a is _undefined: a='test'\n    if b is _undefined: b=100\n    if c is _undefined: c=[]\nHowever, we've lost the ability to introspect, and see what the default arguments .  Because the objects haven't been constructed, we can't ever get hold of them without actually calling the function.  The best we could do is to store off the source code and return that as a string.", ": The behavior is simple in the following sense:\nMost people fall into this trap only once, not several times.: Python  passes objects, not names.\nThe default parameter is, obviously, part of the function \nheading (not the function body). It therefore ought to be evaluated\nat module load time (and only at module load time, unless nested), not\nat function call time.: As Frederik Lundh points out in his explanation\nof , the\ncurrent behavior can be quite useful for advanced programming.\n(Use sparingly.): In the most basic Python documentation,\nthe tutorial, the issue is loudly announced as\nan  in the  subsection of Section\n.\nThe warning even uses boldface,\nwhich is rarely applied outside of headings.\nRTFM: Read the fine manual.: Falling into the trap is actually a very\nhelpful moment (at least if you are a reflective learner),\nbecause you will subsequently better understand the point \n\"Consistency\" above and that will\nteach you a great deal about Python.", "This behavior is easy explained by:So:def x(a=0, b=[], c=[], d=0):\n    a = a + 1\n    b = b + [1]\n    c.append(1)\n    print a, b, c\nabc", "What you're asking is why this:def func(a=[], b = 2):\n    pass\nisn't internally equivalent to this:def func(a=None, b = None):\n    a_default = lambda: []\n    b_default = lambda: 2\n    def actual_func(a=None, b=None):\n        if a is None: a = a_default()\n        if b is None: b = b_default()\n    return actual_func\nfunc = func()\nexcept for the case of explicitly calling func(None, None), which we'll ignore.In other words, instead of evaluating default parameters, why not store each of them, and evaluate them when the function is called?One answer is probably right there--it would effectively turn every function with default parameters into a closure.  Even if it's all hidden away in the interpreter and not a full-blown closure, the data's got to be stored somewhere.  It'd be slower and use more memory.", "1)  The so-called problem of \"Mutable Default Argument\" is in general a special example demonstrating that:\n\"All functions with this problem ,\"\nThat is against the rules of functional programming, usually undesiderable and should be fixed both together.Example:def foo(a=[]):                 # the same problematic function\n    a.append(5)\n    return a\n\n>>> somevar = [1, 2]           # an example without a default parameter\n>>> foo(somevar)\n[1, 2, 5]\n>>> somevar\n[1, 2, 5]                      # usually expected [1, 2]\n:  a \nAn absolutely safe solution is to copy or deepcopy the input object first and then to do whatever with the copy.def foo(a=[]):\n    a = a[:]     # a copy\n    a.append(5)\n    return a     # or everything safe by one line: \"return a + [5]\"\nMany builtin mutable types have a copy method like some_dict.copy() or some_set.copy() or can be copied easy like somelist[:] or list(some_list). Every object can be also copied by copy.copy(any_object) or more thorough by copy.deepcopy() (the latter useful if the mutable object is composed from mutable objects). Some objects are fundamentally based on side effects like \"file\" object and can not be meaningfully reproduced by copy. Example problem for class Test(object):            # the original problematic class\n  def __init__(self, var1=[]):\n    self._var1 = var1\n\nsomevar = [1, 2]               # an example without a default parameter\nt1 = Test(somevar)\nt2 = Test(somevar)\nt1._var1.append([1])\nprint somevar                  # [1, 2, [1]] but usually expected [1, 2]\nprint t2._var1                 # [1, 2, [1]] but usually expected [1, 2]\nIt shouldn't be neither saved in any  attribute of an instance returned by this function. (Assuming that  attributes of instance should not be modified from outside of this class or subclasses by convention. i.e. _var1 is a private attribute )Conclusion:\nInput parameters objects shouldn't be modified in place (mutated) nor they should not be binded into an object returned by the function. (If we prefere programming without side effects which is strongly recommended. see  (The first two paragraphs are relevent in this context.)\n.)2)\nOnly if the side effect on the actual parameter is required but unwanted on the default parameter then the useful solution is def ...(var1=None): if var1 is None: var1 = [] 3) In some cases is .", "This actually has nothing to do with default values, other than that it often comes up as an unexpected behaviour when you write functions with mutable default values.>>> def foo(a):\n    a.append(5)\n    print a\n\n>>> a  = [5]\n>>> foo(a)\n[5, 5]\n>>> foo(a)\n[5, 5, 5]\n>>> foo(a)\n[5, 5, 5, 5]\n>>> foo(a)\n[5, 5, 5, 5, 5]\nNo default values in sight in this code, but you get exactly the same problem.The problem is that foo is  a mutable variable passed in from the caller, when the caller doesn't expect this. Code like this would be fine if the function was called something like append_5; then the caller would be calling the function in order to modify the value they pass in, and the behaviour would be expected. But such a function would be very unlikely to take a default argument, and probably wouldn't return the list (since the caller already has a reference to that list; the one it just passed in).Your original foo, with a default argument, shouldn't be modifying a whether it was explicitly passed in or got the default value. Your code should leave mutable arguments alone unless it is clear from the context/name/documentation that the arguments are supposed to be modified. Using mutable values passed in as arguments as local temporaries is an extremely bad idea, whether we're in Python or not and whether there are default arguments involved or not.If you need to destructively manipulate a local temporary in the course of computing something, and you need to start your manipulation from an argument value, you need to make a copy.", "Already busy topic, but from what I read here, the following helped me realizing how it's working internally:def bar(a=[]):\n     print id(a)\n     a = a + [1]\n     print id(a)\n     return a\n\n>>> bar()\n4484370232\n4484524224\n[1]\n>>> bar()\n4484370232\n4484524152\n[1]\n>>> bar()\n4484370232 # Never change, this is 'class property' of the function\n4484523720 # Always a new object \n[1]\n>>> id(bar.func_defaults[0])\n4484370232\n", "It's a performance optimization.  As a result of this functionality, which of these two function calls do you think is faster?def print_tuple(some_tuple=(1,2,3)):\n    print some_tuple\n\nprint_tuple()        #1\nprint_tuple((1,2,3)) #2\nI'll give you a hint.  Here's the disassembly (see ):#0 LOAD_GLOBAL              0 (print_tuple)\n3 CALL_FUNCTION            0\n6 POP_TOP\n7 LOAD_CONST               0 (None)\n10 RETURN_VALUE\n# 0 LOAD_GLOBAL              0 (print_tuple)\n 3 LOAD_CONST               4 ((1, 2, 3))\n 6 CALL_FUNCTION            1\n 9 POP_TOP\n10 LOAD_CONST               0 (None)\n13 RETURN_VALUE\nI doubt the experienced behavior has a practical use (who really used static variables in C, without breeding bugs ?)As you can see, there  a performance benefit when using immutable default arguments.  This can make a difference if it's a frequently called function or the default argument takes a long time to construct.  Also, bear in mind that Python isn't C.  In C you have constants that are pretty much free.  In Python you don't have this benefit.", "Default arguments get evaluated at the time the function is compiled into a function object. When used by the function, multiple times by that function, they are and remain the same object. When they are mutable, when mutated (for example, by adding an element to it) they remain mutated on consecutive calls.They stay mutated because they are the same object each time.Since the list is bound to the function when the function object is compiled and instantiated, this:def foo(mutable_default_argument=[]): # make a list the default argument\n    \"\"\"function that uses a list\"\"\"\nis almost exactly equivalent to this:_a_list = [] # create a list in the globals\n\ndef foo(mutable_default_argument=_a_list): # make it the default argument\n    \"\"\"function that uses a list\"\"\"\n\ndel _a_list # remove globals name binding\nHere's a demonstration - you can verify that they are the same object each time they are referenced by \n\n\n\n\nexample.pyprint('1. Global scope being evaluated')\n\ndef create_list():\n    '''noisily create a list for usage as a kwarg'''\n    l = []\n    print('3. list being created and returned, id: ' + str(id(l)))\n    return l\n\nprint('2. example_function about to be compiled to an object')\n\ndef example_function(default_kwarg1=create_list()):\n    print('appending \"a\" in default default_kwarg1')\n    default_kwarg1.append(\"a\")\n    print('list with id: ' + str(id(default_kwarg1)) + \n          ' - is now: ' + repr(default_kwarg1))\n\nprint('4. example_function compiled: ' + repr(example_function))\n\n\nif __name__ == '__main__':\n    print('5. calling example_function twice!:')\n    example_function()\n    example_function()\nand running it with python example.py:1. Global scope being evaluated\n2. example_function about to be compiled to an object\n3. list being created and returned, id: 140502758808032\n4. example_function compiled: <function example_function at 0x7fc9590905f0>\n5. calling example_function twice!:\nappending \"a\" in default default_kwarg1\nlist with id: 140502758808032 - is now: ['a']\nappending \"a\" in default default_kwarg1\nlist with id: 140502758808032 - is now: ['a', 'a']\nThis order of execution is frequently confusing to new users of Python. If you understand the Python execution model, then it becomes quite expected. But this is why the usual instruction to new users is to create their default arguments like this instead:def example_function_2(default_kwarg=None):\n    if default_kwarg is None:\n        default_kwarg = []\nThis uses the None singleton as a sentinel object to tell the function whether or not we've gotten an argument other than the default. If we get no argument, then we actually want to use a new empty list, [], as the default.As the  says:If you don\u2019t want the default to be shared between subsequent calls,\n  you can write the function like this instead:def f(a, L=None):\n    if L is None:\n        L = []\n    L.append(a)\n    return L\n", "The shortest answer would probably be \"definition is execution\", therefore the whole argument makes no strict sense. As a more contrived example, you may cite this:def a(): return []\n\ndef b(x=a()):\n    print x\nHopefully it's enough to show that not executing the default argument expressions at the execution time of the def statement isn't easy or doesn't make sense, or both.I agree it's a gotcha when you try to use default constructors, though.", "This behavior is not surprising if you take the following into consideration:The role of  has been covered extensively in this thread.  is likely the astonishment causing factor, as this behavior is not \"intuitive\" when coming from other languages. is described in the Python . In an attempt to assign a value to a read-only class attribute:...all variables found outside of the innermost scope are\nread-only ().Look back to the original example and consider the above points:def foo(a=[]):\n    a.append(5)\n    return a\nHere foo is an object and a is an attribute of foo (available at foo.func_defs[0]). Since a is a list, a is mutable and is thus a read-write attribute of foo. It is initialized to the empty list as specified by the signature when the function is instantiated, and is available for reading and writing as long as the function object exists.Calling foo without overriding a default uses that default's value from foo.func_defs. In this case, foo.func_defs[0] is used for a within function object's code scope. Changes to a change foo.func_defs[0], which is part of the foo object and persists between execution of the code in foo.Now, compare this to the example from the documentation on , such that the function signature defaults are used every time the function is executed:def foo(a, L=None):\n    if L is None:\n        L = []\n    L.append(a)\n    return L\nTaking  and  into account, one can see why this accomplishes the desired behavior:\nfoofoo.func_defs[0]None\nLfoo.func_defs[0]NoneL\nL = []foo.func_defs[0]\nLfoo.func_defs[0]foo\n", "A simple workaround using None>>> def bar(b, data=None):\n...     data = data or []\n...     data.append(b)\n...     return data\n... \n>>> bar(3)\n[3]\n>>> bar(3)\n[3]\n>>> bar(3)\n[3]\n>>> bar(3, [34])\n[34, 3]\n>>> bar(3, [34])\n[34, 3]\n", "I am going to demonstrate an alternative structure to pass a default list value to a function (it works equally well with dictionaries).  As others have extensively commented, the list parameter is bound to the function when it is defined as opposed to when it is executed.  Because lists and dictionaries are mutable, any alteration to this parameter will affect other calls to this function.  As a result, subsequent calls to the function will receive this shared list which may have been altered by any other calls to the function.  Worse yet, two parameters are using this function's shared parameter at the same time oblivious to the changes made by the other.:def foo(list_arg=[5]):\n    return list_arg\n\na = foo()\na.append(6)\n>>> a\n[5, 6]\n\nb = foo()\nb.append(7)\n# The value of 6 appended to variable 'a' is now part of the list held by 'b'.\n>>> b\n[5, 6, 7]  \n\n# Although 'a' is expecting to receive 6 (the last element it appended to the list),\n# it actually receives the last element appended to the shared list.\n# It thus receives the value 7 previously appended by 'b'.\n>>> a.pop()             \n7\nYou can verify that they are one and the same object by using id:>>> id(a)\n5347866528\n\n>>> id(b)\n5347866528\nPer Brett Slatkin's \"Effective Python: 59 Specific Ways to Write Better Python\", None (p. 48)The convention for achieving the desired result in Python is to\n  provide a default value of None and to document the actual behaviour\n  in the docstring.This implementation ensures that each call to the function either receives the default list or else the list passed to the function.:def foo(list_arg=None):\n   \"\"\"\n   :param list_arg:  A list of input values. \n                     If none provided, used a list with a default value of 5.\n   \"\"\"\n   if not list_arg:\n       list_arg = [5]\n   return list_arg\n\na = foo()\na.append(6)\n>>> a\n[5, 6]\n\nb = foo()\nb.append(7)\n>>> b\n[5, 7]\n\nc = foo([10])\nc.append(11)\n>>> c\n[10, 11]\nThere may be legitimate use cases for the 'Wrong Method' whereby the programmer intended the default list parameter to be shared, but this is more likely the exception than the rule.", "The solutions here are:NoneobjectlambdaThe second option is nice because users of the function can pass in a callable, which may be already existing (such as a type)", "You can get round this by replacing the object (and therefore the tie with the scope):def foo(a=[]):\n    a = list(a)\n    a.append(5)\n    return a\nUgly, but it works.", "When we do this:def foo(a=[]):\n    ...\n... we assign the argument a to an  list, if the caller does not pass the value of a.To make things simpler for this discussion, let's temporarily give the unnamed list a name. How about pavlo ?def foo(a=pavlo):\n   ...\nAt any time, if the caller doesn't tell us what a is, we reuse pavlo.If pavlo is mutable (modifiable), and foo ends up modifying it, an effect we notice the next time foo is called without specifying a.So this is what you see (Remember, pavlo is initialized to []): >>> foo()\n [5]\nNow, pavlo is [5].Calling foo() again modifies pavlo again:>>> foo()\n[5, 5]\nSpecifying a when calling foo() ensures pavlo is not touched.>>> ivan = [1, 2, 3, 4]\n>>> foo(a=ivan)\n[1, 2, 3, 4, 5]\n>>> ivan\n[1, 2, 3, 4, 5]\nSo, pavlo is still [5, 5].>>> foo()\n[5, 5, 5]\n", "I sometimes exploit this behavior as an alternative to the following pattern:singleton = None\n\ndef use_singleton():\n    global singleton\n\n    if singleton is None:\n        singleton = _make_singleton()\n\n    return singleton.use_me()\nIf singleton is only used by use_singleton, I like the following pattern as a replacement:# _make_singleton() is called only once when the def is executed\ndef use_singleton(singleton=_make_singleton()):\n    return singleton.use_me()\nI've used this for instantiating client classes that access external resources, and also for creating dicts or lists for memoization.Since I don't think this pattern is well known, I do put a short comment in to guard against future misunderstandings.", "It may be true that:it is entirely consistent to hold to both of the features above and still make another point:The other answers, or at least some of them either make points 1 and 2 but not 3, or make point 3 and downplay points 1 and 2. It may be true that switching horses in midstream here would be asking for significant breakage, and that there could be more problems created by changing Python to intuitively handle Stefano's opening snippet. And it may be true that someone who knew Python internals well could explain a minefield of consequences. The existing behavior is not Pythonic, and Python is successful because very little about the language violates the principle of least astonishment anywhere  this badly. It is a real problem, whether or not it would be wise to uproot it. It is a design flaw. If you understand the language much better by trying to trace out the behavior, I can say that C++ does all of this and more; you learn a lot by navigating, for instance, subtle pointer errors. But this is not Pythonic: people who care about Python enough to persevere in the face of this behavior are people who are drawn to the language because Python has far fewer surprises than other language. Dabblers and the curious become Pythonistas when they are astonished at how little time it takes to get something working--not because of a design fl--I mean, hidden logic puzzle--that cuts against the intuitions of programmers who are drawn to Python because it .", ". Anyone who trips over this is doing something wrong.There are 3 cases I see where you might run into this problem:cache={}The example in the question could fall into category 1 or 3. It's odd that it both modifies the passed list and returns it; you should pick one or the other.", "This \"bug\" gave me a lot of overtime work hours! But I'm beginning to see a potential use of it (but I would have liked it to be at the execution time, still)I'm gonna give you what I see as a useful example.def example(errors=[]):\n    # statements\n    # Something went wrong\n    mistake = True\n    if mistake:\n        tryToFixIt(errors)\n        # Didn't work.. let's try again\n        tryToFixItAnotherway(errors)\n        # This time it worked\n    return errors\n\ndef tryToFixIt(err):\n    err.append('Attempt to fix it')\n\ndef tryToFixItAnotherway(err):\n    err.append('Attempt to fix it by another way')\n\ndef main():\n    for item in range(2):\n        errors = example()\n    print '\\n'.join(errors)\n\nmain()\nprints the followingAttempt to fix it\nAttempt to fix it by another way\nAttempt to fix it\nAttempt to fix it by another way\n", "Just change the function to be:def notastonishinganymore(a = []): \n    '''The name is just a joke :)'''\n    a = a[:]\n    a.append(5)\n    return a\n", "I think the answer to this question lies in how python pass data to parameter (pass by value or by reference), not mutability or how python handle the \"def\" statement.A brief introduction. First, there are two type of data types in python, one is simple elementary data type, like numbers, and another data type is objects. Second, when passing data to parameters, python pass elementary data type by value, i.e., make a local copy of the value to a local variable, but pass object by reference, i.e., pointers to the object.Admitting the above two points, let's explain what happened to the python code. It's only because of passing by reference for objects, but has nothing to do with mutable/immutable, or arguably the fact that \"def\" statement is executed only once when it is defined.[] is an object, so python pass the reference of [] to a, i.e., a is only a pointer to [] which lies in memory as an object. There is only one copy of [] with, however, many references to it. For the first foo(), the list [] is changed to  by append method. But Note that there is only one copy of the list object and this object now becomes . When running the second foo(), what effbot webpage says (items is not evaluated any more) is wrong. a is evaluated to be the list object, although now the content of the object is . This is the effect of passing by reference! The result of foo(3) can be easily derived in the same way.To further validate my answer, let's take a look at two additional codes.====== No. 2 ========def foo(x, items=None):\n    if items is None:\n        items = []\n    items.append(x)\n    return items\n\nfoo(1)  #return [1]\nfoo(2)  #return [2]\nfoo(3)  #return [3]\n[] is an object, so is None (the former is mutable while the latter is immutable. But the mutability has nothing to do with the question). None is somewhere in the space but we know it's there and there is only one copy of None there. So every time foo is invoked, items is evaluated (as opposed to some answer that it is only evaluated once) to be None, to be clear, the reference (or the address) of None. Then in the foo, item is changed to [], i.e., points to another object which has a different address. ====== No. 3 =======def foo(x, items=[]):\n    items.append(x)\n    return items\n\nfoo(1)    # returns [1]\nfoo(2,[]) # returns [2]\nfoo(3)    # returns [1,3]\nThe invocation of foo(1) make items point to a list object [] with an address, say, 11111111. the content of the list is changed to  in the foo function in the sequel, but the address is not changed, still 11111111. Then foo(2,[]) is coming. Although the [] in foo(2,[]) has the same content as the default parameter [] when calling foo(1), their address are different! Since we provide the parameter explicitly, items has to take the address of this new [], say 2222222, and return it after making some change. Now foo(3) is executed. since only x is provided, items has to take its default value again. What's the default value? It is set when defining the foo function: the list object located in 11111111. So the items is evaluated to be the address 11111111 having an element 1. The list located at 2222222 also contains one element 2, but it is not pointed by items any more. Consequently, An append of 3 will make items [1,3]. From the above explanations, we can see that the  webpage recommended in the accepted answer failed to give a relevant answer to this question. What is more, I think a point in the effbot webpage is wrong. I think the code regarding the UI.Button is correct:for i in range(10):\n    def callback():\n        print \"clicked button\", i\n    UI.Button(\"button %s\" % i, callback)\nEach button can hold a distinct callback function which will display different value of i. I can provide an example to show this:x=[]\nfor i in range(10):\n    def callback():\n        print(i)\n    x.append(callback) \nIf we execute x[7]() we'll get 7 as expected, and x[9]() will gives 9, another value of i.", "TLDR: Define-time defaults are consistent and strictly more expressive.Defining a function affects two scopes: the defining scope  the function, and the execution  scope  the function. While it is pretty clear how blocks map to scopes, the question is where def <name>(<args=defaults>): belongs to:...                           # defining scope\ndef name(parameter=default):  # ???\n    ...                       # execution scope\nThe def name part  evaluate in the defining scope - we want name to be available there, after all. Evaluating the function only inside itself would make it inaccessible.Since parameter is a constant name, we can \"evaluate\" it at the same time as def name. This also has the advantage it produces the function with a known signature as name(parameter=...):, instead of a bare name(...):.Now, when to evaluate default?Consistency already says \"at definition\": everything else of def <name>(<args=defaults>): is best evaluated at definition as well. Delaying parts of it would be the astonishing choice.The two choices are not equivalent, either: If default is evaluated at definition time, it  affect execution time. If default is evaluated at execution time, it  affect definition time. Choosing \"at definition\" allows expressing both cases, while choosing \"at execution\" can express only one:def name(parameter=defined):  # set default at definition time\n    ...\n\ndef name(parameter=default):     # delay default until execution time\n    parameter = default if parameter is None else parameter\n    ...\n", "Every other answer explains why this is actually a nice and desired behavior, or why you shouldn't be needing this anyway. Mine is for those stubborn ones who want to exercise their right to bend the language to their will, not the other way around.We will \"fix\" this behavior with a decorator that will copy the default value instead of reusing the same instance for each positional argument left at its default value.import inspect\nfrom copy import copy\n\ndef sanify(function):\n    def wrapper(*a, **kw):\n        # store the default values\n        defaults = inspect.getargspec(function).defaults # for python2\n        # construct a new argument list\n        new_args = []\n        for i, arg in enumerate(defaults):\n            # allow passing positional arguments\n            if i in range(len(a)):\n                new_args.append(a[i])\n            else:\n                # copy the value\n                new_args.append(copy(arg))\n        return function(*new_args, **kw)\n    return wrapper\nNow let's redefine our function using this decorator:@sanify\ndef foo(a=[]):\n    a.append(5)\n    return a\n\nfoo() # '[5]'\nfoo() # '[5]' -- as desired\nThis is particularly neat for functions that take multiple arguments. Compare:# the 'correct' approach\ndef bar(a=None, b=None, c=None):\n    if a is None:\n        a = []\n    if b is None:\n        b = []\n    if c is None:\n        c = []\n    # finally do the actual work\nwith# the nasty decorator hack\n@sanify\ndef bar(a=[], b=[], c=[]):\n    # wow, works right out of the box!\nIt's important to note that the above solution breaks if you try to use keyword args, like so:foo(a=[4])\nThe decorator could be adjusted to allow for that, but we leave this as an exercise for the reader ;)"]}
]